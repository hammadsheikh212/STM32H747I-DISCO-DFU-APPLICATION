
h7_bootloader_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa0  080402a0  080402a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0804c240  0804c240  0000d240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804c394  0804c394  0000e140  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0804c394  0804c394  0000d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804c39c  0804c39c  0000e140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804c39c  0804c39c  0000d39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804c3a0  0804c3a0  0000d3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  24000000  0804c3a4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  24000140  0804c4e4  0000e140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001250  0804c4e4  0000e250  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbec  00000000  00000000  0000e16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa8  00000000  00000000  00029d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0002dd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f48  00000000  00000000  0002f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00043190  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbc1  00000000  00000000  00073200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019cbd5  00000000  00000000  0008fdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022c996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  0022c9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  002323e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	@ (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	@ (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	@ (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24000140 	.word	0x24000140
 80402bc:	00000000 	.word	0x00000000
 80402c0:	0804c228 	.word	0x0804c228

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	@ (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	@ (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	@ (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24000144 	.word	0x24000144
 80402dc:	0804c228 	.word	0x0804c228

080402e0 <memchr>:
 80402e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80402e4:	2a10      	cmp	r2, #16
 80402e6:	db2b      	blt.n	8040340 <memchr+0x60>
 80402e8:	f010 0f07 	tst.w	r0, #7
 80402ec:	d008      	beq.n	8040300 <memchr+0x20>
 80402ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402f2:	3a01      	subs	r2, #1
 80402f4:	428b      	cmp	r3, r1
 80402f6:	d02d      	beq.n	8040354 <memchr+0x74>
 80402f8:	f010 0f07 	tst.w	r0, #7
 80402fc:	b342      	cbz	r2, 8040350 <memchr+0x70>
 80402fe:	d1f6      	bne.n	80402ee <memchr+0xe>
 8040300:	b4f0      	push	{r4, r5, r6, r7}
 8040302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804030a:	f022 0407 	bic.w	r4, r2, #7
 804030e:	f07f 0700 	mvns.w	r7, #0
 8040312:	2300      	movs	r3, #0
 8040314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040318:	3c08      	subs	r4, #8
 804031a:	ea85 0501 	eor.w	r5, r5, r1
 804031e:	ea86 0601 	eor.w	r6, r6, r1
 8040322:	fa85 f547 	uadd8	r5, r5, r7
 8040326:	faa3 f587 	sel	r5, r3, r7
 804032a:	fa86 f647 	uadd8	r6, r6, r7
 804032e:	faa5 f687 	sel	r6, r5, r7
 8040332:	b98e      	cbnz	r6, 8040358 <memchr+0x78>
 8040334:	d1ee      	bne.n	8040314 <memchr+0x34>
 8040336:	bcf0      	pop	{r4, r5, r6, r7}
 8040338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 804033c:	f002 0207 	and.w	r2, r2, #7
 8040340:	b132      	cbz	r2, 8040350 <memchr+0x70>
 8040342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040346:	3a01      	subs	r2, #1
 8040348:	ea83 0301 	eor.w	r3, r3, r1
 804034c:	b113      	cbz	r3, 8040354 <memchr+0x74>
 804034e:	d1f8      	bne.n	8040342 <memchr+0x62>
 8040350:	2000      	movs	r0, #0
 8040352:	4770      	bx	lr
 8040354:	3801      	subs	r0, #1
 8040356:	4770      	bx	lr
 8040358:	2d00      	cmp	r5, #0
 804035a:	bf06      	itte	eq
 804035c:	4635      	moveq	r5, r6
 804035e:	3803      	subeq	r0, #3
 8040360:	3807      	subne	r0, #7
 8040362:	f015 0f01 	tst.w	r5, #1
 8040366:	d107      	bne.n	8040378 <memchr+0x98>
 8040368:	3001      	adds	r0, #1
 804036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 804036e:	bf02      	ittt	eq
 8040370:	3001      	addeq	r0, #1
 8040372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8040376:	3001      	addeq	r0, #1
 8040378:	bcf0      	pop	{r4, r5, r6, r7}
 804037a:	3801      	subs	r0, #1
 804037c:	4770      	bx	lr
 804037e:	bf00      	nop

08040380 <__aeabi_uldivmod>:
 8040380:	b953      	cbnz	r3, 8040398 <__aeabi_uldivmod+0x18>
 8040382:	b94a      	cbnz	r2, 8040398 <__aeabi_uldivmod+0x18>
 8040384:	2900      	cmp	r1, #0
 8040386:	bf08      	it	eq
 8040388:	2800      	cmpeq	r0, #0
 804038a:	bf1c      	itt	ne
 804038c:	f04f 31ff 	movne.w	r1, #4294967295
 8040390:	f04f 30ff 	movne.w	r0, #4294967295
 8040394:	f000 b988 	b.w	80406a8 <__aeabi_idiv0>
 8040398:	f1ad 0c08 	sub.w	ip, sp, #8
 804039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403a0:	f000 f806 	bl	80403b0 <__udivmoddi4>
 80403a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403ac:	b004      	add	sp, #16
 80403ae:	4770      	bx	lr

080403b0 <__udivmoddi4>:
 80403b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403b4:	9d08      	ldr	r5, [sp, #32]
 80403b6:	468e      	mov	lr, r1
 80403b8:	4604      	mov	r4, r0
 80403ba:	4688      	mov	r8, r1
 80403bc:	2b00      	cmp	r3, #0
 80403be:	d14a      	bne.n	8040456 <__udivmoddi4+0xa6>
 80403c0:	428a      	cmp	r2, r1
 80403c2:	4617      	mov	r7, r2
 80403c4:	d962      	bls.n	804048c <__udivmoddi4+0xdc>
 80403c6:	fab2 f682 	clz	r6, r2
 80403ca:	b14e      	cbz	r6, 80403e0 <__udivmoddi4+0x30>
 80403cc:	f1c6 0320 	rsb	r3, r6, #32
 80403d0:	fa01 f806 	lsl.w	r8, r1, r6
 80403d4:	fa20 f303 	lsr.w	r3, r0, r3
 80403d8:	40b7      	lsls	r7, r6
 80403da:	ea43 0808 	orr.w	r8, r3, r8
 80403de:	40b4      	lsls	r4, r6
 80403e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403e4:	fa1f fc87 	uxth.w	ip, r7
 80403e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80403ec:	0c23      	lsrs	r3, r4, #16
 80403ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80403f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80403f6:	fb01 f20c 	mul.w	r2, r1, ip
 80403fa:	429a      	cmp	r2, r3
 80403fc:	d909      	bls.n	8040412 <__udivmoddi4+0x62>
 80403fe:	18fb      	adds	r3, r7, r3
 8040400:	f101 30ff 	add.w	r0, r1, #4294967295
 8040404:	f080 80ea 	bcs.w	80405dc <__udivmoddi4+0x22c>
 8040408:	429a      	cmp	r2, r3
 804040a:	f240 80e7 	bls.w	80405dc <__udivmoddi4+0x22c>
 804040e:	3902      	subs	r1, #2
 8040410:	443b      	add	r3, r7
 8040412:	1a9a      	subs	r2, r3, r2
 8040414:	b2a3      	uxth	r3, r4
 8040416:	fbb2 f0fe 	udiv	r0, r2, lr
 804041a:	fb0e 2210 	mls	r2, lr, r0, r2
 804041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8040422:	fb00 fc0c 	mul.w	ip, r0, ip
 8040426:	459c      	cmp	ip, r3
 8040428:	d909      	bls.n	804043e <__udivmoddi4+0x8e>
 804042a:	18fb      	adds	r3, r7, r3
 804042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8040430:	f080 80d6 	bcs.w	80405e0 <__udivmoddi4+0x230>
 8040434:	459c      	cmp	ip, r3
 8040436:	f240 80d3 	bls.w	80405e0 <__udivmoddi4+0x230>
 804043a:	443b      	add	r3, r7
 804043c:	3802      	subs	r0, #2
 804043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040442:	eba3 030c 	sub.w	r3, r3, ip
 8040446:	2100      	movs	r1, #0
 8040448:	b11d      	cbz	r5, 8040452 <__udivmoddi4+0xa2>
 804044a:	40f3      	lsrs	r3, r6
 804044c:	2200      	movs	r2, #0
 804044e:	e9c5 3200 	strd	r3, r2, [r5]
 8040452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040456:	428b      	cmp	r3, r1
 8040458:	d905      	bls.n	8040466 <__udivmoddi4+0xb6>
 804045a:	b10d      	cbz	r5, 8040460 <__udivmoddi4+0xb0>
 804045c:	e9c5 0100 	strd	r0, r1, [r5]
 8040460:	2100      	movs	r1, #0
 8040462:	4608      	mov	r0, r1
 8040464:	e7f5      	b.n	8040452 <__udivmoddi4+0xa2>
 8040466:	fab3 f183 	clz	r1, r3
 804046a:	2900      	cmp	r1, #0
 804046c:	d146      	bne.n	80404fc <__udivmoddi4+0x14c>
 804046e:	4573      	cmp	r3, lr
 8040470:	d302      	bcc.n	8040478 <__udivmoddi4+0xc8>
 8040472:	4282      	cmp	r2, r0
 8040474:	f200 8105 	bhi.w	8040682 <__udivmoddi4+0x2d2>
 8040478:	1a84      	subs	r4, r0, r2
 804047a:	eb6e 0203 	sbc.w	r2, lr, r3
 804047e:	2001      	movs	r0, #1
 8040480:	4690      	mov	r8, r2
 8040482:	2d00      	cmp	r5, #0
 8040484:	d0e5      	beq.n	8040452 <__udivmoddi4+0xa2>
 8040486:	e9c5 4800 	strd	r4, r8, [r5]
 804048a:	e7e2      	b.n	8040452 <__udivmoddi4+0xa2>
 804048c:	2a00      	cmp	r2, #0
 804048e:	f000 8090 	beq.w	80405b2 <__udivmoddi4+0x202>
 8040492:	fab2 f682 	clz	r6, r2
 8040496:	2e00      	cmp	r6, #0
 8040498:	f040 80a4 	bne.w	80405e4 <__udivmoddi4+0x234>
 804049c:	1a8a      	subs	r2, r1, r2
 804049e:	0c03      	lsrs	r3, r0, #16
 80404a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80404a4:	b280      	uxth	r0, r0
 80404a6:	b2bc      	uxth	r4, r7
 80404a8:	2101      	movs	r1, #1
 80404aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80404ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80404b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80404b6:	fb04 f20c 	mul.w	r2, r4, ip
 80404ba:	429a      	cmp	r2, r3
 80404bc:	d907      	bls.n	80404ce <__udivmoddi4+0x11e>
 80404be:	18fb      	adds	r3, r7, r3
 80404c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80404c4:	d202      	bcs.n	80404cc <__udivmoddi4+0x11c>
 80404c6:	429a      	cmp	r2, r3
 80404c8:	f200 80e0 	bhi.w	804068c <__udivmoddi4+0x2dc>
 80404cc:	46c4      	mov	ip, r8
 80404ce:	1a9b      	subs	r3, r3, r2
 80404d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80404d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80404d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80404dc:	fb02 f404 	mul.w	r4, r2, r4
 80404e0:	429c      	cmp	r4, r3
 80404e2:	d907      	bls.n	80404f4 <__udivmoddi4+0x144>
 80404e4:	18fb      	adds	r3, r7, r3
 80404e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80404ea:	d202      	bcs.n	80404f2 <__udivmoddi4+0x142>
 80404ec:	429c      	cmp	r4, r3
 80404ee:	f200 80ca 	bhi.w	8040686 <__udivmoddi4+0x2d6>
 80404f2:	4602      	mov	r2, r0
 80404f4:	1b1b      	subs	r3, r3, r4
 80404f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80404fa:	e7a5      	b.n	8040448 <__udivmoddi4+0x98>
 80404fc:	f1c1 0620 	rsb	r6, r1, #32
 8040500:	408b      	lsls	r3, r1
 8040502:	fa22 f706 	lsr.w	r7, r2, r6
 8040506:	431f      	orrs	r7, r3
 8040508:	fa0e f401 	lsl.w	r4, lr, r1
 804050c:	fa20 f306 	lsr.w	r3, r0, r6
 8040510:	fa2e fe06 	lsr.w	lr, lr, r6
 8040514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8040518:	4323      	orrs	r3, r4
 804051a:	fa00 f801 	lsl.w	r8, r0, r1
 804051e:	fa1f fc87 	uxth.w	ip, r7
 8040522:	fbbe f0f9 	udiv	r0, lr, r9
 8040526:	0c1c      	lsrs	r4, r3, #16
 8040528:	fb09 ee10 	mls	lr, r9, r0, lr
 804052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8040530:	fb00 fe0c 	mul.w	lr, r0, ip
 8040534:	45a6      	cmp	lr, r4
 8040536:	fa02 f201 	lsl.w	r2, r2, r1
 804053a:	d909      	bls.n	8040550 <__udivmoddi4+0x1a0>
 804053c:	193c      	adds	r4, r7, r4
 804053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8040542:	f080 809c 	bcs.w	804067e <__udivmoddi4+0x2ce>
 8040546:	45a6      	cmp	lr, r4
 8040548:	f240 8099 	bls.w	804067e <__udivmoddi4+0x2ce>
 804054c:	3802      	subs	r0, #2
 804054e:	443c      	add	r4, r7
 8040550:	eba4 040e 	sub.w	r4, r4, lr
 8040554:	fa1f fe83 	uxth.w	lr, r3
 8040558:	fbb4 f3f9 	udiv	r3, r4, r9
 804055c:	fb09 4413 	mls	r4, r9, r3, r4
 8040560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8040564:	fb03 fc0c 	mul.w	ip, r3, ip
 8040568:	45a4      	cmp	ip, r4
 804056a:	d908      	bls.n	804057e <__udivmoddi4+0x1ce>
 804056c:	193c      	adds	r4, r7, r4
 804056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8040572:	f080 8082 	bcs.w	804067a <__udivmoddi4+0x2ca>
 8040576:	45a4      	cmp	ip, r4
 8040578:	d97f      	bls.n	804067a <__udivmoddi4+0x2ca>
 804057a:	3b02      	subs	r3, #2
 804057c:	443c      	add	r4, r7
 804057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8040582:	eba4 040c 	sub.w	r4, r4, ip
 8040586:	fba0 ec02 	umull	lr, ip, r0, r2
 804058a:	4564      	cmp	r4, ip
 804058c:	4673      	mov	r3, lr
 804058e:	46e1      	mov	r9, ip
 8040590:	d362      	bcc.n	8040658 <__udivmoddi4+0x2a8>
 8040592:	d05f      	beq.n	8040654 <__udivmoddi4+0x2a4>
 8040594:	b15d      	cbz	r5, 80405ae <__udivmoddi4+0x1fe>
 8040596:	ebb8 0203 	subs.w	r2, r8, r3
 804059a:	eb64 0409 	sbc.w	r4, r4, r9
 804059e:	fa04 f606 	lsl.w	r6, r4, r6
 80405a2:	fa22 f301 	lsr.w	r3, r2, r1
 80405a6:	431e      	orrs	r6, r3
 80405a8:	40cc      	lsrs	r4, r1
 80405aa:	e9c5 6400 	strd	r6, r4, [r5]
 80405ae:	2100      	movs	r1, #0
 80405b0:	e74f      	b.n	8040452 <__udivmoddi4+0xa2>
 80405b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80405b6:	0c01      	lsrs	r1, r0, #16
 80405b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80405bc:	b280      	uxth	r0, r0
 80405be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80405c2:	463b      	mov	r3, r7
 80405c4:	4638      	mov	r0, r7
 80405c6:	463c      	mov	r4, r7
 80405c8:	46b8      	mov	r8, r7
 80405ca:	46be      	mov	lr, r7
 80405cc:	2620      	movs	r6, #32
 80405ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80405d2:	eba2 0208 	sub.w	r2, r2, r8
 80405d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80405da:	e766      	b.n	80404aa <__udivmoddi4+0xfa>
 80405dc:	4601      	mov	r1, r0
 80405de:	e718      	b.n	8040412 <__udivmoddi4+0x62>
 80405e0:	4610      	mov	r0, r2
 80405e2:	e72c      	b.n	804043e <__udivmoddi4+0x8e>
 80405e4:	f1c6 0220 	rsb	r2, r6, #32
 80405e8:	fa2e f302 	lsr.w	r3, lr, r2
 80405ec:	40b7      	lsls	r7, r6
 80405ee:	40b1      	lsls	r1, r6
 80405f0:	fa20 f202 	lsr.w	r2, r0, r2
 80405f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80405f8:	430a      	orrs	r2, r1
 80405fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80405fe:	b2bc      	uxth	r4, r7
 8040600:	fb0e 3318 	mls	r3, lr, r8, r3
 8040604:	0c11      	lsrs	r1, r2, #16
 8040606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804060a:	fb08 f904 	mul.w	r9, r8, r4
 804060e:	40b0      	lsls	r0, r6
 8040610:	4589      	cmp	r9, r1
 8040612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8040616:	b280      	uxth	r0, r0
 8040618:	d93e      	bls.n	8040698 <__udivmoddi4+0x2e8>
 804061a:	1879      	adds	r1, r7, r1
 804061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8040620:	d201      	bcs.n	8040626 <__udivmoddi4+0x276>
 8040622:	4589      	cmp	r9, r1
 8040624:	d81f      	bhi.n	8040666 <__udivmoddi4+0x2b6>
 8040626:	eba1 0109 	sub.w	r1, r1, r9
 804062a:	fbb1 f9fe 	udiv	r9, r1, lr
 804062e:	fb09 f804 	mul.w	r8, r9, r4
 8040632:	fb0e 1119 	mls	r1, lr, r9, r1
 8040636:	b292      	uxth	r2, r2
 8040638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 804063c:	4542      	cmp	r2, r8
 804063e:	d229      	bcs.n	8040694 <__udivmoddi4+0x2e4>
 8040640:	18ba      	adds	r2, r7, r2
 8040642:	f109 31ff 	add.w	r1, r9, #4294967295
 8040646:	d2c4      	bcs.n	80405d2 <__udivmoddi4+0x222>
 8040648:	4542      	cmp	r2, r8
 804064a:	d2c2      	bcs.n	80405d2 <__udivmoddi4+0x222>
 804064c:	f1a9 0102 	sub.w	r1, r9, #2
 8040650:	443a      	add	r2, r7
 8040652:	e7be      	b.n	80405d2 <__udivmoddi4+0x222>
 8040654:	45f0      	cmp	r8, lr
 8040656:	d29d      	bcs.n	8040594 <__udivmoddi4+0x1e4>
 8040658:	ebbe 0302 	subs.w	r3, lr, r2
 804065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8040660:	3801      	subs	r0, #1
 8040662:	46e1      	mov	r9, ip
 8040664:	e796      	b.n	8040594 <__udivmoddi4+0x1e4>
 8040666:	eba7 0909 	sub.w	r9, r7, r9
 804066a:	4449      	add	r1, r9
 804066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8040670:	fbb1 f9fe 	udiv	r9, r1, lr
 8040674:	fb09 f804 	mul.w	r8, r9, r4
 8040678:	e7db      	b.n	8040632 <__udivmoddi4+0x282>
 804067a:	4673      	mov	r3, lr
 804067c:	e77f      	b.n	804057e <__udivmoddi4+0x1ce>
 804067e:	4650      	mov	r0, sl
 8040680:	e766      	b.n	8040550 <__udivmoddi4+0x1a0>
 8040682:	4608      	mov	r0, r1
 8040684:	e6fd      	b.n	8040482 <__udivmoddi4+0xd2>
 8040686:	443b      	add	r3, r7
 8040688:	3a02      	subs	r2, #2
 804068a:	e733      	b.n	80404f4 <__udivmoddi4+0x144>
 804068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8040690:	443b      	add	r3, r7
 8040692:	e71c      	b.n	80404ce <__udivmoddi4+0x11e>
 8040694:	4649      	mov	r1, r9
 8040696:	e79c      	b.n	80405d2 <__udivmoddi4+0x222>
 8040698:	eba1 0109 	sub.w	r1, r1, r9
 804069c:	46c4      	mov	ip, r8
 804069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80406a2:	fb09 f804 	mul.w	r8, r9, r4
 80406a6:	e7c4      	b.n	8040632 <__udivmoddi4+0x282>

080406a8 <__aeabi_idiv0>:
 80406a8:	4770      	bx	lr
 80406aa:	bf00      	nop

080406ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80406ac:	b480      	push	{r7}
 80406ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80406b0:	4b4a      	ldr	r3, [pc, #296]	@ (80407dc <SystemInit+0x130>)
 80406b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80406b6:	4a49      	ldr	r2, [pc, #292]	@ (80407dc <SystemInit+0x130>)
 80406b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80406bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80406c0:	4b46      	ldr	r3, [pc, #280]	@ (80407dc <SystemInit+0x130>)
 80406c2:	691b      	ldr	r3, [r3, #16]
 80406c4:	4a45      	ldr	r2, [pc, #276]	@ (80407dc <SystemInit+0x130>)
 80406c6:	f043 0310 	orr.w	r3, r3, #16
 80406ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406cc:	4b44      	ldr	r3, [pc, #272]	@ (80407e0 <SystemInit+0x134>)
 80406ce:	681b      	ldr	r3, [r3, #0]
 80406d0:	f003 030f 	and.w	r3, r3, #15
 80406d4:	2b06      	cmp	r3, #6
 80406d6:	d807      	bhi.n	80406e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406d8:	4b41      	ldr	r3, [pc, #260]	@ (80407e0 <SystemInit+0x134>)
 80406da:	681b      	ldr	r3, [r3, #0]
 80406dc:	f023 030f 	bic.w	r3, r3, #15
 80406e0:	4a3f      	ldr	r2, [pc, #252]	@ (80407e0 <SystemInit+0x134>)
 80406e2:	f043 0307 	orr.w	r3, r3, #7
 80406e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80406e8:	4b3e      	ldr	r3, [pc, #248]	@ (80407e4 <SystemInit+0x138>)
 80406ea:	681b      	ldr	r3, [r3, #0]
 80406ec:	4a3d      	ldr	r2, [pc, #244]	@ (80407e4 <SystemInit+0x138>)
 80406ee:	f043 0301 	orr.w	r3, r3, #1
 80406f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80406f4:	4b3b      	ldr	r3, [pc, #236]	@ (80407e4 <SystemInit+0x138>)
 80406f6:	2200      	movs	r2, #0
 80406f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80406fa:	4b3a      	ldr	r3, [pc, #232]	@ (80407e4 <SystemInit+0x138>)
 80406fc:	681a      	ldr	r2, [r3, #0]
 80406fe:	4939      	ldr	r1, [pc, #228]	@ (80407e4 <SystemInit+0x138>)
 8040700:	4b39      	ldr	r3, [pc, #228]	@ (80407e8 <SystemInit+0x13c>)
 8040702:	4013      	ands	r3, r2
 8040704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8040706:	4b36      	ldr	r3, [pc, #216]	@ (80407e0 <SystemInit+0x134>)
 8040708:	681b      	ldr	r3, [r3, #0]
 804070a:	f003 0308 	and.w	r3, r3, #8
 804070e:	2b00      	cmp	r3, #0
 8040710:	d007      	beq.n	8040722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8040712:	4b33      	ldr	r3, [pc, #204]	@ (80407e0 <SystemInit+0x134>)
 8040714:	681b      	ldr	r3, [r3, #0]
 8040716:	f023 030f 	bic.w	r3, r3, #15
 804071a:	4a31      	ldr	r2, [pc, #196]	@ (80407e0 <SystemInit+0x134>)
 804071c:	f043 0307 	orr.w	r3, r3, #7
 8040720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8040722:	4b30      	ldr	r3, [pc, #192]	@ (80407e4 <SystemInit+0x138>)
 8040724:	2200      	movs	r2, #0
 8040726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040728:	4b2e      	ldr	r3, [pc, #184]	@ (80407e4 <SystemInit+0x138>)
 804072a:	2200      	movs	r2, #0
 804072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 804072e:	4b2d      	ldr	r3, [pc, #180]	@ (80407e4 <SystemInit+0x138>)
 8040730:	2200      	movs	r2, #0
 8040732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8040734:	4b2b      	ldr	r3, [pc, #172]	@ (80407e4 <SystemInit+0x138>)
 8040736:	4a2d      	ldr	r2, [pc, #180]	@ (80407ec <SystemInit+0x140>)
 8040738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 804073a:	4b2a      	ldr	r3, [pc, #168]	@ (80407e4 <SystemInit+0x138>)
 804073c:	4a2c      	ldr	r2, [pc, #176]	@ (80407f0 <SystemInit+0x144>)
 804073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040740:	4b28      	ldr	r3, [pc, #160]	@ (80407e4 <SystemInit+0x138>)
 8040742:	4a2c      	ldr	r2, [pc, #176]	@ (80407f4 <SystemInit+0x148>)
 8040744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8040746:	4b27      	ldr	r3, [pc, #156]	@ (80407e4 <SystemInit+0x138>)
 8040748:	2200      	movs	r2, #0
 804074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 804074c:	4b25      	ldr	r3, [pc, #148]	@ (80407e4 <SystemInit+0x138>)
 804074e:	4a29      	ldr	r2, [pc, #164]	@ (80407f4 <SystemInit+0x148>)
 8040750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8040752:	4b24      	ldr	r3, [pc, #144]	@ (80407e4 <SystemInit+0x138>)
 8040754:	2200      	movs	r2, #0
 8040756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040758:	4b22      	ldr	r3, [pc, #136]	@ (80407e4 <SystemInit+0x138>)
 804075a:	4a26      	ldr	r2, [pc, #152]	@ (80407f4 <SystemInit+0x148>)
 804075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 804075e:	4b21      	ldr	r3, [pc, #132]	@ (80407e4 <SystemInit+0x138>)
 8040760:	2200      	movs	r2, #0
 8040762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8040764:	4b1f      	ldr	r3, [pc, #124]	@ (80407e4 <SystemInit+0x138>)
 8040766:	681b      	ldr	r3, [r3, #0]
 8040768:	4a1e      	ldr	r2, [pc, #120]	@ (80407e4 <SystemInit+0x138>)
 804076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 804076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040770:	4b1c      	ldr	r3, [pc, #112]	@ (80407e4 <SystemInit+0x138>)
 8040772:	2200      	movs	r2, #0
 8040774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8040776:	4b20      	ldr	r3, [pc, #128]	@ (80407f8 <SystemInit+0x14c>)
 8040778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 804077a:	4a1f      	ldr	r2, [pc, #124]	@ (80407f8 <SystemInit+0x14c>)
 804077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8040782:	4b1e      	ldr	r3, [pc, #120]	@ (80407fc <SystemInit+0x150>)
 8040784:	681a      	ldr	r2, [r3, #0]
 8040786:	4b1e      	ldr	r3, [pc, #120]	@ (8040800 <SystemInit+0x154>)
 8040788:	4013      	ands	r3, r2
 804078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804078e:	d202      	bcs.n	8040796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8040790:	4b1c      	ldr	r3, [pc, #112]	@ (8040804 <SystemInit+0x158>)
 8040792:	2201      	movs	r2, #1
 8040794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8040796:	4b13      	ldr	r3, [pc, #76]	@ (80407e4 <SystemInit+0x138>)
 8040798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 804079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80407a0:	2b00      	cmp	r3, #0
 80407a2:	d113      	bne.n	80407cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407a4:	4b0f      	ldr	r3, [pc, #60]	@ (80407e4 <SystemInit+0x138>)
 80407a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407aa:	4a0e      	ldr	r2, [pc, #56]	@ (80407e4 <SystemInit+0x138>)
 80407ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80407b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80407b4:	4b14      	ldr	r3, [pc, #80]	@ (8040808 <SystemInit+0x15c>)
 80407b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80407ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80407bc:	4b09      	ldr	r3, [pc, #36]	@ (80407e4 <SystemInit+0x138>)
 80407be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80407c2:	4a08      	ldr	r2, [pc, #32]	@ (80407e4 <SystemInit+0x138>)
 80407c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80407c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  }

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80407cc:	4b03      	ldr	r3, [pc, #12]	@ (80407dc <SystemInit+0x130>)
 80407ce:	4a0f      	ldr	r2, [pc, #60]	@ (804080c <SystemInit+0x160>)
 80407d0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80407d2:	bf00      	nop
 80407d4:	46bd      	mov	sp, r7
 80407d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407da:	4770      	bx	lr
 80407dc:	e000ed00 	.word	0xe000ed00
 80407e0:	52002000 	.word	0x52002000
 80407e4:	58024400 	.word	0x58024400
 80407e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80407ec:	02020200 	.word	0x02020200
 80407f0:	01ff0000 	.word	0x01ff0000
 80407f4:	01010280 	.word	0x01010280
 80407f8:	580000c0 	.word	0x580000c0
 80407fc:	5c001000 	.word	0x5c001000
 8040800:	ffff0000 	.word	0xffff0000
 8040804:	51008108 	.word	0x51008108
 8040808:	52004000 	.word	0x52004000
 804080c:	08040000 	.word	0x08040000

08040810 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8040810:	b480      	push	{r7}
 8040812:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8040814:	4b09      	ldr	r3, [pc, #36]	@ (804083c <ExitRun0Mode+0x2c>)
 8040816:	68db      	ldr	r3, [r3, #12]
 8040818:	4a08      	ldr	r2, [pc, #32]	@ (804083c <ExitRun0Mode+0x2c>)
 804081a:	f023 0302 	bic.w	r3, r3, #2
 804081e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8040820:	bf00      	nop
 8040822:	4b06      	ldr	r3, [pc, #24]	@ (804083c <ExitRun0Mode+0x2c>)
 8040824:	685b      	ldr	r3, [r3, #4]
 8040826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 804082a:	2b00      	cmp	r3, #0
 804082c:	d0f9      	beq.n	8040822 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 804082e:	bf00      	nop
 8040830:	bf00      	nop
 8040832:	46bd      	mov	sp, r7
 8040834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040838:	4770      	bx	lr
 804083a:	bf00      	nop
 804083c:	58024800 	.word	0x58024800

08040840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	b082      	sub	sp, #8
 8040844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	 printf("inside the primary region \n\r");
 8040846:	482e      	ldr	r0, [pc, #184]	@ (8040900 <main+0xc0>)
 8040848:	f00a fe82 	bl	804b550 <iprintf>
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 804084c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8040850:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8040852:	bf00      	nop
 8040854:	4b2b      	ldr	r3, [pc, #172]	@ (8040904 <main+0xc4>)
 8040856:	681b      	ldr	r3, [r3, #0]
 8040858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 804085c:	2b00      	cmp	r3, #0
 804085e:	d004      	beq.n	804086a <main+0x2a>
 8040860:	687b      	ldr	r3, [r7, #4]
 8040862:	1e5a      	subs	r2, r3, #1
 8040864:	607a      	str	r2, [r7, #4]
 8040866:	2b00      	cmp	r3, #0
 8040868:	dcf4      	bgt.n	8040854 <main+0x14>
  if ( timeout < 0 )
 804086a:	687b      	ldr	r3, [r7, #4]
 804086c:	2b00      	cmp	r3, #0
 804086e:	da01      	bge.n	8040874 <main+0x34>
  {
  Error_Handler();
 8040870:	f000 f9f6 	bl	8040c60 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040874:	f000 fbd2 	bl	804101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040878:	f000 f84a 	bl	8040910 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 804087c:	f000 f8ce 	bl	8040a1c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8040880:	4b20      	ldr	r3, [pc, #128]	@ (8040904 <main+0xc4>)
 8040882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040886:	4a1f      	ldr	r2, [pc, #124]	@ (8040904 <main+0xc4>)
 8040888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 804088c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040890:	4b1c      	ldr	r3, [pc, #112]	@ (8040904 <main+0xc4>)
 8040892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804089a:	603b      	str	r3, [r7, #0]
 804089c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 804089e:	2000      	movs	r0, #0
 80408a0:	f001 f864 	bl	804196c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80408a4:	2100      	movs	r1, #0
 80408a6:	2000      	movs	r0, #0
 80408a8:	f001 f87a 	bl	80419a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80408ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80408b0:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80408b2:	bf00      	nop
 80408b4:	4b13      	ldr	r3, [pc, #76]	@ (8040904 <main+0xc4>)
 80408b6:	681b      	ldr	r3, [r3, #0]
 80408b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80408bc:	2b00      	cmp	r3, #0
 80408be:	d104      	bne.n	80408ca <main+0x8a>
 80408c0:	687b      	ldr	r3, [r7, #4]
 80408c2:	1e5a      	subs	r2, r3, #1
 80408c4:	607a      	str	r2, [r7, #4]
 80408c6:	2b00      	cmp	r3, #0
 80408c8:	dcf4      	bgt.n	80408b4 <main+0x74>
if ( timeout < 0 )
 80408ca:	687b      	ldr	r3, [r7, #4]
 80408cc:	2b00      	cmp	r3, #0
 80408ce:	da01      	bge.n	80408d4 <main+0x94>
{
Error_Handler();
 80408d0:	f000 f9c6 	bl	8040c60 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80408d4:	f000 f940 	bl	8040b58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80408d8:	f000 f8f2 	bl	8040ac0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80408dc:	f00a f818 	bl	804a910 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80408e0:	f000 f8cc 	bl	8040a7c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("Firmware Application \n\r");
 80408e4:	4808      	ldr	r0, [pc, #32]	@ (8040908 <main+0xc8>)
 80408e6:	f00a fe33 	bl	804b550 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80408ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80408ee:	4807      	ldr	r0, [pc, #28]	@ (804090c <main+0xcc>)
 80408f0:	f001 f821 	bl	8041936 <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Delay for 500 ms
 80408f4:	2064      	movs	r0, #100	@ 0x64
 80408f6:	f000 fc23 	bl	8041140 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11); // Toggle PA11
 80408fa:	bf00      	nop
 80408fc:	e7f5      	b.n	80408ea <main+0xaa>
 80408fe:	bf00      	nop
 8040900:	0804c240 	.word	0x0804c240
 8040904:	58024400 	.word	0x58024400
 8040908:	0804c260 	.word	0x0804c260
 804090c:	58020000 	.word	0x58020000

08040910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040910:	b580      	push	{r7, lr}
 8040912:	b09c      	sub	sp, #112	@ 0x70
 8040914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804091a:	224c      	movs	r2, #76	@ 0x4c
 804091c:	2100      	movs	r1, #0
 804091e:	4618      	mov	r0, r3
 8040920:	f00a fe6b 	bl	804b5fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040924:	1d3b      	adds	r3, r7, #4
 8040926:	2220      	movs	r2, #32
 8040928:	2100      	movs	r1, #0
 804092a:	4618      	mov	r0, r3
 804092c:	f00a fe65 	bl	804b5fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8040930:	2004      	movs	r0, #4
 8040932:	f002 fac3 	bl	8042ebc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040936:	2300      	movs	r3, #0
 8040938:	603b      	str	r3, [r7, #0]
 804093a:	4b36      	ldr	r3, [pc, #216]	@ (8040a14 <SystemClock_Config+0x104>)
 804093c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804093e:	4a35      	ldr	r2, [pc, #212]	@ (8040a14 <SystemClock_Config+0x104>)
 8040940:	f023 0301 	bic.w	r3, r3, #1
 8040944:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8040946:	4b33      	ldr	r3, [pc, #204]	@ (8040a14 <SystemClock_Config+0x104>)
 8040948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804094a:	f003 0301 	and.w	r3, r3, #1
 804094e:	603b      	str	r3, [r7, #0]
 8040950:	4b31      	ldr	r3, [pc, #196]	@ (8040a18 <SystemClock_Config+0x108>)
 8040952:	699b      	ldr	r3, [r3, #24]
 8040954:	4a30      	ldr	r2, [pc, #192]	@ (8040a18 <SystemClock_Config+0x108>)
 8040956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 804095a:	6193      	str	r3, [r2, #24]
 804095c:	4b2e      	ldr	r3, [pc, #184]	@ (8040a18 <SystemClock_Config+0x108>)
 804095e:	699b      	ldr	r3, [r3, #24]
 8040960:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8040964:	603b      	str	r3, [r7, #0]
 8040966:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8040968:	bf00      	nop
 804096a:	4b2b      	ldr	r3, [pc, #172]	@ (8040a18 <SystemClock_Config+0x108>)
 804096c:	699b      	ldr	r3, [r3, #24]
 804096e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8040972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8040976:	d1f8      	bne.n	804096a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8040978:	230b      	movs	r3, #11
 804097a:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 804097c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8040980:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8040982:	2301      	movs	r3, #1
 8040984:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040986:	2340      	movs	r3, #64	@ 0x40
 8040988:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 804098a:	2301      	movs	r3, #1
 804098c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804098e:	2302      	movs	r3, #2
 8040990:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040992:	2302      	movs	r3, #2
 8040994:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8040996:	2305      	movs	r3, #5
 8040998:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 804099a:	2330      	movs	r3, #48	@ 0x30
 804099c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 804099e:	2302      	movs	r3, #2
 80409a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80409a2:	2305      	movs	r3, #5
 80409a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80409a6:	2302      	movs	r3, #2
 80409a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80409aa:	2308      	movs	r3, #8
 80409ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80409ae:	2300      	movs	r3, #0
 80409b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80409b2:	2300      	movs	r3, #0
 80409b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80409b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80409ba:	4618      	mov	r0, r3
 80409bc:	f002 fae8 	bl	8042f90 <HAL_RCC_OscConfig>
 80409c0:	4603      	mov	r3, r0
 80409c2:	2b00      	cmp	r3, #0
 80409c4:	d001      	beq.n	80409ca <SystemClock_Config+0xba>
  {
    Error_Handler();
 80409c6:	f000 f94b 	bl	8040c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80409ca:	233f      	movs	r3, #63	@ 0x3f
 80409cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80409ce:	2300      	movs	r3, #0
 80409d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80409d2:	2300      	movs	r3, #0
 80409d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80409d6:	2300      	movs	r3, #0
 80409d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80409da:	2300      	movs	r3, #0
 80409dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80409de:	2300      	movs	r3, #0
 80409e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80409e2:	2300      	movs	r3, #0
 80409e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80409e6:	2300      	movs	r3, #0
 80409e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80409ea:	1d3b      	adds	r3, r7, #4
 80409ec:	2100      	movs	r1, #0
 80409ee:	4618      	mov	r0, r3
 80409f0:	f002 ff28 	bl	8043844 <HAL_RCC_ClockConfig>
 80409f4:	4603      	mov	r3, r0
 80409f6:	2b00      	cmp	r3, #0
 80409f8:	d001      	beq.n	80409fe <SystemClock_Config+0xee>
  {
    Error_Handler();
 80409fa:	f000 f931 	bl	8040c60 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80409fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8040a02:	2100      	movs	r1, #0
 8040a04:	2000      	movs	r0, #0
 8040a06:	f003 f8d3 	bl	8043bb0 <HAL_RCC_MCOConfig>
}
 8040a0a:	bf00      	nop
 8040a0c:	3770      	adds	r7, #112	@ 0x70
 8040a0e:	46bd      	mov	sp, r7
 8040a10:	bd80      	pop	{r7, pc}
 8040a12:	bf00      	nop
 8040a14:	58000400 	.word	0x58000400
 8040a18:	58024800 	.word	0x58024800

08040a1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8040a1c:	b580      	push	{r7, lr}
 8040a1e:	b0b2      	sub	sp, #200	@ 0xc8
 8040a20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040a22:	463b      	mov	r3, r7
 8040a24:	22c8      	movs	r2, #200	@ 0xc8
 8040a26:	2100      	movs	r1, #0
 8040a28:	4618      	mov	r0, r3
 8040a2a:	f00a fde6 	bl	804b5fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8040a2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8040a32:	f04f 0300 	mov.w	r3, #0
 8040a36:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8040a3a:	2302      	movs	r3, #2
 8040a3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8040a3e:	230c      	movs	r3, #12
 8040a40:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8040a42:	2302      	movs	r3, #2
 8040a44:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8040a46:	2302      	movs	r3, #2
 8040a48:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8040a4a:	2302      	movs	r3, #2
 8040a4c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8040a4e:	23c0      	movs	r3, #192	@ 0xc0
 8040a50:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8040a52:	2320      	movs	r3, #32
 8040a54:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8040a56:	2300      	movs	r3, #0
 8040a58:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8040a5a:	2300      	movs	r3, #0
 8040a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040a60:	463b      	mov	r3, r7
 8040a62:	4618      	mov	r0, r3
 8040a64:	f003 fae4 	bl	8044030 <HAL_RCCEx_PeriphCLKConfig>
 8040a68:	4603      	mov	r3, r0
 8040a6a:	2b00      	cmp	r3, #0
 8040a6c:	d001      	beq.n	8040a72 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8040a6e:	f000 f8f7 	bl	8040c60 <Error_Handler>
  }
}
 8040a72:	bf00      	nop
 8040a74:	37c8      	adds	r7, #200	@ 0xc8
 8040a76:	46bd      	mov	sp, r7
 8040a78:	bd80      	pop	{r7, pc}
	...

08040a7c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040a7c:	b580      	push	{r7, lr}
 8040a7e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040a80:	4b0d      	ldr	r3, [pc, #52]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040a82:	4a0e      	ldr	r2, [pc, #56]	@ (8040abc <MX_CRC_Init+0x40>)
 8040a84:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8040a86:	4b0c      	ldr	r3, [pc, #48]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040a88:	2200      	movs	r2, #0
 8040a8a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8040a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040a8e:	2200      	movs	r2, #0
 8040a90:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8040a92:	4b09      	ldr	r3, [pc, #36]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040a94:	2200      	movs	r2, #0
 8040a96:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8040a98:	4b07      	ldr	r3, [pc, #28]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040a9a:	2200      	movs	r2, #0
 8040a9c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8040a9e:	4b06      	ldr	r3, [pc, #24]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040aa0:	2201      	movs	r2, #1
 8040aa2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040aa4:	4804      	ldr	r0, [pc, #16]	@ (8040ab8 <MX_CRC_Init+0x3c>)
 8040aa6:	f000 fc8b 	bl	80413c0 <HAL_CRC_Init>
 8040aaa:	4603      	mov	r3, r0
 8040aac:	2b00      	cmp	r3, #0
 8040aae:	d001      	beq.n	8040ab4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8040ab0:	f000 f8d6 	bl	8040c60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040ab4:	bf00      	nop
 8040ab6:	bd80      	pop	{r7, pc}
 8040ab8:	2400015c 	.word	0x2400015c
 8040abc:	58024c00 	.word	0x58024c00

08040ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040ac0:	b580      	push	{r7, lr}
 8040ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040ac4:	4b22      	ldr	r3, [pc, #136]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040ac6:	4a23      	ldr	r2, [pc, #140]	@ (8040b54 <MX_USART1_UART_Init+0x94>)
 8040ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040aca:	4b21      	ldr	r3, [pc, #132]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040acc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8040ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040ad4:	2200      	movs	r2, #0
 8040ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040ada:	2200      	movs	r2, #0
 8040adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040ade:	4b1c      	ldr	r3, [pc, #112]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040ae0:	2200      	movs	r2, #0
 8040ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040ae6:	220c      	movs	r2, #12
 8040ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040aea:	4b19      	ldr	r3, [pc, #100]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040aec:	2200      	movs	r2, #0
 8040aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040af0:	4b17      	ldr	r3, [pc, #92]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040af2:	2200      	movs	r2, #0
 8040af4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040af6:	4b16      	ldr	r3, [pc, #88]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040af8:	2200      	movs	r2, #0
 8040afa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040afc:	4b14      	ldr	r3, [pc, #80]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040afe:	2200      	movs	r2, #0
 8040b00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040b02:	4b13      	ldr	r3, [pc, #76]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040b04:	2200      	movs	r2, #0
 8040b06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040b08:	4811      	ldr	r0, [pc, #68]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040b0a:	f005 f8fd 	bl	8045d08 <HAL_UART_Init>
 8040b0e:	4603      	mov	r3, r0
 8040b10:	2b00      	cmp	r3, #0
 8040b12:	d001      	beq.n	8040b18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8040b14:	f000 f8a4 	bl	8040c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040b18:	2100      	movs	r1, #0
 8040b1a:	480d      	ldr	r0, [pc, #52]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040b1c:	f006 f905 	bl	8046d2a <HAL_UARTEx_SetTxFifoThreshold>
 8040b20:	4603      	mov	r3, r0
 8040b22:	2b00      	cmp	r3, #0
 8040b24:	d001      	beq.n	8040b2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040b26:	f000 f89b 	bl	8040c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040b2a:	2100      	movs	r1, #0
 8040b2c:	4808      	ldr	r0, [pc, #32]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040b2e:	f006 f93a 	bl	8046da6 <HAL_UARTEx_SetRxFifoThreshold>
 8040b32:	4603      	mov	r3, r0
 8040b34:	2b00      	cmp	r3, #0
 8040b36:	d001      	beq.n	8040b3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040b38:	f000 f892 	bl	8040c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040b3c:	4804      	ldr	r0, [pc, #16]	@ (8040b50 <MX_USART1_UART_Init+0x90>)
 8040b3e:	f006 f8bb 	bl	8046cb8 <HAL_UARTEx_DisableFifoMode>
 8040b42:	4603      	mov	r3, r0
 8040b44:	2b00      	cmp	r3, #0
 8040b46:	d001      	beq.n	8040b4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040b48:	f000 f88a 	bl	8040c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040b4c:	bf00      	nop
 8040b4e:	bd80      	pop	{r7, pc}
 8040b50:	24000180 	.word	0x24000180
 8040b54:	40011000 	.word	0x40011000

08040b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040b58:	b580      	push	{r7, lr}
 8040b5a:	b08a      	sub	sp, #40	@ 0x28
 8040b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b5e:	f107 0314 	add.w	r3, r7, #20
 8040b62:	2200      	movs	r2, #0
 8040b64:	601a      	str	r2, [r3, #0]
 8040b66:	605a      	str	r2, [r3, #4]
 8040b68:	609a      	str	r2, [r3, #8]
 8040b6a:	60da      	str	r2, [r3, #12]
 8040b6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b74:	4a38      	ldr	r2, [pc, #224]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040b76:	f043 0302 	orr.w	r3, r3, #2
 8040b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b7e:	4b36      	ldr	r3, [pc, #216]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b84:	f003 0302 	and.w	r3, r3, #2
 8040b88:	613b      	str	r3, [r7, #16]
 8040b8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040b8c:	4b32      	ldr	r3, [pc, #200]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040b92:	4a31      	ldr	r2, [pc, #196]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040b94:	f043 0301 	orr.w	r3, r3, #1
 8040b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040ba2:	f003 0301 	and.w	r3, r3, #1
 8040ba6:	60fb      	str	r3, [r7, #12]
 8040ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040baa:	4b2b      	ldr	r3, [pc, #172]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bb0:	4a29      	ldr	r2, [pc, #164]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bb2:	f043 0304 	orr.w	r3, r3, #4
 8040bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040bba:	4b27      	ldr	r3, [pc, #156]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bc0:	f003 0304 	and.w	r3, r3, #4
 8040bc4:	60bb      	str	r3, [r7, #8]
 8040bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040bc8:	4b23      	ldr	r3, [pc, #140]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bce:	4a22      	ldr	r2, [pc, #136]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8040bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040be2:	607b      	str	r3, [r7, #4]
 8040be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040be6:	4b1c      	ldr	r3, [pc, #112]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bec:	4a1a      	ldr	r2, [pc, #104]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8040bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040bf6:	4b18      	ldr	r3, [pc, #96]	@ (8040c58 <MX_GPIO_Init+0x100>)
 8040bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040c00:	603b      	str	r3, [r7, #0]
 8040c02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8040c04:	2200      	movs	r2, #0
 8040c06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8040c0a:	4814      	ldr	r0, [pc, #80]	@ (8040c5c <MX_GPIO_Init+0x104>)
 8040c0c:	f000 fe7a 	bl	8041904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8040c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040c16:	2302      	movs	r3, #2
 8040c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c1a:	2300      	movs	r3, #0
 8040c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c1e:	2300      	movs	r3, #0
 8040c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040c22:	2300      	movs	r3, #0
 8040c24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040c26:	f107 0314 	add.w	r3, r7, #20
 8040c2a:	4619      	mov	r1, r3
 8040c2c:	480b      	ldr	r0, [pc, #44]	@ (8040c5c <MX_GPIO_Init+0x104>)
 8040c2e:	f000 fcb9 	bl	80415a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8040c32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8040c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040c38:	2301      	movs	r3, #1
 8040c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c3c:	2300      	movs	r3, #0
 8040c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c40:	2300      	movs	r3, #0
 8040c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040c44:	f107 0314 	add.w	r3, r7, #20
 8040c48:	4619      	mov	r1, r3
 8040c4a:	4804      	ldr	r0, [pc, #16]	@ (8040c5c <MX_GPIO_Init+0x104>)
 8040c4c:	f000 fcaa 	bl	80415a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8040c50:	bf00      	nop
 8040c52:	3728      	adds	r7, #40	@ 0x28
 8040c54:	46bd      	mov	sp, r7
 8040c56:	bd80      	pop	{r7, pc}
 8040c58:	58024400 	.word	0x58024400
 8040c5c:	58020000 	.word	0x58020000

08040c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040c60:	b480      	push	{r7}
 8040c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040c64:	b672      	cpsid	i
}
 8040c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040c68:	bf00      	nop
 8040c6a:	e7fd      	b.n	8040c68 <Error_Handler+0x8>

08040c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040c6c:	b480      	push	{r7}
 8040c6e:	b083      	sub	sp, #12
 8040c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040c72:	4b0a      	ldr	r3, [pc, #40]	@ (8040c9c <HAL_MspInit+0x30>)
 8040c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040c78:	4a08      	ldr	r2, [pc, #32]	@ (8040c9c <HAL_MspInit+0x30>)
 8040c7a:	f043 0302 	orr.w	r3, r3, #2
 8040c7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8040c82:	4b06      	ldr	r3, [pc, #24]	@ (8040c9c <HAL_MspInit+0x30>)
 8040c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8040c88:	f003 0302 	and.w	r3, r3, #2
 8040c8c:	607b      	str	r3, [r7, #4]
 8040c8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040c90:	bf00      	nop
 8040c92:	370c      	adds	r7, #12
 8040c94:	46bd      	mov	sp, r7
 8040c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c9a:	4770      	bx	lr
 8040c9c:	58024400 	.word	0x58024400

08040ca0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8040ca0:	b480      	push	{r7}
 8040ca2:	b085      	sub	sp, #20
 8040ca4:	af00      	add	r7, sp, #0
 8040ca6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040ca8:	687b      	ldr	r3, [r7, #4]
 8040caa:	681b      	ldr	r3, [r3, #0]
 8040cac:	4a0b      	ldr	r2, [pc, #44]	@ (8040cdc <HAL_CRC_MspInit+0x3c>)
 8040cae:	4293      	cmp	r3, r2
 8040cb0:	d10e      	bne.n	8040cd0 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8040cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8040ce0 <HAL_CRC_MspInit+0x40>)
 8040cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040cb8:	4a09      	ldr	r2, [pc, #36]	@ (8040ce0 <HAL_CRC_MspInit+0x40>)
 8040cba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8040cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040cc2:	4b07      	ldr	r3, [pc, #28]	@ (8040ce0 <HAL_CRC_MspInit+0x40>)
 8040cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8040ccc:	60fb      	str	r3, [r7, #12]
 8040cce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8040cd0:	bf00      	nop
 8040cd2:	3714      	adds	r7, #20
 8040cd4:	46bd      	mov	sp, r7
 8040cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cda:	4770      	bx	lr
 8040cdc:	58024c00 	.word	0x58024c00
 8040ce0:	58024400 	.word	0x58024400

08040ce4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040ce4:	b580      	push	{r7, lr}
 8040ce6:	b0bc      	sub	sp, #240	@ 0xf0
 8040ce8:	af00      	add	r7, sp, #0
 8040cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040cec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040cf0:	2200      	movs	r2, #0
 8040cf2:	601a      	str	r2, [r3, #0]
 8040cf4:	605a      	str	r2, [r3, #4]
 8040cf6:	609a      	str	r2, [r3, #8]
 8040cf8:	60da      	str	r2, [r3, #12]
 8040cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040cfc:	f107 0310 	add.w	r3, r7, #16
 8040d00:	22c8      	movs	r2, #200	@ 0xc8
 8040d02:	2100      	movs	r1, #0
 8040d04:	4618      	mov	r0, r3
 8040d06:	f00a fc78 	bl	804b5fa <memset>
  if(huart->Instance==USART1)
 8040d0a:	687b      	ldr	r3, [r7, #4]
 8040d0c:	681b      	ldr	r3, [r3, #0]
 8040d0e:	4a27      	ldr	r2, [pc, #156]	@ (8040dac <HAL_UART_MspInit+0xc8>)
 8040d10:	4293      	cmp	r3, r2
 8040d12:	d146      	bne.n	8040da2 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040d14:	f04f 0201 	mov.w	r2, #1
 8040d18:	f04f 0300 	mov.w	r3, #0
 8040d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040d20:	2300      	movs	r3, #0
 8040d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040d26:	f107 0310 	add.w	r3, r7, #16
 8040d2a:	4618      	mov	r0, r3
 8040d2c:	f003 f980 	bl	8044030 <HAL_RCCEx_PeriphCLKConfig>
 8040d30:	4603      	mov	r3, r0
 8040d32:	2b00      	cmp	r3, #0
 8040d34:	d001      	beq.n	8040d3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8040d36:	f7ff ff93 	bl	8040c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8040db0 <HAL_UART_MspInit+0xcc>)
 8040d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040d40:	4a1b      	ldr	r2, [pc, #108]	@ (8040db0 <HAL_UART_MspInit+0xcc>)
 8040d42:	f043 0310 	orr.w	r3, r3, #16
 8040d46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8040d4a:	4b19      	ldr	r3, [pc, #100]	@ (8040db0 <HAL_UART_MspInit+0xcc>)
 8040d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8040d50:	f003 0310 	and.w	r3, r3, #16
 8040d54:	60fb      	str	r3, [r7, #12]
 8040d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040d58:	4b15      	ldr	r3, [pc, #84]	@ (8040db0 <HAL_UART_MspInit+0xcc>)
 8040d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d5e:	4a14      	ldr	r2, [pc, #80]	@ (8040db0 <HAL_UART_MspInit+0xcc>)
 8040d60:	f043 0301 	orr.w	r3, r3, #1
 8040d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8040d68:	4b11      	ldr	r3, [pc, #68]	@ (8040db0 <HAL_UART_MspInit+0xcc>)
 8040d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8040d6e:	f003 0301 	and.w	r3, r3, #1
 8040d72:	60bb      	str	r3, [r7, #8]
 8040d74:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040d76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8040d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040d7e:	2302      	movs	r3, #2
 8040d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d84:	2300      	movs	r3, #0
 8040d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d8a:	2300      	movs	r3, #0
 8040d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040d90:	2307      	movs	r3, #7
 8040d92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d96:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8040d9a:	4619      	mov	r1, r3
 8040d9c:	4805      	ldr	r0, [pc, #20]	@ (8040db4 <HAL_UART_MspInit+0xd0>)
 8040d9e:	f000 fc01 	bl	80415a4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8040da2:	bf00      	nop
 8040da4:	37f0      	adds	r7, #240	@ 0xf0
 8040da6:	46bd      	mov	sp, r7
 8040da8:	bd80      	pop	{r7, pc}
 8040daa:	bf00      	nop
 8040dac:	40011000 	.word	0x40011000
 8040db0:	58024400 	.word	0x58024400
 8040db4:	58020000 	.word	0x58020000

08040db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040db8:	b480      	push	{r7}
 8040dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8040dbc:	bf00      	nop
 8040dbe:	e7fd      	b.n	8040dbc <NMI_Handler+0x4>

08040dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040dc0:	b480      	push	{r7}
 8040dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040dc4:	bf00      	nop
 8040dc6:	e7fd      	b.n	8040dc4 <HardFault_Handler+0x4>

08040dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040dc8:	b480      	push	{r7}
 8040dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040dcc:	bf00      	nop
 8040dce:	e7fd      	b.n	8040dcc <MemManage_Handler+0x4>

08040dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040dd0:	b480      	push	{r7}
 8040dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040dd4:	bf00      	nop
 8040dd6:	e7fd      	b.n	8040dd4 <BusFault_Handler+0x4>

08040dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040dd8:	b480      	push	{r7}
 8040dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040ddc:	bf00      	nop
 8040dde:	e7fd      	b.n	8040ddc <UsageFault_Handler+0x4>

08040de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040de0:	b480      	push	{r7}
 8040de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040de4:	bf00      	nop
 8040de6:	46bd      	mov	sp, r7
 8040de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dec:	4770      	bx	lr

08040dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040dee:	b480      	push	{r7}
 8040df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040df2:	bf00      	nop
 8040df4:	46bd      	mov	sp, r7
 8040df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dfa:	4770      	bx	lr

08040dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040dfc:	b480      	push	{r7}
 8040dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040e00:	bf00      	nop
 8040e02:	46bd      	mov	sp, r7
 8040e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e08:	4770      	bx	lr

08040e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040e0a:	b580      	push	{r7, lr}
 8040e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040e0e:	f000 f977 	bl	8041100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040e12:	bf00      	nop
 8040e14:	bd80      	pop	{r7, pc}
	...

08040e18 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8040e18:	b580      	push	{r7, lr}
 8040e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8040e1c:	4802      	ldr	r0, [pc, #8]	@ (8040e28 <OTG_HS_IRQHandler+0x10>)
 8040e1e:	f000 ff4f 	bl	8041cc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8040e22:	bf00      	nop
 8040e24:	bd80      	pop	{r7, pc}
 8040e26:	bf00      	nop
 8040e28:	240007fc 	.word	0x240007fc

08040e2c <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 8040e2c:	b480      	push	{r7}
 8040e2e:	b083      	sub	sp, #12
 8040e30:	af00      	add	r7, sp, #0
 8040e32:	4603      	mov	r3, r0
 8040e34:	71fb      	strb	r3, [r7, #7]
	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8040e36:	4b0f      	ldr	r3, [pc, #60]	@ (8040e74 <ITM_SendChar+0x48>)
 8040e38:	681b      	ldr	r3, [r3, #0]
 8040e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8040e74 <ITM_SendChar+0x48>)
 8040e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8040e40:	6013      	str	r3, [r2, #0]
	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8040e42:	4b0d      	ldr	r3, [pc, #52]	@ (8040e78 <ITM_SendChar+0x4c>)
 8040e44:	681b      	ldr	r3, [r3, #0]
 8040e46:	4a0c      	ldr	r2, [pc, #48]	@ (8040e78 <ITM_SendChar+0x4c>)
 8040e48:	f043 0301 	orr.w	r3, r3, #1
 8040e4c:	6013      	str	r3, [r2, #0]
	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8040e4e:	bf00      	nop
 8040e50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8040e54:	681b      	ldr	r3, [r3, #0]
 8040e56:	f003 0301 	and.w	r3, r3, #1
 8040e5a:	2b00      	cmp	r3, #0
 8040e5c:	d0f8      	beq.n	8040e50 <ITM_SendChar+0x24>
	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8040e5e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8040e62:	79fb      	ldrb	r3, [r7, #7]
 8040e64:	6013      	str	r3, [r2, #0]
}
 8040e66:	bf00      	nop
 8040e68:	370c      	adds	r7, #12
 8040e6a:	46bd      	mov	sp, r7
 8040e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e70:	4770      	bx	lr
 8040e72:	bf00      	nop
 8040e74:	e000edfc 	.word	0xe000edfc
 8040e78:	e0000e00 	.word	0xe0000e00

08040e7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040e7c:	b580      	push	{r7, lr}
 8040e7e:	b086      	sub	sp, #24
 8040e80:	af00      	add	r7, sp, #0
 8040e82:	60f8      	str	r0, [r7, #12]
 8040e84:	60b9      	str	r1, [r7, #8]
 8040e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e88:	2300      	movs	r3, #0
 8040e8a:	617b      	str	r3, [r7, #20]
 8040e8c:	e00a      	b.n	8040ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040e8e:	f3af 8000 	nop.w
 8040e92:	4601      	mov	r1, r0
 8040e94:	68bb      	ldr	r3, [r7, #8]
 8040e96:	1c5a      	adds	r2, r3, #1
 8040e98:	60ba      	str	r2, [r7, #8]
 8040e9a:	b2ca      	uxtb	r2, r1
 8040e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e9e:	697b      	ldr	r3, [r7, #20]
 8040ea0:	3301      	adds	r3, #1
 8040ea2:	617b      	str	r3, [r7, #20]
 8040ea4:	697a      	ldr	r2, [r7, #20]
 8040ea6:	687b      	ldr	r3, [r7, #4]
 8040ea8:	429a      	cmp	r2, r3
 8040eaa:	dbf0      	blt.n	8040e8e <_read+0x12>
  }

  return len;
 8040eac:	687b      	ldr	r3, [r7, #4]
}
 8040eae:	4618      	mov	r0, r3
 8040eb0:	3718      	adds	r7, #24
 8040eb2:	46bd      	mov	sp, r7
 8040eb4:	bd80      	pop	{r7, pc}

08040eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040eb6:	b580      	push	{r7, lr}
 8040eb8:	b086      	sub	sp, #24
 8040eba:	af00      	add	r7, sp, #0
 8040ebc:	60f8      	str	r0, [r7, #12]
 8040ebe:	60b9      	str	r1, [r7, #8]
 8040ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040ec2:	2300      	movs	r3, #0
 8040ec4:	617b      	str	r3, [r7, #20]
 8040ec6:	e009      	b.n	8040edc <_write+0x26>
  {
  //  __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8040ec8:	68bb      	ldr	r3, [r7, #8]
 8040eca:	1c5a      	adds	r2, r3, #1
 8040ecc:	60ba      	str	r2, [r7, #8]
 8040ece:	781b      	ldrb	r3, [r3, #0]
 8040ed0:	4618      	mov	r0, r3
 8040ed2:	f7ff ffab 	bl	8040e2c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040ed6:	697b      	ldr	r3, [r7, #20]
 8040ed8:	3301      	adds	r3, #1
 8040eda:	617b      	str	r3, [r7, #20]
 8040edc:	697a      	ldr	r2, [r7, #20]
 8040ede:	687b      	ldr	r3, [r7, #4]
 8040ee0:	429a      	cmp	r2, r3
 8040ee2:	dbf1      	blt.n	8040ec8 <_write+0x12>
  }
  return len;
 8040ee4:	687b      	ldr	r3, [r7, #4]
}
 8040ee6:	4618      	mov	r0, r3
 8040ee8:	3718      	adds	r7, #24
 8040eea:	46bd      	mov	sp, r7
 8040eec:	bd80      	pop	{r7, pc}

08040eee <_close>:

int _close(int file)
{
 8040eee:	b480      	push	{r7}
 8040ef0:	b083      	sub	sp, #12
 8040ef2:	af00      	add	r7, sp, #0
 8040ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040efa:	4618      	mov	r0, r3
 8040efc:	370c      	adds	r7, #12
 8040efe:	46bd      	mov	sp, r7
 8040f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f04:	4770      	bx	lr

08040f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040f06:	b480      	push	{r7}
 8040f08:	b083      	sub	sp, #12
 8040f0a:	af00      	add	r7, sp, #0
 8040f0c:	6078      	str	r0, [r7, #4]
 8040f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040f10:	683b      	ldr	r3, [r7, #0]
 8040f12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8040f16:	605a      	str	r2, [r3, #4]
  return 0;
 8040f18:	2300      	movs	r3, #0
}
 8040f1a:	4618      	mov	r0, r3
 8040f1c:	370c      	adds	r7, #12
 8040f1e:	46bd      	mov	sp, r7
 8040f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f24:	4770      	bx	lr

08040f26 <_isatty>:

int _isatty(int file)
{
 8040f26:	b480      	push	{r7}
 8040f28:	b083      	sub	sp, #12
 8040f2a:	af00      	add	r7, sp, #0
 8040f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040f2e:	2301      	movs	r3, #1
}
 8040f30:	4618      	mov	r0, r3
 8040f32:	370c      	adds	r7, #12
 8040f34:	46bd      	mov	sp, r7
 8040f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f3a:	4770      	bx	lr

08040f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040f3c:	b480      	push	{r7}
 8040f3e:	b085      	sub	sp, #20
 8040f40:	af00      	add	r7, sp, #0
 8040f42:	60f8      	str	r0, [r7, #12]
 8040f44:	60b9      	str	r1, [r7, #8]
 8040f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040f48:	2300      	movs	r3, #0
}
 8040f4a:	4618      	mov	r0, r3
 8040f4c:	3714      	adds	r7, #20
 8040f4e:	46bd      	mov	sp, r7
 8040f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f54:	4770      	bx	lr
	...

08040f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040f58:	b580      	push	{r7, lr}
 8040f5a:	b086      	sub	sp, #24
 8040f5c:	af00      	add	r7, sp, #0
 8040f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040f60:	4a14      	ldr	r2, [pc, #80]	@ (8040fb4 <_sbrk+0x5c>)
 8040f62:	4b15      	ldr	r3, [pc, #84]	@ (8040fb8 <_sbrk+0x60>)
 8040f64:	1ad3      	subs	r3, r2, r3
 8040f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040f68:	697b      	ldr	r3, [r7, #20]
 8040f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040f6c:	4b13      	ldr	r3, [pc, #76]	@ (8040fbc <_sbrk+0x64>)
 8040f6e:	681b      	ldr	r3, [r3, #0]
 8040f70:	2b00      	cmp	r3, #0
 8040f72:	d102      	bne.n	8040f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040f74:	4b11      	ldr	r3, [pc, #68]	@ (8040fbc <_sbrk+0x64>)
 8040f76:	4a12      	ldr	r2, [pc, #72]	@ (8040fc0 <_sbrk+0x68>)
 8040f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040f7a:	4b10      	ldr	r3, [pc, #64]	@ (8040fbc <_sbrk+0x64>)
 8040f7c:	681a      	ldr	r2, [r3, #0]
 8040f7e:	687b      	ldr	r3, [r7, #4]
 8040f80:	4413      	add	r3, r2
 8040f82:	693a      	ldr	r2, [r7, #16]
 8040f84:	429a      	cmp	r2, r3
 8040f86:	d207      	bcs.n	8040f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040f88:	f00a fb86 	bl	804b698 <__errno>
 8040f8c:	4603      	mov	r3, r0
 8040f8e:	220c      	movs	r2, #12
 8040f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040f92:	f04f 33ff 	mov.w	r3, #4294967295
 8040f96:	e009      	b.n	8040fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040f98:	4b08      	ldr	r3, [pc, #32]	@ (8040fbc <_sbrk+0x64>)
 8040f9a:	681b      	ldr	r3, [r3, #0]
 8040f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040f9e:	4b07      	ldr	r3, [pc, #28]	@ (8040fbc <_sbrk+0x64>)
 8040fa0:	681a      	ldr	r2, [r3, #0]
 8040fa2:	687b      	ldr	r3, [r7, #4]
 8040fa4:	4413      	add	r3, r2
 8040fa6:	4a05      	ldr	r2, [pc, #20]	@ (8040fbc <_sbrk+0x64>)
 8040fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040faa:	68fb      	ldr	r3, [r7, #12]
}
 8040fac:	4618      	mov	r0, r3
 8040fae:	3718      	adds	r7, #24
 8040fb0:	46bd      	mov	sp, r7
 8040fb2:	bd80      	pop	{r7, pc}
 8040fb4:	2407fffc 	.word	0x2407fffc
 8040fb8:	00000400 	.word	0x00000400
 8040fbc:	24000214 	.word	0x24000214
 8040fc0:	24001250 	.word	0x24001250

08040fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040fc4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8041000 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8040fc8:	f7ff fc22 	bl	8040810 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8040fcc:	f7ff fb6e 	bl	80406ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040fd0:	480c      	ldr	r0, [pc, #48]	@ (8041004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040fd2:	490d      	ldr	r1, [pc, #52]	@ (8041008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040fd4:	4a0d      	ldr	r2, [pc, #52]	@ (804100c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040fd8:	e002      	b.n	8040fe0 <LoopCopyDataInit>

08040fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040fde:	3304      	adds	r3, #4

08040fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040fe4:	d3f9      	bcc.n	8040fda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8041010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8041014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040fec:	e001      	b.n	8040ff2 <LoopFillZerobss>

08040fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040ff0:	3204      	adds	r2, #4

08040ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040ff4:	d3fb      	bcc.n	8040fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040ff6:	f00a fb55 	bl	804b6a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040ffa:	f7ff fc21 	bl	8040840 <main>
  bx  lr
 8040ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8041000:	2407fffc 	.word	0x2407fffc
  ldr r0, =_sdata
 8041004:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8041008:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 804100c:	0804c3a4 	.word	0x0804c3a4
  ldr r2, =_sbss
 8041010:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8041014:	24001250 	.word	0x24001250

08041018 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8041018:	e7fe      	b.n	8041018 <ADC3_IRQHandler>
	...

0804101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804101c:	b580      	push	{r7, lr}
 804101e:	b082      	sub	sp, #8
 8041020:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8041022:	2003      	movs	r0, #3
 8041024:	f000 f98c 	bl	8041340 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8041028:	f002 fe2c 	bl	8043c84 <HAL_RCC_GetSysClockFreq>
 804102c:	4602      	mov	r2, r0
 804102e:	4b15      	ldr	r3, [pc, #84]	@ (8041084 <HAL_Init+0x68>)
 8041030:	699b      	ldr	r3, [r3, #24]
 8041032:	0a1b      	lsrs	r3, r3, #8
 8041034:	f003 030f 	and.w	r3, r3, #15
 8041038:	4913      	ldr	r1, [pc, #76]	@ (8041088 <HAL_Init+0x6c>)
 804103a:	5ccb      	ldrb	r3, [r1, r3]
 804103c:	f003 031f 	and.w	r3, r3, #31
 8041040:	fa22 f303 	lsr.w	r3, r2, r3
 8041044:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8041046:	4b0f      	ldr	r3, [pc, #60]	@ (8041084 <HAL_Init+0x68>)
 8041048:	699b      	ldr	r3, [r3, #24]
 804104a:	f003 030f 	and.w	r3, r3, #15
 804104e:	4a0e      	ldr	r2, [pc, #56]	@ (8041088 <HAL_Init+0x6c>)
 8041050:	5cd3      	ldrb	r3, [r2, r3]
 8041052:	f003 031f 	and.w	r3, r3, #31
 8041056:	687a      	ldr	r2, [r7, #4]
 8041058:	fa22 f303 	lsr.w	r3, r2, r3
 804105c:	4a0b      	ldr	r2, [pc, #44]	@ (804108c <HAL_Init+0x70>)
 804105e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8041060:	4a0b      	ldr	r2, [pc, #44]	@ (8041090 <HAL_Init+0x74>)
 8041062:	687b      	ldr	r3, [r7, #4]
 8041064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8041066:	2000      	movs	r0, #0
 8041068:	f000 f814 	bl	8041094 <HAL_InitTick>
 804106c:	4603      	mov	r3, r0
 804106e:	2b00      	cmp	r3, #0
 8041070:	d001      	beq.n	8041076 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8041072:	2301      	movs	r3, #1
 8041074:	e002      	b.n	804107c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8041076:	f7ff fdf9 	bl	8040c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 804107a:	2300      	movs	r3, #0
}
 804107c:	4618      	mov	r0, r3
 804107e:	3708      	adds	r7, #8
 8041080:	46bd      	mov	sp, r7
 8041082:	bd80      	pop	{r7, pc}
 8041084:	58024400 	.word	0x58024400
 8041088:	0804c328 	.word	0x0804c328
 804108c:	24000004 	.word	0x24000004
 8041090:	24000000 	.word	0x24000000

08041094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041094:	b580      	push	{r7, lr}
 8041096:	b082      	sub	sp, #8
 8041098:	af00      	add	r7, sp, #0
 804109a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 804109c:	4b15      	ldr	r3, [pc, #84]	@ (80410f4 <HAL_InitTick+0x60>)
 804109e:	781b      	ldrb	r3, [r3, #0]
 80410a0:	2b00      	cmp	r3, #0
 80410a2:	d101      	bne.n	80410a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80410a4:	2301      	movs	r3, #1
 80410a6:	e021      	b.n	80410ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80410a8:	4b13      	ldr	r3, [pc, #76]	@ (80410f8 <HAL_InitTick+0x64>)
 80410aa:	681a      	ldr	r2, [r3, #0]
 80410ac:	4b11      	ldr	r3, [pc, #68]	@ (80410f4 <HAL_InitTick+0x60>)
 80410ae:	781b      	ldrb	r3, [r3, #0]
 80410b0:	4619      	mov	r1, r3
 80410b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80410b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80410ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80410be:	4618      	mov	r0, r3
 80410c0:	f000 f971 	bl	80413a6 <HAL_SYSTICK_Config>
 80410c4:	4603      	mov	r3, r0
 80410c6:	2b00      	cmp	r3, #0
 80410c8:	d001      	beq.n	80410ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80410ca:	2301      	movs	r3, #1
 80410cc:	e00e      	b.n	80410ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80410ce:	687b      	ldr	r3, [r7, #4]
 80410d0:	2b0f      	cmp	r3, #15
 80410d2:	d80a      	bhi.n	80410ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80410d4:	2200      	movs	r2, #0
 80410d6:	6879      	ldr	r1, [r7, #4]
 80410d8:	f04f 30ff 	mov.w	r0, #4294967295
 80410dc:	f000 f93b 	bl	8041356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80410e0:	4a06      	ldr	r2, [pc, #24]	@ (80410fc <HAL_InitTick+0x68>)
 80410e2:	687b      	ldr	r3, [r7, #4]
 80410e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80410e6:	2300      	movs	r3, #0
 80410e8:	e000      	b.n	80410ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80410ea:	2301      	movs	r3, #1
}
 80410ec:	4618      	mov	r0, r3
 80410ee:	3708      	adds	r7, #8
 80410f0:	46bd      	mov	sp, r7
 80410f2:	bd80      	pop	{r7, pc}
 80410f4:	2400000c 	.word	0x2400000c
 80410f8:	24000000 	.word	0x24000000
 80410fc:	24000008 	.word	0x24000008

08041100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041100:	b480      	push	{r7}
 8041102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8041104:	4b06      	ldr	r3, [pc, #24]	@ (8041120 <HAL_IncTick+0x20>)
 8041106:	781b      	ldrb	r3, [r3, #0]
 8041108:	461a      	mov	r2, r3
 804110a:	4b06      	ldr	r3, [pc, #24]	@ (8041124 <HAL_IncTick+0x24>)
 804110c:	681b      	ldr	r3, [r3, #0]
 804110e:	4413      	add	r3, r2
 8041110:	4a04      	ldr	r2, [pc, #16]	@ (8041124 <HAL_IncTick+0x24>)
 8041112:	6013      	str	r3, [r2, #0]
}
 8041114:	bf00      	nop
 8041116:	46bd      	mov	sp, r7
 8041118:	f85d 7b04 	ldr.w	r7, [sp], #4
 804111c:	4770      	bx	lr
 804111e:	bf00      	nop
 8041120:	2400000c 	.word	0x2400000c
 8041124:	24000218 	.word	0x24000218

08041128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8041128:	b480      	push	{r7}
 804112a:	af00      	add	r7, sp, #0
  return uwTick;
 804112c:	4b03      	ldr	r3, [pc, #12]	@ (804113c <HAL_GetTick+0x14>)
 804112e:	681b      	ldr	r3, [r3, #0]
}
 8041130:	4618      	mov	r0, r3
 8041132:	46bd      	mov	sp, r7
 8041134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041138:	4770      	bx	lr
 804113a:	bf00      	nop
 804113c:	24000218 	.word	0x24000218

08041140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8041140:	b580      	push	{r7, lr}
 8041142:	b084      	sub	sp, #16
 8041144:	af00      	add	r7, sp, #0
 8041146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8041148:	f7ff ffee 	bl	8041128 <HAL_GetTick>
 804114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804114e:	687b      	ldr	r3, [r7, #4]
 8041150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8041152:	68fb      	ldr	r3, [r7, #12]
 8041154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041158:	d005      	beq.n	8041166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804115a:	4b0a      	ldr	r3, [pc, #40]	@ (8041184 <HAL_Delay+0x44>)
 804115c:	781b      	ldrb	r3, [r3, #0]
 804115e:	461a      	mov	r2, r3
 8041160:	68fb      	ldr	r3, [r7, #12]
 8041162:	4413      	add	r3, r2
 8041164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8041166:	bf00      	nop
 8041168:	f7ff ffde 	bl	8041128 <HAL_GetTick>
 804116c:	4602      	mov	r2, r0
 804116e:	68bb      	ldr	r3, [r7, #8]
 8041170:	1ad3      	subs	r3, r2, r3
 8041172:	68fa      	ldr	r2, [r7, #12]
 8041174:	429a      	cmp	r2, r3
 8041176:	d8f7      	bhi.n	8041168 <HAL_Delay+0x28>
  {
  }
}
 8041178:	bf00      	nop
 804117a:	bf00      	nop
 804117c:	3710      	adds	r7, #16
 804117e:	46bd      	mov	sp, r7
 8041180:	bd80      	pop	{r7, pc}
 8041182:	bf00      	nop
 8041184:	2400000c 	.word	0x2400000c

08041188 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8041188:	b480      	push	{r7}
 804118a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 804118c:	4b03      	ldr	r3, [pc, #12]	@ (804119c <HAL_GetREVID+0x14>)
 804118e:	681b      	ldr	r3, [r3, #0]
 8041190:	0c1b      	lsrs	r3, r3, #16
}
 8041192:	4618      	mov	r0, r3
 8041194:	46bd      	mov	sp, r7
 8041196:	f85d 7b04 	ldr.w	r7, [sp], #4
 804119a:	4770      	bx	lr
 804119c:	5c001000 	.word	0x5c001000

080411a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80411a0:	b480      	push	{r7}
 80411a2:	b085      	sub	sp, #20
 80411a4:	af00      	add	r7, sp, #0
 80411a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80411a8:	687b      	ldr	r3, [r7, #4]
 80411aa:	f003 0307 	and.w	r3, r3, #7
 80411ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80411b0:	4b0b      	ldr	r3, [pc, #44]	@ (80411e0 <__NVIC_SetPriorityGrouping+0x40>)
 80411b2:	68db      	ldr	r3, [r3, #12]
 80411b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80411b6:	68ba      	ldr	r2, [r7, #8]
 80411b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80411bc:	4013      	ands	r3, r2
 80411be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80411c0:	68fb      	ldr	r3, [r7, #12]
 80411c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80411c4:	68bb      	ldr	r3, [r7, #8]
 80411c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80411c8:	4b06      	ldr	r3, [pc, #24]	@ (80411e4 <__NVIC_SetPriorityGrouping+0x44>)
 80411ca:	4313      	orrs	r3, r2
 80411cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80411ce:	4a04      	ldr	r2, [pc, #16]	@ (80411e0 <__NVIC_SetPriorityGrouping+0x40>)
 80411d0:	68bb      	ldr	r3, [r7, #8]
 80411d2:	60d3      	str	r3, [r2, #12]
}
 80411d4:	bf00      	nop
 80411d6:	3714      	adds	r7, #20
 80411d8:	46bd      	mov	sp, r7
 80411da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411de:	4770      	bx	lr
 80411e0:	e000ed00 	.word	0xe000ed00
 80411e4:	05fa0000 	.word	0x05fa0000

080411e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80411e8:	b480      	push	{r7}
 80411ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80411ec:	4b04      	ldr	r3, [pc, #16]	@ (8041200 <__NVIC_GetPriorityGrouping+0x18>)
 80411ee:	68db      	ldr	r3, [r3, #12]
 80411f0:	0a1b      	lsrs	r3, r3, #8
 80411f2:	f003 0307 	and.w	r3, r3, #7
}
 80411f6:	4618      	mov	r0, r3
 80411f8:	46bd      	mov	sp, r7
 80411fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411fe:	4770      	bx	lr
 8041200:	e000ed00 	.word	0xe000ed00

08041204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8041204:	b480      	push	{r7}
 8041206:	b083      	sub	sp, #12
 8041208:	af00      	add	r7, sp, #0
 804120a:	4603      	mov	r3, r0
 804120c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 804120e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041212:	2b00      	cmp	r3, #0
 8041214:	db0b      	blt.n	804122e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8041216:	88fb      	ldrh	r3, [r7, #6]
 8041218:	f003 021f 	and.w	r2, r3, #31
 804121c:	4907      	ldr	r1, [pc, #28]	@ (804123c <__NVIC_EnableIRQ+0x38>)
 804121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041222:	095b      	lsrs	r3, r3, #5
 8041224:	2001      	movs	r0, #1
 8041226:	fa00 f202 	lsl.w	r2, r0, r2
 804122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 804122e:	bf00      	nop
 8041230:	370c      	adds	r7, #12
 8041232:	46bd      	mov	sp, r7
 8041234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041238:	4770      	bx	lr
 804123a:	bf00      	nop
 804123c:	e000e100 	.word	0xe000e100

08041240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041240:	b480      	push	{r7}
 8041242:	b083      	sub	sp, #12
 8041244:	af00      	add	r7, sp, #0
 8041246:	4603      	mov	r3, r0
 8041248:	6039      	str	r1, [r7, #0]
 804124a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 804124c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041250:	2b00      	cmp	r3, #0
 8041252:	db0a      	blt.n	804126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041254:	683b      	ldr	r3, [r7, #0]
 8041256:	b2da      	uxtb	r2, r3
 8041258:	490c      	ldr	r1, [pc, #48]	@ (804128c <__NVIC_SetPriority+0x4c>)
 804125a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804125e:	0112      	lsls	r2, r2, #4
 8041260:	b2d2      	uxtb	r2, r2
 8041262:	440b      	add	r3, r1
 8041264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041268:	e00a      	b.n	8041280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804126a:	683b      	ldr	r3, [r7, #0]
 804126c:	b2da      	uxtb	r2, r3
 804126e:	4908      	ldr	r1, [pc, #32]	@ (8041290 <__NVIC_SetPriority+0x50>)
 8041270:	88fb      	ldrh	r3, [r7, #6]
 8041272:	f003 030f 	and.w	r3, r3, #15
 8041276:	3b04      	subs	r3, #4
 8041278:	0112      	lsls	r2, r2, #4
 804127a:	b2d2      	uxtb	r2, r2
 804127c:	440b      	add	r3, r1
 804127e:	761a      	strb	r2, [r3, #24]
}
 8041280:	bf00      	nop
 8041282:	370c      	adds	r7, #12
 8041284:	46bd      	mov	sp, r7
 8041286:	f85d 7b04 	ldr.w	r7, [sp], #4
 804128a:	4770      	bx	lr
 804128c:	e000e100 	.word	0xe000e100
 8041290:	e000ed00 	.word	0xe000ed00

08041294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041294:	b480      	push	{r7}
 8041296:	b089      	sub	sp, #36	@ 0x24
 8041298:	af00      	add	r7, sp, #0
 804129a:	60f8      	str	r0, [r7, #12]
 804129c:	60b9      	str	r1, [r7, #8]
 804129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80412a0:	68fb      	ldr	r3, [r7, #12]
 80412a2:	f003 0307 	and.w	r3, r3, #7
 80412a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80412a8:	69fb      	ldr	r3, [r7, #28]
 80412aa:	f1c3 0307 	rsb	r3, r3, #7
 80412ae:	2b04      	cmp	r3, #4
 80412b0:	bf28      	it	cs
 80412b2:	2304      	movcs	r3, #4
 80412b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80412b6:	69fb      	ldr	r3, [r7, #28]
 80412b8:	3304      	adds	r3, #4
 80412ba:	2b06      	cmp	r3, #6
 80412bc:	d902      	bls.n	80412c4 <NVIC_EncodePriority+0x30>
 80412be:	69fb      	ldr	r3, [r7, #28]
 80412c0:	3b03      	subs	r3, #3
 80412c2:	e000      	b.n	80412c6 <NVIC_EncodePriority+0x32>
 80412c4:	2300      	movs	r3, #0
 80412c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80412c8:	f04f 32ff 	mov.w	r2, #4294967295
 80412cc:	69bb      	ldr	r3, [r7, #24]
 80412ce:	fa02 f303 	lsl.w	r3, r2, r3
 80412d2:	43da      	mvns	r2, r3
 80412d4:	68bb      	ldr	r3, [r7, #8]
 80412d6:	401a      	ands	r2, r3
 80412d8:	697b      	ldr	r3, [r7, #20]
 80412da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80412dc:	f04f 31ff 	mov.w	r1, #4294967295
 80412e0:	697b      	ldr	r3, [r7, #20]
 80412e2:	fa01 f303 	lsl.w	r3, r1, r3
 80412e6:	43d9      	mvns	r1, r3
 80412e8:	687b      	ldr	r3, [r7, #4]
 80412ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80412ec:	4313      	orrs	r3, r2
         );
}
 80412ee:	4618      	mov	r0, r3
 80412f0:	3724      	adds	r7, #36	@ 0x24
 80412f2:	46bd      	mov	sp, r7
 80412f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412f8:	4770      	bx	lr
	...

080412fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80412fc:	b580      	push	{r7, lr}
 80412fe:	b082      	sub	sp, #8
 8041300:	af00      	add	r7, sp, #0
 8041302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8041304:	687b      	ldr	r3, [r7, #4]
 8041306:	3b01      	subs	r3, #1
 8041308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 804130c:	d301      	bcc.n	8041312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 804130e:	2301      	movs	r3, #1
 8041310:	e00f      	b.n	8041332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8041312:	4a0a      	ldr	r2, [pc, #40]	@ (804133c <SysTick_Config+0x40>)
 8041314:	687b      	ldr	r3, [r7, #4]
 8041316:	3b01      	subs	r3, #1
 8041318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804131a:	210f      	movs	r1, #15
 804131c:	f04f 30ff 	mov.w	r0, #4294967295
 8041320:	f7ff ff8e 	bl	8041240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8041324:	4b05      	ldr	r3, [pc, #20]	@ (804133c <SysTick_Config+0x40>)
 8041326:	2200      	movs	r2, #0
 8041328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804132a:	4b04      	ldr	r3, [pc, #16]	@ (804133c <SysTick_Config+0x40>)
 804132c:	2207      	movs	r2, #7
 804132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8041330:	2300      	movs	r3, #0
}
 8041332:	4618      	mov	r0, r3
 8041334:	3708      	adds	r7, #8
 8041336:	46bd      	mov	sp, r7
 8041338:	bd80      	pop	{r7, pc}
 804133a:	bf00      	nop
 804133c:	e000e010 	.word	0xe000e010

08041340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041340:	b580      	push	{r7, lr}
 8041342:	b082      	sub	sp, #8
 8041344:	af00      	add	r7, sp, #0
 8041346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041348:	6878      	ldr	r0, [r7, #4]
 804134a:	f7ff ff29 	bl	80411a0 <__NVIC_SetPriorityGrouping>
}
 804134e:	bf00      	nop
 8041350:	3708      	adds	r7, #8
 8041352:	46bd      	mov	sp, r7
 8041354:	bd80      	pop	{r7, pc}

08041356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8041356:	b580      	push	{r7, lr}
 8041358:	b086      	sub	sp, #24
 804135a:	af00      	add	r7, sp, #0
 804135c:	4603      	mov	r3, r0
 804135e:	60b9      	str	r1, [r7, #8]
 8041360:	607a      	str	r2, [r7, #4]
 8041362:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041364:	f7ff ff40 	bl	80411e8 <__NVIC_GetPriorityGrouping>
 8041368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804136a:	687a      	ldr	r2, [r7, #4]
 804136c:	68b9      	ldr	r1, [r7, #8]
 804136e:	6978      	ldr	r0, [r7, #20]
 8041370:	f7ff ff90 	bl	8041294 <NVIC_EncodePriority>
 8041374:	4602      	mov	r2, r0
 8041376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 804137a:	4611      	mov	r1, r2
 804137c:	4618      	mov	r0, r3
 804137e:	f7ff ff5f 	bl	8041240 <__NVIC_SetPriority>
}
 8041382:	bf00      	nop
 8041384:	3718      	adds	r7, #24
 8041386:	46bd      	mov	sp, r7
 8041388:	bd80      	pop	{r7, pc}

0804138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804138a:	b580      	push	{r7, lr}
 804138c:	b082      	sub	sp, #8
 804138e:	af00      	add	r7, sp, #0
 8041390:	4603      	mov	r3, r0
 8041392:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041398:	4618      	mov	r0, r3
 804139a:	f7ff ff33 	bl	8041204 <__NVIC_EnableIRQ>
}
 804139e:	bf00      	nop
 80413a0:	3708      	adds	r7, #8
 80413a2:	46bd      	mov	sp, r7
 80413a4:	bd80      	pop	{r7, pc}

080413a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80413a6:	b580      	push	{r7, lr}
 80413a8:	b082      	sub	sp, #8
 80413aa:	af00      	add	r7, sp, #0
 80413ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80413ae:	6878      	ldr	r0, [r7, #4]
 80413b0:	f7ff ffa4 	bl	80412fc <SysTick_Config>
 80413b4:	4603      	mov	r3, r0
}
 80413b6:	4618      	mov	r0, r3
 80413b8:	3708      	adds	r7, #8
 80413ba:	46bd      	mov	sp, r7
 80413bc:	bd80      	pop	{r7, pc}
	...

080413c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80413c0:	b580      	push	{r7, lr}
 80413c2:	b082      	sub	sp, #8
 80413c4:	af00      	add	r7, sp, #0
 80413c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80413c8:	687b      	ldr	r3, [r7, #4]
 80413ca:	2b00      	cmp	r3, #0
 80413cc:	d101      	bne.n	80413d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80413ce:	2301      	movs	r3, #1
 80413d0:	e054      	b.n	804147c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80413d2:	687b      	ldr	r3, [r7, #4]
 80413d4:	7f5b      	ldrb	r3, [r3, #29]
 80413d6:	b2db      	uxtb	r3, r3
 80413d8:	2b00      	cmp	r3, #0
 80413da:	d105      	bne.n	80413e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80413dc:	687b      	ldr	r3, [r7, #4]
 80413de:	2200      	movs	r2, #0
 80413e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80413e2:	6878      	ldr	r0, [r7, #4]
 80413e4:	f7ff fc5c 	bl	8040ca0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80413e8:	687b      	ldr	r3, [r7, #4]
 80413ea:	2202      	movs	r2, #2
 80413ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80413ee:	687b      	ldr	r3, [r7, #4]
 80413f0:	791b      	ldrb	r3, [r3, #4]
 80413f2:	2b00      	cmp	r3, #0
 80413f4:	d10c      	bne.n	8041410 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80413f6:	687b      	ldr	r3, [r7, #4]
 80413f8:	681b      	ldr	r3, [r3, #0]
 80413fa:	4a22      	ldr	r2, [pc, #136]	@ (8041484 <HAL_CRC_Init+0xc4>)
 80413fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80413fe:	687b      	ldr	r3, [r7, #4]
 8041400:	681b      	ldr	r3, [r3, #0]
 8041402:	689a      	ldr	r2, [r3, #8]
 8041404:	687b      	ldr	r3, [r7, #4]
 8041406:	681b      	ldr	r3, [r3, #0]
 8041408:	f022 0218 	bic.w	r2, r2, #24
 804140c:	609a      	str	r2, [r3, #8]
 804140e:	e00c      	b.n	804142a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8041410:	687b      	ldr	r3, [r7, #4]
 8041412:	6899      	ldr	r1, [r3, #8]
 8041414:	687b      	ldr	r3, [r7, #4]
 8041416:	68db      	ldr	r3, [r3, #12]
 8041418:	461a      	mov	r2, r3
 804141a:	6878      	ldr	r0, [r7, #4]
 804141c:	f000 f834 	bl	8041488 <HAL_CRCEx_Polynomial_Set>
 8041420:	4603      	mov	r3, r0
 8041422:	2b00      	cmp	r3, #0
 8041424:	d001      	beq.n	804142a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8041426:	2301      	movs	r3, #1
 8041428:	e028      	b.n	804147c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 804142a:	687b      	ldr	r3, [r7, #4]
 804142c:	795b      	ldrb	r3, [r3, #5]
 804142e:	2b00      	cmp	r3, #0
 8041430:	d105      	bne.n	804143e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8041432:	687b      	ldr	r3, [r7, #4]
 8041434:	681b      	ldr	r3, [r3, #0]
 8041436:	f04f 32ff 	mov.w	r2, #4294967295
 804143a:	611a      	str	r2, [r3, #16]
 804143c:	e004      	b.n	8041448 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 804143e:	687b      	ldr	r3, [r7, #4]
 8041440:	681b      	ldr	r3, [r3, #0]
 8041442:	687a      	ldr	r2, [r7, #4]
 8041444:	6912      	ldr	r2, [r2, #16]
 8041446:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8041448:	687b      	ldr	r3, [r7, #4]
 804144a:	681b      	ldr	r3, [r3, #0]
 804144c:	689b      	ldr	r3, [r3, #8]
 804144e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8041452:	687b      	ldr	r3, [r7, #4]
 8041454:	695a      	ldr	r2, [r3, #20]
 8041456:	687b      	ldr	r3, [r7, #4]
 8041458:	681b      	ldr	r3, [r3, #0]
 804145a:	430a      	orrs	r2, r1
 804145c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 804145e:	687b      	ldr	r3, [r7, #4]
 8041460:	681b      	ldr	r3, [r3, #0]
 8041462:	689b      	ldr	r3, [r3, #8]
 8041464:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8041468:	687b      	ldr	r3, [r7, #4]
 804146a:	699a      	ldr	r2, [r3, #24]
 804146c:	687b      	ldr	r3, [r7, #4]
 804146e:	681b      	ldr	r3, [r3, #0]
 8041470:	430a      	orrs	r2, r1
 8041472:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8041474:	687b      	ldr	r3, [r7, #4]
 8041476:	2201      	movs	r2, #1
 8041478:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 804147a:	2300      	movs	r3, #0
}
 804147c:	4618      	mov	r0, r3
 804147e:	3708      	adds	r7, #8
 8041480:	46bd      	mov	sp, r7
 8041482:	bd80      	pop	{r7, pc}
 8041484:	04c11db7 	.word	0x04c11db7

08041488 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8041488:	b480      	push	{r7}
 804148a:	b087      	sub	sp, #28
 804148c:	af00      	add	r7, sp, #0
 804148e:	60f8      	str	r0, [r7, #12]
 8041490:	60b9      	str	r1, [r7, #8]
 8041492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041494:	2300      	movs	r3, #0
 8041496:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8041498:	231f      	movs	r3, #31
 804149a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 804149c:	68bb      	ldr	r3, [r7, #8]
 804149e:	f003 0301 	and.w	r3, r3, #1
 80414a2:	2b00      	cmp	r3, #0
 80414a4:	d102      	bne.n	80414ac <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80414a6:	2301      	movs	r3, #1
 80414a8:	75fb      	strb	r3, [r7, #23]
 80414aa:	e063      	b.n	8041574 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80414ac:	bf00      	nop
 80414ae:	693b      	ldr	r3, [r7, #16]
 80414b0:	1e5a      	subs	r2, r3, #1
 80414b2:	613a      	str	r2, [r7, #16]
 80414b4:	2b00      	cmp	r3, #0
 80414b6:	d009      	beq.n	80414cc <HAL_CRCEx_Polynomial_Set+0x44>
 80414b8:	693b      	ldr	r3, [r7, #16]
 80414ba:	f003 031f 	and.w	r3, r3, #31
 80414be:	68ba      	ldr	r2, [r7, #8]
 80414c0:	fa22 f303 	lsr.w	r3, r2, r3
 80414c4:	f003 0301 	and.w	r3, r3, #1
 80414c8:	2b00      	cmp	r3, #0
 80414ca:	d0f0      	beq.n	80414ae <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80414cc:	687b      	ldr	r3, [r7, #4]
 80414ce:	2b18      	cmp	r3, #24
 80414d0:	d846      	bhi.n	8041560 <HAL_CRCEx_Polynomial_Set+0xd8>
 80414d2:	a201      	add	r2, pc, #4	@ (adr r2, 80414d8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80414d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80414d8:	08041567 	.word	0x08041567
 80414dc:	08041561 	.word	0x08041561
 80414e0:	08041561 	.word	0x08041561
 80414e4:	08041561 	.word	0x08041561
 80414e8:	08041561 	.word	0x08041561
 80414ec:	08041561 	.word	0x08041561
 80414f0:	08041561 	.word	0x08041561
 80414f4:	08041561 	.word	0x08041561
 80414f8:	08041555 	.word	0x08041555
 80414fc:	08041561 	.word	0x08041561
 8041500:	08041561 	.word	0x08041561
 8041504:	08041561 	.word	0x08041561
 8041508:	08041561 	.word	0x08041561
 804150c:	08041561 	.word	0x08041561
 8041510:	08041561 	.word	0x08041561
 8041514:	08041561 	.word	0x08041561
 8041518:	08041549 	.word	0x08041549
 804151c:	08041561 	.word	0x08041561
 8041520:	08041561 	.word	0x08041561
 8041524:	08041561 	.word	0x08041561
 8041528:	08041561 	.word	0x08041561
 804152c:	08041561 	.word	0x08041561
 8041530:	08041561 	.word	0x08041561
 8041534:	08041561 	.word	0x08041561
 8041538:	0804153d 	.word	0x0804153d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 804153c:	693b      	ldr	r3, [r7, #16]
 804153e:	2b06      	cmp	r3, #6
 8041540:	d913      	bls.n	804156a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8041542:	2301      	movs	r3, #1
 8041544:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8041546:	e010      	b.n	804156a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8041548:	693b      	ldr	r3, [r7, #16]
 804154a:	2b07      	cmp	r3, #7
 804154c:	d90f      	bls.n	804156e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 804154e:	2301      	movs	r3, #1
 8041550:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8041552:	e00c      	b.n	804156e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8041554:	693b      	ldr	r3, [r7, #16]
 8041556:	2b0f      	cmp	r3, #15
 8041558:	d90b      	bls.n	8041572 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 804155a:	2301      	movs	r3, #1
 804155c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 804155e:	e008      	b.n	8041572 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8041560:	2301      	movs	r3, #1
 8041562:	75fb      	strb	r3, [r7, #23]
        break;
 8041564:	e006      	b.n	8041574 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041566:	bf00      	nop
 8041568:	e004      	b.n	8041574 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804156a:	bf00      	nop
 804156c:	e002      	b.n	8041574 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 804156e:	bf00      	nop
 8041570:	e000      	b.n	8041574 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8041572:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8041574:	7dfb      	ldrb	r3, [r7, #23]
 8041576:	2b00      	cmp	r3, #0
 8041578:	d10d      	bne.n	8041596 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 804157a:	68fb      	ldr	r3, [r7, #12]
 804157c:	681b      	ldr	r3, [r3, #0]
 804157e:	68ba      	ldr	r2, [r7, #8]
 8041580:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8041582:	68fb      	ldr	r3, [r7, #12]
 8041584:	681b      	ldr	r3, [r3, #0]
 8041586:	689b      	ldr	r3, [r3, #8]
 8041588:	f023 0118 	bic.w	r1, r3, #24
 804158c:	68fb      	ldr	r3, [r7, #12]
 804158e:	681b      	ldr	r3, [r3, #0]
 8041590:	687a      	ldr	r2, [r7, #4]
 8041592:	430a      	orrs	r2, r1
 8041594:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8041596:	7dfb      	ldrb	r3, [r7, #23]
}
 8041598:	4618      	mov	r0, r3
 804159a:	371c      	adds	r7, #28
 804159c:	46bd      	mov	sp, r7
 804159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415a2:	4770      	bx	lr

080415a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80415a4:	b480      	push	{r7}
 80415a6:	b089      	sub	sp, #36	@ 0x24
 80415a8:	af00      	add	r7, sp, #0
 80415aa:	6078      	str	r0, [r7, #4]
 80415ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80415ae:	2300      	movs	r3, #0
 80415b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80415b2:	4b89      	ldr	r3, [pc, #548]	@ (80417d8 <HAL_GPIO_Init+0x234>)
 80415b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80415b6:	e194      	b.n	80418e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80415b8:	683b      	ldr	r3, [r7, #0]
 80415ba:	681a      	ldr	r2, [r3, #0]
 80415bc:	2101      	movs	r1, #1
 80415be:	69fb      	ldr	r3, [r7, #28]
 80415c0:	fa01 f303 	lsl.w	r3, r1, r3
 80415c4:	4013      	ands	r3, r2
 80415c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80415c8:	693b      	ldr	r3, [r7, #16]
 80415ca:	2b00      	cmp	r3, #0
 80415cc:	f000 8186 	beq.w	80418dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80415d0:	683b      	ldr	r3, [r7, #0]
 80415d2:	685b      	ldr	r3, [r3, #4]
 80415d4:	f003 0303 	and.w	r3, r3, #3
 80415d8:	2b01      	cmp	r3, #1
 80415da:	d005      	beq.n	80415e8 <HAL_GPIO_Init+0x44>
 80415dc:	683b      	ldr	r3, [r7, #0]
 80415de:	685b      	ldr	r3, [r3, #4]
 80415e0:	f003 0303 	and.w	r3, r3, #3
 80415e4:	2b02      	cmp	r3, #2
 80415e6:	d130      	bne.n	804164a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	689b      	ldr	r3, [r3, #8]
 80415ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80415ee:	69fb      	ldr	r3, [r7, #28]
 80415f0:	005b      	lsls	r3, r3, #1
 80415f2:	2203      	movs	r2, #3
 80415f4:	fa02 f303 	lsl.w	r3, r2, r3
 80415f8:	43db      	mvns	r3, r3
 80415fa:	69ba      	ldr	r2, [r7, #24]
 80415fc:	4013      	ands	r3, r2
 80415fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041600:	683b      	ldr	r3, [r7, #0]
 8041602:	68da      	ldr	r2, [r3, #12]
 8041604:	69fb      	ldr	r3, [r7, #28]
 8041606:	005b      	lsls	r3, r3, #1
 8041608:	fa02 f303 	lsl.w	r3, r2, r3
 804160c:	69ba      	ldr	r2, [r7, #24]
 804160e:	4313      	orrs	r3, r2
 8041610:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041612:	687b      	ldr	r3, [r7, #4]
 8041614:	69ba      	ldr	r2, [r7, #24]
 8041616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041618:	687b      	ldr	r3, [r7, #4]
 804161a:	685b      	ldr	r3, [r3, #4]
 804161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804161e:	2201      	movs	r2, #1
 8041620:	69fb      	ldr	r3, [r7, #28]
 8041622:	fa02 f303 	lsl.w	r3, r2, r3
 8041626:	43db      	mvns	r3, r3
 8041628:	69ba      	ldr	r2, [r7, #24]
 804162a:	4013      	ands	r3, r2
 804162c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 804162e:	683b      	ldr	r3, [r7, #0]
 8041630:	685b      	ldr	r3, [r3, #4]
 8041632:	091b      	lsrs	r3, r3, #4
 8041634:	f003 0201 	and.w	r2, r3, #1
 8041638:	69fb      	ldr	r3, [r7, #28]
 804163a:	fa02 f303 	lsl.w	r3, r2, r3
 804163e:	69ba      	ldr	r2, [r7, #24]
 8041640:	4313      	orrs	r3, r2
 8041642:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041644:	687b      	ldr	r3, [r7, #4]
 8041646:	69ba      	ldr	r2, [r7, #24]
 8041648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 804164a:	683b      	ldr	r3, [r7, #0]
 804164c:	685b      	ldr	r3, [r3, #4]
 804164e:	f003 0303 	and.w	r3, r3, #3
 8041652:	2b03      	cmp	r3, #3
 8041654:	d017      	beq.n	8041686 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041656:	687b      	ldr	r3, [r7, #4]
 8041658:	68db      	ldr	r3, [r3, #12]
 804165a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804165c:	69fb      	ldr	r3, [r7, #28]
 804165e:	005b      	lsls	r3, r3, #1
 8041660:	2203      	movs	r2, #3
 8041662:	fa02 f303 	lsl.w	r3, r2, r3
 8041666:	43db      	mvns	r3, r3
 8041668:	69ba      	ldr	r2, [r7, #24]
 804166a:	4013      	ands	r3, r2
 804166c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 804166e:	683b      	ldr	r3, [r7, #0]
 8041670:	689a      	ldr	r2, [r3, #8]
 8041672:	69fb      	ldr	r3, [r7, #28]
 8041674:	005b      	lsls	r3, r3, #1
 8041676:	fa02 f303 	lsl.w	r3, r2, r3
 804167a:	69ba      	ldr	r2, [r7, #24]
 804167c:	4313      	orrs	r3, r2
 804167e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	69ba      	ldr	r2, [r7, #24]
 8041684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041686:	683b      	ldr	r3, [r7, #0]
 8041688:	685b      	ldr	r3, [r3, #4]
 804168a:	f003 0303 	and.w	r3, r3, #3
 804168e:	2b02      	cmp	r3, #2
 8041690:	d123      	bne.n	80416da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041692:	69fb      	ldr	r3, [r7, #28]
 8041694:	08da      	lsrs	r2, r3, #3
 8041696:	687b      	ldr	r3, [r7, #4]
 8041698:	3208      	adds	r2, #8
 804169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80416a0:	69fb      	ldr	r3, [r7, #28]
 80416a2:	f003 0307 	and.w	r3, r3, #7
 80416a6:	009b      	lsls	r3, r3, #2
 80416a8:	220f      	movs	r2, #15
 80416aa:	fa02 f303 	lsl.w	r3, r2, r3
 80416ae:	43db      	mvns	r3, r3
 80416b0:	69ba      	ldr	r2, [r7, #24]
 80416b2:	4013      	ands	r3, r2
 80416b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80416b6:	683b      	ldr	r3, [r7, #0]
 80416b8:	691a      	ldr	r2, [r3, #16]
 80416ba:	69fb      	ldr	r3, [r7, #28]
 80416bc:	f003 0307 	and.w	r3, r3, #7
 80416c0:	009b      	lsls	r3, r3, #2
 80416c2:	fa02 f303 	lsl.w	r3, r2, r3
 80416c6:	69ba      	ldr	r2, [r7, #24]
 80416c8:	4313      	orrs	r3, r2
 80416ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80416cc:	69fb      	ldr	r3, [r7, #28]
 80416ce:	08da      	lsrs	r2, r3, #3
 80416d0:	687b      	ldr	r3, [r7, #4]
 80416d2:	3208      	adds	r2, #8
 80416d4:	69b9      	ldr	r1, [r7, #24]
 80416d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80416da:	687b      	ldr	r3, [r7, #4]
 80416dc:	681b      	ldr	r3, [r3, #0]
 80416de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80416e0:	69fb      	ldr	r3, [r7, #28]
 80416e2:	005b      	lsls	r3, r3, #1
 80416e4:	2203      	movs	r2, #3
 80416e6:	fa02 f303 	lsl.w	r3, r2, r3
 80416ea:	43db      	mvns	r3, r3
 80416ec:	69ba      	ldr	r2, [r7, #24]
 80416ee:	4013      	ands	r3, r2
 80416f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80416f2:	683b      	ldr	r3, [r7, #0]
 80416f4:	685b      	ldr	r3, [r3, #4]
 80416f6:	f003 0203 	and.w	r2, r3, #3
 80416fa:	69fb      	ldr	r3, [r7, #28]
 80416fc:	005b      	lsls	r3, r3, #1
 80416fe:	fa02 f303 	lsl.w	r3, r2, r3
 8041702:	69ba      	ldr	r2, [r7, #24]
 8041704:	4313      	orrs	r3, r2
 8041706:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041708:	687b      	ldr	r3, [r7, #4]
 804170a:	69ba      	ldr	r2, [r7, #24]
 804170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 804170e:	683b      	ldr	r3, [r7, #0]
 8041710:	685b      	ldr	r3, [r3, #4]
 8041712:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8041716:	2b00      	cmp	r3, #0
 8041718:	f000 80e0 	beq.w	80418dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804171c:	4b2f      	ldr	r3, [pc, #188]	@ (80417dc <HAL_GPIO_Init+0x238>)
 804171e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8041722:	4a2e      	ldr	r2, [pc, #184]	@ (80417dc <HAL_GPIO_Init+0x238>)
 8041724:	f043 0302 	orr.w	r3, r3, #2
 8041728:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 804172c:	4b2b      	ldr	r3, [pc, #172]	@ (80417dc <HAL_GPIO_Init+0x238>)
 804172e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8041732:	f003 0302 	and.w	r3, r3, #2
 8041736:	60fb      	str	r3, [r7, #12]
 8041738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 804173a:	4a29      	ldr	r2, [pc, #164]	@ (80417e0 <HAL_GPIO_Init+0x23c>)
 804173c:	69fb      	ldr	r3, [r7, #28]
 804173e:	089b      	lsrs	r3, r3, #2
 8041740:	3302      	adds	r3, #2
 8041742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8041748:	69fb      	ldr	r3, [r7, #28]
 804174a:	f003 0303 	and.w	r3, r3, #3
 804174e:	009b      	lsls	r3, r3, #2
 8041750:	220f      	movs	r2, #15
 8041752:	fa02 f303 	lsl.w	r3, r2, r3
 8041756:	43db      	mvns	r3, r3
 8041758:	69ba      	ldr	r2, [r7, #24]
 804175a:	4013      	ands	r3, r2
 804175c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 804175e:	687b      	ldr	r3, [r7, #4]
 8041760:	4a20      	ldr	r2, [pc, #128]	@ (80417e4 <HAL_GPIO_Init+0x240>)
 8041762:	4293      	cmp	r3, r2
 8041764:	d052      	beq.n	804180c <HAL_GPIO_Init+0x268>
 8041766:	687b      	ldr	r3, [r7, #4]
 8041768:	4a1f      	ldr	r2, [pc, #124]	@ (80417e8 <HAL_GPIO_Init+0x244>)
 804176a:	4293      	cmp	r3, r2
 804176c:	d031      	beq.n	80417d2 <HAL_GPIO_Init+0x22e>
 804176e:	687b      	ldr	r3, [r7, #4]
 8041770:	4a1e      	ldr	r2, [pc, #120]	@ (80417ec <HAL_GPIO_Init+0x248>)
 8041772:	4293      	cmp	r3, r2
 8041774:	d02b      	beq.n	80417ce <HAL_GPIO_Init+0x22a>
 8041776:	687b      	ldr	r3, [r7, #4]
 8041778:	4a1d      	ldr	r2, [pc, #116]	@ (80417f0 <HAL_GPIO_Init+0x24c>)
 804177a:	4293      	cmp	r3, r2
 804177c:	d025      	beq.n	80417ca <HAL_GPIO_Init+0x226>
 804177e:	687b      	ldr	r3, [r7, #4]
 8041780:	4a1c      	ldr	r2, [pc, #112]	@ (80417f4 <HAL_GPIO_Init+0x250>)
 8041782:	4293      	cmp	r3, r2
 8041784:	d01f      	beq.n	80417c6 <HAL_GPIO_Init+0x222>
 8041786:	687b      	ldr	r3, [r7, #4]
 8041788:	4a1b      	ldr	r2, [pc, #108]	@ (80417f8 <HAL_GPIO_Init+0x254>)
 804178a:	4293      	cmp	r3, r2
 804178c:	d019      	beq.n	80417c2 <HAL_GPIO_Init+0x21e>
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	4a1a      	ldr	r2, [pc, #104]	@ (80417fc <HAL_GPIO_Init+0x258>)
 8041792:	4293      	cmp	r3, r2
 8041794:	d013      	beq.n	80417be <HAL_GPIO_Init+0x21a>
 8041796:	687b      	ldr	r3, [r7, #4]
 8041798:	4a19      	ldr	r2, [pc, #100]	@ (8041800 <HAL_GPIO_Init+0x25c>)
 804179a:	4293      	cmp	r3, r2
 804179c:	d00d      	beq.n	80417ba <HAL_GPIO_Init+0x216>
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	4a18      	ldr	r2, [pc, #96]	@ (8041804 <HAL_GPIO_Init+0x260>)
 80417a2:	4293      	cmp	r3, r2
 80417a4:	d007      	beq.n	80417b6 <HAL_GPIO_Init+0x212>
 80417a6:	687b      	ldr	r3, [r7, #4]
 80417a8:	4a17      	ldr	r2, [pc, #92]	@ (8041808 <HAL_GPIO_Init+0x264>)
 80417aa:	4293      	cmp	r3, r2
 80417ac:	d101      	bne.n	80417b2 <HAL_GPIO_Init+0x20e>
 80417ae:	2309      	movs	r3, #9
 80417b0:	e02d      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417b2:	230a      	movs	r3, #10
 80417b4:	e02b      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417b6:	2308      	movs	r3, #8
 80417b8:	e029      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417ba:	2307      	movs	r3, #7
 80417bc:	e027      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417be:	2306      	movs	r3, #6
 80417c0:	e025      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417c2:	2305      	movs	r3, #5
 80417c4:	e023      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417c6:	2304      	movs	r3, #4
 80417c8:	e021      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417ca:	2303      	movs	r3, #3
 80417cc:	e01f      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417ce:	2302      	movs	r3, #2
 80417d0:	e01d      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417d2:	2301      	movs	r3, #1
 80417d4:	e01b      	b.n	804180e <HAL_GPIO_Init+0x26a>
 80417d6:	bf00      	nop
 80417d8:	58000080 	.word	0x58000080
 80417dc:	58024400 	.word	0x58024400
 80417e0:	58000400 	.word	0x58000400
 80417e4:	58020000 	.word	0x58020000
 80417e8:	58020400 	.word	0x58020400
 80417ec:	58020800 	.word	0x58020800
 80417f0:	58020c00 	.word	0x58020c00
 80417f4:	58021000 	.word	0x58021000
 80417f8:	58021400 	.word	0x58021400
 80417fc:	58021800 	.word	0x58021800
 8041800:	58021c00 	.word	0x58021c00
 8041804:	58022000 	.word	0x58022000
 8041808:	58022400 	.word	0x58022400
 804180c:	2300      	movs	r3, #0
 804180e:	69fa      	ldr	r2, [r7, #28]
 8041810:	f002 0203 	and.w	r2, r2, #3
 8041814:	0092      	lsls	r2, r2, #2
 8041816:	4093      	lsls	r3, r2
 8041818:	69ba      	ldr	r2, [r7, #24]
 804181a:	4313      	orrs	r3, r2
 804181c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 804181e:	4938      	ldr	r1, [pc, #224]	@ (8041900 <HAL_GPIO_Init+0x35c>)
 8041820:	69fb      	ldr	r3, [r7, #28]
 8041822:	089b      	lsrs	r3, r3, #2
 8041824:	3302      	adds	r3, #2
 8041826:	69ba      	ldr	r2, [r7, #24]
 8041828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 804182c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8041830:	681b      	ldr	r3, [r3, #0]
 8041832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041834:	693b      	ldr	r3, [r7, #16]
 8041836:	43db      	mvns	r3, r3
 8041838:	69ba      	ldr	r2, [r7, #24]
 804183a:	4013      	ands	r3, r2
 804183c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 804183e:	683b      	ldr	r3, [r7, #0]
 8041840:	685b      	ldr	r3, [r3, #4]
 8041842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8041846:	2b00      	cmp	r3, #0
 8041848:	d003      	beq.n	8041852 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 804184a:	69ba      	ldr	r2, [r7, #24]
 804184c:	693b      	ldr	r3, [r7, #16]
 804184e:	4313      	orrs	r3, r2
 8041850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8041852:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041856:	69bb      	ldr	r3, [r7, #24]
 8041858:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 804185a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 804185e:	685b      	ldr	r3, [r3, #4]
 8041860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041862:	693b      	ldr	r3, [r7, #16]
 8041864:	43db      	mvns	r3, r3
 8041866:	69ba      	ldr	r2, [r7, #24]
 8041868:	4013      	ands	r3, r2
 804186a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 804186c:	683b      	ldr	r3, [r7, #0]
 804186e:	685b      	ldr	r3, [r3, #4]
 8041870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8041874:	2b00      	cmp	r3, #0
 8041876:	d003      	beq.n	8041880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041878:	69ba      	ldr	r2, [r7, #24]
 804187a:	693b      	ldr	r3, [r7, #16]
 804187c:	4313      	orrs	r3, r2
 804187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8041884:	69bb      	ldr	r3, [r7, #24]
 8041886:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041888:	697b      	ldr	r3, [r7, #20]
 804188a:	685b      	ldr	r3, [r3, #4]
 804188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804188e:	693b      	ldr	r3, [r7, #16]
 8041890:	43db      	mvns	r3, r3
 8041892:	69ba      	ldr	r2, [r7, #24]
 8041894:	4013      	ands	r3, r2
 8041896:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041898:	683b      	ldr	r3, [r7, #0]
 804189a:	685b      	ldr	r3, [r3, #4]
 804189c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80418a0:	2b00      	cmp	r3, #0
 80418a2:	d003      	beq.n	80418ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80418a4:	69ba      	ldr	r2, [r7, #24]
 80418a6:	693b      	ldr	r3, [r7, #16]
 80418a8:	4313      	orrs	r3, r2
 80418aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80418ac:	697b      	ldr	r3, [r7, #20]
 80418ae:	69ba      	ldr	r2, [r7, #24]
 80418b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80418b2:	697b      	ldr	r3, [r7, #20]
 80418b4:	681b      	ldr	r3, [r3, #0]
 80418b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80418b8:	693b      	ldr	r3, [r7, #16]
 80418ba:	43db      	mvns	r3, r3
 80418bc:	69ba      	ldr	r2, [r7, #24]
 80418be:	4013      	ands	r3, r2
 80418c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80418c2:	683b      	ldr	r3, [r7, #0]
 80418c4:	685b      	ldr	r3, [r3, #4]
 80418c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80418ca:	2b00      	cmp	r3, #0
 80418cc:	d003      	beq.n	80418d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80418ce:	69ba      	ldr	r2, [r7, #24]
 80418d0:	693b      	ldr	r3, [r7, #16]
 80418d2:	4313      	orrs	r3, r2
 80418d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80418d6:	697b      	ldr	r3, [r7, #20]
 80418d8:	69ba      	ldr	r2, [r7, #24]
 80418da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80418dc:	69fb      	ldr	r3, [r7, #28]
 80418de:	3301      	adds	r3, #1
 80418e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80418e2:	683b      	ldr	r3, [r7, #0]
 80418e4:	681a      	ldr	r2, [r3, #0]
 80418e6:	69fb      	ldr	r3, [r7, #28]
 80418e8:	fa22 f303 	lsr.w	r3, r2, r3
 80418ec:	2b00      	cmp	r3, #0
 80418ee:	f47f ae63 	bne.w	80415b8 <HAL_GPIO_Init+0x14>
  }
}
 80418f2:	bf00      	nop
 80418f4:	bf00      	nop
 80418f6:	3724      	adds	r7, #36	@ 0x24
 80418f8:	46bd      	mov	sp, r7
 80418fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418fe:	4770      	bx	lr
 8041900:	58000400 	.word	0x58000400

08041904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041904:	b480      	push	{r7}
 8041906:	b083      	sub	sp, #12
 8041908:	af00      	add	r7, sp, #0
 804190a:	6078      	str	r0, [r7, #4]
 804190c:	460b      	mov	r3, r1
 804190e:	807b      	strh	r3, [r7, #2]
 8041910:	4613      	mov	r3, r2
 8041912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041914:	787b      	ldrb	r3, [r7, #1]
 8041916:	2b00      	cmp	r3, #0
 8041918:	d003      	beq.n	8041922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804191a:	887a      	ldrh	r2, [r7, #2]
 804191c:	687b      	ldr	r3, [r7, #4]
 804191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8041920:	e003      	b.n	804192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8041922:	887b      	ldrh	r3, [r7, #2]
 8041924:	041a      	lsls	r2, r3, #16
 8041926:	687b      	ldr	r3, [r7, #4]
 8041928:	619a      	str	r2, [r3, #24]
}
 804192a:	bf00      	nop
 804192c:	370c      	adds	r7, #12
 804192e:	46bd      	mov	sp, r7
 8041930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041934:	4770      	bx	lr

08041936 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8041936:	b480      	push	{r7}
 8041938:	b085      	sub	sp, #20
 804193a:	af00      	add	r7, sp, #0
 804193c:	6078      	str	r0, [r7, #4]
 804193e:	460b      	mov	r3, r1
 8041940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8041942:	687b      	ldr	r3, [r7, #4]
 8041944:	695b      	ldr	r3, [r3, #20]
 8041946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041948:	887a      	ldrh	r2, [r7, #2]
 804194a:	68fb      	ldr	r3, [r7, #12]
 804194c:	4013      	ands	r3, r2
 804194e:	041a      	lsls	r2, r3, #16
 8041950:	68fb      	ldr	r3, [r7, #12]
 8041952:	43d9      	mvns	r1, r3
 8041954:	887b      	ldrh	r3, [r7, #2]
 8041956:	400b      	ands	r3, r1
 8041958:	431a      	orrs	r2, r3
 804195a:	687b      	ldr	r3, [r7, #4]
 804195c:	619a      	str	r2, [r3, #24]
}
 804195e:	bf00      	nop
 8041960:	3714      	adds	r7, #20
 8041962:	46bd      	mov	sp, r7
 8041964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041968:	4770      	bx	lr
	...

0804196c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 804196c:	b480      	push	{r7}
 804196e:	b083      	sub	sp, #12
 8041970:	af00      	add	r7, sp, #0
 8041972:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8041974:	4a08      	ldr	r2, [pc, #32]	@ (8041998 <HAL_HSEM_FastTake+0x2c>)
 8041976:	687b      	ldr	r3, [r7, #4]
 8041978:	3320      	adds	r3, #32
 804197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804197e:	4a07      	ldr	r2, [pc, #28]	@ (804199c <HAL_HSEM_FastTake+0x30>)
 8041980:	4293      	cmp	r3, r2
 8041982:	d101      	bne.n	8041988 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8041984:	2300      	movs	r3, #0
 8041986:	e000      	b.n	804198a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041988:	2301      	movs	r3, #1
}
 804198a:	4618      	mov	r0, r3
 804198c:	370c      	adds	r7, #12
 804198e:	46bd      	mov	sp, r7
 8041990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041994:	4770      	bx	lr
 8041996:	bf00      	nop
 8041998:	58026400 	.word	0x58026400
 804199c:	80000300 	.word	0x80000300

080419a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80419a0:	b480      	push	{r7}
 80419a2:	b083      	sub	sp, #12
 80419a4:	af00      	add	r7, sp, #0
 80419a6:	6078      	str	r0, [r7, #4]
 80419a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80419aa:	4906      	ldr	r1, [pc, #24]	@ (80419c4 <HAL_HSEM_Release+0x24>)
 80419ac:	683b      	ldr	r3, [r7, #0]
 80419ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80419b2:	687b      	ldr	r3, [r7, #4]
 80419b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80419b8:	bf00      	nop
 80419ba:	370c      	adds	r7, #12
 80419bc:	46bd      	mov	sp, r7
 80419be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419c2:	4770      	bx	lr
 80419c4:	58026400 	.word	0x58026400

080419c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80419c8:	b580      	push	{r7, lr}
 80419ca:	b086      	sub	sp, #24
 80419cc:	af02      	add	r7, sp, #8
 80419ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80419d0:	687b      	ldr	r3, [r7, #4]
 80419d2:	2b00      	cmp	r3, #0
 80419d4:	d101      	bne.n	80419da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80419d6:	2301      	movs	r3, #1
 80419d8:	e0fe      	b.n	8041bd8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80419da:	687b      	ldr	r3, [r7, #4]
 80419dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80419e0:	b2db      	uxtb	r3, r3
 80419e2:	2b00      	cmp	r3, #0
 80419e4:	d106      	bne.n	80419f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80419e6:	687b      	ldr	r3, [r7, #4]
 80419e8:	2200      	movs	r2, #0
 80419ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80419ee:	6878      	ldr	r0, [r7, #4]
 80419f0:	f009 f916 	bl	804ac20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80419f4:	687b      	ldr	r3, [r7, #4]
 80419f6:	2203      	movs	r2, #3
 80419f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80419fc:	687b      	ldr	r3, [r7, #4]
 80419fe:	681b      	ldr	r3, [r3, #0]
 8041a00:	4618      	mov	r0, r3
 8041a02:	f005 fb82 	bl	804710a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041a06:	687b      	ldr	r3, [r7, #4]
 8041a08:	6818      	ldr	r0, [r3, #0]
 8041a0a:	687b      	ldr	r3, [r7, #4]
 8041a0c:	7c1a      	ldrb	r2, [r3, #16]
 8041a0e:	f88d 2000 	strb.w	r2, [sp]
 8041a12:	3304      	adds	r3, #4
 8041a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041a16:	f005 fa53 	bl	8046ec0 <USB_CoreInit>
 8041a1a:	4603      	mov	r3, r0
 8041a1c:	2b00      	cmp	r3, #0
 8041a1e:	d005      	beq.n	8041a2c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041a20:	687b      	ldr	r3, [r7, #4]
 8041a22:	2202      	movs	r2, #2
 8041a24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041a28:	2301      	movs	r3, #1
 8041a2a:	e0d5      	b.n	8041bd8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8041a2c:	687b      	ldr	r3, [r7, #4]
 8041a2e:	681b      	ldr	r3, [r3, #0]
 8041a30:	2100      	movs	r1, #0
 8041a32:	4618      	mov	r0, r3
 8041a34:	f005 fb7a 	bl	804712c <USB_SetCurrentMode>
 8041a38:	4603      	mov	r3, r0
 8041a3a:	2b00      	cmp	r3, #0
 8041a3c:	d005      	beq.n	8041a4a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	2202      	movs	r2, #2
 8041a42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041a46:	2301      	movs	r3, #1
 8041a48:	e0c6      	b.n	8041bd8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041a4a:	2300      	movs	r3, #0
 8041a4c:	73fb      	strb	r3, [r7, #15]
 8041a4e:	e04a      	b.n	8041ae6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8041a50:	7bfa      	ldrb	r2, [r7, #15]
 8041a52:	6879      	ldr	r1, [r7, #4]
 8041a54:	4613      	mov	r3, r2
 8041a56:	00db      	lsls	r3, r3, #3
 8041a58:	4413      	add	r3, r2
 8041a5a:	009b      	lsls	r3, r3, #2
 8041a5c:	440b      	add	r3, r1
 8041a5e:	3315      	adds	r3, #21
 8041a60:	2201      	movs	r2, #1
 8041a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8041a64:	7bfa      	ldrb	r2, [r7, #15]
 8041a66:	6879      	ldr	r1, [r7, #4]
 8041a68:	4613      	mov	r3, r2
 8041a6a:	00db      	lsls	r3, r3, #3
 8041a6c:	4413      	add	r3, r2
 8041a6e:	009b      	lsls	r3, r3, #2
 8041a70:	440b      	add	r3, r1
 8041a72:	3314      	adds	r3, #20
 8041a74:	7bfa      	ldrb	r2, [r7, #15]
 8041a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8041a78:	7bfa      	ldrb	r2, [r7, #15]
 8041a7a:	7bfb      	ldrb	r3, [r7, #15]
 8041a7c:	b298      	uxth	r0, r3
 8041a7e:	6879      	ldr	r1, [r7, #4]
 8041a80:	4613      	mov	r3, r2
 8041a82:	00db      	lsls	r3, r3, #3
 8041a84:	4413      	add	r3, r2
 8041a86:	009b      	lsls	r3, r3, #2
 8041a88:	440b      	add	r3, r1
 8041a8a:	332e      	adds	r3, #46	@ 0x2e
 8041a8c:	4602      	mov	r2, r0
 8041a8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8041a90:	7bfa      	ldrb	r2, [r7, #15]
 8041a92:	6879      	ldr	r1, [r7, #4]
 8041a94:	4613      	mov	r3, r2
 8041a96:	00db      	lsls	r3, r3, #3
 8041a98:	4413      	add	r3, r2
 8041a9a:	009b      	lsls	r3, r3, #2
 8041a9c:	440b      	add	r3, r1
 8041a9e:	3318      	adds	r3, #24
 8041aa0:	2200      	movs	r2, #0
 8041aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8041aa4:	7bfa      	ldrb	r2, [r7, #15]
 8041aa6:	6879      	ldr	r1, [r7, #4]
 8041aa8:	4613      	mov	r3, r2
 8041aaa:	00db      	lsls	r3, r3, #3
 8041aac:	4413      	add	r3, r2
 8041aae:	009b      	lsls	r3, r3, #2
 8041ab0:	440b      	add	r3, r1
 8041ab2:	331c      	adds	r3, #28
 8041ab4:	2200      	movs	r2, #0
 8041ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8041ab8:	7bfa      	ldrb	r2, [r7, #15]
 8041aba:	6879      	ldr	r1, [r7, #4]
 8041abc:	4613      	mov	r3, r2
 8041abe:	00db      	lsls	r3, r3, #3
 8041ac0:	4413      	add	r3, r2
 8041ac2:	009b      	lsls	r3, r3, #2
 8041ac4:	440b      	add	r3, r1
 8041ac6:	3320      	adds	r3, #32
 8041ac8:	2200      	movs	r2, #0
 8041aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8041acc:	7bfa      	ldrb	r2, [r7, #15]
 8041ace:	6879      	ldr	r1, [r7, #4]
 8041ad0:	4613      	mov	r3, r2
 8041ad2:	00db      	lsls	r3, r3, #3
 8041ad4:	4413      	add	r3, r2
 8041ad6:	009b      	lsls	r3, r3, #2
 8041ad8:	440b      	add	r3, r1
 8041ada:	3324      	adds	r3, #36	@ 0x24
 8041adc:	2200      	movs	r2, #0
 8041ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041ae0:	7bfb      	ldrb	r3, [r7, #15]
 8041ae2:	3301      	adds	r3, #1
 8041ae4:	73fb      	strb	r3, [r7, #15]
 8041ae6:	687b      	ldr	r3, [r7, #4]
 8041ae8:	791b      	ldrb	r3, [r3, #4]
 8041aea:	7bfa      	ldrb	r2, [r7, #15]
 8041aec:	429a      	cmp	r2, r3
 8041aee:	d3af      	bcc.n	8041a50 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041af0:	2300      	movs	r3, #0
 8041af2:	73fb      	strb	r3, [r7, #15]
 8041af4:	e044      	b.n	8041b80 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8041af6:	7bfa      	ldrb	r2, [r7, #15]
 8041af8:	6879      	ldr	r1, [r7, #4]
 8041afa:	4613      	mov	r3, r2
 8041afc:	00db      	lsls	r3, r3, #3
 8041afe:	4413      	add	r3, r2
 8041b00:	009b      	lsls	r3, r3, #2
 8041b02:	440b      	add	r3, r1
 8041b04:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8041b08:	2200      	movs	r2, #0
 8041b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8041b0c:	7bfa      	ldrb	r2, [r7, #15]
 8041b0e:	6879      	ldr	r1, [r7, #4]
 8041b10:	4613      	mov	r3, r2
 8041b12:	00db      	lsls	r3, r3, #3
 8041b14:	4413      	add	r3, r2
 8041b16:	009b      	lsls	r3, r3, #2
 8041b18:	440b      	add	r3, r1
 8041b1a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8041b1e:	7bfa      	ldrb	r2, [r7, #15]
 8041b20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8041b22:	7bfa      	ldrb	r2, [r7, #15]
 8041b24:	6879      	ldr	r1, [r7, #4]
 8041b26:	4613      	mov	r3, r2
 8041b28:	00db      	lsls	r3, r3, #3
 8041b2a:	4413      	add	r3, r2
 8041b2c:	009b      	lsls	r3, r3, #2
 8041b2e:	440b      	add	r3, r1
 8041b30:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8041b34:	2200      	movs	r2, #0
 8041b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8041b38:	7bfa      	ldrb	r2, [r7, #15]
 8041b3a:	6879      	ldr	r1, [r7, #4]
 8041b3c:	4613      	mov	r3, r2
 8041b3e:	00db      	lsls	r3, r3, #3
 8041b40:	4413      	add	r3, r2
 8041b42:	009b      	lsls	r3, r3, #2
 8041b44:	440b      	add	r3, r1
 8041b46:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8041b4a:	2200      	movs	r2, #0
 8041b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8041b4e:	7bfa      	ldrb	r2, [r7, #15]
 8041b50:	6879      	ldr	r1, [r7, #4]
 8041b52:	4613      	mov	r3, r2
 8041b54:	00db      	lsls	r3, r3, #3
 8041b56:	4413      	add	r3, r2
 8041b58:	009b      	lsls	r3, r3, #2
 8041b5a:	440b      	add	r3, r1
 8041b5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8041b60:	2200      	movs	r2, #0
 8041b62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8041b64:	7bfa      	ldrb	r2, [r7, #15]
 8041b66:	6879      	ldr	r1, [r7, #4]
 8041b68:	4613      	mov	r3, r2
 8041b6a:	00db      	lsls	r3, r3, #3
 8041b6c:	4413      	add	r3, r2
 8041b6e:	009b      	lsls	r3, r3, #2
 8041b70:	440b      	add	r3, r1
 8041b72:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8041b76:	2200      	movs	r2, #0
 8041b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8041b7a:	7bfb      	ldrb	r3, [r7, #15]
 8041b7c:	3301      	adds	r3, #1
 8041b7e:	73fb      	strb	r3, [r7, #15]
 8041b80:	687b      	ldr	r3, [r7, #4]
 8041b82:	791b      	ldrb	r3, [r3, #4]
 8041b84:	7bfa      	ldrb	r2, [r7, #15]
 8041b86:	429a      	cmp	r2, r3
 8041b88:	d3b5      	bcc.n	8041af6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8041b8a:	687b      	ldr	r3, [r7, #4]
 8041b8c:	6818      	ldr	r0, [r3, #0]
 8041b8e:	687b      	ldr	r3, [r7, #4]
 8041b90:	7c1a      	ldrb	r2, [r3, #16]
 8041b92:	f88d 2000 	strb.w	r2, [sp]
 8041b96:	3304      	adds	r3, #4
 8041b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8041b9a:	f005 fb13 	bl	80471c4 <USB_DevInit>
 8041b9e:	4603      	mov	r3, r0
 8041ba0:	2b00      	cmp	r3, #0
 8041ba2:	d005      	beq.n	8041bb0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8041ba4:	687b      	ldr	r3, [r7, #4]
 8041ba6:	2202      	movs	r2, #2
 8041ba8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8041bac:	2301      	movs	r3, #1
 8041bae:	e013      	b.n	8041bd8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8041bb0:	687b      	ldr	r3, [r7, #4]
 8041bb2:	2200      	movs	r2, #0
 8041bb4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8041bb6:	687b      	ldr	r3, [r7, #4]
 8041bb8:	2201      	movs	r2, #1
 8041bba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8041bbe:	687b      	ldr	r3, [r7, #4]
 8041bc0:	7b1b      	ldrb	r3, [r3, #12]
 8041bc2:	2b01      	cmp	r3, #1
 8041bc4:	d102      	bne.n	8041bcc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8041bc6:	6878      	ldr	r0, [r7, #4]
 8041bc8:	f001 f948 	bl	8042e5c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8041bcc:	687b      	ldr	r3, [r7, #4]
 8041bce:	681b      	ldr	r3, [r3, #0]
 8041bd0:	4618      	mov	r0, r3
 8041bd2:	f006 fa7a 	bl	80480ca <USB_DevDisconnect>

  return HAL_OK;
 8041bd6:	2300      	movs	r3, #0
}
 8041bd8:	4618      	mov	r0, r3
 8041bda:	3710      	adds	r7, #16
 8041bdc:	46bd      	mov	sp, r7
 8041bde:	bd80      	pop	{r7, pc}

08041be0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8041be0:	b580      	push	{r7, lr}
 8041be2:	b084      	sub	sp, #16
 8041be4:	af00      	add	r7, sp, #0
 8041be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	681b      	ldr	r3, [r3, #0]
 8041bec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8041bee:	687b      	ldr	r3, [r7, #4]
 8041bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041bf4:	2b01      	cmp	r3, #1
 8041bf6:	d101      	bne.n	8041bfc <HAL_PCD_Start+0x1c>
 8041bf8:	2302      	movs	r3, #2
 8041bfa:	e022      	b.n	8041c42 <HAL_PCD_Start+0x62>
 8041bfc:	687b      	ldr	r3, [r7, #4]
 8041bfe:	2201      	movs	r2, #1
 8041c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041c04:	68fb      	ldr	r3, [r7, #12]
 8041c06:	68db      	ldr	r3, [r3, #12]
 8041c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041c0c:	2b00      	cmp	r3, #0
 8041c0e:	d009      	beq.n	8041c24 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8041c10:	687b      	ldr	r3, [r7, #4]
 8041c12:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041c14:	2b01      	cmp	r3, #1
 8041c16:	d105      	bne.n	8041c24 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8041c18:	68fb      	ldr	r3, [r7, #12]
 8041c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041c1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8041c20:	68fb      	ldr	r3, [r7, #12]
 8041c22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8041c24:	687b      	ldr	r3, [r7, #4]
 8041c26:	681b      	ldr	r3, [r3, #0]
 8041c28:	4618      	mov	r0, r3
 8041c2a:	f005 fa5d 	bl	80470e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8041c2e:	687b      	ldr	r3, [r7, #4]
 8041c30:	681b      	ldr	r3, [r3, #0]
 8041c32:	4618      	mov	r0, r3
 8041c34:	f006 fa28 	bl	8048088 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8041c38:	687b      	ldr	r3, [r7, #4]
 8041c3a:	2200      	movs	r2, #0
 8041c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041c40:	2300      	movs	r3, #0
}
 8041c42:	4618      	mov	r0, r3
 8041c44:	3710      	adds	r7, #16
 8041c46:	46bd      	mov	sp, r7
 8041c48:	bd80      	pop	{r7, pc}

08041c4a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8041c4a:	b580      	push	{r7, lr}
 8041c4c:	b084      	sub	sp, #16
 8041c4e:	af00      	add	r7, sp, #0
 8041c50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041c52:	687b      	ldr	r3, [r7, #4]
 8041c54:	681b      	ldr	r3, [r3, #0]
 8041c56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8041c58:	687b      	ldr	r3, [r7, #4]
 8041c5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8041c5e:	2b01      	cmp	r3, #1
 8041c60:	d101      	bne.n	8041c66 <HAL_PCD_Stop+0x1c>
 8041c62:	2302      	movs	r3, #2
 8041c64:	e028      	b.n	8041cb8 <HAL_PCD_Stop+0x6e>
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	2201      	movs	r2, #1
 8041c6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	681b      	ldr	r3, [r3, #0]
 8041c72:	4618      	mov	r0, r3
 8041c74:	f005 fa49 	bl	804710a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8041c78:	687b      	ldr	r3, [r7, #4]
 8041c7a:	681b      	ldr	r3, [r3, #0]
 8041c7c:	4618      	mov	r0, r3
 8041c7e:	f006 fa24 	bl	80480ca <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8041c82:	687b      	ldr	r3, [r7, #4]
 8041c84:	681b      	ldr	r3, [r3, #0]
 8041c86:	2110      	movs	r1, #16
 8041c88:	4618      	mov	r0, r3
 8041c8a:	f005 fbf9 	bl	8047480 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041c8e:	68fb      	ldr	r3, [r7, #12]
 8041c90:	68db      	ldr	r3, [r3, #12]
 8041c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8041c96:	2b00      	cmp	r3, #0
 8041c98:	d009      	beq.n	8041cae <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8041c9a:	687b      	ldr	r3, [r7, #4]
 8041c9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8041c9e:	2b01      	cmp	r3, #1
 8041ca0:	d105      	bne.n	8041cae <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8041ca2:	68fb      	ldr	r3, [r7, #12]
 8041ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8041ca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8041caa:	68fb      	ldr	r3, [r7, #12]
 8041cac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8041cae:	687b      	ldr	r3, [r7, #4]
 8041cb0:	2200      	movs	r2, #0
 8041cb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8041cb6:	2300      	movs	r3, #0
}
 8041cb8:	4618      	mov	r0, r3
 8041cba:	3710      	adds	r7, #16
 8041cbc:	46bd      	mov	sp, r7
 8041cbe:	bd80      	pop	{r7, pc}

08041cc0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8041cc0:	b590      	push	{r4, r7, lr}
 8041cc2:	b08d      	sub	sp, #52	@ 0x34
 8041cc4:	af00      	add	r7, sp, #0
 8041cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8041cc8:	687b      	ldr	r3, [r7, #4]
 8041cca:	681b      	ldr	r3, [r3, #0]
 8041ccc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8041cce:	6a3b      	ldr	r3, [r7, #32]
 8041cd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8041cd2:	687b      	ldr	r3, [r7, #4]
 8041cd4:	681b      	ldr	r3, [r3, #0]
 8041cd6:	4618      	mov	r0, r3
 8041cd8:	f006 faab 	bl	8048232 <USB_GetMode>
 8041cdc:	4603      	mov	r3, r0
 8041cde:	2b00      	cmp	r3, #0
 8041ce0:	f040 84b9 	bne.w	8042656 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8041ce4:	687b      	ldr	r3, [r7, #4]
 8041ce6:	681b      	ldr	r3, [r3, #0]
 8041ce8:	4618      	mov	r0, r3
 8041cea:	f006 fa0f 	bl	804810c <USB_ReadInterrupts>
 8041cee:	4603      	mov	r3, r0
 8041cf0:	2b00      	cmp	r3, #0
 8041cf2:	f000 84af 	beq.w	8042654 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8041cf6:	69fb      	ldr	r3, [r7, #28]
 8041cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041cfc:	689b      	ldr	r3, [r3, #8]
 8041cfe:	0a1b      	lsrs	r3, r3, #8
 8041d00:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8041d04:	687b      	ldr	r3, [r7, #4]
 8041d06:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8041d0a:	687b      	ldr	r3, [r7, #4]
 8041d0c:	681b      	ldr	r3, [r3, #0]
 8041d0e:	4618      	mov	r0, r3
 8041d10:	f006 f9fc 	bl	804810c <USB_ReadInterrupts>
 8041d14:	4603      	mov	r3, r0
 8041d16:	f003 0302 	and.w	r3, r3, #2
 8041d1a:	2b02      	cmp	r3, #2
 8041d1c:	d107      	bne.n	8041d2e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8041d1e:	687b      	ldr	r3, [r7, #4]
 8041d20:	681b      	ldr	r3, [r3, #0]
 8041d22:	695a      	ldr	r2, [r3, #20]
 8041d24:	687b      	ldr	r3, [r7, #4]
 8041d26:	681b      	ldr	r3, [r3, #0]
 8041d28:	f002 0202 	and.w	r2, r2, #2
 8041d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8041d2e:	687b      	ldr	r3, [r7, #4]
 8041d30:	681b      	ldr	r3, [r3, #0]
 8041d32:	4618      	mov	r0, r3
 8041d34:	f006 f9ea 	bl	804810c <USB_ReadInterrupts>
 8041d38:	4603      	mov	r3, r0
 8041d3a:	f003 0310 	and.w	r3, r3, #16
 8041d3e:	2b10      	cmp	r3, #16
 8041d40:	d161      	bne.n	8041e06 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041d42:	687b      	ldr	r3, [r7, #4]
 8041d44:	681b      	ldr	r3, [r3, #0]
 8041d46:	699a      	ldr	r2, [r3, #24]
 8041d48:	687b      	ldr	r3, [r7, #4]
 8041d4a:	681b      	ldr	r3, [r3, #0]
 8041d4c:	f022 0210 	bic.w	r2, r2, #16
 8041d50:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8041d52:	6a3b      	ldr	r3, [r7, #32]
 8041d54:	6a1b      	ldr	r3, [r3, #32]
 8041d56:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8041d58:	69bb      	ldr	r3, [r7, #24]
 8041d5a:	f003 020f 	and.w	r2, r3, #15
 8041d5e:	4613      	mov	r3, r2
 8041d60:	00db      	lsls	r3, r3, #3
 8041d62:	4413      	add	r3, r2
 8041d64:	009b      	lsls	r3, r3, #2
 8041d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041d6a:	687a      	ldr	r2, [r7, #4]
 8041d6c:	4413      	add	r3, r2
 8041d6e:	3304      	adds	r3, #4
 8041d70:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8041d72:	69bb      	ldr	r3, [r7, #24]
 8041d74:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041d7c:	d124      	bne.n	8041dc8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8041d7e:	69ba      	ldr	r2, [r7, #24]
 8041d80:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8041d84:	4013      	ands	r3, r2
 8041d86:	2b00      	cmp	r3, #0
 8041d88:	d035      	beq.n	8041df6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041d8a:	697b      	ldr	r3, [r7, #20]
 8041d8c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8041d8e:	69bb      	ldr	r3, [r7, #24]
 8041d90:	091b      	lsrs	r3, r3, #4
 8041d92:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8041d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041d98:	b29b      	uxth	r3, r3
 8041d9a:	461a      	mov	r2, r3
 8041d9c:	6a38      	ldr	r0, [r7, #32]
 8041d9e:	f006 f821 	bl	8047de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041da2:	697b      	ldr	r3, [r7, #20]
 8041da4:	68da      	ldr	r2, [r3, #12]
 8041da6:	69bb      	ldr	r3, [r7, #24]
 8041da8:	091b      	lsrs	r3, r3, #4
 8041daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041dae:	441a      	add	r2, r3
 8041db0:	697b      	ldr	r3, [r7, #20]
 8041db2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041db4:	697b      	ldr	r3, [r7, #20]
 8041db6:	695a      	ldr	r2, [r3, #20]
 8041db8:	69bb      	ldr	r3, [r7, #24]
 8041dba:	091b      	lsrs	r3, r3, #4
 8041dbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041dc0:	441a      	add	r2, r3
 8041dc2:	697b      	ldr	r3, [r7, #20]
 8041dc4:	615a      	str	r2, [r3, #20]
 8041dc6:	e016      	b.n	8041df6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8041dc8:	69bb      	ldr	r3, [r7, #24]
 8041dca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8041dce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8041dd2:	d110      	bne.n	8041df6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8041dd4:	687b      	ldr	r3, [r7, #4]
 8041dd6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8041dda:	2208      	movs	r2, #8
 8041ddc:	4619      	mov	r1, r3
 8041dde:	6a38      	ldr	r0, [r7, #32]
 8041de0:	f006 f800 	bl	8047de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8041de4:	697b      	ldr	r3, [r7, #20]
 8041de6:	695a      	ldr	r2, [r3, #20]
 8041de8:	69bb      	ldr	r3, [r7, #24]
 8041dea:	091b      	lsrs	r3, r3, #4
 8041dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8041df0:	441a      	add	r2, r3
 8041df2:	697b      	ldr	r3, [r7, #20]
 8041df4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8041df6:	687b      	ldr	r3, [r7, #4]
 8041df8:	681b      	ldr	r3, [r3, #0]
 8041dfa:	699a      	ldr	r2, [r3, #24]
 8041dfc:	687b      	ldr	r3, [r7, #4]
 8041dfe:	681b      	ldr	r3, [r3, #0]
 8041e00:	f042 0210 	orr.w	r2, r2, #16
 8041e04:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8041e06:	687b      	ldr	r3, [r7, #4]
 8041e08:	681b      	ldr	r3, [r3, #0]
 8041e0a:	4618      	mov	r0, r3
 8041e0c:	f006 f97e 	bl	804810c <USB_ReadInterrupts>
 8041e10:	4603      	mov	r3, r0
 8041e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8041e16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8041e1a:	f040 80a7 	bne.w	8041f6c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8041e1e:	2300      	movs	r3, #0
 8041e20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8041e22:	687b      	ldr	r3, [r7, #4]
 8041e24:	681b      	ldr	r3, [r3, #0]
 8041e26:	4618      	mov	r0, r3
 8041e28:	f006 f983 	bl	8048132 <USB_ReadDevAllOutEpInterrupt>
 8041e2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8041e2e:	e099      	b.n	8041f64 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8041e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041e32:	f003 0301 	and.w	r3, r3, #1
 8041e36:	2b00      	cmp	r3, #0
 8041e38:	f000 808e 	beq.w	8041f58 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041e3c:	687b      	ldr	r3, [r7, #4]
 8041e3e:	681b      	ldr	r3, [r3, #0]
 8041e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041e42:	b2d2      	uxtb	r2, r2
 8041e44:	4611      	mov	r1, r2
 8041e46:	4618      	mov	r0, r3
 8041e48:	f006 f9a7 	bl	804819a <USB_ReadDevOutEPInterrupt>
 8041e4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8041e4e:	693b      	ldr	r3, [r7, #16]
 8041e50:	f003 0301 	and.w	r3, r3, #1
 8041e54:	2b00      	cmp	r3, #0
 8041e56:	d00c      	beq.n	8041e72 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8041e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e5a:	015a      	lsls	r2, r3, #5
 8041e5c:	69fb      	ldr	r3, [r7, #28]
 8041e5e:	4413      	add	r3, r2
 8041e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e64:	461a      	mov	r2, r3
 8041e66:	2301      	movs	r3, #1
 8041e68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8041e6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041e6c:	6878      	ldr	r0, [r7, #4]
 8041e6e:	f000 fe6f 	bl	8042b50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8041e72:	693b      	ldr	r3, [r7, #16]
 8041e74:	f003 0308 	and.w	r3, r3, #8
 8041e78:	2b00      	cmp	r3, #0
 8041e7a:	d00c      	beq.n	8041e96 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8041e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041e7e:	015a      	lsls	r2, r3, #5
 8041e80:	69fb      	ldr	r3, [r7, #28]
 8041e82:	4413      	add	r3, r2
 8041e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041e88:	461a      	mov	r2, r3
 8041e8a:	2308      	movs	r3, #8
 8041e8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8041e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8041e90:	6878      	ldr	r0, [r7, #4]
 8041e92:	f000 ff45 	bl	8042d20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8041e96:	693b      	ldr	r3, [r7, #16]
 8041e98:	f003 0310 	and.w	r3, r3, #16
 8041e9c:	2b00      	cmp	r3, #0
 8041e9e:	d008      	beq.n	8041eb2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8041ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041ea2:	015a      	lsls	r2, r3, #5
 8041ea4:	69fb      	ldr	r3, [r7, #28]
 8041ea6:	4413      	add	r3, r2
 8041ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041eac:	461a      	mov	r2, r3
 8041eae:	2310      	movs	r3, #16
 8041eb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8041eb2:	693b      	ldr	r3, [r7, #16]
 8041eb4:	f003 0302 	and.w	r3, r3, #2
 8041eb8:	2b00      	cmp	r3, #0
 8041eba:	d030      	beq.n	8041f1e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8041ebc:	6a3b      	ldr	r3, [r7, #32]
 8041ebe:	695b      	ldr	r3, [r3, #20]
 8041ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041ec4:	2b80      	cmp	r3, #128	@ 0x80
 8041ec6:	d109      	bne.n	8041edc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8041ec8:	69fb      	ldr	r3, [r7, #28]
 8041eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041ece:	685b      	ldr	r3, [r3, #4]
 8041ed0:	69fa      	ldr	r2, [r7, #28]
 8041ed2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8041ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8041eda:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8041edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041ede:	4613      	mov	r3, r2
 8041ee0:	00db      	lsls	r3, r3, #3
 8041ee2:	4413      	add	r3, r2
 8041ee4:	009b      	lsls	r3, r3, #2
 8041ee6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8041eea:	687a      	ldr	r2, [r7, #4]
 8041eec:	4413      	add	r3, r2
 8041eee:	3304      	adds	r3, #4
 8041ef0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8041ef2:	697b      	ldr	r3, [r7, #20]
 8041ef4:	78db      	ldrb	r3, [r3, #3]
 8041ef6:	2b01      	cmp	r3, #1
 8041ef8:	d108      	bne.n	8041f0c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8041efa:	697b      	ldr	r3, [r7, #20]
 8041efc:	2200      	movs	r2, #0
 8041efe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8041f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f02:	b2db      	uxtb	r3, r3
 8041f04:	4619      	mov	r1, r3
 8041f06:	6878      	ldr	r0, [r7, #4]
 8041f08:	f009 f862 	bl	804afd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8041f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f0e:	015a      	lsls	r2, r3, #5
 8041f10:	69fb      	ldr	r3, [r7, #28]
 8041f12:	4413      	add	r3, r2
 8041f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041f18:	461a      	mov	r2, r3
 8041f1a:	2302      	movs	r3, #2
 8041f1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8041f1e:	693b      	ldr	r3, [r7, #16]
 8041f20:	f003 0320 	and.w	r3, r3, #32
 8041f24:	2b00      	cmp	r3, #0
 8041f26:	d008      	beq.n	8041f3a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8041f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f2a:	015a      	lsls	r2, r3, #5
 8041f2c:	69fb      	ldr	r3, [r7, #28]
 8041f2e:	4413      	add	r3, r2
 8041f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041f34:	461a      	mov	r2, r3
 8041f36:	2320      	movs	r3, #32
 8041f38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8041f3a:	693b      	ldr	r3, [r7, #16]
 8041f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8041f40:	2b00      	cmp	r3, #0
 8041f42:	d009      	beq.n	8041f58 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8041f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f46:	015a      	lsls	r2, r3, #5
 8041f48:	69fb      	ldr	r3, [r7, #28]
 8041f4a:	4413      	add	r3, r2
 8041f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8041f50:	461a      	mov	r2, r3
 8041f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8041f56:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8041f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041f5a:	3301      	adds	r3, #1
 8041f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8041f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f60:	085b      	lsrs	r3, r3, #1
 8041f62:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8041f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f66:	2b00      	cmp	r3, #0
 8041f68:	f47f af62 	bne.w	8041e30 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8041f6c:	687b      	ldr	r3, [r7, #4]
 8041f6e:	681b      	ldr	r3, [r3, #0]
 8041f70:	4618      	mov	r0, r3
 8041f72:	f006 f8cb 	bl	804810c <USB_ReadInterrupts>
 8041f76:	4603      	mov	r3, r0
 8041f78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8041f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8041f80:	f040 80db 	bne.w	804213a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8041f84:	687b      	ldr	r3, [r7, #4]
 8041f86:	681b      	ldr	r3, [r3, #0]
 8041f88:	4618      	mov	r0, r3
 8041f8a:	f006 f8ec 	bl	8048166 <USB_ReadDevAllInEpInterrupt>
 8041f8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8041f90:	2300      	movs	r3, #0
 8041f92:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8041f94:	e0cd      	b.n	8042132 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8041f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8041f98:	f003 0301 	and.w	r3, r3, #1
 8041f9c:	2b00      	cmp	r3, #0
 8041f9e:	f000 80c2 	beq.w	8042126 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8041fa2:	687b      	ldr	r3, [r7, #4]
 8041fa4:	681b      	ldr	r3, [r3, #0]
 8041fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8041fa8:	b2d2      	uxtb	r2, r2
 8041faa:	4611      	mov	r1, r2
 8041fac:	4618      	mov	r0, r3
 8041fae:	f006 f912 	bl	80481d6 <USB_ReadDevInEPInterrupt>
 8041fb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8041fb4:	693b      	ldr	r3, [r7, #16]
 8041fb6:	f003 0301 	and.w	r3, r3, #1
 8041fba:	2b00      	cmp	r3, #0
 8041fbc:	d057      	beq.n	804206e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8041fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fc0:	f003 030f 	and.w	r3, r3, #15
 8041fc4:	2201      	movs	r2, #1
 8041fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8041fca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8041fcc:	69fb      	ldr	r3, [r7, #28]
 8041fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8041fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8041fd4:	68fb      	ldr	r3, [r7, #12]
 8041fd6:	43db      	mvns	r3, r3
 8041fd8:	69f9      	ldr	r1, [r7, #28]
 8041fda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8041fde:	4013      	ands	r3, r2
 8041fe0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8041fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8041fe4:	015a      	lsls	r2, r3, #5
 8041fe6:	69fb      	ldr	r3, [r7, #28]
 8041fe8:	4413      	add	r3, r2
 8041fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8041fee:	461a      	mov	r2, r3
 8041ff0:	2301      	movs	r3, #1
 8041ff2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8041ff4:	687b      	ldr	r3, [r7, #4]
 8041ff6:	799b      	ldrb	r3, [r3, #6]
 8041ff8:	2b01      	cmp	r3, #1
 8041ffa:	d132      	bne.n	8042062 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8041ffc:	6879      	ldr	r1, [r7, #4]
 8041ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042000:	4613      	mov	r3, r2
 8042002:	00db      	lsls	r3, r3, #3
 8042004:	4413      	add	r3, r2
 8042006:	009b      	lsls	r3, r3, #2
 8042008:	440b      	add	r3, r1
 804200a:	3320      	adds	r3, #32
 804200c:	6819      	ldr	r1, [r3, #0]
 804200e:	6878      	ldr	r0, [r7, #4]
 8042010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042012:	4613      	mov	r3, r2
 8042014:	00db      	lsls	r3, r3, #3
 8042016:	4413      	add	r3, r2
 8042018:	009b      	lsls	r3, r3, #2
 804201a:	4403      	add	r3, r0
 804201c:	331c      	adds	r3, #28
 804201e:	681b      	ldr	r3, [r3, #0]
 8042020:	4419      	add	r1, r3
 8042022:	6878      	ldr	r0, [r7, #4]
 8042024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042026:	4613      	mov	r3, r2
 8042028:	00db      	lsls	r3, r3, #3
 804202a:	4413      	add	r3, r2
 804202c:	009b      	lsls	r3, r3, #2
 804202e:	4403      	add	r3, r0
 8042030:	3320      	adds	r3, #32
 8042032:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8042034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042036:	2b00      	cmp	r3, #0
 8042038:	d113      	bne.n	8042062 <HAL_PCD_IRQHandler+0x3a2>
 804203a:	6879      	ldr	r1, [r7, #4]
 804203c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804203e:	4613      	mov	r3, r2
 8042040:	00db      	lsls	r3, r3, #3
 8042042:	4413      	add	r3, r2
 8042044:	009b      	lsls	r3, r3, #2
 8042046:	440b      	add	r3, r1
 8042048:	3324      	adds	r3, #36	@ 0x24
 804204a:	681b      	ldr	r3, [r3, #0]
 804204c:	2b00      	cmp	r3, #0
 804204e:	d108      	bne.n	8042062 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042050:	687b      	ldr	r3, [r7, #4]
 8042052:	6818      	ldr	r0, [r3, #0]
 8042054:	687b      	ldr	r3, [r7, #4]
 8042056:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 804205a:	461a      	mov	r2, r3
 804205c:	2101      	movs	r1, #1
 804205e:	f006 f91b 	bl	8048298 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8042062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042064:	b2db      	uxtb	r3, r3
 8042066:	4619      	mov	r1, r3
 8042068:	6878      	ldr	r0, [r7, #4]
 804206a:	f008 ff2c 	bl	804aec6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 804206e:	693b      	ldr	r3, [r7, #16]
 8042070:	f003 0308 	and.w	r3, r3, #8
 8042074:	2b00      	cmp	r3, #0
 8042076:	d008      	beq.n	804208a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8042078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804207a:	015a      	lsls	r2, r3, #5
 804207c:	69fb      	ldr	r3, [r7, #28]
 804207e:	4413      	add	r3, r2
 8042080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042084:	461a      	mov	r2, r3
 8042086:	2308      	movs	r3, #8
 8042088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 804208a:	693b      	ldr	r3, [r7, #16]
 804208c:	f003 0310 	and.w	r3, r3, #16
 8042090:	2b00      	cmp	r3, #0
 8042092:	d008      	beq.n	80420a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8042094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042096:	015a      	lsls	r2, r3, #5
 8042098:	69fb      	ldr	r3, [r7, #28]
 804209a:	4413      	add	r3, r2
 804209c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80420a0:	461a      	mov	r2, r3
 80420a2:	2310      	movs	r3, #16
 80420a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80420a6:	693b      	ldr	r3, [r7, #16]
 80420a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80420ac:	2b00      	cmp	r3, #0
 80420ae:	d008      	beq.n	80420c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80420b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420b2:	015a      	lsls	r2, r3, #5
 80420b4:	69fb      	ldr	r3, [r7, #28]
 80420b6:	4413      	add	r3, r2
 80420b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80420bc:	461a      	mov	r2, r3
 80420be:	2340      	movs	r3, #64	@ 0x40
 80420c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80420c2:	693b      	ldr	r3, [r7, #16]
 80420c4:	f003 0302 	and.w	r3, r3, #2
 80420c8:	2b00      	cmp	r3, #0
 80420ca:	d023      	beq.n	8042114 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80420cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80420ce:	6a38      	ldr	r0, [r7, #32]
 80420d0:	f005 f9d6 	bl	8047480 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80420d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80420d6:	4613      	mov	r3, r2
 80420d8:	00db      	lsls	r3, r3, #3
 80420da:	4413      	add	r3, r2
 80420dc:	009b      	lsls	r3, r3, #2
 80420de:	3310      	adds	r3, #16
 80420e0:	687a      	ldr	r2, [r7, #4]
 80420e2:	4413      	add	r3, r2
 80420e4:	3304      	adds	r3, #4
 80420e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80420e8:	697b      	ldr	r3, [r7, #20]
 80420ea:	78db      	ldrb	r3, [r3, #3]
 80420ec:	2b01      	cmp	r3, #1
 80420ee:	d108      	bne.n	8042102 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80420f0:	697b      	ldr	r3, [r7, #20]
 80420f2:	2200      	movs	r2, #0
 80420f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80420f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80420f8:	b2db      	uxtb	r3, r3
 80420fa:	4619      	mov	r1, r3
 80420fc:	6878      	ldr	r0, [r7, #4]
 80420fe:	f008 ff79 	bl	804aff4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8042102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042104:	015a      	lsls	r2, r3, #5
 8042106:	69fb      	ldr	r3, [r7, #28]
 8042108:	4413      	add	r3, r2
 804210a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804210e:	461a      	mov	r2, r3
 8042110:	2302      	movs	r3, #2
 8042112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8042114:	693b      	ldr	r3, [r7, #16]
 8042116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804211a:	2b00      	cmp	r3, #0
 804211c:	d003      	beq.n	8042126 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 804211e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8042120:	6878      	ldr	r0, [r7, #4]
 8042122:	f000 fc88 	bl	8042a36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8042126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042128:	3301      	adds	r3, #1
 804212a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 804212c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804212e:	085b      	lsrs	r3, r3, #1
 8042130:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8042132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042134:	2b00      	cmp	r3, #0
 8042136:	f47f af2e 	bne.w	8041f96 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 804213a:	687b      	ldr	r3, [r7, #4]
 804213c:	681b      	ldr	r3, [r3, #0]
 804213e:	4618      	mov	r0, r3
 8042140:	f005 ffe4 	bl	804810c <USB_ReadInterrupts>
 8042144:	4603      	mov	r3, r0
 8042146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804214a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 804214e:	d122      	bne.n	8042196 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8042150:	69fb      	ldr	r3, [r7, #28]
 8042152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042156:	685b      	ldr	r3, [r3, #4]
 8042158:	69fa      	ldr	r2, [r7, #28]
 804215a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804215e:	f023 0301 	bic.w	r3, r3, #1
 8042162:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 804216a:	2b01      	cmp	r3, #1
 804216c:	d108      	bne.n	8042180 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 804216e:	687b      	ldr	r3, [r7, #4]
 8042170:	2200      	movs	r2, #0
 8042172:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8042176:	2100      	movs	r1, #0
 8042178:	6878      	ldr	r0, [r7, #4]
 804217a:	f000 fe93 	bl	8042ea4 <HAL_PCDEx_LPM_Callback>
 804217e:	e002      	b.n	8042186 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8042180:	6878      	ldr	r0, [r7, #4]
 8042182:	f008 ff17 	bl	804afb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8042186:	687b      	ldr	r3, [r7, #4]
 8042188:	681b      	ldr	r3, [r3, #0]
 804218a:	695a      	ldr	r2, [r3, #20]
 804218c:	687b      	ldr	r3, [r7, #4]
 804218e:	681b      	ldr	r3, [r3, #0]
 8042190:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8042194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8042196:	687b      	ldr	r3, [r7, #4]
 8042198:	681b      	ldr	r3, [r3, #0]
 804219a:	4618      	mov	r0, r3
 804219c:	f005 ffb6 	bl	804810c <USB_ReadInterrupts>
 80421a0:	4603      	mov	r3, r0
 80421a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80421a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80421aa:	d112      	bne.n	80421d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80421ac:	69fb      	ldr	r3, [r7, #28]
 80421ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80421b2:	689b      	ldr	r3, [r3, #8]
 80421b4:	f003 0301 	and.w	r3, r3, #1
 80421b8:	2b01      	cmp	r3, #1
 80421ba:	d102      	bne.n	80421c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80421bc:	6878      	ldr	r0, [r7, #4]
 80421be:	f008 fed3 	bl	804af68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80421c2:	687b      	ldr	r3, [r7, #4]
 80421c4:	681b      	ldr	r3, [r3, #0]
 80421c6:	695a      	ldr	r2, [r3, #20]
 80421c8:	687b      	ldr	r3, [r7, #4]
 80421ca:	681b      	ldr	r3, [r3, #0]
 80421cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80421d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80421d2:	687b      	ldr	r3, [r7, #4]
 80421d4:	681b      	ldr	r3, [r3, #0]
 80421d6:	4618      	mov	r0, r3
 80421d8:	f005 ff98 	bl	804810c <USB_ReadInterrupts>
 80421dc:	4603      	mov	r3, r0
 80421de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80421e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80421e6:	d121      	bne.n	804222c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80421e8:	687b      	ldr	r3, [r7, #4]
 80421ea:	681b      	ldr	r3, [r3, #0]
 80421ec:	695a      	ldr	r2, [r3, #20]
 80421ee:	687b      	ldr	r3, [r7, #4]
 80421f0:	681b      	ldr	r3, [r3, #0]
 80421f2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80421f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80421f8:	687b      	ldr	r3, [r7, #4]
 80421fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80421fe:	2b00      	cmp	r3, #0
 8042200:	d111      	bne.n	8042226 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8042202:	687b      	ldr	r3, [r7, #4]
 8042204:	2201      	movs	r2, #1
 8042206:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 804220a:	687b      	ldr	r3, [r7, #4]
 804220c:	681b      	ldr	r3, [r3, #0]
 804220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8042210:	089b      	lsrs	r3, r3, #2
 8042212:	f003 020f 	and.w	r2, r3, #15
 8042216:	687b      	ldr	r3, [r7, #4]
 8042218:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 804221c:	2101      	movs	r1, #1
 804221e:	6878      	ldr	r0, [r7, #4]
 8042220:	f000 fe40 	bl	8042ea4 <HAL_PCDEx_LPM_Callback>
 8042224:	e002      	b.n	804222c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8042226:	6878      	ldr	r0, [r7, #4]
 8042228:	f008 fe9e 	bl	804af68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 804222c:	687b      	ldr	r3, [r7, #4]
 804222e:	681b      	ldr	r3, [r3, #0]
 8042230:	4618      	mov	r0, r3
 8042232:	f005 ff6b 	bl	804810c <USB_ReadInterrupts>
 8042236:	4603      	mov	r3, r0
 8042238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 804223c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8042240:	f040 80b7 	bne.w	80423b2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8042244:	69fb      	ldr	r3, [r7, #28]
 8042246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804224a:	685b      	ldr	r3, [r3, #4]
 804224c:	69fa      	ldr	r2, [r7, #28]
 804224e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042252:	f023 0301 	bic.w	r3, r3, #1
 8042256:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8042258:	687b      	ldr	r3, [r7, #4]
 804225a:	681b      	ldr	r3, [r3, #0]
 804225c:	2110      	movs	r1, #16
 804225e:	4618      	mov	r0, r3
 8042260:	f005 f90e 	bl	8047480 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8042264:	2300      	movs	r3, #0
 8042266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8042268:	e046      	b.n	80422f8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 804226a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 804226c:	015a      	lsls	r2, r3, #5
 804226e:	69fb      	ldr	r3, [r7, #28]
 8042270:	4413      	add	r3, r2
 8042272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042276:	461a      	mov	r2, r3
 8042278:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 804227c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 804227e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042280:	015a      	lsls	r2, r3, #5
 8042282:	69fb      	ldr	r3, [r7, #28]
 8042284:	4413      	add	r3, r2
 8042286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804228a:	681b      	ldr	r3, [r3, #0]
 804228c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804228e:	0151      	lsls	r1, r2, #5
 8042290:	69fa      	ldr	r2, [r7, #28]
 8042292:	440a      	add	r2, r1
 8042294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8042298:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 804229c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 804229e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422a0:	015a      	lsls	r2, r3, #5
 80422a2:	69fb      	ldr	r3, [r7, #28]
 80422a4:	4413      	add	r3, r2
 80422a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80422aa:	461a      	mov	r2, r3
 80422ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80422b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80422b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422b4:	015a      	lsls	r2, r3, #5
 80422b6:	69fb      	ldr	r3, [r7, #28]
 80422b8:	4413      	add	r3, r2
 80422ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80422be:	681b      	ldr	r3, [r3, #0]
 80422c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80422c2:	0151      	lsls	r1, r2, #5
 80422c4:	69fa      	ldr	r2, [r7, #28]
 80422c6:	440a      	add	r2, r1
 80422c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80422cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80422d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80422d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422d4:	015a      	lsls	r2, r3, #5
 80422d6:	69fb      	ldr	r3, [r7, #28]
 80422d8:	4413      	add	r3, r2
 80422da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80422de:	681b      	ldr	r3, [r3, #0]
 80422e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80422e2:	0151      	lsls	r1, r2, #5
 80422e4:	69fa      	ldr	r2, [r7, #28]
 80422e6:	440a      	add	r2, r1
 80422e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80422ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80422f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80422f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80422f4:	3301      	adds	r3, #1
 80422f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80422f8:	687b      	ldr	r3, [r7, #4]
 80422fa:	791b      	ldrb	r3, [r3, #4]
 80422fc:	461a      	mov	r2, r3
 80422fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042300:	4293      	cmp	r3, r2
 8042302:	d3b2      	bcc.n	804226a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8042304:	69fb      	ldr	r3, [r7, #28]
 8042306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804230a:	69db      	ldr	r3, [r3, #28]
 804230c:	69fa      	ldr	r2, [r7, #28]
 804230e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042312:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8042316:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8042318:	687b      	ldr	r3, [r7, #4]
 804231a:	7bdb      	ldrb	r3, [r3, #15]
 804231c:	2b00      	cmp	r3, #0
 804231e:	d016      	beq.n	804234e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8042320:	69fb      	ldr	r3, [r7, #28]
 8042322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 804232a:	69fa      	ldr	r2, [r7, #28]
 804232c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042330:	f043 030b 	orr.w	r3, r3, #11
 8042334:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8042338:	69fb      	ldr	r3, [r7, #28]
 804233a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042340:	69fa      	ldr	r2, [r7, #28]
 8042342:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042346:	f043 030b 	orr.w	r3, r3, #11
 804234a:	6453      	str	r3, [r2, #68]	@ 0x44
 804234c:	e015      	b.n	804237a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 804234e:	69fb      	ldr	r3, [r7, #28]
 8042350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042354:	695a      	ldr	r2, [r3, #20]
 8042356:	69fb      	ldr	r3, [r7, #28]
 8042358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804235c:	4619      	mov	r1, r3
 804235e:	f242 032b 	movw	r3, #8235	@ 0x202b
 8042362:	4313      	orrs	r3, r2
 8042364:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8042366:	69fb      	ldr	r3, [r7, #28]
 8042368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804236c:	691b      	ldr	r3, [r3, #16]
 804236e:	69fa      	ldr	r2, [r7, #28]
 8042370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042374:	f043 030b 	orr.w	r3, r3, #11
 8042378:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 804237a:	69fb      	ldr	r3, [r7, #28]
 804237c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042380:	681b      	ldr	r3, [r3, #0]
 8042382:	69fa      	ldr	r2, [r7, #28]
 8042384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8042388:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 804238c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804238e:	687b      	ldr	r3, [r7, #4]
 8042390:	6818      	ldr	r0, [r3, #0]
 8042392:	687b      	ldr	r3, [r7, #4]
 8042394:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8042396:	687b      	ldr	r3, [r7, #4]
 8042398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 804239c:	461a      	mov	r2, r3
 804239e:	f005 ff7b 	bl	8048298 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80423a2:	687b      	ldr	r3, [r7, #4]
 80423a4:	681b      	ldr	r3, [r3, #0]
 80423a6:	695a      	ldr	r2, [r3, #20]
 80423a8:	687b      	ldr	r3, [r7, #4]
 80423aa:	681b      	ldr	r3, [r3, #0]
 80423ac:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80423b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80423b2:	687b      	ldr	r3, [r7, #4]
 80423b4:	681b      	ldr	r3, [r3, #0]
 80423b6:	4618      	mov	r0, r3
 80423b8:	f005 fea8 	bl	804810c <USB_ReadInterrupts>
 80423bc:	4603      	mov	r3, r0
 80423be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80423c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80423c6:	d123      	bne.n	8042410 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80423c8:	687b      	ldr	r3, [r7, #4]
 80423ca:	681b      	ldr	r3, [r3, #0]
 80423cc:	4618      	mov	r0, r3
 80423ce:	f005 ff3f 	bl	8048250 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80423d2:	687b      	ldr	r3, [r7, #4]
 80423d4:	681b      	ldr	r3, [r3, #0]
 80423d6:	4618      	mov	r0, r3
 80423d8:	f005 f8cb 	bl	8047572 <USB_GetDevSpeed>
 80423dc:	4603      	mov	r3, r0
 80423de:	461a      	mov	r2, r3
 80423e0:	687b      	ldr	r3, [r7, #4]
 80423e2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80423e4:	687b      	ldr	r3, [r7, #4]
 80423e6:	681c      	ldr	r4, [r3, #0]
 80423e8:	f001 fdc6 	bl	8043f78 <HAL_RCC_GetHCLKFreq>
 80423ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80423ee:	687b      	ldr	r3, [r7, #4]
 80423f0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80423f2:	461a      	mov	r2, r3
 80423f4:	4620      	mov	r0, r4
 80423f6:	f004 fdd5 	bl	8046fa4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80423fa:	6878      	ldr	r0, [r7, #4]
 80423fc:	f008 fd8b 	bl	804af16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8042400:	687b      	ldr	r3, [r7, #4]
 8042402:	681b      	ldr	r3, [r3, #0]
 8042404:	695a      	ldr	r2, [r3, #20]
 8042406:	687b      	ldr	r3, [r7, #4]
 8042408:	681b      	ldr	r3, [r3, #0]
 804240a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 804240e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8042410:	687b      	ldr	r3, [r7, #4]
 8042412:	681b      	ldr	r3, [r3, #0]
 8042414:	4618      	mov	r0, r3
 8042416:	f005 fe79 	bl	804810c <USB_ReadInterrupts>
 804241a:	4603      	mov	r3, r0
 804241c:	f003 0308 	and.w	r3, r3, #8
 8042420:	2b08      	cmp	r3, #8
 8042422:	d10a      	bne.n	804243a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8042424:	6878      	ldr	r0, [r7, #4]
 8042426:	f008 fd68 	bl	804aefa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 804242a:	687b      	ldr	r3, [r7, #4]
 804242c:	681b      	ldr	r3, [r3, #0]
 804242e:	695a      	ldr	r2, [r3, #20]
 8042430:	687b      	ldr	r3, [r7, #4]
 8042432:	681b      	ldr	r3, [r3, #0]
 8042434:	f002 0208 	and.w	r2, r2, #8
 8042438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 804243a:	687b      	ldr	r3, [r7, #4]
 804243c:	681b      	ldr	r3, [r3, #0]
 804243e:	4618      	mov	r0, r3
 8042440:	f005 fe64 	bl	804810c <USB_ReadInterrupts>
 8042444:	4603      	mov	r3, r0
 8042446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804244a:	2b80      	cmp	r3, #128	@ 0x80
 804244c:	d123      	bne.n	8042496 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 804244e:	6a3b      	ldr	r3, [r7, #32]
 8042450:	699b      	ldr	r3, [r3, #24]
 8042452:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8042456:	6a3b      	ldr	r3, [r7, #32]
 8042458:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804245a:	2301      	movs	r3, #1
 804245c:	627b      	str	r3, [r7, #36]	@ 0x24
 804245e:	e014      	b.n	804248a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8042460:	6879      	ldr	r1, [r7, #4]
 8042462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042464:	4613      	mov	r3, r2
 8042466:	00db      	lsls	r3, r3, #3
 8042468:	4413      	add	r3, r2
 804246a:	009b      	lsls	r3, r3, #2
 804246c:	440b      	add	r3, r1
 804246e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8042472:	781b      	ldrb	r3, [r3, #0]
 8042474:	2b01      	cmp	r3, #1
 8042476:	d105      	bne.n	8042484 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8042478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804247a:	b2db      	uxtb	r3, r3
 804247c:	4619      	mov	r1, r3
 804247e:	6878      	ldr	r0, [r7, #4]
 8042480:	f000 faa8 	bl	80429d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042486:	3301      	adds	r3, #1
 8042488:	627b      	str	r3, [r7, #36]	@ 0x24
 804248a:	687b      	ldr	r3, [r7, #4]
 804248c:	791b      	ldrb	r3, [r3, #4]
 804248e:	461a      	mov	r2, r3
 8042490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042492:	4293      	cmp	r3, r2
 8042494:	d3e4      	bcc.n	8042460 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8042496:	687b      	ldr	r3, [r7, #4]
 8042498:	681b      	ldr	r3, [r3, #0]
 804249a:	4618      	mov	r0, r3
 804249c:	f005 fe36 	bl	804810c <USB_ReadInterrupts>
 80424a0:	4603      	mov	r3, r0
 80424a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80424a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80424aa:	d13c      	bne.n	8042526 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80424ac:	2301      	movs	r3, #1
 80424ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80424b0:	e02b      	b.n	804250a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80424b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424b4:	015a      	lsls	r2, r3, #5
 80424b6:	69fb      	ldr	r3, [r7, #28]
 80424b8:	4413      	add	r3, r2
 80424ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80424be:	681b      	ldr	r3, [r3, #0]
 80424c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80424c2:	6879      	ldr	r1, [r7, #4]
 80424c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80424c6:	4613      	mov	r3, r2
 80424c8:	00db      	lsls	r3, r3, #3
 80424ca:	4413      	add	r3, r2
 80424cc:	009b      	lsls	r3, r3, #2
 80424ce:	440b      	add	r3, r1
 80424d0:	3318      	adds	r3, #24
 80424d2:	781b      	ldrb	r3, [r3, #0]
 80424d4:	2b01      	cmp	r3, #1
 80424d6:	d115      	bne.n	8042504 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80424d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80424da:	2b00      	cmp	r3, #0
 80424dc:	da12      	bge.n	8042504 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80424de:	6879      	ldr	r1, [r7, #4]
 80424e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80424e2:	4613      	mov	r3, r2
 80424e4:	00db      	lsls	r3, r3, #3
 80424e6:	4413      	add	r3, r2
 80424e8:	009b      	lsls	r3, r3, #2
 80424ea:	440b      	add	r3, r1
 80424ec:	3317      	adds	r3, #23
 80424ee:	2201      	movs	r2, #1
 80424f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80424f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80424f4:	b2db      	uxtb	r3, r3
 80424f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80424fa:	b2db      	uxtb	r3, r3
 80424fc:	4619      	mov	r1, r3
 80424fe:	6878      	ldr	r0, [r7, #4]
 8042500:	f000 fa68 	bl	80429d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8042504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042506:	3301      	adds	r3, #1
 8042508:	627b      	str	r3, [r7, #36]	@ 0x24
 804250a:	687b      	ldr	r3, [r7, #4]
 804250c:	791b      	ldrb	r3, [r3, #4]
 804250e:	461a      	mov	r2, r3
 8042510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042512:	4293      	cmp	r3, r2
 8042514:	d3cd      	bcc.n	80424b2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8042516:	687b      	ldr	r3, [r7, #4]
 8042518:	681b      	ldr	r3, [r3, #0]
 804251a:	695a      	ldr	r2, [r3, #20]
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	681b      	ldr	r3, [r3, #0]
 8042520:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8042524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8042526:	687b      	ldr	r3, [r7, #4]
 8042528:	681b      	ldr	r3, [r3, #0]
 804252a:	4618      	mov	r0, r3
 804252c:	f005 fdee 	bl	804810c <USB_ReadInterrupts>
 8042530:	4603      	mov	r3, r0
 8042532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8042536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 804253a:	d156      	bne.n	80425ea <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 804253c:	2301      	movs	r3, #1
 804253e:	627b      	str	r3, [r7, #36]	@ 0x24
 8042540:	e045      	b.n	80425ce <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8042542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042544:	015a      	lsls	r2, r3, #5
 8042546:	69fb      	ldr	r3, [r7, #28]
 8042548:	4413      	add	r3, r2
 804254a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804254e:	681b      	ldr	r3, [r3, #0]
 8042550:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8042552:	6879      	ldr	r1, [r7, #4]
 8042554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042556:	4613      	mov	r3, r2
 8042558:	00db      	lsls	r3, r3, #3
 804255a:	4413      	add	r3, r2
 804255c:	009b      	lsls	r3, r3, #2
 804255e:	440b      	add	r3, r1
 8042560:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8042564:	781b      	ldrb	r3, [r3, #0]
 8042566:	2b01      	cmp	r3, #1
 8042568:	d12e      	bne.n	80425c8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 804256a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 804256c:	2b00      	cmp	r3, #0
 804256e:	da2b      	bge.n	80425c8 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8042570:	69bb      	ldr	r3, [r7, #24]
 8042572:	0c1a      	lsrs	r2, r3, #16
 8042574:	687b      	ldr	r3, [r7, #4]
 8042576:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 804257a:	4053      	eors	r3, r2
 804257c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8042580:	2b00      	cmp	r3, #0
 8042582:	d121      	bne.n	80425c8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8042584:	6879      	ldr	r1, [r7, #4]
 8042586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8042588:	4613      	mov	r3, r2
 804258a:	00db      	lsls	r3, r3, #3
 804258c:	4413      	add	r3, r2
 804258e:	009b      	lsls	r3, r3, #2
 8042590:	440b      	add	r3, r1
 8042592:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8042596:	2201      	movs	r2, #1
 8042598:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 804259a:	6a3b      	ldr	r3, [r7, #32]
 804259c:	699b      	ldr	r3, [r3, #24]
 804259e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80425a2:	6a3b      	ldr	r3, [r7, #32]
 80425a4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80425a6:	6a3b      	ldr	r3, [r7, #32]
 80425a8:	695b      	ldr	r3, [r3, #20]
 80425aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80425ae:	2b00      	cmp	r3, #0
 80425b0:	d10a      	bne.n	80425c8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80425b2:	69fb      	ldr	r3, [r7, #28]
 80425b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80425b8:	685b      	ldr	r3, [r3, #4]
 80425ba:	69fa      	ldr	r2, [r7, #28]
 80425bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80425c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80425c4:	6053      	str	r3, [r2, #4]
            break;
 80425c6:	e008      	b.n	80425da <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80425c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80425ca:	3301      	adds	r3, #1
 80425cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80425ce:	687b      	ldr	r3, [r7, #4]
 80425d0:	791b      	ldrb	r3, [r3, #4]
 80425d2:	461a      	mov	r2, r3
 80425d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80425d6:	4293      	cmp	r3, r2
 80425d8:	d3b3      	bcc.n	8042542 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80425da:	687b      	ldr	r3, [r7, #4]
 80425dc:	681b      	ldr	r3, [r3, #0]
 80425de:	695a      	ldr	r2, [r3, #20]
 80425e0:	687b      	ldr	r3, [r7, #4]
 80425e2:	681b      	ldr	r3, [r3, #0]
 80425e4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80425e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80425ea:	687b      	ldr	r3, [r7, #4]
 80425ec:	681b      	ldr	r3, [r3, #0]
 80425ee:	4618      	mov	r0, r3
 80425f0:	f005 fd8c 	bl	804810c <USB_ReadInterrupts>
 80425f4:	4603      	mov	r3, r0
 80425f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80425fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80425fe:	d10a      	bne.n	8042616 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8042600:	6878      	ldr	r0, [r7, #4]
 8042602:	f008 fd09 	bl	804b018 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8042606:	687b      	ldr	r3, [r7, #4]
 8042608:	681b      	ldr	r3, [r3, #0]
 804260a:	695a      	ldr	r2, [r3, #20]
 804260c:	687b      	ldr	r3, [r7, #4]
 804260e:	681b      	ldr	r3, [r3, #0]
 8042610:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8042614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8042616:	687b      	ldr	r3, [r7, #4]
 8042618:	681b      	ldr	r3, [r3, #0]
 804261a:	4618      	mov	r0, r3
 804261c:	f005 fd76 	bl	804810c <USB_ReadInterrupts>
 8042620:	4603      	mov	r3, r0
 8042622:	f003 0304 	and.w	r3, r3, #4
 8042626:	2b04      	cmp	r3, #4
 8042628:	d115      	bne.n	8042656 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 804262a:	687b      	ldr	r3, [r7, #4]
 804262c:	681b      	ldr	r3, [r3, #0]
 804262e:	685b      	ldr	r3, [r3, #4]
 8042630:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8042632:	69bb      	ldr	r3, [r7, #24]
 8042634:	f003 0304 	and.w	r3, r3, #4
 8042638:	2b00      	cmp	r3, #0
 804263a:	d002      	beq.n	8042642 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 804263c:	6878      	ldr	r0, [r7, #4]
 804263e:	f008 fcf9 	bl	804b034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8042642:	687b      	ldr	r3, [r7, #4]
 8042644:	681b      	ldr	r3, [r3, #0]
 8042646:	6859      	ldr	r1, [r3, #4]
 8042648:	687b      	ldr	r3, [r7, #4]
 804264a:	681b      	ldr	r3, [r3, #0]
 804264c:	69ba      	ldr	r2, [r7, #24]
 804264e:	430a      	orrs	r2, r1
 8042650:	605a      	str	r2, [r3, #4]
 8042652:	e000      	b.n	8042656 <HAL_PCD_IRQHandler+0x996>
      return;
 8042654:	bf00      	nop
    }
  }
}
 8042656:	3734      	adds	r7, #52	@ 0x34
 8042658:	46bd      	mov	sp, r7
 804265a:	bd90      	pop	{r4, r7, pc}

0804265c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 804265c:	b580      	push	{r7, lr}
 804265e:	b082      	sub	sp, #8
 8042660:	af00      	add	r7, sp, #0
 8042662:	6078      	str	r0, [r7, #4]
 8042664:	460b      	mov	r3, r1
 8042666:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8042668:	687b      	ldr	r3, [r7, #4]
 804266a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 804266e:	2b01      	cmp	r3, #1
 8042670:	d101      	bne.n	8042676 <HAL_PCD_SetAddress+0x1a>
 8042672:	2302      	movs	r3, #2
 8042674:	e012      	b.n	804269c <HAL_PCD_SetAddress+0x40>
 8042676:	687b      	ldr	r3, [r7, #4]
 8042678:	2201      	movs	r2, #1
 804267a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	78fa      	ldrb	r2, [r7, #3]
 8042682:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8042684:	687b      	ldr	r3, [r7, #4]
 8042686:	681b      	ldr	r3, [r3, #0]
 8042688:	78fa      	ldrb	r2, [r7, #3]
 804268a:	4611      	mov	r1, r2
 804268c:	4618      	mov	r0, r3
 804268e:	f005 fcd5 	bl	804803c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8042692:	687b      	ldr	r3, [r7, #4]
 8042694:	2200      	movs	r2, #0
 8042696:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 804269a:	2300      	movs	r3, #0
}
 804269c:	4618      	mov	r0, r3
 804269e:	3708      	adds	r7, #8
 80426a0:	46bd      	mov	sp, r7
 80426a2:	bd80      	pop	{r7, pc}

080426a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80426a4:	b580      	push	{r7, lr}
 80426a6:	b084      	sub	sp, #16
 80426a8:	af00      	add	r7, sp, #0
 80426aa:	6078      	str	r0, [r7, #4]
 80426ac:	4608      	mov	r0, r1
 80426ae:	4611      	mov	r1, r2
 80426b0:	461a      	mov	r2, r3
 80426b2:	4603      	mov	r3, r0
 80426b4:	70fb      	strb	r3, [r7, #3]
 80426b6:	460b      	mov	r3, r1
 80426b8:	803b      	strh	r3, [r7, #0]
 80426ba:	4613      	mov	r3, r2
 80426bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80426be:	2300      	movs	r3, #0
 80426c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80426c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80426c6:	2b00      	cmp	r3, #0
 80426c8:	da0f      	bge.n	80426ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80426ca:	78fb      	ldrb	r3, [r7, #3]
 80426cc:	f003 020f 	and.w	r2, r3, #15
 80426d0:	4613      	mov	r3, r2
 80426d2:	00db      	lsls	r3, r3, #3
 80426d4:	4413      	add	r3, r2
 80426d6:	009b      	lsls	r3, r3, #2
 80426d8:	3310      	adds	r3, #16
 80426da:	687a      	ldr	r2, [r7, #4]
 80426dc:	4413      	add	r3, r2
 80426de:	3304      	adds	r3, #4
 80426e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80426e2:	68fb      	ldr	r3, [r7, #12]
 80426e4:	2201      	movs	r2, #1
 80426e6:	705a      	strb	r2, [r3, #1]
 80426e8:	e00f      	b.n	804270a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80426ea:	78fb      	ldrb	r3, [r7, #3]
 80426ec:	f003 020f 	and.w	r2, r3, #15
 80426f0:	4613      	mov	r3, r2
 80426f2:	00db      	lsls	r3, r3, #3
 80426f4:	4413      	add	r3, r2
 80426f6:	009b      	lsls	r3, r3, #2
 80426f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80426fc:	687a      	ldr	r2, [r7, #4]
 80426fe:	4413      	add	r3, r2
 8042700:	3304      	adds	r3, #4
 8042702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042704:	68fb      	ldr	r3, [r7, #12]
 8042706:	2200      	movs	r2, #0
 8042708:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 804270a:	78fb      	ldrb	r3, [r7, #3]
 804270c:	f003 030f 	and.w	r3, r3, #15
 8042710:	b2da      	uxtb	r2, r3
 8042712:	68fb      	ldr	r3, [r7, #12]
 8042714:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8042716:	883b      	ldrh	r3, [r7, #0]
 8042718:	f3c3 020a 	ubfx	r2, r3, #0, #11
 804271c:	68fb      	ldr	r3, [r7, #12]
 804271e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8042720:	68fb      	ldr	r3, [r7, #12]
 8042722:	78ba      	ldrb	r2, [r7, #2]
 8042724:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8042726:	68fb      	ldr	r3, [r7, #12]
 8042728:	785b      	ldrb	r3, [r3, #1]
 804272a:	2b00      	cmp	r3, #0
 804272c:	d004      	beq.n	8042738 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 804272e:	68fb      	ldr	r3, [r7, #12]
 8042730:	781b      	ldrb	r3, [r3, #0]
 8042732:	461a      	mov	r2, r3
 8042734:	68fb      	ldr	r3, [r7, #12]
 8042736:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8042738:	78bb      	ldrb	r3, [r7, #2]
 804273a:	2b02      	cmp	r3, #2
 804273c:	d102      	bne.n	8042744 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 804273e:	68fb      	ldr	r3, [r7, #12]
 8042740:	2200      	movs	r2, #0
 8042742:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8042744:	687b      	ldr	r3, [r7, #4]
 8042746:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 804274a:	2b01      	cmp	r3, #1
 804274c:	d101      	bne.n	8042752 <HAL_PCD_EP_Open+0xae>
 804274e:	2302      	movs	r3, #2
 8042750:	e00e      	b.n	8042770 <HAL_PCD_EP_Open+0xcc>
 8042752:	687b      	ldr	r3, [r7, #4]
 8042754:	2201      	movs	r2, #1
 8042756:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	681b      	ldr	r3, [r3, #0]
 804275e:	68f9      	ldr	r1, [r7, #12]
 8042760:	4618      	mov	r0, r3
 8042762:	f004 ff2b 	bl	80475bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8042766:	687b      	ldr	r3, [r7, #4]
 8042768:	2200      	movs	r2, #0
 804276a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 804276e:	7afb      	ldrb	r3, [r7, #11]
}
 8042770:	4618      	mov	r0, r3
 8042772:	3710      	adds	r7, #16
 8042774:	46bd      	mov	sp, r7
 8042776:	bd80      	pop	{r7, pc}

08042778 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8042778:	b580      	push	{r7, lr}
 804277a:	b086      	sub	sp, #24
 804277c:	af00      	add	r7, sp, #0
 804277e:	60f8      	str	r0, [r7, #12]
 8042780:	607a      	str	r2, [r7, #4]
 8042782:	603b      	str	r3, [r7, #0]
 8042784:	460b      	mov	r3, r1
 8042786:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042788:	7afb      	ldrb	r3, [r7, #11]
 804278a:	f003 020f 	and.w	r2, r3, #15
 804278e:	4613      	mov	r3, r2
 8042790:	00db      	lsls	r3, r3, #3
 8042792:	4413      	add	r3, r2
 8042794:	009b      	lsls	r3, r3, #2
 8042796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 804279a:	68fa      	ldr	r2, [r7, #12]
 804279c:	4413      	add	r3, r2
 804279e:	3304      	adds	r3, #4
 80427a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80427a2:	697b      	ldr	r3, [r7, #20]
 80427a4:	687a      	ldr	r2, [r7, #4]
 80427a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80427a8:	697b      	ldr	r3, [r7, #20]
 80427aa:	683a      	ldr	r2, [r7, #0]
 80427ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80427ae:	697b      	ldr	r3, [r7, #20]
 80427b0:	2200      	movs	r2, #0
 80427b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80427b4:	697b      	ldr	r3, [r7, #20]
 80427b6:	2200      	movs	r2, #0
 80427b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80427ba:	7afb      	ldrb	r3, [r7, #11]
 80427bc:	f003 030f 	and.w	r3, r3, #15
 80427c0:	b2da      	uxtb	r2, r3
 80427c2:	697b      	ldr	r3, [r7, #20]
 80427c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80427c6:	68fb      	ldr	r3, [r7, #12]
 80427c8:	799b      	ldrb	r3, [r3, #6]
 80427ca:	2b01      	cmp	r3, #1
 80427cc:	d102      	bne.n	80427d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80427ce:	687a      	ldr	r2, [r7, #4]
 80427d0:	697b      	ldr	r3, [r7, #20]
 80427d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80427d4:	68fb      	ldr	r3, [r7, #12]
 80427d6:	6818      	ldr	r0, [r3, #0]
 80427d8:	68fb      	ldr	r3, [r7, #12]
 80427da:	799b      	ldrb	r3, [r3, #6]
 80427dc:	461a      	mov	r2, r3
 80427de:	6979      	ldr	r1, [r7, #20]
 80427e0:	f004 ff74 	bl	80476cc <USB_EPStartXfer>

  return HAL_OK;
 80427e4:	2300      	movs	r3, #0
}
 80427e6:	4618      	mov	r0, r3
 80427e8:	3718      	adds	r7, #24
 80427ea:	46bd      	mov	sp, r7
 80427ec:	bd80      	pop	{r7, pc}

080427ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80427ee:	b580      	push	{r7, lr}
 80427f0:	b086      	sub	sp, #24
 80427f2:	af00      	add	r7, sp, #0
 80427f4:	60f8      	str	r0, [r7, #12]
 80427f6:	607a      	str	r2, [r7, #4]
 80427f8:	603b      	str	r3, [r7, #0]
 80427fa:	460b      	mov	r3, r1
 80427fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80427fe:	7afb      	ldrb	r3, [r7, #11]
 8042800:	f003 020f 	and.w	r2, r3, #15
 8042804:	4613      	mov	r3, r2
 8042806:	00db      	lsls	r3, r3, #3
 8042808:	4413      	add	r3, r2
 804280a:	009b      	lsls	r3, r3, #2
 804280c:	3310      	adds	r3, #16
 804280e:	68fa      	ldr	r2, [r7, #12]
 8042810:	4413      	add	r3, r2
 8042812:	3304      	adds	r3, #4
 8042814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8042816:	697b      	ldr	r3, [r7, #20]
 8042818:	687a      	ldr	r2, [r7, #4]
 804281a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 804281c:	697b      	ldr	r3, [r7, #20]
 804281e:	683a      	ldr	r2, [r7, #0]
 8042820:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8042822:	697b      	ldr	r3, [r7, #20]
 8042824:	2200      	movs	r2, #0
 8042826:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8042828:	697b      	ldr	r3, [r7, #20]
 804282a:	2201      	movs	r2, #1
 804282c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 804282e:	7afb      	ldrb	r3, [r7, #11]
 8042830:	f003 030f 	and.w	r3, r3, #15
 8042834:	b2da      	uxtb	r2, r3
 8042836:	697b      	ldr	r3, [r7, #20]
 8042838:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 804283a:	68fb      	ldr	r3, [r7, #12]
 804283c:	799b      	ldrb	r3, [r3, #6]
 804283e:	2b01      	cmp	r3, #1
 8042840:	d102      	bne.n	8042848 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8042842:	687a      	ldr	r2, [r7, #4]
 8042844:	697b      	ldr	r3, [r7, #20]
 8042846:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8042848:	68fb      	ldr	r3, [r7, #12]
 804284a:	6818      	ldr	r0, [r3, #0]
 804284c:	68fb      	ldr	r3, [r7, #12]
 804284e:	799b      	ldrb	r3, [r3, #6]
 8042850:	461a      	mov	r2, r3
 8042852:	6979      	ldr	r1, [r7, #20]
 8042854:	f004 ff3a 	bl	80476cc <USB_EPStartXfer>

  return HAL_OK;
 8042858:	2300      	movs	r3, #0
}
 804285a:	4618      	mov	r0, r3
 804285c:	3718      	adds	r7, #24
 804285e:	46bd      	mov	sp, r7
 8042860:	bd80      	pop	{r7, pc}

08042862 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042862:	b580      	push	{r7, lr}
 8042864:	b084      	sub	sp, #16
 8042866:	af00      	add	r7, sp, #0
 8042868:	6078      	str	r0, [r7, #4]
 804286a:	460b      	mov	r3, r1
 804286c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 804286e:	78fb      	ldrb	r3, [r7, #3]
 8042870:	f003 030f 	and.w	r3, r3, #15
 8042874:	687a      	ldr	r2, [r7, #4]
 8042876:	7912      	ldrb	r2, [r2, #4]
 8042878:	4293      	cmp	r3, r2
 804287a:	d901      	bls.n	8042880 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 804287c:	2301      	movs	r3, #1
 804287e:	e04f      	b.n	8042920 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8042880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8042884:	2b00      	cmp	r3, #0
 8042886:	da0f      	bge.n	80428a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8042888:	78fb      	ldrb	r3, [r7, #3]
 804288a:	f003 020f 	and.w	r2, r3, #15
 804288e:	4613      	mov	r3, r2
 8042890:	00db      	lsls	r3, r3, #3
 8042892:	4413      	add	r3, r2
 8042894:	009b      	lsls	r3, r3, #2
 8042896:	3310      	adds	r3, #16
 8042898:	687a      	ldr	r2, [r7, #4]
 804289a:	4413      	add	r3, r2
 804289c:	3304      	adds	r3, #4
 804289e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80428a0:	68fb      	ldr	r3, [r7, #12]
 80428a2:	2201      	movs	r2, #1
 80428a4:	705a      	strb	r2, [r3, #1]
 80428a6:	e00d      	b.n	80428c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80428a8:	78fa      	ldrb	r2, [r7, #3]
 80428aa:	4613      	mov	r3, r2
 80428ac:	00db      	lsls	r3, r3, #3
 80428ae:	4413      	add	r3, r2
 80428b0:	009b      	lsls	r3, r3, #2
 80428b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80428b6:	687a      	ldr	r2, [r7, #4]
 80428b8:	4413      	add	r3, r2
 80428ba:	3304      	adds	r3, #4
 80428bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80428be:	68fb      	ldr	r3, [r7, #12]
 80428c0:	2200      	movs	r2, #0
 80428c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80428c4:	68fb      	ldr	r3, [r7, #12]
 80428c6:	2201      	movs	r2, #1
 80428c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80428ca:	78fb      	ldrb	r3, [r7, #3]
 80428cc:	f003 030f 	and.w	r3, r3, #15
 80428d0:	b2da      	uxtb	r2, r3
 80428d2:	68fb      	ldr	r3, [r7, #12]
 80428d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80428dc:	2b01      	cmp	r3, #1
 80428de:	d101      	bne.n	80428e4 <HAL_PCD_EP_SetStall+0x82>
 80428e0:	2302      	movs	r3, #2
 80428e2:	e01d      	b.n	8042920 <HAL_PCD_EP_SetStall+0xbe>
 80428e4:	687b      	ldr	r3, [r7, #4]
 80428e6:	2201      	movs	r2, #1
 80428e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80428ec:	687b      	ldr	r3, [r7, #4]
 80428ee:	681b      	ldr	r3, [r3, #0]
 80428f0:	68f9      	ldr	r1, [r7, #12]
 80428f2:	4618      	mov	r0, r3
 80428f4:	f005 face 	bl	8047e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80428f8:	78fb      	ldrb	r3, [r7, #3]
 80428fa:	f003 030f 	and.w	r3, r3, #15
 80428fe:	2b00      	cmp	r3, #0
 8042900:	d109      	bne.n	8042916 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8042902:	687b      	ldr	r3, [r7, #4]
 8042904:	6818      	ldr	r0, [r3, #0]
 8042906:	687b      	ldr	r3, [r7, #4]
 8042908:	7999      	ldrb	r1, [r3, #6]
 804290a:	687b      	ldr	r3, [r7, #4]
 804290c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042910:	461a      	mov	r2, r3
 8042912:	f005 fcc1 	bl	8048298 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8042916:	687b      	ldr	r3, [r7, #4]
 8042918:	2200      	movs	r2, #0
 804291a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 804291e:	2300      	movs	r3, #0
}
 8042920:	4618      	mov	r0, r3
 8042922:	3710      	adds	r7, #16
 8042924:	46bd      	mov	sp, r7
 8042926:	bd80      	pop	{r7, pc}

08042928 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8042928:	b580      	push	{r7, lr}
 804292a:	b084      	sub	sp, #16
 804292c:	af00      	add	r7, sp, #0
 804292e:	6078      	str	r0, [r7, #4]
 8042930:	460b      	mov	r3, r1
 8042932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8042934:	78fb      	ldrb	r3, [r7, #3]
 8042936:	f003 030f 	and.w	r3, r3, #15
 804293a:	687a      	ldr	r2, [r7, #4]
 804293c:	7912      	ldrb	r2, [r2, #4]
 804293e:	4293      	cmp	r3, r2
 8042940:	d901      	bls.n	8042946 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8042942:	2301      	movs	r3, #1
 8042944:	e042      	b.n	80429cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8042946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804294a:	2b00      	cmp	r3, #0
 804294c:	da0f      	bge.n	804296e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 804294e:	78fb      	ldrb	r3, [r7, #3]
 8042950:	f003 020f 	and.w	r2, r3, #15
 8042954:	4613      	mov	r3, r2
 8042956:	00db      	lsls	r3, r3, #3
 8042958:	4413      	add	r3, r2
 804295a:	009b      	lsls	r3, r3, #2
 804295c:	3310      	adds	r3, #16
 804295e:	687a      	ldr	r2, [r7, #4]
 8042960:	4413      	add	r3, r2
 8042962:	3304      	adds	r3, #4
 8042964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8042966:	68fb      	ldr	r3, [r7, #12]
 8042968:	2201      	movs	r2, #1
 804296a:	705a      	strb	r2, [r3, #1]
 804296c:	e00f      	b.n	804298e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 804296e:	78fb      	ldrb	r3, [r7, #3]
 8042970:	f003 020f 	and.w	r2, r3, #15
 8042974:	4613      	mov	r3, r2
 8042976:	00db      	lsls	r3, r3, #3
 8042978:	4413      	add	r3, r2
 804297a:	009b      	lsls	r3, r3, #2
 804297c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042980:	687a      	ldr	r2, [r7, #4]
 8042982:	4413      	add	r3, r2
 8042984:	3304      	adds	r3, #4
 8042986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8042988:	68fb      	ldr	r3, [r7, #12]
 804298a:	2200      	movs	r2, #0
 804298c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 804298e:	68fb      	ldr	r3, [r7, #12]
 8042990:	2200      	movs	r2, #0
 8042992:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8042994:	78fb      	ldrb	r3, [r7, #3]
 8042996:	f003 030f 	and.w	r3, r3, #15
 804299a:	b2da      	uxtb	r2, r3
 804299c:	68fb      	ldr	r3, [r7, #12]
 804299e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80429a0:	687b      	ldr	r3, [r7, #4]
 80429a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80429a6:	2b01      	cmp	r3, #1
 80429a8:	d101      	bne.n	80429ae <HAL_PCD_EP_ClrStall+0x86>
 80429aa:	2302      	movs	r3, #2
 80429ac:	e00e      	b.n	80429cc <HAL_PCD_EP_ClrStall+0xa4>
 80429ae:	687b      	ldr	r3, [r7, #4]
 80429b0:	2201      	movs	r2, #1
 80429b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80429b6:	687b      	ldr	r3, [r7, #4]
 80429b8:	681b      	ldr	r3, [r3, #0]
 80429ba:	68f9      	ldr	r1, [r7, #12]
 80429bc:	4618      	mov	r0, r3
 80429be:	f005 fad7 	bl	8047f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80429c2:	687b      	ldr	r3, [r7, #4]
 80429c4:	2200      	movs	r2, #0
 80429c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80429ca:	2300      	movs	r3, #0
}
 80429cc:	4618      	mov	r0, r3
 80429ce:	3710      	adds	r7, #16
 80429d0:	46bd      	mov	sp, r7
 80429d2:	bd80      	pop	{r7, pc}

080429d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80429d4:	b580      	push	{r7, lr}
 80429d6:	b084      	sub	sp, #16
 80429d8:	af00      	add	r7, sp, #0
 80429da:	6078      	str	r0, [r7, #4]
 80429dc:	460b      	mov	r3, r1
 80429de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80429e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80429e4:	2b00      	cmp	r3, #0
 80429e6:	da0c      	bge.n	8042a02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80429e8:	78fb      	ldrb	r3, [r7, #3]
 80429ea:	f003 020f 	and.w	r2, r3, #15
 80429ee:	4613      	mov	r3, r2
 80429f0:	00db      	lsls	r3, r3, #3
 80429f2:	4413      	add	r3, r2
 80429f4:	009b      	lsls	r3, r3, #2
 80429f6:	3310      	adds	r3, #16
 80429f8:	687a      	ldr	r2, [r7, #4]
 80429fa:	4413      	add	r3, r2
 80429fc:	3304      	adds	r3, #4
 80429fe:	60fb      	str	r3, [r7, #12]
 8042a00:	e00c      	b.n	8042a1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8042a02:	78fb      	ldrb	r3, [r7, #3]
 8042a04:	f003 020f 	and.w	r2, r3, #15
 8042a08:	4613      	mov	r3, r2
 8042a0a:	00db      	lsls	r3, r3, #3
 8042a0c:	4413      	add	r3, r2
 8042a0e:	009b      	lsls	r3, r3, #2
 8042a10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042a14:	687a      	ldr	r2, [r7, #4]
 8042a16:	4413      	add	r3, r2
 8042a18:	3304      	adds	r3, #4
 8042a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8042a1c:	687b      	ldr	r3, [r7, #4]
 8042a1e:	681b      	ldr	r3, [r3, #0]
 8042a20:	68f9      	ldr	r1, [r7, #12]
 8042a22:	4618      	mov	r0, r3
 8042a24:	f005 f8f6 	bl	8047c14 <USB_EPStopXfer>
 8042a28:	4603      	mov	r3, r0
 8042a2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8042a2c:	7afb      	ldrb	r3, [r7, #11]
}
 8042a2e:	4618      	mov	r0, r3
 8042a30:	3710      	adds	r7, #16
 8042a32:	46bd      	mov	sp, r7
 8042a34:	bd80      	pop	{r7, pc}

08042a36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042a36:	b580      	push	{r7, lr}
 8042a38:	b08a      	sub	sp, #40	@ 0x28
 8042a3a:	af02      	add	r7, sp, #8
 8042a3c:	6078      	str	r0, [r7, #4]
 8042a3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042a40:	687b      	ldr	r3, [r7, #4]
 8042a42:	681b      	ldr	r3, [r3, #0]
 8042a44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042a46:	697b      	ldr	r3, [r7, #20]
 8042a48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8042a4a:	683a      	ldr	r2, [r7, #0]
 8042a4c:	4613      	mov	r3, r2
 8042a4e:	00db      	lsls	r3, r3, #3
 8042a50:	4413      	add	r3, r2
 8042a52:	009b      	lsls	r3, r3, #2
 8042a54:	3310      	adds	r3, #16
 8042a56:	687a      	ldr	r2, [r7, #4]
 8042a58:	4413      	add	r3, r2
 8042a5a:	3304      	adds	r3, #4
 8042a5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8042a5e:	68fb      	ldr	r3, [r7, #12]
 8042a60:	695a      	ldr	r2, [r3, #20]
 8042a62:	68fb      	ldr	r3, [r7, #12]
 8042a64:	691b      	ldr	r3, [r3, #16]
 8042a66:	429a      	cmp	r2, r3
 8042a68:	d901      	bls.n	8042a6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8042a6a:	2301      	movs	r3, #1
 8042a6c:	e06b      	b.n	8042b46 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8042a6e:	68fb      	ldr	r3, [r7, #12]
 8042a70:	691a      	ldr	r2, [r3, #16]
 8042a72:	68fb      	ldr	r3, [r7, #12]
 8042a74:	695b      	ldr	r3, [r3, #20]
 8042a76:	1ad3      	subs	r3, r2, r3
 8042a78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8042a7a:	68fb      	ldr	r3, [r7, #12]
 8042a7c:	689b      	ldr	r3, [r3, #8]
 8042a7e:	69fa      	ldr	r2, [r7, #28]
 8042a80:	429a      	cmp	r2, r3
 8042a82:	d902      	bls.n	8042a8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8042a84:	68fb      	ldr	r3, [r7, #12]
 8042a86:	689b      	ldr	r3, [r3, #8]
 8042a88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8042a8a:	69fb      	ldr	r3, [r7, #28]
 8042a8c:	3303      	adds	r3, #3
 8042a8e:	089b      	lsrs	r3, r3, #2
 8042a90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042a92:	e02a      	b.n	8042aea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8042a94:	68fb      	ldr	r3, [r7, #12]
 8042a96:	691a      	ldr	r2, [r3, #16]
 8042a98:	68fb      	ldr	r3, [r7, #12]
 8042a9a:	695b      	ldr	r3, [r3, #20]
 8042a9c:	1ad3      	subs	r3, r2, r3
 8042a9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8042aa0:	68fb      	ldr	r3, [r7, #12]
 8042aa2:	689b      	ldr	r3, [r3, #8]
 8042aa4:	69fa      	ldr	r2, [r7, #28]
 8042aa6:	429a      	cmp	r2, r3
 8042aa8:	d902      	bls.n	8042ab0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8042aaa:	68fb      	ldr	r3, [r7, #12]
 8042aac:	689b      	ldr	r3, [r3, #8]
 8042aae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8042ab0:	69fb      	ldr	r3, [r7, #28]
 8042ab2:	3303      	adds	r3, #3
 8042ab4:	089b      	lsrs	r3, r3, #2
 8042ab6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042ab8:	68fb      	ldr	r3, [r7, #12]
 8042aba:	68d9      	ldr	r1, [r3, #12]
 8042abc:	683b      	ldr	r3, [r7, #0]
 8042abe:	b2da      	uxtb	r2, r3
 8042ac0:	69fb      	ldr	r3, [r7, #28]
 8042ac2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8042ac4:	687b      	ldr	r3, [r7, #4]
 8042ac6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8042ac8:	9300      	str	r3, [sp, #0]
 8042aca:	4603      	mov	r3, r0
 8042acc:	6978      	ldr	r0, [r7, #20]
 8042ace:	f005 f94b 	bl	8047d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8042ad2:	68fb      	ldr	r3, [r7, #12]
 8042ad4:	68da      	ldr	r2, [r3, #12]
 8042ad6:	69fb      	ldr	r3, [r7, #28]
 8042ad8:	441a      	add	r2, r3
 8042ada:	68fb      	ldr	r3, [r7, #12]
 8042adc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8042ade:	68fb      	ldr	r3, [r7, #12]
 8042ae0:	695a      	ldr	r2, [r3, #20]
 8042ae2:	69fb      	ldr	r3, [r7, #28]
 8042ae4:	441a      	add	r2, r3
 8042ae6:	68fb      	ldr	r3, [r7, #12]
 8042ae8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042aea:	683b      	ldr	r3, [r7, #0]
 8042aec:	015a      	lsls	r2, r3, #5
 8042aee:	693b      	ldr	r3, [r7, #16]
 8042af0:	4413      	add	r3, r2
 8042af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8042af6:	699b      	ldr	r3, [r3, #24]
 8042af8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042afa:	69ba      	ldr	r2, [r7, #24]
 8042afc:	429a      	cmp	r2, r3
 8042afe:	d809      	bhi.n	8042b14 <PCD_WriteEmptyTxFifo+0xde>
 8042b00:	68fb      	ldr	r3, [r7, #12]
 8042b02:	695a      	ldr	r2, [r3, #20]
 8042b04:	68fb      	ldr	r3, [r7, #12]
 8042b06:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8042b08:	429a      	cmp	r2, r3
 8042b0a:	d203      	bcs.n	8042b14 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8042b0c:	68fb      	ldr	r3, [r7, #12]
 8042b0e:	691b      	ldr	r3, [r3, #16]
 8042b10:	2b00      	cmp	r3, #0
 8042b12:	d1bf      	bne.n	8042a94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8042b14:	68fb      	ldr	r3, [r7, #12]
 8042b16:	691a      	ldr	r2, [r3, #16]
 8042b18:	68fb      	ldr	r3, [r7, #12]
 8042b1a:	695b      	ldr	r3, [r3, #20]
 8042b1c:	429a      	cmp	r2, r3
 8042b1e:	d811      	bhi.n	8042b44 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8042b20:	683b      	ldr	r3, [r7, #0]
 8042b22:	f003 030f 	and.w	r3, r3, #15
 8042b26:	2201      	movs	r2, #1
 8042b28:	fa02 f303 	lsl.w	r3, r2, r3
 8042b2c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8042b2e:	693b      	ldr	r3, [r7, #16]
 8042b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8042b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8042b36:	68bb      	ldr	r3, [r7, #8]
 8042b38:	43db      	mvns	r3, r3
 8042b3a:	6939      	ldr	r1, [r7, #16]
 8042b3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8042b40:	4013      	ands	r3, r2
 8042b42:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8042b44:	2300      	movs	r3, #0
}
 8042b46:	4618      	mov	r0, r3
 8042b48:	3720      	adds	r7, #32
 8042b4a:	46bd      	mov	sp, r7
 8042b4c:	bd80      	pop	{r7, pc}
	...

08042b50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042b50:	b580      	push	{r7, lr}
 8042b52:	b088      	sub	sp, #32
 8042b54:	af00      	add	r7, sp, #0
 8042b56:	6078      	str	r0, [r7, #4]
 8042b58:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042b5a:	687b      	ldr	r3, [r7, #4]
 8042b5c:	681b      	ldr	r3, [r3, #0]
 8042b5e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042b60:	69fb      	ldr	r3, [r7, #28]
 8042b62:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042b64:	69fb      	ldr	r3, [r7, #28]
 8042b66:	333c      	adds	r3, #60	@ 0x3c
 8042b68:	3304      	adds	r3, #4
 8042b6a:	681b      	ldr	r3, [r3, #0]
 8042b6c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042b6e:	683b      	ldr	r3, [r7, #0]
 8042b70:	015a      	lsls	r2, r3, #5
 8042b72:	69bb      	ldr	r3, [r7, #24]
 8042b74:	4413      	add	r3, r2
 8042b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042b7a:	689b      	ldr	r3, [r3, #8]
 8042b7c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8042b7e:	687b      	ldr	r3, [r7, #4]
 8042b80:	799b      	ldrb	r3, [r3, #6]
 8042b82:	2b01      	cmp	r3, #1
 8042b84:	d17b      	bne.n	8042c7e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8042b86:	693b      	ldr	r3, [r7, #16]
 8042b88:	f003 0308 	and.w	r3, r3, #8
 8042b8c:	2b00      	cmp	r3, #0
 8042b8e:	d015      	beq.n	8042bbc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042b90:	697b      	ldr	r3, [r7, #20]
 8042b92:	4a61      	ldr	r2, [pc, #388]	@ (8042d18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042b94:	4293      	cmp	r3, r2
 8042b96:	f240 80b9 	bls.w	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042b9a:	693b      	ldr	r3, [r7, #16]
 8042b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042ba0:	2b00      	cmp	r3, #0
 8042ba2:	f000 80b3 	beq.w	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042ba6:	683b      	ldr	r3, [r7, #0]
 8042ba8:	015a      	lsls	r2, r3, #5
 8042baa:	69bb      	ldr	r3, [r7, #24]
 8042bac:	4413      	add	r3, r2
 8042bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042bb2:	461a      	mov	r2, r3
 8042bb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042bb8:	6093      	str	r3, [r2, #8]
 8042bba:	e0a7      	b.n	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8042bbc:	693b      	ldr	r3, [r7, #16]
 8042bbe:	f003 0320 	and.w	r3, r3, #32
 8042bc2:	2b00      	cmp	r3, #0
 8042bc4:	d009      	beq.n	8042bda <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042bc6:	683b      	ldr	r3, [r7, #0]
 8042bc8:	015a      	lsls	r2, r3, #5
 8042bca:	69bb      	ldr	r3, [r7, #24]
 8042bcc:	4413      	add	r3, r2
 8042bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042bd2:	461a      	mov	r2, r3
 8042bd4:	2320      	movs	r3, #32
 8042bd6:	6093      	str	r3, [r2, #8]
 8042bd8:	e098      	b.n	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8042bda:	693b      	ldr	r3, [r7, #16]
 8042bdc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8042be0:	2b00      	cmp	r3, #0
 8042be2:	f040 8093 	bne.w	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042be6:	697b      	ldr	r3, [r7, #20]
 8042be8:	4a4b      	ldr	r2, [pc, #300]	@ (8042d18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8042bea:	4293      	cmp	r3, r2
 8042bec:	d90f      	bls.n	8042c0e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042bee:	693b      	ldr	r3, [r7, #16]
 8042bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042bf4:	2b00      	cmp	r3, #0
 8042bf6:	d00a      	beq.n	8042c0e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042bf8:	683b      	ldr	r3, [r7, #0]
 8042bfa:	015a      	lsls	r2, r3, #5
 8042bfc:	69bb      	ldr	r3, [r7, #24]
 8042bfe:	4413      	add	r3, r2
 8042c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c04:	461a      	mov	r2, r3
 8042c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042c0a:	6093      	str	r3, [r2, #8]
 8042c0c:	e07e      	b.n	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8042c0e:	683a      	ldr	r2, [r7, #0]
 8042c10:	4613      	mov	r3, r2
 8042c12:	00db      	lsls	r3, r3, #3
 8042c14:	4413      	add	r3, r2
 8042c16:	009b      	lsls	r3, r3, #2
 8042c18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8042c1c:	687a      	ldr	r2, [r7, #4]
 8042c1e:	4413      	add	r3, r2
 8042c20:	3304      	adds	r3, #4
 8042c22:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8042c24:	68fb      	ldr	r3, [r7, #12]
 8042c26:	6a1a      	ldr	r2, [r3, #32]
 8042c28:	683b      	ldr	r3, [r7, #0]
 8042c2a:	0159      	lsls	r1, r3, #5
 8042c2c:	69bb      	ldr	r3, [r7, #24]
 8042c2e:	440b      	add	r3, r1
 8042c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c34:	691b      	ldr	r3, [r3, #16]
 8042c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042c3a:	1ad2      	subs	r2, r2, r3
 8042c3c:	68fb      	ldr	r3, [r7, #12]
 8042c3e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8042c40:	683b      	ldr	r3, [r7, #0]
 8042c42:	2b00      	cmp	r3, #0
 8042c44:	d114      	bne.n	8042c70 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8042c46:	68fb      	ldr	r3, [r7, #12]
 8042c48:	691b      	ldr	r3, [r3, #16]
 8042c4a:	2b00      	cmp	r3, #0
 8042c4c:	d109      	bne.n	8042c62 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042c4e:	687b      	ldr	r3, [r7, #4]
 8042c50:	6818      	ldr	r0, [r3, #0]
 8042c52:	687b      	ldr	r3, [r7, #4]
 8042c54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042c58:	461a      	mov	r2, r3
 8042c5a:	2101      	movs	r1, #1
 8042c5c:	f005 fb1c 	bl	8048298 <USB_EP0_OutStart>
 8042c60:	e006      	b.n	8042c70 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8042c62:	68fb      	ldr	r3, [r7, #12]
 8042c64:	68da      	ldr	r2, [r3, #12]
 8042c66:	68fb      	ldr	r3, [r7, #12]
 8042c68:	695b      	ldr	r3, [r3, #20]
 8042c6a:	441a      	add	r2, r3
 8042c6c:	68fb      	ldr	r3, [r7, #12]
 8042c6e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042c70:	683b      	ldr	r3, [r7, #0]
 8042c72:	b2db      	uxtb	r3, r3
 8042c74:	4619      	mov	r1, r3
 8042c76:	6878      	ldr	r0, [r7, #4]
 8042c78:	f008 f90a 	bl	804ae90 <HAL_PCD_DataOutStageCallback>
 8042c7c:	e046      	b.n	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8042c7e:	697b      	ldr	r3, [r7, #20]
 8042c80:	4a26      	ldr	r2, [pc, #152]	@ (8042d1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8042c82:	4293      	cmp	r3, r2
 8042c84:	d124      	bne.n	8042cd0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8042c86:	693b      	ldr	r3, [r7, #16]
 8042c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8042c8c:	2b00      	cmp	r3, #0
 8042c8e:	d00a      	beq.n	8042ca6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042c90:	683b      	ldr	r3, [r7, #0]
 8042c92:	015a      	lsls	r2, r3, #5
 8042c94:	69bb      	ldr	r3, [r7, #24]
 8042c96:	4413      	add	r3, r2
 8042c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042c9c:	461a      	mov	r2, r3
 8042c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042ca2:	6093      	str	r3, [r2, #8]
 8042ca4:	e032      	b.n	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8042ca6:	693b      	ldr	r3, [r7, #16]
 8042ca8:	f003 0320 	and.w	r3, r3, #32
 8042cac:	2b00      	cmp	r3, #0
 8042cae:	d008      	beq.n	8042cc2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8042cb0:	683b      	ldr	r3, [r7, #0]
 8042cb2:	015a      	lsls	r2, r3, #5
 8042cb4:	69bb      	ldr	r3, [r7, #24]
 8042cb6:	4413      	add	r3, r2
 8042cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042cbc:	461a      	mov	r2, r3
 8042cbe:	2320      	movs	r3, #32
 8042cc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042cc2:	683b      	ldr	r3, [r7, #0]
 8042cc4:	b2db      	uxtb	r3, r3
 8042cc6:	4619      	mov	r1, r3
 8042cc8:	6878      	ldr	r0, [r7, #4]
 8042cca:	f008 f8e1 	bl	804ae90 <HAL_PCD_DataOutStageCallback>
 8042cce:	e01d      	b.n	8042d0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8042cd0:	683b      	ldr	r3, [r7, #0]
 8042cd2:	2b00      	cmp	r3, #0
 8042cd4:	d114      	bne.n	8042d00 <PCD_EP_OutXfrComplete_int+0x1b0>
 8042cd6:	6879      	ldr	r1, [r7, #4]
 8042cd8:	683a      	ldr	r2, [r7, #0]
 8042cda:	4613      	mov	r3, r2
 8042cdc:	00db      	lsls	r3, r3, #3
 8042cde:	4413      	add	r3, r2
 8042ce0:	009b      	lsls	r3, r3, #2
 8042ce2:	440b      	add	r3, r1
 8042ce4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8042ce8:	681b      	ldr	r3, [r3, #0]
 8042cea:	2b00      	cmp	r3, #0
 8042cec:	d108      	bne.n	8042d00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8042cee:	687b      	ldr	r3, [r7, #4]
 8042cf0:	6818      	ldr	r0, [r3, #0]
 8042cf2:	687b      	ldr	r3, [r7, #4]
 8042cf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042cf8:	461a      	mov	r2, r3
 8042cfa:	2100      	movs	r1, #0
 8042cfc:	f005 facc 	bl	8048298 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8042d00:	683b      	ldr	r3, [r7, #0]
 8042d02:	b2db      	uxtb	r3, r3
 8042d04:	4619      	mov	r1, r3
 8042d06:	6878      	ldr	r0, [r7, #4]
 8042d08:	f008 f8c2 	bl	804ae90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8042d0c:	2300      	movs	r3, #0
}
 8042d0e:	4618      	mov	r0, r3
 8042d10:	3720      	adds	r7, #32
 8042d12:	46bd      	mov	sp, r7
 8042d14:	bd80      	pop	{r7, pc}
 8042d16:	bf00      	nop
 8042d18:	4f54300a 	.word	0x4f54300a
 8042d1c:	4f54310a 	.word	0x4f54310a

08042d20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8042d20:	b580      	push	{r7, lr}
 8042d22:	b086      	sub	sp, #24
 8042d24:	af00      	add	r7, sp, #0
 8042d26:	6078      	str	r0, [r7, #4]
 8042d28:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042d2a:	687b      	ldr	r3, [r7, #4]
 8042d2c:	681b      	ldr	r3, [r3, #0]
 8042d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8042d30:	697b      	ldr	r3, [r7, #20]
 8042d32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8042d34:	697b      	ldr	r3, [r7, #20]
 8042d36:	333c      	adds	r3, #60	@ 0x3c
 8042d38:	3304      	adds	r3, #4
 8042d3a:	681b      	ldr	r3, [r3, #0]
 8042d3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8042d3e:	683b      	ldr	r3, [r7, #0]
 8042d40:	015a      	lsls	r2, r3, #5
 8042d42:	693b      	ldr	r3, [r7, #16]
 8042d44:	4413      	add	r3, r2
 8042d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d4a:	689b      	ldr	r3, [r3, #8]
 8042d4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042d4e:	68fb      	ldr	r3, [r7, #12]
 8042d50:	4a15      	ldr	r2, [pc, #84]	@ (8042da8 <PCD_EP_OutSetupPacket_int+0x88>)
 8042d52:	4293      	cmp	r3, r2
 8042d54:	d90e      	bls.n	8042d74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8042d56:	68bb      	ldr	r3, [r7, #8]
 8042d58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8042d5c:	2b00      	cmp	r3, #0
 8042d5e:	d009      	beq.n	8042d74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8042d60:	683b      	ldr	r3, [r7, #0]
 8042d62:	015a      	lsls	r2, r3, #5
 8042d64:	693b      	ldr	r3, [r7, #16]
 8042d66:	4413      	add	r3, r2
 8042d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8042d6c:	461a      	mov	r2, r3
 8042d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8042d72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8042d74:	6878      	ldr	r0, [r7, #4]
 8042d76:	f008 f879 	bl	804ae6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8042d7a:	68fb      	ldr	r3, [r7, #12]
 8042d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8042da8 <PCD_EP_OutSetupPacket_int+0x88>)
 8042d7e:	4293      	cmp	r3, r2
 8042d80:	d90c      	bls.n	8042d9c <PCD_EP_OutSetupPacket_int+0x7c>
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	799b      	ldrb	r3, [r3, #6]
 8042d86:	2b01      	cmp	r3, #1
 8042d88:	d108      	bne.n	8042d9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8042d8a:	687b      	ldr	r3, [r7, #4]
 8042d8c:	6818      	ldr	r0, [r3, #0]
 8042d8e:	687b      	ldr	r3, [r7, #4]
 8042d90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8042d94:	461a      	mov	r2, r3
 8042d96:	2101      	movs	r1, #1
 8042d98:	f005 fa7e 	bl	8048298 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8042d9c:	2300      	movs	r3, #0
}
 8042d9e:	4618      	mov	r0, r3
 8042da0:	3718      	adds	r7, #24
 8042da2:	46bd      	mov	sp, r7
 8042da4:	bd80      	pop	{r7, pc}
 8042da6:	bf00      	nop
 8042da8:	4f54300a 	.word	0x4f54300a

08042dac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8042dac:	b480      	push	{r7}
 8042dae:	b085      	sub	sp, #20
 8042db0:	af00      	add	r7, sp, #0
 8042db2:	6078      	str	r0, [r7, #4]
 8042db4:	460b      	mov	r3, r1
 8042db6:	70fb      	strb	r3, [r7, #3]
 8042db8:	4613      	mov	r3, r2
 8042dba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8042dbc:	687b      	ldr	r3, [r7, #4]
 8042dbe:	681b      	ldr	r3, [r3, #0]
 8042dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8042dc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8042dc4:	78fb      	ldrb	r3, [r7, #3]
 8042dc6:	2b00      	cmp	r3, #0
 8042dc8:	d107      	bne.n	8042dda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8042dca:	883b      	ldrh	r3, [r7, #0]
 8042dcc:	0419      	lsls	r1, r3, #16
 8042dce:	687b      	ldr	r3, [r7, #4]
 8042dd0:	681b      	ldr	r3, [r3, #0]
 8042dd2:	68ba      	ldr	r2, [r7, #8]
 8042dd4:	430a      	orrs	r2, r1
 8042dd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8042dd8:	e028      	b.n	8042e2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8042dda:	687b      	ldr	r3, [r7, #4]
 8042ddc:	681b      	ldr	r3, [r3, #0]
 8042dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042de0:	0c1b      	lsrs	r3, r3, #16
 8042de2:	68ba      	ldr	r2, [r7, #8]
 8042de4:	4413      	add	r3, r2
 8042de6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042de8:	2300      	movs	r3, #0
 8042dea:	73fb      	strb	r3, [r7, #15]
 8042dec:	e00d      	b.n	8042e0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8042dee:	687b      	ldr	r3, [r7, #4]
 8042df0:	681a      	ldr	r2, [r3, #0]
 8042df2:	7bfb      	ldrb	r3, [r7, #15]
 8042df4:	3340      	adds	r3, #64	@ 0x40
 8042df6:	009b      	lsls	r3, r3, #2
 8042df8:	4413      	add	r3, r2
 8042dfa:	685b      	ldr	r3, [r3, #4]
 8042dfc:	0c1b      	lsrs	r3, r3, #16
 8042dfe:	68ba      	ldr	r2, [r7, #8]
 8042e00:	4413      	add	r3, r2
 8042e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8042e04:	7bfb      	ldrb	r3, [r7, #15]
 8042e06:	3301      	adds	r3, #1
 8042e08:	73fb      	strb	r3, [r7, #15]
 8042e0a:	7bfa      	ldrb	r2, [r7, #15]
 8042e0c:	78fb      	ldrb	r3, [r7, #3]
 8042e0e:	3b01      	subs	r3, #1
 8042e10:	429a      	cmp	r2, r3
 8042e12:	d3ec      	bcc.n	8042dee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8042e14:	883b      	ldrh	r3, [r7, #0]
 8042e16:	0418      	lsls	r0, r3, #16
 8042e18:	687b      	ldr	r3, [r7, #4]
 8042e1a:	6819      	ldr	r1, [r3, #0]
 8042e1c:	78fb      	ldrb	r3, [r7, #3]
 8042e1e:	3b01      	subs	r3, #1
 8042e20:	68ba      	ldr	r2, [r7, #8]
 8042e22:	4302      	orrs	r2, r0
 8042e24:	3340      	adds	r3, #64	@ 0x40
 8042e26:	009b      	lsls	r3, r3, #2
 8042e28:	440b      	add	r3, r1
 8042e2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8042e2c:	2300      	movs	r3, #0
}
 8042e2e:	4618      	mov	r0, r3
 8042e30:	3714      	adds	r7, #20
 8042e32:	46bd      	mov	sp, r7
 8042e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e38:	4770      	bx	lr

08042e3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8042e3a:	b480      	push	{r7}
 8042e3c:	b083      	sub	sp, #12
 8042e3e:	af00      	add	r7, sp, #0
 8042e40:	6078      	str	r0, [r7, #4]
 8042e42:	460b      	mov	r3, r1
 8042e44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8042e46:	687b      	ldr	r3, [r7, #4]
 8042e48:	681b      	ldr	r3, [r3, #0]
 8042e4a:	887a      	ldrh	r2, [r7, #2]
 8042e4c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8042e4e:	2300      	movs	r3, #0
}
 8042e50:	4618      	mov	r0, r3
 8042e52:	370c      	adds	r7, #12
 8042e54:	46bd      	mov	sp, r7
 8042e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e5a:	4770      	bx	lr

08042e5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8042e5c:	b480      	push	{r7}
 8042e5e:	b085      	sub	sp, #20
 8042e60:	af00      	add	r7, sp, #0
 8042e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8042e64:	687b      	ldr	r3, [r7, #4]
 8042e66:	681b      	ldr	r3, [r3, #0]
 8042e68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8042e6a:	687b      	ldr	r3, [r7, #4]
 8042e6c:	2201      	movs	r2, #1
 8042e6e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8042e72:	687b      	ldr	r3, [r7, #4]
 8042e74:	2200      	movs	r2, #0
 8042e76:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8042e7a:	68fb      	ldr	r3, [r7, #12]
 8042e7c:	699b      	ldr	r3, [r3, #24]
 8042e7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8042e82:	68fb      	ldr	r3, [r7, #12]
 8042e84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8042e86:	68fb      	ldr	r3, [r7, #12]
 8042e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8042e8a:	4b05      	ldr	r3, [pc, #20]	@ (8042ea0 <HAL_PCDEx_ActivateLPM+0x44>)
 8042e8c:	4313      	orrs	r3, r2
 8042e8e:	68fa      	ldr	r2, [r7, #12]
 8042e90:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8042e92:	2300      	movs	r3, #0
}
 8042e94:	4618      	mov	r0, r3
 8042e96:	3714      	adds	r7, #20
 8042e98:	46bd      	mov	sp, r7
 8042e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e9e:	4770      	bx	lr
 8042ea0:	10000003 	.word	0x10000003

08042ea4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8042ea4:	b480      	push	{r7}
 8042ea6:	b083      	sub	sp, #12
 8042ea8:	af00      	add	r7, sp, #0
 8042eaa:	6078      	str	r0, [r7, #4]
 8042eac:	460b      	mov	r3, r1
 8042eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8042eb0:	bf00      	nop
 8042eb2:	370c      	adds	r7, #12
 8042eb4:	46bd      	mov	sp, r7
 8042eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042eba:	4770      	bx	lr

08042ebc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8042ebc:	b580      	push	{r7, lr}
 8042ebe:	b084      	sub	sp, #16
 8042ec0:	af00      	add	r7, sp, #0
 8042ec2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8042ec4:	4b29      	ldr	r3, [pc, #164]	@ (8042f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ec6:	68db      	ldr	r3, [r3, #12]
 8042ec8:	f003 0307 	and.w	r3, r3, #7
 8042ecc:	2b06      	cmp	r3, #6
 8042ece:	d00a      	beq.n	8042ee6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8042ed0:	4b26      	ldr	r3, [pc, #152]	@ (8042f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ed2:	68db      	ldr	r3, [r3, #12]
 8042ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8042ed8:	687a      	ldr	r2, [r7, #4]
 8042eda:	429a      	cmp	r2, r3
 8042edc:	d001      	beq.n	8042ee2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8042ede:	2301      	movs	r3, #1
 8042ee0:	e040      	b.n	8042f64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8042ee2:	2300      	movs	r3, #0
 8042ee4:	e03e      	b.n	8042f64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8042ee6:	4b21      	ldr	r3, [pc, #132]	@ (8042f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ee8:	68db      	ldr	r3, [r3, #12]
 8042eea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8042eee:	491f      	ldr	r1, [pc, #124]	@ (8042f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8042ef0:	687b      	ldr	r3, [r7, #4]
 8042ef2:	4313      	orrs	r3, r2
 8042ef4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8042ef6:	f7fe f917 	bl	8041128 <HAL_GetTick>
 8042efa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042efc:	e009      	b.n	8042f12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042efe:	f7fe f913 	bl	8041128 <HAL_GetTick>
 8042f02:	4602      	mov	r2, r0
 8042f04:	68fb      	ldr	r3, [r7, #12]
 8042f06:	1ad3      	subs	r3, r2, r3
 8042f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042f0c:	d901      	bls.n	8042f12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8042f0e:	2301      	movs	r3, #1
 8042f10:	e028      	b.n	8042f64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8042f12:	4b16      	ldr	r3, [pc, #88]	@ (8042f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8042f14:	685b      	ldr	r3, [r3, #4]
 8042f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8042f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042f1e:	d1ee      	bne.n	8042efe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8042f20:	687b      	ldr	r3, [r7, #4]
 8042f22:	2b1e      	cmp	r3, #30
 8042f24:	d008      	beq.n	8042f38 <HAL_PWREx_ConfigSupply+0x7c>
 8042f26:	687b      	ldr	r3, [r7, #4]
 8042f28:	2b2e      	cmp	r3, #46	@ 0x2e
 8042f2a:	d005      	beq.n	8042f38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8042f2c:	687b      	ldr	r3, [r7, #4]
 8042f2e:	2b1d      	cmp	r3, #29
 8042f30:	d002      	beq.n	8042f38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8042f32:	687b      	ldr	r3, [r7, #4]
 8042f34:	2b2d      	cmp	r3, #45	@ 0x2d
 8042f36:	d114      	bne.n	8042f62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8042f38:	f7fe f8f6 	bl	8041128 <HAL_GetTick>
 8042f3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8042f3e:	e009      	b.n	8042f54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8042f40:	f7fe f8f2 	bl	8041128 <HAL_GetTick>
 8042f44:	4602      	mov	r2, r0
 8042f46:	68fb      	ldr	r3, [r7, #12]
 8042f48:	1ad3      	subs	r3, r2, r3
 8042f4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8042f4e:	d901      	bls.n	8042f54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8042f50:	2301      	movs	r3, #1
 8042f52:	e007      	b.n	8042f64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8042f54:	4b05      	ldr	r3, [pc, #20]	@ (8042f6c <HAL_PWREx_ConfigSupply+0xb0>)
 8042f56:	68db      	ldr	r3, [r3, #12]
 8042f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8042f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042f60:	d1ee      	bne.n	8042f40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8042f62:	2300      	movs	r3, #0
}
 8042f64:	4618      	mov	r0, r3
 8042f66:	3710      	adds	r7, #16
 8042f68:	46bd      	mov	sp, r7
 8042f6a:	bd80      	pop	{r7, pc}
 8042f6c:	58024800 	.word	0x58024800

08042f70 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8042f70:	b480      	push	{r7}
 8042f72:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8042f74:	4b05      	ldr	r3, [pc, #20]	@ (8042f8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8042f76:	68db      	ldr	r3, [r3, #12]
 8042f78:	4a04      	ldr	r2, [pc, #16]	@ (8042f8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8042f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8042f7e:	60d3      	str	r3, [r2, #12]
}
 8042f80:	bf00      	nop
 8042f82:	46bd      	mov	sp, r7
 8042f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f88:	4770      	bx	lr
 8042f8a:	bf00      	nop
 8042f8c:	58024800 	.word	0x58024800

08042f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042f90:	b580      	push	{r7, lr}
 8042f92:	b08c      	sub	sp, #48	@ 0x30
 8042f94:	af00      	add	r7, sp, #0
 8042f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8042f98:	687b      	ldr	r3, [r7, #4]
 8042f9a:	2b00      	cmp	r3, #0
 8042f9c:	d102      	bne.n	8042fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8042f9e:	2301      	movs	r3, #1
 8042fa0:	f000 bc48 	b.w	8043834 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042fa4:	687b      	ldr	r3, [r7, #4]
 8042fa6:	681b      	ldr	r3, [r3, #0]
 8042fa8:	f003 0301 	and.w	r3, r3, #1
 8042fac:	2b00      	cmp	r3, #0
 8042fae:	f000 8088 	beq.w	80430c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8042fb2:	4b99      	ldr	r3, [pc, #612]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8042fb4:	691b      	ldr	r3, [r3, #16]
 8042fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8042fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8042fbc:	4b96      	ldr	r3, [pc, #600]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8042fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8042fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8042fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042fc4:	2b10      	cmp	r3, #16
 8042fc6:	d007      	beq.n	8042fd8 <HAL_RCC_OscConfig+0x48>
 8042fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8042fca:	2b18      	cmp	r3, #24
 8042fcc:	d111      	bne.n	8042ff2 <HAL_RCC_OscConfig+0x62>
 8042fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8042fd0:	f003 0303 	and.w	r3, r3, #3
 8042fd4:	2b02      	cmp	r3, #2
 8042fd6:	d10c      	bne.n	8042ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8042fda:	681b      	ldr	r3, [r3, #0]
 8042fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8042fe0:	2b00      	cmp	r3, #0
 8042fe2:	d06d      	beq.n	80430c0 <HAL_RCC_OscConfig+0x130>
 8042fe4:	687b      	ldr	r3, [r7, #4]
 8042fe6:	685b      	ldr	r3, [r3, #4]
 8042fe8:	2b00      	cmp	r3, #0
 8042fea:	d169      	bne.n	80430c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8042fec:	2301      	movs	r3, #1
 8042fee:	f000 bc21 	b.w	8043834 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	685b      	ldr	r3, [r3, #4]
 8042ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8042ffa:	d106      	bne.n	804300a <HAL_RCC_OscConfig+0x7a>
 8042ffc:	4b86      	ldr	r3, [pc, #536]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8042ffe:	681b      	ldr	r3, [r3, #0]
 8043000:	4a85      	ldr	r2, [pc, #532]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8043006:	6013      	str	r3, [r2, #0]
 8043008:	e02e      	b.n	8043068 <HAL_RCC_OscConfig+0xd8>
 804300a:	687b      	ldr	r3, [r7, #4]
 804300c:	685b      	ldr	r3, [r3, #4]
 804300e:	2b00      	cmp	r3, #0
 8043010:	d10c      	bne.n	804302c <HAL_RCC_OscConfig+0x9c>
 8043012:	4b81      	ldr	r3, [pc, #516]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043014:	681b      	ldr	r3, [r3, #0]
 8043016:	4a80      	ldr	r2, [pc, #512]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 804301c:	6013      	str	r3, [r2, #0]
 804301e:	4b7e      	ldr	r3, [pc, #504]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043020:	681b      	ldr	r3, [r3, #0]
 8043022:	4a7d      	ldr	r2, [pc, #500]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043024:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043028:	6013      	str	r3, [r2, #0]
 804302a:	e01d      	b.n	8043068 <HAL_RCC_OscConfig+0xd8>
 804302c:	687b      	ldr	r3, [r7, #4]
 804302e:	685b      	ldr	r3, [r3, #4]
 8043030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8043034:	d10c      	bne.n	8043050 <HAL_RCC_OscConfig+0xc0>
 8043036:	4b78      	ldr	r3, [pc, #480]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043038:	681b      	ldr	r3, [r3, #0]
 804303a:	4a77      	ldr	r2, [pc, #476]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804303c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8043040:	6013      	str	r3, [r2, #0]
 8043042:	4b75      	ldr	r3, [pc, #468]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043044:	681b      	ldr	r3, [r3, #0]
 8043046:	4a74      	ldr	r2, [pc, #464]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804304c:	6013      	str	r3, [r2, #0]
 804304e:	e00b      	b.n	8043068 <HAL_RCC_OscConfig+0xd8>
 8043050:	4b71      	ldr	r3, [pc, #452]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043052:	681b      	ldr	r3, [r3, #0]
 8043054:	4a70      	ldr	r2, [pc, #448]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 804305a:	6013      	str	r3, [r2, #0]
 804305c:	4b6e      	ldr	r3, [pc, #440]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804305e:	681b      	ldr	r3, [r3, #0]
 8043060:	4a6d      	ldr	r2, [pc, #436]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8043066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	685b      	ldr	r3, [r3, #4]
 804306c:	2b00      	cmp	r3, #0
 804306e:	d013      	beq.n	8043098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043070:	f7fe f85a 	bl	8041128 <HAL_GetTick>
 8043074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043076:	e008      	b.n	804308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043078:	f7fe f856 	bl	8041128 <HAL_GetTick>
 804307c:	4602      	mov	r2, r0
 804307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043080:	1ad3      	subs	r3, r2, r3
 8043082:	2b64      	cmp	r3, #100	@ 0x64
 8043084:	d901      	bls.n	804308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8043086:	2303      	movs	r3, #3
 8043088:	e3d4      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804308a:	4b63      	ldr	r3, [pc, #396]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804308c:	681b      	ldr	r3, [r3, #0]
 804308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8043092:	2b00      	cmp	r3, #0
 8043094:	d0f0      	beq.n	8043078 <HAL_RCC_OscConfig+0xe8>
 8043096:	e014      	b.n	80430c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043098:	f7fe f846 	bl	8041128 <HAL_GetTick>
 804309c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 804309e:	e008      	b.n	80430b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80430a0:	f7fe f842 	bl	8041128 <HAL_GetTick>
 80430a4:	4602      	mov	r2, r0
 80430a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80430a8:	1ad3      	subs	r3, r2, r3
 80430aa:	2b64      	cmp	r3, #100	@ 0x64
 80430ac:	d901      	bls.n	80430b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80430ae:	2303      	movs	r3, #3
 80430b0:	e3c0      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80430b2:	4b59      	ldr	r3, [pc, #356]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80430b4:	681b      	ldr	r3, [r3, #0]
 80430b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80430ba:	2b00      	cmp	r3, #0
 80430bc:	d1f0      	bne.n	80430a0 <HAL_RCC_OscConfig+0x110>
 80430be:	e000      	b.n	80430c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80430c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80430c2:	687b      	ldr	r3, [r7, #4]
 80430c4:	681b      	ldr	r3, [r3, #0]
 80430c6:	f003 0302 	and.w	r3, r3, #2
 80430ca:	2b00      	cmp	r3, #0
 80430cc:	f000 80ca 	beq.w	8043264 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80430d0:	4b51      	ldr	r3, [pc, #324]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80430d2:	691b      	ldr	r3, [r3, #16]
 80430d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80430d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80430da:	4b4f      	ldr	r3, [pc, #316]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80430dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80430de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80430e0:	6a3b      	ldr	r3, [r7, #32]
 80430e2:	2b00      	cmp	r3, #0
 80430e4:	d007      	beq.n	80430f6 <HAL_RCC_OscConfig+0x166>
 80430e6:	6a3b      	ldr	r3, [r7, #32]
 80430e8:	2b18      	cmp	r3, #24
 80430ea:	d156      	bne.n	804319a <HAL_RCC_OscConfig+0x20a>
 80430ec:	69fb      	ldr	r3, [r7, #28]
 80430ee:	f003 0303 	and.w	r3, r3, #3
 80430f2:	2b00      	cmp	r3, #0
 80430f4:	d151      	bne.n	804319a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80430f6:	4b48      	ldr	r3, [pc, #288]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80430f8:	681b      	ldr	r3, [r3, #0]
 80430fa:	f003 0304 	and.w	r3, r3, #4
 80430fe:	2b00      	cmp	r3, #0
 8043100:	d005      	beq.n	804310e <HAL_RCC_OscConfig+0x17e>
 8043102:	687b      	ldr	r3, [r7, #4]
 8043104:	68db      	ldr	r3, [r3, #12]
 8043106:	2b00      	cmp	r3, #0
 8043108:	d101      	bne.n	804310e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 804310a:	2301      	movs	r3, #1
 804310c:	e392      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 804310e:	4b42      	ldr	r3, [pc, #264]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043110:	681b      	ldr	r3, [r3, #0]
 8043112:	f023 0219 	bic.w	r2, r3, #25
 8043116:	687b      	ldr	r3, [r7, #4]
 8043118:	68db      	ldr	r3, [r3, #12]
 804311a:	493f      	ldr	r1, [pc, #252]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804311c:	4313      	orrs	r3, r2
 804311e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043120:	f7fe f802 	bl	8041128 <HAL_GetTick>
 8043124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8043126:	e008      	b.n	804313a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043128:	f7fd fffe 	bl	8041128 <HAL_GetTick>
 804312c:	4602      	mov	r2, r0
 804312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043130:	1ad3      	subs	r3, r2, r3
 8043132:	2b02      	cmp	r3, #2
 8043134:	d901      	bls.n	804313a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8043136:	2303      	movs	r3, #3
 8043138:	e37c      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804313a:	4b37      	ldr	r3, [pc, #220]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804313c:	681b      	ldr	r3, [r3, #0]
 804313e:	f003 0304 	and.w	r3, r3, #4
 8043142:	2b00      	cmp	r3, #0
 8043144:	d0f0      	beq.n	8043128 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043146:	f7fe f81f 	bl	8041188 <HAL_GetREVID>
 804314a:	4603      	mov	r3, r0
 804314c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043150:	4293      	cmp	r3, r2
 8043152:	d817      	bhi.n	8043184 <HAL_RCC_OscConfig+0x1f4>
 8043154:	687b      	ldr	r3, [r7, #4]
 8043156:	691b      	ldr	r3, [r3, #16]
 8043158:	2b40      	cmp	r3, #64	@ 0x40
 804315a:	d108      	bne.n	804316e <HAL_RCC_OscConfig+0x1de>
 804315c:	4b2e      	ldr	r3, [pc, #184]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804315e:	685b      	ldr	r3, [r3, #4]
 8043160:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8043164:	4a2c      	ldr	r2, [pc, #176]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804316a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804316c:	e07a      	b.n	8043264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804316e:	4b2a      	ldr	r3, [pc, #168]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043170:	685b      	ldr	r3, [r3, #4]
 8043172:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8043176:	687b      	ldr	r3, [r7, #4]
 8043178:	691b      	ldr	r3, [r3, #16]
 804317a:	031b      	lsls	r3, r3, #12
 804317c:	4926      	ldr	r1, [pc, #152]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 804317e:	4313      	orrs	r3, r2
 8043180:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043182:	e06f      	b.n	8043264 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043184:	4b24      	ldr	r3, [pc, #144]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043186:	685b      	ldr	r3, [r3, #4]
 8043188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 804318c:	687b      	ldr	r3, [r7, #4]
 804318e:	691b      	ldr	r3, [r3, #16]
 8043190:	061b      	lsls	r3, r3, #24
 8043192:	4921      	ldr	r1, [pc, #132]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043194:	4313      	orrs	r3, r2
 8043196:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043198:	e064      	b.n	8043264 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 804319a:	687b      	ldr	r3, [r7, #4]
 804319c:	68db      	ldr	r3, [r3, #12]
 804319e:	2b00      	cmp	r3, #0
 80431a0:	d047      	beq.n	8043232 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80431a2:	4b1d      	ldr	r3, [pc, #116]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80431a4:	681b      	ldr	r3, [r3, #0]
 80431a6:	f023 0219 	bic.w	r2, r3, #25
 80431aa:	687b      	ldr	r3, [r7, #4]
 80431ac:	68db      	ldr	r3, [r3, #12]
 80431ae:	491a      	ldr	r1, [pc, #104]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80431b0:	4313      	orrs	r3, r2
 80431b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80431b4:	f7fd ffb8 	bl	8041128 <HAL_GetTick>
 80431b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80431ba:	e008      	b.n	80431ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80431bc:	f7fd ffb4 	bl	8041128 <HAL_GetTick>
 80431c0:	4602      	mov	r2, r0
 80431c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80431c4:	1ad3      	subs	r3, r2, r3
 80431c6:	2b02      	cmp	r3, #2
 80431c8:	d901      	bls.n	80431ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80431ca:	2303      	movs	r3, #3
 80431cc:	e332      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80431ce:	4b12      	ldr	r3, [pc, #72]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80431d0:	681b      	ldr	r3, [r3, #0]
 80431d2:	f003 0304 	and.w	r3, r3, #4
 80431d6:	2b00      	cmp	r3, #0
 80431d8:	d0f0      	beq.n	80431bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80431da:	f7fd ffd5 	bl	8041188 <HAL_GetREVID>
 80431de:	4603      	mov	r3, r0
 80431e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80431e4:	4293      	cmp	r3, r2
 80431e6:	d819      	bhi.n	804321c <HAL_RCC_OscConfig+0x28c>
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	691b      	ldr	r3, [r3, #16]
 80431ec:	2b40      	cmp	r3, #64	@ 0x40
 80431ee:	d108      	bne.n	8043202 <HAL_RCC_OscConfig+0x272>
 80431f0:	4b09      	ldr	r3, [pc, #36]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80431f2:	685b      	ldr	r3, [r3, #4]
 80431f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80431f8:	4a07      	ldr	r2, [pc, #28]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 80431fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80431fe:	6053      	str	r3, [r2, #4]
 8043200:	e030      	b.n	8043264 <HAL_RCC_OscConfig+0x2d4>
 8043202:	4b05      	ldr	r3, [pc, #20]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043204:	685b      	ldr	r3, [r3, #4]
 8043206:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 804320a:	687b      	ldr	r3, [r7, #4]
 804320c:	691b      	ldr	r3, [r3, #16]
 804320e:	031b      	lsls	r3, r3, #12
 8043210:	4901      	ldr	r1, [pc, #4]	@ (8043218 <HAL_RCC_OscConfig+0x288>)
 8043212:	4313      	orrs	r3, r2
 8043214:	604b      	str	r3, [r1, #4]
 8043216:	e025      	b.n	8043264 <HAL_RCC_OscConfig+0x2d4>
 8043218:	58024400 	.word	0x58024400
 804321c:	4b9a      	ldr	r3, [pc, #616]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804321e:	685b      	ldr	r3, [r3, #4]
 8043220:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8043224:	687b      	ldr	r3, [r7, #4]
 8043226:	691b      	ldr	r3, [r3, #16]
 8043228:	061b      	lsls	r3, r3, #24
 804322a:	4997      	ldr	r1, [pc, #604]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804322c:	4313      	orrs	r3, r2
 804322e:	604b      	str	r3, [r1, #4]
 8043230:	e018      	b.n	8043264 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8043232:	4b95      	ldr	r3, [pc, #596]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043234:	681b      	ldr	r3, [r3, #0]
 8043236:	4a94      	ldr	r2, [pc, #592]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043238:	f023 0301 	bic.w	r3, r3, #1
 804323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804323e:	f7fd ff73 	bl	8041128 <HAL_GetTick>
 8043242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043244:	e008      	b.n	8043258 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8043246:	f7fd ff6f 	bl	8041128 <HAL_GetTick>
 804324a:	4602      	mov	r2, r0
 804324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804324e:	1ad3      	subs	r3, r2, r3
 8043250:	2b02      	cmp	r3, #2
 8043252:	d901      	bls.n	8043258 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8043254:	2303      	movs	r3, #3
 8043256:	e2ed      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8043258:	4b8b      	ldr	r3, [pc, #556]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804325a:	681b      	ldr	r3, [r3, #0]
 804325c:	f003 0304 	and.w	r3, r3, #4
 8043260:	2b00      	cmp	r3, #0
 8043262:	d1f0      	bne.n	8043246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8043264:	687b      	ldr	r3, [r7, #4]
 8043266:	681b      	ldr	r3, [r3, #0]
 8043268:	f003 0310 	and.w	r3, r3, #16
 804326c:	2b00      	cmp	r3, #0
 804326e:	f000 80a9 	beq.w	80433c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8043272:	4b85      	ldr	r3, [pc, #532]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043274:	691b      	ldr	r3, [r3, #16]
 8043276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 804327a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804327c:	4b82      	ldr	r3, [pc, #520]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043280:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8043282:	69bb      	ldr	r3, [r7, #24]
 8043284:	2b08      	cmp	r3, #8
 8043286:	d007      	beq.n	8043298 <HAL_RCC_OscConfig+0x308>
 8043288:	69bb      	ldr	r3, [r7, #24]
 804328a:	2b18      	cmp	r3, #24
 804328c:	d13a      	bne.n	8043304 <HAL_RCC_OscConfig+0x374>
 804328e:	697b      	ldr	r3, [r7, #20]
 8043290:	f003 0303 	and.w	r3, r3, #3
 8043294:	2b01      	cmp	r3, #1
 8043296:	d135      	bne.n	8043304 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043298:	4b7b      	ldr	r3, [pc, #492]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804329a:	681b      	ldr	r3, [r3, #0]
 804329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80432a0:	2b00      	cmp	r3, #0
 80432a2:	d005      	beq.n	80432b0 <HAL_RCC_OscConfig+0x320>
 80432a4:	687b      	ldr	r3, [r7, #4]
 80432a6:	69db      	ldr	r3, [r3, #28]
 80432a8:	2b80      	cmp	r3, #128	@ 0x80
 80432aa:	d001      	beq.n	80432b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80432ac:	2301      	movs	r3, #1
 80432ae:	e2c1      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80432b0:	f7fd ff6a 	bl	8041188 <HAL_GetREVID>
 80432b4:	4603      	mov	r3, r0
 80432b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80432ba:	4293      	cmp	r3, r2
 80432bc:	d817      	bhi.n	80432ee <HAL_RCC_OscConfig+0x35e>
 80432be:	687b      	ldr	r3, [r7, #4]
 80432c0:	6a1b      	ldr	r3, [r3, #32]
 80432c2:	2b20      	cmp	r3, #32
 80432c4:	d108      	bne.n	80432d8 <HAL_RCC_OscConfig+0x348>
 80432c6:	4b70      	ldr	r3, [pc, #448]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80432c8:	685b      	ldr	r3, [r3, #4]
 80432ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80432ce:	4a6e      	ldr	r2, [pc, #440]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80432d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80432d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80432d6:	e075      	b.n	80433c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80432d8:	4b6b      	ldr	r3, [pc, #428]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80432da:	685b      	ldr	r3, [r3, #4]
 80432dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80432e0:	687b      	ldr	r3, [r7, #4]
 80432e2:	6a1b      	ldr	r3, [r3, #32]
 80432e4:	069b      	lsls	r3, r3, #26
 80432e6:	4968      	ldr	r1, [pc, #416]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80432e8:	4313      	orrs	r3, r2
 80432ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80432ec:	e06a      	b.n	80433c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80432ee:	4b66      	ldr	r3, [pc, #408]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80432f0:	68db      	ldr	r3, [r3, #12]
 80432f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80432f6:	687b      	ldr	r3, [r7, #4]
 80432f8:	6a1b      	ldr	r3, [r3, #32]
 80432fa:	061b      	lsls	r3, r3, #24
 80432fc:	4962      	ldr	r1, [pc, #392]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80432fe:	4313      	orrs	r3, r2
 8043300:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8043302:	e05f      	b.n	80433c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8043304:	687b      	ldr	r3, [r7, #4]
 8043306:	69db      	ldr	r3, [r3, #28]
 8043308:	2b00      	cmp	r3, #0
 804330a:	d042      	beq.n	8043392 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 804330c:	4b5e      	ldr	r3, [pc, #376]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804330e:	681b      	ldr	r3, [r3, #0]
 8043310:	4a5d      	ldr	r2, [pc, #372]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8043316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043318:	f7fd ff06 	bl	8041128 <HAL_GetTick>
 804331c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 804331e:	e008      	b.n	8043332 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8043320:	f7fd ff02 	bl	8041128 <HAL_GetTick>
 8043324:	4602      	mov	r2, r0
 8043326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043328:	1ad3      	subs	r3, r2, r3
 804332a:	2b02      	cmp	r3, #2
 804332c:	d901      	bls.n	8043332 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 804332e:	2303      	movs	r3, #3
 8043330:	e280      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8043332:	4b55      	ldr	r3, [pc, #340]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043334:	681b      	ldr	r3, [r3, #0]
 8043336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804333a:	2b00      	cmp	r3, #0
 804333c:	d0f0      	beq.n	8043320 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804333e:	f7fd ff23 	bl	8041188 <HAL_GetREVID>
 8043342:	4603      	mov	r3, r0
 8043344:	f241 0203 	movw	r2, #4099	@ 0x1003
 8043348:	4293      	cmp	r3, r2
 804334a:	d817      	bhi.n	804337c <HAL_RCC_OscConfig+0x3ec>
 804334c:	687b      	ldr	r3, [r7, #4]
 804334e:	6a1b      	ldr	r3, [r3, #32]
 8043350:	2b20      	cmp	r3, #32
 8043352:	d108      	bne.n	8043366 <HAL_RCC_OscConfig+0x3d6>
 8043354:	4b4c      	ldr	r3, [pc, #304]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043356:	685b      	ldr	r3, [r3, #4]
 8043358:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 804335c:	4a4a      	ldr	r2, [pc, #296]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804335e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8043362:	6053      	str	r3, [r2, #4]
 8043364:	e02e      	b.n	80433c4 <HAL_RCC_OscConfig+0x434>
 8043366:	4b48      	ldr	r3, [pc, #288]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043368:	685b      	ldr	r3, [r3, #4]
 804336a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 804336e:	687b      	ldr	r3, [r7, #4]
 8043370:	6a1b      	ldr	r3, [r3, #32]
 8043372:	069b      	lsls	r3, r3, #26
 8043374:	4944      	ldr	r1, [pc, #272]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043376:	4313      	orrs	r3, r2
 8043378:	604b      	str	r3, [r1, #4]
 804337a:	e023      	b.n	80433c4 <HAL_RCC_OscConfig+0x434>
 804337c:	4b42      	ldr	r3, [pc, #264]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804337e:	68db      	ldr	r3, [r3, #12]
 8043380:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8043384:	687b      	ldr	r3, [r7, #4]
 8043386:	6a1b      	ldr	r3, [r3, #32]
 8043388:	061b      	lsls	r3, r3, #24
 804338a:	493f      	ldr	r1, [pc, #252]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804338c:	4313      	orrs	r3, r2
 804338e:	60cb      	str	r3, [r1, #12]
 8043390:	e018      	b.n	80433c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8043392:	4b3d      	ldr	r3, [pc, #244]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043394:	681b      	ldr	r3, [r3, #0]
 8043396:	4a3c      	ldr	r2, [pc, #240]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 804339c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804339e:	f7fd fec3 	bl	8041128 <HAL_GetTick>
 80433a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80433a4:	e008      	b.n	80433b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80433a6:	f7fd febf 	bl	8041128 <HAL_GetTick>
 80433aa:	4602      	mov	r2, r0
 80433ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80433ae:	1ad3      	subs	r3, r2, r3
 80433b0:	2b02      	cmp	r3, #2
 80433b2:	d901      	bls.n	80433b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80433b4:	2303      	movs	r3, #3
 80433b6:	e23d      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80433b8:	4b33      	ldr	r3, [pc, #204]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80433ba:	681b      	ldr	r3, [r3, #0]
 80433bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80433c0:	2b00      	cmp	r3, #0
 80433c2:	d1f0      	bne.n	80433a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80433c4:	687b      	ldr	r3, [r7, #4]
 80433c6:	681b      	ldr	r3, [r3, #0]
 80433c8:	f003 0308 	and.w	r3, r3, #8
 80433cc:	2b00      	cmp	r3, #0
 80433ce:	d036      	beq.n	804343e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80433d0:	687b      	ldr	r3, [r7, #4]
 80433d2:	695b      	ldr	r3, [r3, #20]
 80433d4:	2b00      	cmp	r3, #0
 80433d6:	d019      	beq.n	804340c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80433d8:	4b2b      	ldr	r3, [pc, #172]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80433da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80433dc:	4a2a      	ldr	r2, [pc, #168]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 80433de:	f043 0301 	orr.w	r3, r3, #1
 80433e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80433e4:	f7fd fea0 	bl	8041128 <HAL_GetTick>
 80433e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80433ea:	e008      	b.n	80433fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80433ec:	f7fd fe9c 	bl	8041128 <HAL_GetTick>
 80433f0:	4602      	mov	r2, r0
 80433f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80433f4:	1ad3      	subs	r3, r2, r3
 80433f6:	2b02      	cmp	r3, #2
 80433f8:	d901      	bls.n	80433fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80433fa:	2303      	movs	r3, #3
 80433fc:	e21a      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80433fe:	4b22      	ldr	r3, [pc, #136]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043402:	f003 0302 	and.w	r3, r3, #2
 8043406:	2b00      	cmp	r3, #0
 8043408:	d0f0      	beq.n	80433ec <HAL_RCC_OscConfig+0x45c>
 804340a:	e018      	b.n	804343e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804340c:	4b1e      	ldr	r3, [pc, #120]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804340e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043410:	4a1d      	ldr	r2, [pc, #116]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043412:	f023 0301 	bic.w	r3, r3, #1
 8043416:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043418:	f7fd fe86 	bl	8041128 <HAL_GetTick>
 804341c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 804341e:	e008      	b.n	8043432 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043420:	f7fd fe82 	bl	8041128 <HAL_GetTick>
 8043424:	4602      	mov	r2, r0
 8043426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043428:	1ad3      	subs	r3, r2, r3
 804342a:	2b02      	cmp	r3, #2
 804342c:	d901      	bls.n	8043432 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 804342e:	2303      	movs	r3, #3
 8043430:	e200      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8043432:	4b15      	ldr	r3, [pc, #84]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8043436:	f003 0302 	and.w	r3, r3, #2
 804343a:	2b00      	cmp	r3, #0
 804343c:	d1f0      	bne.n	8043420 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 804343e:	687b      	ldr	r3, [r7, #4]
 8043440:	681b      	ldr	r3, [r3, #0]
 8043442:	f003 0320 	and.w	r3, r3, #32
 8043446:	2b00      	cmp	r3, #0
 8043448:	d039      	beq.n	80434be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 804344a:	687b      	ldr	r3, [r7, #4]
 804344c:	699b      	ldr	r3, [r3, #24]
 804344e:	2b00      	cmp	r3, #0
 8043450:	d01c      	beq.n	804348c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8043452:	4b0d      	ldr	r3, [pc, #52]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043454:	681b      	ldr	r3, [r3, #0]
 8043456:	4a0c      	ldr	r2, [pc, #48]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 8043458:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 804345c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 804345e:	f7fd fe63 	bl	8041128 <HAL_GetTick>
 8043462:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043464:	e008      	b.n	8043478 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043466:	f7fd fe5f 	bl	8041128 <HAL_GetTick>
 804346a:	4602      	mov	r2, r0
 804346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804346e:	1ad3      	subs	r3, r2, r3
 8043470:	2b02      	cmp	r3, #2
 8043472:	d901      	bls.n	8043478 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8043474:	2303      	movs	r3, #3
 8043476:	e1dd      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8043478:	4b03      	ldr	r3, [pc, #12]	@ (8043488 <HAL_RCC_OscConfig+0x4f8>)
 804347a:	681b      	ldr	r3, [r3, #0]
 804347c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8043480:	2b00      	cmp	r3, #0
 8043482:	d0f0      	beq.n	8043466 <HAL_RCC_OscConfig+0x4d6>
 8043484:	e01b      	b.n	80434be <HAL_RCC_OscConfig+0x52e>
 8043486:	bf00      	nop
 8043488:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804348c:	4b9b      	ldr	r3, [pc, #620]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804348e:	681b      	ldr	r3, [r3, #0]
 8043490:	4a9a      	ldr	r2, [pc, #616]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043492:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8043496:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8043498:	f7fd fe46 	bl	8041128 <HAL_GetTick>
 804349c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 804349e:	e008      	b.n	80434b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80434a0:	f7fd fe42 	bl	8041128 <HAL_GetTick>
 80434a4:	4602      	mov	r2, r0
 80434a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80434a8:	1ad3      	subs	r3, r2, r3
 80434aa:	2b02      	cmp	r3, #2
 80434ac:	d901      	bls.n	80434b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80434ae:	2303      	movs	r3, #3
 80434b0:	e1c0      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80434b2:	4b92      	ldr	r3, [pc, #584]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80434b4:	681b      	ldr	r3, [r3, #0]
 80434b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80434ba:	2b00      	cmp	r3, #0
 80434bc:	d1f0      	bne.n	80434a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80434be:	687b      	ldr	r3, [r7, #4]
 80434c0:	681b      	ldr	r3, [r3, #0]
 80434c2:	f003 0304 	and.w	r3, r3, #4
 80434c6:	2b00      	cmp	r3, #0
 80434c8:	f000 8081 	beq.w	80435ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80434cc:	4b8c      	ldr	r3, [pc, #560]	@ (8043700 <HAL_RCC_OscConfig+0x770>)
 80434ce:	681b      	ldr	r3, [r3, #0]
 80434d0:	4a8b      	ldr	r2, [pc, #556]	@ (8043700 <HAL_RCC_OscConfig+0x770>)
 80434d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80434d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80434d8:	f7fd fe26 	bl	8041128 <HAL_GetTick>
 80434dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80434de:	e008      	b.n	80434f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80434e0:	f7fd fe22 	bl	8041128 <HAL_GetTick>
 80434e4:	4602      	mov	r2, r0
 80434e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80434e8:	1ad3      	subs	r3, r2, r3
 80434ea:	2b64      	cmp	r3, #100	@ 0x64
 80434ec:	d901      	bls.n	80434f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80434ee:	2303      	movs	r3, #3
 80434f0:	e1a0      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80434f2:	4b83      	ldr	r3, [pc, #524]	@ (8043700 <HAL_RCC_OscConfig+0x770>)
 80434f4:	681b      	ldr	r3, [r3, #0]
 80434f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80434fa:	2b00      	cmp	r3, #0
 80434fc:	d0f0      	beq.n	80434e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80434fe:	687b      	ldr	r3, [r7, #4]
 8043500:	689b      	ldr	r3, [r3, #8]
 8043502:	2b01      	cmp	r3, #1
 8043504:	d106      	bne.n	8043514 <HAL_RCC_OscConfig+0x584>
 8043506:	4b7d      	ldr	r3, [pc, #500]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804350a:	4a7c      	ldr	r2, [pc, #496]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804350c:	f043 0301 	orr.w	r3, r3, #1
 8043510:	6713      	str	r3, [r2, #112]	@ 0x70
 8043512:	e02d      	b.n	8043570 <HAL_RCC_OscConfig+0x5e0>
 8043514:	687b      	ldr	r3, [r7, #4]
 8043516:	689b      	ldr	r3, [r3, #8]
 8043518:	2b00      	cmp	r3, #0
 804351a:	d10c      	bne.n	8043536 <HAL_RCC_OscConfig+0x5a6>
 804351c:	4b77      	ldr	r3, [pc, #476]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043520:	4a76      	ldr	r2, [pc, #472]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043522:	f023 0301 	bic.w	r3, r3, #1
 8043526:	6713      	str	r3, [r2, #112]	@ 0x70
 8043528:	4b74      	ldr	r3, [pc, #464]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804352a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804352c:	4a73      	ldr	r2, [pc, #460]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804352e:	f023 0304 	bic.w	r3, r3, #4
 8043532:	6713      	str	r3, [r2, #112]	@ 0x70
 8043534:	e01c      	b.n	8043570 <HAL_RCC_OscConfig+0x5e0>
 8043536:	687b      	ldr	r3, [r7, #4]
 8043538:	689b      	ldr	r3, [r3, #8]
 804353a:	2b05      	cmp	r3, #5
 804353c:	d10c      	bne.n	8043558 <HAL_RCC_OscConfig+0x5c8>
 804353e:	4b6f      	ldr	r3, [pc, #444]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043542:	4a6e      	ldr	r2, [pc, #440]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043544:	f043 0304 	orr.w	r3, r3, #4
 8043548:	6713      	str	r3, [r2, #112]	@ 0x70
 804354a:	4b6c      	ldr	r3, [pc, #432]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804354e:	4a6b      	ldr	r2, [pc, #428]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043550:	f043 0301 	orr.w	r3, r3, #1
 8043554:	6713      	str	r3, [r2, #112]	@ 0x70
 8043556:	e00b      	b.n	8043570 <HAL_RCC_OscConfig+0x5e0>
 8043558:	4b68      	ldr	r3, [pc, #416]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804355a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804355c:	4a67      	ldr	r2, [pc, #412]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804355e:	f023 0301 	bic.w	r3, r3, #1
 8043562:	6713      	str	r3, [r2, #112]	@ 0x70
 8043564:	4b65      	ldr	r3, [pc, #404]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8043568:	4a64      	ldr	r2, [pc, #400]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804356a:	f023 0304 	bic.w	r3, r3, #4
 804356e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8043570:	687b      	ldr	r3, [r7, #4]
 8043572:	689b      	ldr	r3, [r3, #8]
 8043574:	2b00      	cmp	r3, #0
 8043576:	d015      	beq.n	80435a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043578:	f7fd fdd6 	bl	8041128 <HAL_GetTick>
 804357c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804357e:	e00a      	b.n	8043596 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043580:	f7fd fdd2 	bl	8041128 <HAL_GetTick>
 8043584:	4602      	mov	r2, r0
 8043586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043588:	1ad3      	subs	r3, r2, r3
 804358a:	f241 3288 	movw	r2, #5000	@ 0x1388
 804358e:	4293      	cmp	r3, r2
 8043590:	d901      	bls.n	8043596 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8043592:	2303      	movs	r3, #3
 8043594:	e14e      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8043596:	4b59      	ldr	r3, [pc, #356]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804359a:	f003 0302 	and.w	r3, r3, #2
 804359e:	2b00      	cmp	r3, #0
 80435a0:	d0ee      	beq.n	8043580 <HAL_RCC_OscConfig+0x5f0>
 80435a2:	e014      	b.n	80435ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80435a4:	f7fd fdc0 	bl	8041128 <HAL_GetTick>
 80435a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80435aa:	e00a      	b.n	80435c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80435ac:	f7fd fdbc 	bl	8041128 <HAL_GetTick>
 80435b0:	4602      	mov	r2, r0
 80435b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80435b4:	1ad3      	subs	r3, r2, r3
 80435b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80435ba:	4293      	cmp	r3, r2
 80435bc:	d901      	bls.n	80435c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80435be:	2303      	movs	r3, #3
 80435c0:	e138      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80435c2:	4b4e      	ldr	r3, [pc, #312]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80435c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80435c6:	f003 0302 	and.w	r3, r3, #2
 80435ca:	2b00      	cmp	r3, #0
 80435cc:	d1ee      	bne.n	80435ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80435ce:	687b      	ldr	r3, [r7, #4]
 80435d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80435d2:	2b00      	cmp	r3, #0
 80435d4:	f000 812d 	beq.w	8043832 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80435d8:	4b48      	ldr	r3, [pc, #288]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80435da:	691b      	ldr	r3, [r3, #16]
 80435dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80435e0:	2b18      	cmp	r3, #24
 80435e2:	f000 80bd 	beq.w	8043760 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80435e6:	687b      	ldr	r3, [r7, #4]
 80435e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80435ea:	2b02      	cmp	r3, #2
 80435ec:	f040 809e 	bne.w	804372c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80435f0:	4b42      	ldr	r3, [pc, #264]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80435f2:	681b      	ldr	r3, [r3, #0]
 80435f4:	4a41      	ldr	r2, [pc, #260]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80435f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80435fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80435fc:	f7fd fd94 	bl	8041128 <HAL_GetTick>
 8043600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043602:	e008      	b.n	8043616 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043604:	f7fd fd90 	bl	8041128 <HAL_GetTick>
 8043608:	4602      	mov	r2, r0
 804360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804360c:	1ad3      	subs	r3, r2, r3
 804360e:	2b02      	cmp	r3, #2
 8043610:	d901      	bls.n	8043616 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8043612:	2303      	movs	r3, #3
 8043614:	e10e      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043616:	4b39      	ldr	r3, [pc, #228]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043618:	681b      	ldr	r3, [r3, #0]
 804361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804361e:	2b00      	cmp	r3, #0
 8043620:	d1f0      	bne.n	8043604 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8043622:	4b36      	ldr	r3, [pc, #216]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8043626:	4b37      	ldr	r3, [pc, #220]	@ (8043704 <HAL_RCC_OscConfig+0x774>)
 8043628:	4013      	ands	r3, r2
 804362a:	687a      	ldr	r2, [r7, #4]
 804362c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 804362e:	687a      	ldr	r2, [r7, #4]
 8043630:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8043632:	0112      	lsls	r2, r2, #4
 8043634:	430a      	orrs	r2, r1
 8043636:	4931      	ldr	r1, [pc, #196]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043638:	4313      	orrs	r3, r2
 804363a:	628b      	str	r3, [r1, #40]	@ 0x28
 804363c:	687b      	ldr	r3, [r7, #4]
 804363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043640:	3b01      	subs	r3, #1
 8043642:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043646:	687b      	ldr	r3, [r7, #4]
 8043648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 804364a:	3b01      	subs	r3, #1
 804364c:	025b      	lsls	r3, r3, #9
 804364e:	b29b      	uxth	r3, r3
 8043650:	431a      	orrs	r2, r3
 8043652:	687b      	ldr	r3, [r7, #4]
 8043654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8043656:	3b01      	subs	r3, #1
 8043658:	041b      	lsls	r3, r3, #16
 804365a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 804365e:	431a      	orrs	r2, r3
 8043660:	687b      	ldr	r3, [r7, #4]
 8043662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8043664:	3b01      	subs	r3, #1
 8043666:	061b      	lsls	r3, r3, #24
 8043668:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 804366c:	4923      	ldr	r1, [pc, #140]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804366e:	4313      	orrs	r3, r2
 8043670:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8043672:	4b22      	ldr	r3, [pc, #136]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043676:	4a21      	ldr	r2, [pc, #132]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043678:	f023 0301 	bic.w	r3, r3, #1
 804367c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 804367e:	4b1f      	ldr	r3, [pc, #124]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8043682:	4b21      	ldr	r3, [pc, #132]	@ (8043708 <HAL_RCC_OscConfig+0x778>)
 8043684:	4013      	ands	r3, r2
 8043686:	687a      	ldr	r2, [r7, #4]
 8043688:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 804368a:	00d2      	lsls	r2, r2, #3
 804368c:	491b      	ldr	r1, [pc, #108]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 804368e:	4313      	orrs	r3, r2
 8043690:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8043692:	4b1a      	ldr	r3, [pc, #104]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 8043694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043696:	f023 020c 	bic.w	r2, r3, #12
 804369a:	687b      	ldr	r3, [r7, #4]
 804369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804369e:	4917      	ldr	r1, [pc, #92]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436a0:	4313      	orrs	r3, r2
 80436a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80436a4:	4b15      	ldr	r3, [pc, #84]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436a8:	f023 0202 	bic.w	r2, r3, #2
 80436ac:	687b      	ldr	r3, [r7, #4]
 80436ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80436b0:	4912      	ldr	r1, [pc, #72]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436b2:	4313      	orrs	r3, r2
 80436b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80436b6:	4b11      	ldr	r3, [pc, #68]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436ba:	4a10      	ldr	r2, [pc, #64]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80436c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80436c2:	4b0e      	ldr	r3, [pc, #56]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436c6:	4a0d      	ldr	r2, [pc, #52]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80436cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80436ce:	4b0b      	ldr	r3, [pc, #44]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436d2:	4a0a      	ldr	r2, [pc, #40]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80436d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80436da:	4b08      	ldr	r3, [pc, #32]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80436de:	4a07      	ldr	r2, [pc, #28]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436e0:	f043 0301 	orr.w	r3, r3, #1
 80436e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80436e6:	4b05      	ldr	r3, [pc, #20]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436e8:	681b      	ldr	r3, [r3, #0]
 80436ea:	4a04      	ldr	r2, [pc, #16]	@ (80436fc <HAL_RCC_OscConfig+0x76c>)
 80436ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80436f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80436f2:	f7fd fd19 	bl	8041128 <HAL_GetTick>
 80436f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80436f8:	e011      	b.n	804371e <HAL_RCC_OscConfig+0x78e>
 80436fa:	bf00      	nop
 80436fc:	58024400 	.word	0x58024400
 8043700:	58024800 	.word	0x58024800
 8043704:	fffffc0c 	.word	0xfffffc0c
 8043708:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804370c:	f7fd fd0c 	bl	8041128 <HAL_GetTick>
 8043710:	4602      	mov	r2, r0
 8043712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043714:	1ad3      	subs	r3, r2, r3
 8043716:	2b02      	cmp	r3, #2
 8043718:	d901      	bls.n	804371e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 804371a:	2303      	movs	r3, #3
 804371c:	e08a      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 804371e:	4b47      	ldr	r3, [pc, #284]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043720:	681b      	ldr	r3, [r3, #0]
 8043722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8043726:	2b00      	cmp	r3, #0
 8043728:	d0f0      	beq.n	804370c <HAL_RCC_OscConfig+0x77c>
 804372a:	e082      	b.n	8043832 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804372c:	4b43      	ldr	r3, [pc, #268]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 804372e:	681b      	ldr	r3, [r3, #0]
 8043730:	4a42      	ldr	r2, [pc, #264]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8043736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043738:	f7fd fcf6 	bl	8041128 <HAL_GetTick>
 804373c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 804373e:	e008      	b.n	8043752 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043740:	f7fd fcf2 	bl	8041128 <HAL_GetTick>
 8043744:	4602      	mov	r2, r0
 8043746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043748:	1ad3      	subs	r3, r2, r3
 804374a:	2b02      	cmp	r3, #2
 804374c:	d901      	bls.n	8043752 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 804374e:	2303      	movs	r3, #3
 8043750:	e070      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8043752:	4b3a      	ldr	r3, [pc, #232]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043754:	681b      	ldr	r3, [r3, #0]
 8043756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804375a:	2b00      	cmp	r3, #0
 804375c:	d1f0      	bne.n	8043740 <HAL_RCC_OscConfig+0x7b0>
 804375e:	e068      	b.n	8043832 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8043760:	4b36      	ldr	r3, [pc, #216]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043764:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8043766:	4b35      	ldr	r3, [pc, #212]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804376a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804376c:	687b      	ldr	r3, [r7, #4]
 804376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8043770:	2b01      	cmp	r3, #1
 8043772:	d031      	beq.n	80437d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043774:	693b      	ldr	r3, [r7, #16]
 8043776:	f003 0203 	and.w	r2, r3, #3
 804377a:	687b      	ldr	r3, [r7, #4]
 804377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 804377e:	429a      	cmp	r2, r3
 8043780:	d12a      	bne.n	80437d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8043782:	693b      	ldr	r3, [r7, #16]
 8043784:	091b      	lsrs	r3, r3, #4
 8043786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 804378a:	687b      	ldr	r3, [r7, #4]
 804378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804378e:	429a      	cmp	r2, r3
 8043790:	d122      	bne.n	80437d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8043792:	68fb      	ldr	r3, [r7, #12]
 8043794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8043798:	687b      	ldr	r3, [r7, #4]
 804379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804379c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 804379e:	429a      	cmp	r2, r3
 80437a0:	d11a      	bne.n	80437d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80437a2:	68fb      	ldr	r3, [r7, #12]
 80437a4:	0a5b      	lsrs	r3, r3, #9
 80437a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80437aa:	687b      	ldr	r3, [r7, #4]
 80437ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80437ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80437b0:	429a      	cmp	r2, r3
 80437b2:	d111      	bne.n	80437d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80437b4:	68fb      	ldr	r3, [r7, #12]
 80437b6:	0c1b      	lsrs	r3, r3, #16
 80437b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80437bc:	687b      	ldr	r3, [r7, #4]
 80437be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80437c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80437c2:	429a      	cmp	r2, r3
 80437c4:	d108      	bne.n	80437d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80437c6:	68fb      	ldr	r3, [r7, #12]
 80437c8:	0e1b      	lsrs	r3, r3, #24
 80437ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80437ce:	687b      	ldr	r3, [r7, #4]
 80437d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80437d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80437d4:	429a      	cmp	r2, r3
 80437d6:	d001      	beq.n	80437dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80437d8:	2301      	movs	r3, #1
 80437da:	e02b      	b.n	8043834 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80437dc:	4b17      	ldr	r3, [pc, #92]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 80437de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80437e0:	08db      	lsrs	r3, r3, #3
 80437e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80437e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80437e8:	687b      	ldr	r3, [r7, #4]
 80437ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80437ec:	693a      	ldr	r2, [r7, #16]
 80437ee:	429a      	cmp	r2, r3
 80437f0:	d01f      	beq.n	8043832 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80437f2:	4b12      	ldr	r3, [pc, #72]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 80437f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80437f6:	4a11      	ldr	r2, [pc, #68]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 80437f8:	f023 0301 	bic.w	r3, r3, #1
 80437fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80437fe:	f7fd fc93 	bl	8041128 <HAL_GetTick>
 8043802:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8043804:	bf00      	nop
 8043806:	f7fd fc8f 	bl	8041128 <HAL_GetTick>
 804380a:	4602      	mov	r2, r0
 804380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 804380e:	4293      	cmp	r3, r2
 8043810:	d0f9      	beq.n	8043806 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8043812:	4b0a      	ldr	r3, [pc, #40]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043814:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8043816:	4b0a      	ldr	r3, [pc, #40]	@ (8043840 <HAL_RCC_OscConfig+0x8b0>)
 8043818:	4013      	ands	r3, r2
 804381a:	687a      	ldr	r2, [r7, #4]
 804381c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 804381e:	00d2      	lsls	r2, r2, #3
 8043820:	4906      	ldr	r1, [pc, #24]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043822:	4313      	orrs	r3, r2
 8043824:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8043826:	4b05      	ldr	r3, [pc, #20]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 8043828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804382a:	4a04      	ldr	r2, [pc, #16]	@ (804383c <HAL_RCC_OscConfig+0x8ac>)
 804382c:	f043 0301 	orr.w	r3, r3, #1
 8043830:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8043832:	2300      	movs	r3, #0
}
 8043834:	4618      	mov	r0, r3
 8043836:	3730      	adds	r7, #48	@ 0x30
 8043838:	46bd      	mov	sp, r7
 804383a:	bd80      	pop	{r7, pc}
 804383c:	58024400 	.word	0x58024400
 8043840:	ffff0007 	.word	0xffff0007

08043844 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8043844:	b580      	push	{r7, lr}
 8043846:	b086      	sub	sp, #24
 8043848:	af00      	add	r7, sp, #0
 804384a:	6078      	str	r0, [r7, #4]
 804384c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804384e:	687b      	ldr	r3, [r7, #4]
 8043850:	2b00      	cmp	r3, #0
 8043852:	d101      	bne.n	8043858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8043854:	2301      	movs	r3, #1
 8043856:	e19c      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8043858:	4b8a      	ldr	r3, [pc, #552]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 804385a:	681b      	ldr	r3, [r3, #0]
 804385c:	f003 030f 	and.w	r3, r3, #15
 8043860:	683a      	ldr	r2, [r7, #0]
 8043862:	429a      	cmp	r2, r3
 8043864:	d910      	bls.n	8043888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043866:	4b87      	ldr	r3, [pc, #540]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043868:	681b      	ldr	r3, [r3, #0]
 804386a:	f023 020f 	bic.w	r2, r3, #15
 804386e:	4985      	ldr	r1, [pc, #532]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043870:	683b      	ldr	r3, [r7, #0]
 8043872:	4313      	orrs	r3, r2
 8043874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043876:	4b83      	ldr	r3, [pc, #524]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043878:	681b      	ldr	r3, [r3, #0]
 804387a:	f003 030f 	and.w	r3, r3, #15
 804387e:	683a      	ldr	r2, [r7, #0]
 8043880:	429a      	cmp	r2, r3
 8043882:	d001      	beq.n	8043888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8043884:	2301      	movs	r3, #1
 8043886:	e184      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043888:	687b      	ldr	r3, [r7, #4]
 804388a:	681b      	ldr	r3, [r3, #0]
 804388c:	f003 0304 	and.w	r3, r3, #4
 8043890:	2b00      	cmp	r3, #0
 8043892:	d010      	beq.n	80438b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043894:	687b      	ldr	r3, [r7, #4]
 8043896:	691a      	ldr	r2, [r3, #16]
 8043898:	4b7b      	ldr	r3, [pc, #492]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 804389a:	699b      	ldr	r3, [r3, #24]
 804389c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80438a0:	429a      	cmp	r2, r3
 80438a2:	d908      	bls.n	80438b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80438a4:	4b78      	ldr	r3, [pc, #480]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80438a6:	699b      	ldr	r3, [r3, #24]
 80438a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80438ac:	687b      	ldr	r3, [r7, #4]
 80438ae:	691b      	ldr	r3, [r3, #16]
 80438b0:	4975      	ldr	r1, [pc, #468]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80438b2:	4313      	orrs	r3, r2
 80438b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80438b6:	687b      	ldr	r3, [r7, #4]
 80438b8:	681b      	ldr	r3, [r3, #0]
 80438ba:	f003 0308 	and.w	r3, r3, #8
 80438be:	2b00      	cmp	r3, #0
 80438c0:	d010      	beq.n	80438e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80438c2:	687b      	ldr	r3, [r7, #4]
 80438c4:	695a      	ldr	r2, [r3, #20]
 80438c6:	4b70      	ldr	r3, [pc, #448]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80438c8:	69db      	ldr	r3, [r3, #28]
 80438ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80438ce:	429a      	cmp	r2, r3
 80438d0:	d908      	bls.n	80438e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80438d2:	4b6d      	ldr	r3, [pc, #436]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80438d4:	69db      	ldr	r3, [r3, #28]
 80438d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80438da:	687b      	ldr	r3, [r7, #4]
 80438dc:	695b      	ldr	r3, [r3, #20]
 80438de:	496a      	ldr	r1, [pc, #424]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80438e0:	4313      	orrs	r3, r2
 80438e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80438e4:	687b      	ldr	r3, [r7, #4]
 80438e6:	681b      	ldr	r3, [r3, #0]
 80438e8:	f003 0310 	and.w	r3, r3, #16
 80438ec:	2b00      	cmp	r3, #0
 80438ee:	d010      	beq.n	8043912 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80438f0:	687b      	ldr	r3, [r7, #4]
 80438f2:	699a      	ldr	r2, [r3, #24]
 80438f4:	4b64      	ldr	r3, [pc, #400]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80438f6:	69db      	ldr	r3, [r3, #28]
 80438f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80438fc:	429a      	cmp	r2, r3
 80438fe:	d908      	bls.n	8043912 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8043900:	4b61      	ldr	r3, [pc, #388]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043902:	69db      	ldr	r3, [r3, #28]
 8043904:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8043908:	687b      	ldr	r3, [r7, #4]
 804390a:	699b      	ldr	r3, [r3, #24]
 804390c:	495e      	ldr	r1, [pc, #376]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 804390e:	4313      	orrs	r3, r2
 8043910:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8043912:	687b      	ldr	r3, [r7, #4]
 8043914:	681b      	ldr	r3, [r3, #0]
 8043916:	f003 0320 	and.w	r3, r3, #32
 804391a:	2b00      	cmp	r3, #0
 804391c:	d010      	beq.n	8043940 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 804391e:	687b      	ldr	r3, [r7, #4]
 8043920:	69da      	ldr	r2, [r3, #28]
 8043922:	4b59      	ldr	r3, [pc, #356]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043924:	6a1b      	ldr	r3, [r3, #32]
 8043926:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 804392a:	429a      	cmp	r2, r3
 804392c:	d908      	bls.n	8043940 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 804392e:	4b56      	ldr	r3, [pc, #344]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043930:	6a1b      	ldr	r3, [r3, #32]
 8043932:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043936:	687b      	ldr	r3, [r7, #4]
 8043938:	69db      	ldr	r3, [r3, #28]
 804393a:	4953      	ldr	r1, [pc, #332]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 804393c:	4313      	orrs	r3, r2
 804393e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043940:	687b      	ldr	r3, [r7, #4]
 8043942:	681b      	ldr	r3, [r3, #0]
 8043944:	f003 0302 	and.w	r3, r3, #2
 8043948:	2b00      	cmp	r3, #0
 804394a:	d010      	beq.n	804396e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 804394c:	687b      	ldr	r3, [r7, #4]
 804394e:	68da      	ldr	r2, [r3, #12]
 8043950:	4b4d      	ldr	r3, [pc, #308]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043952:	699b      	ldr	r3, [r3, #24]
 8043954:	f003 030f 	and.w	r3, r3, #15
 8043958:	429a      	cmp	r2, r3
 804395a:	d908      	bls.n	804396e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804395c:	4b4a      	ldr	r3, [pc, #296]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 804395e:	699b      	ldr	r3, [r3, #24]
 8043960:	f023 020f 	bic.w	r2, r3, #15
 8043964:	687b      	ldr	r3, [r7, #4]
 8043966:	68db      	ldr	r3, [r3, #12]
 8043968:	4947      	ldr	r1, [pc, #284]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 804396a:	4313      	orrs	r3, r2
 804396c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804396e:	687b      	ldr	r3, [r7, #4]
 8043970:	681b      	ldr	r3, [r3, #0]
 8043972:	f003 0301 	and.w	r3, r3, #1
 8043976:	2b00      	cmp	r3, #0
 8043978:	d055      	beq.n	8043a26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 804397a:	4b43      	ldr	r3, [pc, #268]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 804397c:	699b      	ldr	r3, [r3, #24]
 804397e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8043982:	687b      	ldr	r3, [r7, #4]
 8043984:	689b      	ldr	r3, [r3, #8]
 8043986:	4940      	ldr	r1, [pc, #256]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043988:	4313      	orrs	r3, r2
 804398a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804398c:	687b      	ldr	r3, [r7, #4]
 804398e:	685b      	ldr	r3, [r3, #4]
 8043990:	2b02      	cmp	r3, #2
 8043992:	d107      	bne.n	80439a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8043994:	4b3c      	ldr	r3, [pc, #240]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043996:	681b      	ldr	r3, [r3, #0]
 8043998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804399c:	2b00      	cmp	r3, #0
 804399e:	d121      	bne.n	80439e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80439a0:	2301      	movs	r3, #1
 80439a2:	e0f6      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80439a4:	687b      	ldr	r3, [r7, #4]
 80439a6:	685b      	ldr	r3, [r3, #4]
 80439a8:	2b03      	cmp	r3, #3
 80439aa:	d107      	bne.n	80439bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80439ac:	4b36      	ldr	r3, [pc, #216]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80439ae:	681b      	ldr	r3, [r3, #0]
 80439b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80439b4:	2b00      	cmp	r3, #0
 80439b6:	d115      	bne.n	80439e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80439b8:	2301      	movs	r3, #1
 80439ba:	e0ea      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80439bc:	687b      	ldr	r3, [r7, #4]
 80439be:	685b      	ldr	r3, [r3, #4]
 80439c0:	2b01      	cmp	r3, #1
 80439c2:	d107      	bne.n	80439d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80439c4:	4b30      	ldr	r3, [pc, #192]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80439c6:	681b      	ldr	r3, [r3, #0]
 80439c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80439cc:	2b00      	cmp	r3, #0
 80439ce:	d109      	bne.n	80439e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80439d0:	2301      	movs	r3, #1
 80439d2:	e0de      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80439d4:	4b2c      	ldr	r3, [pc, #176]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80439d6:	681b      	ldr	r3, [r3, #0]
 80439d8:	f003 0304 	and.w	r3, r3, #4
 80439dc:	2b00      	cmp	r3, #0
 80439de:	d101      	bne.n	80439e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80439e0:	2301      	movs	r3, #1
 80439e2:	e0d6      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80439e4:	4b28      	ldr	r3, [pc, #160]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80439e6:	691b      	ldr	r3, [r3, #16]
 80439e8:	f023 0207 	bic.w	r2, r3, #7
 80439ec:	687b      	ldr	r3, [r7, #4]
 80439ee:	685b      	ldr	r3, [r3, #4]
 80439f0:	4925      	ldr	r1, [pc, #148]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 80439f2:	4313      	orrs	r3, r2
 80439f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80439f6:	f7fd fb97 	bl	8041128 <HAL_GetTick>
 80439fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80439fc:	e00a      	b.n	8043a14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80439fe:	f7fd fb93 	bl	8041128 <HAL_GetTick>
 8043a02:	4602      	mov	r2, r0
 8043a04:	697b      	ldr	r3, [r7, #20]
 8043a06:	1ad3      	subs	r3, r2, r3
 8043a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8043a0c:	4293      	cmp	r3, r2
 8043a0e:	d901      	bls.n	8043a14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8043a10:	2303      	movs	r3, #3
 8043a12:	e0be      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043a14:	4b1c      	ldr	r3, [pc, #112]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043a16:	691b      	ldr	r3, [r3, #16]
 8043a18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8043a1c:	687b      	ldr	r3, [r7, #4]
 8043a1e:	685b      	ldr	r3, [r3, #4]
 8043a20:	00db      	lsls	r3, r3, #3
 8043a22:	429a      	cmp	r2, r3
 8043a24:	d1eb      	bne.n	80439fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043a26:	687b      	ldr	r3, [r7, #4]
 8043a28:	681b      	ldr	r3, [r3, #0]
 8043a2a:	f003 0302 	and.w	r3, r3, #2
 8043a2e:	2b00      	cmp	r3, #0
 8043a30:	d010      	beq.n	8043a54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8043a32:	687b      	ldr	r3, [r7, #4]
 8043a34:	68da      	ldr	r2, [r3, #12]
 8043a36:	4b14      	ldr	r3, [pc, #80]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043a38:	699b      	ldr	r3, [r3, #24]
 8043a3a:	f003 030f 	and.w	r3, r3, #15
 8043a3e:	429a      	cmp	r2, r3
 8043a40:	d208      	bcs.n	8043a54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043a42:	4b11      	ldr	r3, [pc, #68]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043a44:	699b      	ldr	r3, [r3, #24]
 8043a46:	f023 020f 	bic.w	r2, r3, #15
 8043a4a:	687b      	ldr	r3, [r7, #4]
 8043a4c:	68db      	ldr	r3, [r3, #12]
 8043a4e:	490e      	ldr	r1, [pc, #56]	@ (8043a88 <HAL_RCC_ClockConfig+0x244>)
 8043a50:	4313      	orrs	r3, r2
 8043a52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8043a54:	4b0b      	ldr	r3, [pc, #44]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043a56:	681b      	ldr	r3, [r3, #0]
 8043a58:	f003 030f 	and.w	r3, r3, #15
 8043a5c:	683a      	ldr	r2, [r7, #0]
 8043a5e:	429a      	cmp	r2, r3
 8043a60:	d214      	bcs.n	8043a8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043a62:	4b08      	ldr	r3, [pc, #32]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043a64:	681b      	ldr	r3, [r3, #0]
 8043a66:	f023 020f 	bic.w	r2, r3, #15
 8043a6a:	4906      	ldr	r1, [pc, #24]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043a6c:	683b      	ldr	r3, [r7, #0]
 8043a6e:	4313      	orrs	r3, r2
 8043a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043a72:	4b04      	ldr	r3, [pc, #16]	@ (8043a84 <HAL_RCC_ClockConfig+0x240>)
 8043a74:	681b      	ldr	r3, [r3, #0]
 8043a76:	f003 030f 	and.w	r3, r3, #15
 8043a7a:	683a      	ldr	r2, [r7, #0]
 8043a7c:	429a      	cmp	r2, r3
 8043a7e:	d005      	beq.n	8043a8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8043a80:	2301      	movs	r3, #1
 8043a82:	e086      	b.n	8043b92 <HAL_RCC_ClockConfig+0x34e>
 8043a84:	52002000 	.word	0x52002000
 8043a88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8043a8c:	687b      	ldr	r3, [r7, #4]
 8043a8e:	681b      	ldr	r3, [r3, #0]
 8043a90:	f003 0304 	and.w	r3, r3, #4
 8043a94:	2b00      	cmp	r3, #0
 8043a96:	d010      	beq.n	8043aba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8043a98:	687b      	ldr	r3, [r7, #4]
 8043a9a:	691a      	ldr	r2, [r3, #16]
 8043a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043a9e:	699b      	ldr	r3, [r3, #24]
 8043aa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043aa4:	429a      	cmp	r2, r3
 8043aa6:	d208      	bcs.n	8043aba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8043aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043aaa:	699b      	ldr	r3, [r3, #24]
 8043aac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043ab0:	687b      	ldr	r3, [r7, #4]
 8043ab2:	691b      	ldr	r3, [r3, #16]
 8043ab4:	4939      	ldr	r1, [pc, #228]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043ab6:	4313      	orrs	r3, r2
 8043ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8043aba:	687b      	ldr	r3, [r7, #4]
 8043abc:	681b      	ldr	r3, [r3, #0]
 8043abe:	f003 0308 	and.w	r3, r3, #8
 8043ac2:	2b00      	cmp	r3, #0
 8043ac4:	d010      	beq.n	8043ae8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8043ac6:	687b      	ldr	r3, [r7, #4]
 8043ac8:	695a      	ldr	r2, [r3, #20]
 8043aca:	4b34      	ldr	r3, [pc, #208]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043acc:	69db      	ldr	r3, [r3, #28]
 8043ace:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043ad2:	429a      	cmp	r2, r3
 8043ad4:	d208      	bcs.n	8043ae8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8043ad6:	4b31      	ldr	r3, [pc, #196]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043ad8:	69db      	ldr	r3, [r3, #28]
 8043ada:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043ade:	687b      	ldr	r3, [r7, #4]
 8043ae0:	695b      	ldr	r3, [r3, #20]
 8043ae2:	492e      	ldr	r1, [pc, #184]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043ae4:	4313      	orrs	r3, r2
 8043ae6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8043ae8:	687b      	ldr	r3, [r7, #4]
 8043aea:	681b      	ldr	r3, [r3, #0]
 8043aec:	f003 0310 	and.w	r3, r3, #16
 8043af0:	2b00      	cmp	r3, #0
 8043af2:	d010      	beq.n	8043b16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8043af4:	687b      	ldr	r3, [r7, #4]
 8043af6:	699a      	ldr	r2, [r3, #24]
 8043af8:	4b28      	ldr	r3, [pc, #160]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043afa:	69db      	ldr	r3, [r3, #28]
 8043afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8043b00:	429a      	cmp	r2, r3
 8043b02:	d208      	bcs.n	8043b16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8043b04:	4b25      	ldr	r3, [pc, #148]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b06:	69db      	ldr	r3, [r3, #28]
 8043b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8043b0c:	687b      	ldr	r3, [r7, #4]
 8043b0e:	699b      	ldr	r3, [r3, #24]
 8043b10:	4922      	ldr	r1, [pc, #136]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b12:	4313      	orrs	r3, r2
 8043b14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8043b16:	687b      	ldr	r3, [r7, #4]
 8043b18:	681b      	ldr	r3, [r3, #0]
 8043b1a:	f003 0320 	and.w	r3, r3, #32
 8043b1e:	2b00      	cmp	r3, #0
 8043b20:	d010      	beq.n	8043b44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8043b22:	687b      	ldr	r3, [r7, #4]
 8043b24:	69da      	ldr	r2, [r3, #28]
 8043b26:	4b1d      	ldr	r3, [pc, #116]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b28:	6a1b      	ldr	r3, [r3, #32]
 8043b2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8043b2e:	429a      	cmp	r2, r3
 8043b30:	d208      	bcs.n	8043b44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8043b32:	4b1a      	ldr	r3, [pc, #104]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b34:	6a1b      	ldr	r3, [r3, #32]
 8043b36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8043b3a:	687b      	ldr	r3, [r7, #4]
 8043b3c:	69db      	ldr	r3, [r3, #28]
 8043b3e:	4917      	ldr	r1, [pc, #92]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b40:	4313      	orrs	r3, r2
 8043b42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8043b44:	f000 f89e 	bl	8043c84 <HAL_RCC_GetSysClockFreq>
 8043b48:	4602      	mov	r2, r0
 8043b4a:	4b14      	ldr	r3, [pc, #80]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b4c:	699b      	ldr	r3, [r3, #24]
 8043b4e:	0a1b      	lsrs	r3, r3, #8
 8043b50:	f003 030f 	and.w	r3, r3, #15
 8043b54:	4912      	ldr	r1, [pc, #72]	@ (8043ba0 <HAL_RCC_ClockConfig+0x35c>)
 8043b56:	5ccb      	ldrb	r3, [r1, r3]
 8043b58:	f003 031f 	and.w	r3, r3, #31
 8043b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8043b60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043b62:	4b0e      	ldr	r3, [pc, #56]	@ (8043b9c <HAL_RCC_ClockConfig+0x358>)
 8043b64:	699b      	ldr	r3, [r3, #24]
 8043b66:	f003 030f 	and.w	r3, r3, #15
 8043b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8043ba0 <HAL_RCC_ClockConfig+0x35c>)
 8043b6c:	5cd3      	ldrb	r3, [r2, r3]
 8043b6e:	f003 031f 	and.w	r3, r3, #31
 8043b72:	693a      	ldr	r2, [r7, #16]
 8043b74:	fa22 f303 	lsr.w	r3, r2, r3
 8043b78:	4a0a      	ldr	r2, [pc, #40]	@ (8043ba4 <HAL_RCC_ClockConfig+0x360>)
 8043b7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8043ba8 <HAL_RCC_ClockConfig+0x364>)
 8043b7e:	693b      	ldr	r3, [r7, #16]
 8043b80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8043b82:	4b0a      	ldr	r3, [pc, #40]	@ (8043bac <HAL_RCC_ClockConfig+0x368>)
 8043b84:	681b      	ldr	r3, [r3, #0]
 8043b86:	4618      	mov	r0, r3
 8043b88:	f7fd fa84 	bl	8041094 <HAL_InitTick>
 8043b8c:	4603      	mov	r3, r0
 8043b8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8043b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8043b92:	4618      	mov	r0, r3
 8043b94:	3718      	adds	r7, #24
 8043b96:	46bd      	mov	sp, r7
 8043b98:	bd80      	pop	{r7, pc}
 8043b9a:	bf00      	nop
 8043b9c:	58024400 	.word	0x58024400
 8043ba0:	0804c328 	.word	0x0804c328
 8043ba4:	24000004 	.word	0x24000004
 8043ba8:	24000000 	.word	0x24000000
 8043bac:	24000008 	.word	0x24000008

08043bb0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8043bb0:	b580      	push	{r7, lr}
 8043bb2:	b08c      	sub	sp, #48	@ 0x30
 8043bb4:	af00      	add	r7, sp, #0
 8043bb6:	60f8      	str	r0, [r7, #12]
 8043bb8:	60b9      	str	r1, [r7, #8]
 8043bba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8043bbc:	68fb      	ldr	r3, [r7, #12]
 8043bbe:	2b00      	cmp	r3, #0
 8043bc0:	d12a      	bne.n	8043c18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8043bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043bca:	f043 0301 	orr.w	r3, r3, #1
 8043bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043bd2:	4b29      	ldr	r3, [pc, #164]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043bd8:	f003 0301 	and.w	r3, r3, #1
 8043bdc:	61bb      	str	r3, [r7, #24]
 8043bde:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8043be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8043be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043be6:	2302      	movs	r3, #2
 8043be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043bea:	2303      	movs	r3, #3
 8043bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043bee:	2300      	movs	r3, #0
 8043bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043bf2:	2300      	movs	r3, #0
 8043bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8043bf6:	f107 031c 	add.w	r3, r7, #28
 8043bfa:	4619      	mov	r1, r3
 8043bfc:	481f      	ldr	r0, [pc, #124]	@ (8043c7c <HAL_RCC_MCOConfig+0xcc>)
 8043bfe:	f7fd fcd1 	bl	80415a4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8043c02:	4b1d      	ldr	r3, [pc, #116]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c04:	691b      	ldr	r3, [r3, #16]
 8043c06:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8043c0a:	68b9      	ldr	r1, [r7, #8]
 8043c0c:	687b      	ldr	r3, [r7, #4]
 8043c0e:	430b      	orrs	r3, r1
 8043c10:	4919      	ldr	r1, [pc, #100]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c12:	4313      	orrs	r3, r2
 8043c14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8043c16:	e02a      	b.n	8043c6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8043c18:	4b17      	ldr	r3, [pc, #92]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043c1e:	4a16      	ldr	r2, [pc, #88]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c20:	f043 0304 	orr.w	r3, r3, #4
 8043c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8043c28:	4b13      	ldr	r3, [pc, #76]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8043c2e:	f003 0304 	and.w	r3, r3, #4
 8043c32:	617b      	str	r3, [r7, #20]
 8043c34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8043c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8043c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043c3c:	2302      	movs	r3, #2
 8043c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043c40:	2303      	movs	r3, #3
 8043c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043c44:	2300      	movs	r3, #0
 8043c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8043c48:	2300      	movs	r3, #0
 8043c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8043c4c:	f107 031c 	add.w	r3, r7, #28
 8043c50:	4619      	mov	r1, r3
 8043c52:	480b      	ldr	r0, [pc, #44]	@ (8043c80 <HAL_RCC_MCOConfig+0xd0>)
 8043c54:	f7fd fca6 	bl	80415a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8043c58:	4b07      	ldr	r3, [pc, #28]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c5a:	691b      	ldr	r3, [r3, #16]
 8043c5c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8043c60:	687b      	ldr	r3, [r7, #4]
 8043c62:	01d9      	lsls	r1, r3, #7
 8043c64:	68bb      	ldr	r3, [r7, #8]
 8043c66:	430b      	orrs	r3, r1
 8043c68:	4903      	ldr	r1, [pc, #12]	@ (8043c78 <HAL_RCC_MCOConfig+0xc8>)
 8043c6a:	4313      	orrs	r3, r2
 8043c6c:	610b      	str	r3, [r1, #16]
}
 8043c6e:	bf00      	nop
 8043c70:	3730      	adds	r7, #48	@ 0x30
 8043c72:	46bd      	mov	sp, r7
 8043c74:	bd80      	pop	{r7, pc}
 8043c76:	bf00      	nop
 8043c78:	58024400 	.word	0x58024400
 8043c7c:	58020000 	.word	0x58020000
 8043c80:	58020800 	.word	0x58020800

08043c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8043c84:	b480      	push	{r7}
 8043c86:	b089      	sub	sp, #36	@ 0x24
 8043c88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8043c8a:	4bb3      	ldr	r3, [pc, #716]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043c8c:	691b      	ldr	r3, [r3, #16]
 8043c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8043c92:	2b18      	cmp	r3, #24
 8043c94:	f200 8155 	bhi.w	8043f42 <HAL_RCC_GetSysClockFreq+0x2be>
 8043c98:	a201      	add	r2, pc, #4	@ (adr r2, 8043ca0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8043c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043c9e:	bf00      	nop
 8043ca0:	08043d05 	.word	0x08043d05
 8043ca4:	08043f43 	.word	0x08043f43
 8043ca8:	08043f43 	.word	0x08043f43
 8043cac:	08043f43 	.word	0x08043f43
 8043cb0:	08043f43 	.word	0x08043f43
 8043cb4:	08043f43 	.word	0x08043f43
 8043cb8:	08043f43 	.word	0x08043f43
 8043cbc:	08043f43 	.word	0x08043f43
 8043cc0:	08043d2b 	.word	0x08043d2b
 8043cc4:	08043f43 	.word	0x08043f43
 8043cc8:	08043f43 	.word	0x08043f43
 8043ccc:	08043f43 	.word	0x08043f43
 8043cd0:	08043f43 	.word	0x08043f43
 8043cd4:	08043f43 	.word	0x08043f43
 8043cd8:	08043f43 	.word	0x08043f43
 8043cdc:	08043f43 	.word	0x08043f43
 8043ce0:	08043d31 	.word	0x08043d31
 8043ce4:	08043f43 	.word	0x08043f43
 8043ce8:	08043f43 	.word	0x08043f43
 8043cec:	08043f43 	.word	0x08043f43
 8043cf0:	08043f43 	.word	0x08043f43
 8043cf4:	08043f43 	.word	0x08043f43
 8043cf8:	08043f43 	.word	0x08043f43
 8043cfc:	08043f43 	.word	0x08043f43
 8043d00:	08043d37 	.word	0x08043d37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043d04:	4b94      	ldr	r3, [pc, #592]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d06:	681b      	ldr	r3, [r3, #0]
 8043d08:	f003 0320 	and.w	r3, r3, #32
 8043d0c:	2b00      	cmp	r3, #0
 8043d0e:	d009      	beq.n	8043d24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043d10:	4b91      	ldr	r3, [pc, #580]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d12:	681b      	ldr	r3, [r3, #0]
 8043d14:	08db      	lsrs	r3, r3, #3
 8043d16:	f003 0303 	and.w	r3, r3, #3
 8043d1a:	4a90      	ldr	r2, [pc, #576]	@ (8043f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8043d20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8043d22:	e111      	b.n	8043f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8043d24:	4b8d      	ldr	r3, [pc, #564]	@ (8043f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043d26:	61bb      	str	r3, [r7, #24]
      break;
 8043d28:	e10e      	b.n	8043f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8043d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8043f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043d2c:	61bb      	str	r3, [r7, #24]
      break;
 8043d2e:	e10b      	b.n	8043f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8043d30:	4b8c      	ldr	r3, [pc, #560]	@ (8043f64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8043d32:	61bb      	str	r3, [r7, #24]
      break;
 8043d34:	e108      	b.n	8043f48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043d36:	4b88      	ldr	r3, [pc, #544]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043d3a:	f003 0303 	and.w	r3, r3, #3
 8043d3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8043d40:	4b85      	ldr	r3, [pc, #532]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043d44:	091b      	lsrs	r3, r3, #4
 8043d46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8043d4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8043d4c:	4b82      	ldr	r3, [pc, #520]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8043d50:	f003 0301 	and.w	r3, r3, #1
 8043d54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8043d56:	4b80      	ldr	r3, [pc, #512]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8043d5a:	08db      	lsrs	r3, r3, #3
 8043d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043d60:	68fa      	ldr	r2, [r7, #12]
 8043d62:	fb02 f303 	mul.w	r3, r2, r3
 8043d66:	ee07 3a90 	vmov	s15, r3
 8043d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8043d72:	693b      	ldr	r3, [r7, #16]
 8043d74:	2b00      	cmp	r3, #0
 8043d76:	f000 80e1 	beq.w	8043f3c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8043d7a:	697b      	ldr	r3, [r7, #20]
 8043d7c:	2b02      	cmp	r3, #2
 8043d7e:	f000 8083 	beq.w	8043e88 <HAL_RCC_GetSysClockFreq+0x204>
 8043d82:	697b      	ldr	r3, [r7, #20]
 8043d84:	2b02      	cmp	r3, #2
 8043d86:	f200 80a1 	bhi.w	8043ecc <HAL_RCC_GetSysClockFreq+0x248>
 8043d8a:	697b      	ldr	r3, [r7, #20]
 8043d8c:	2b00      	cmp	r3, #0
 8043d8e:	d003      	beq.n	8043d98 <HAL_RCC_GetSysClockFreq+0x114>
 8043d90:	697b      	ldr	r3, [r7, #20]
 8043d92:	2b01      	cmp	r3, #1
 8043d94:	d056      	beq.n	8043e44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8043d96:	e099      	b.n	8043ecc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043d98:	4b6f      	ldr	r3, [pc, #444]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043d9a:	681b      	ldr	r3, [r3, #0]
 8043d9c:	f003 0320 	and.w	r3, r3, #32
 8043da0:	2b00      	cmp	r3, #0
 8043da2:	d02d      	beq.n	8043e00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043da4:	4b6c      	ldr	r3, [pc, #432]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043da6:	681b      	ldr	r3, [r3, #0]
 8043da8:	08db      	lsrs	r3, r3, #3
 8043daa:	f003 0303 	and.w	r3, r3, #3
 8043dae:	4a6b      	ldr	r2, [pc, #428]	@ (8043f5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8043db0:	fa22 f303 	lsr.w	r3, r2, r3
 8043db4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043db6:	687b      	ldr	r3, [r7, #4]
 8043db8:	ee07 3a90 	vmov	s15, r3
 8043dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043dc0:	693b      	ldr	r3, [r7, #16]
 8043dc2:	ee07 3a90 	vmov	s15, r3
 8043dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043dce:	4b62      	ldr	r3, [pc, #392]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043dd6:	ee07 3a90 	vmov	s15, r3
 8043dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8043de2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8043f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8043dfe:	e087      	b.n	8043f10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e00:	693b      	ldr	r3, [r7, #16]
 8043e02:	ee07 3a90 	vmov	s15, r3
 8043e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8043f6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8043e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e12:	4b51      	ldr	r3, [pc, #324]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e1a:	ee07 3a90 	vmov	s15, r3
 8043e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8043e26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8043f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e42:	e065      	b.n	8043f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e44:	693b      	ldr	r3, [r7, #16]
 8043e46:	ee07 3a90 	vmov	s15, r3
 8043e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8043f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8043e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e56:	4b40      	ldr	r3, [pc, #256]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043e5e:	ee07 3a90 	vmov	s15, r3
 8043e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8043e6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8043f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043e86:	e043      	b.n	8043f10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043e88:	693b      	ldr	r3, [r7, #16]
 8043e8a:	ee07 3a90 	vmov	s15, r3
 8043e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8043f74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8043e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043ea2:	ee07 3a90 	vmov	s15, r3
 8043ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8043eae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8043f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043eca:	e021      	b.n	8043f10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8043ecc:	693b      	ldr	r3, [r7, #16]
 8043ece:	ee07 3a90 	vmov	s15, r3
 8043ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043ed6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8043f70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8043eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043ede:	4b1e      	ldr	r3, [pc, #120]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043ee6:	ee07 3a90 	vmov	s15, r3
 8043eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8043ef2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8043f68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8043ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8043f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8043f0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8043f10:	4b11      	ldr	r3, [pc, #68]	@ (8043f58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8043f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043f14:	0a5b      	lsrs	r3, r3, #9
 8043f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8043f1a:	3301      	adds	r3, #1
 8043f1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8043f1e:	683b      	ldr	r3, [r7, #0]
 8043f20:	ee07 3a90 	vmov	s15, r3
 8043f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8043f28:	edd7 6a07 	vldr	s13, [r7, #28]
 8043f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043f34:	ee17 3a90 	vmov	r3, s15
 8043f38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8043f3a:	e005      	b.n	8043f48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8043f3c:	2300      	movs	r3, #0
 8043f3e:	61bb      	str	r3, [r7, #24]
      break;
 8043f40:	e002      	b.n	8043f48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8043f42:	4b07      	ldr	r3, [pc, #28]	@ (8043f60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8043f44:	61bb      	str	r3, [r7, #24]
      break;
 8043f46:	bf00      	nop
  }

  return sysclockfreq;
 8043f48:	69bb      	ldr	r3, [r7, #24]
}
 8043f4a:	4618      	mov	r0, r3
 8043f4c:	3724      	adds	r7, #36	@ 0x24
 8043f4e:	46bd      	mov	sp, r7
 8043f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f54:	4770      	bx	lr
 8043f56:	bf00      	nop
 8043f58:	58024400 	.word	0x58024400
 8043f5c:	03d09000 	.word	0x03d09000
 8043f60:	003d0900 	.word	0x003d0900
 8043f64:	017d7840 	.word	0x017d7840
 8043f68:	46000000 	.word	0x46000000
 8043f6c:	4c742400 	.word	0x4c742400
 8043f70:	4a742400 	.word	0x4a742400
 8043f74:	4bbebc20 	.word	0x4bbebc20

08043f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8043f78:	b580      	push	{r7, lr}
 8043f7a:	b082      	sub	sp, #8
 8043f7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8043f7e:	f7ff fe81 	bl	8043c84 <HAL_RCC_GetSysClockFreq>
 8043f82:	4602      	mov	r2, r0
 8043f84:	4b10      	ldr	r3, [pc, #64]	@ (8043fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8043f86:	699b      	ldr	r3, [r3, #24]
 8043f88:	0a1b      	lsrs	r3, r3, #8
 8043f8a:	f003 030f 	and.w	r3, r3, #15
 8043f8e:	490f      	ldr	r1, [pc, #60]	@ (8043fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8043f90:	5ccb      	ldrb	r3, [r1, r3]
 8043f92:	f003 031f 	and.w	r3, r3, #31
 8043f96:	fa22 f303 	lsr.w	r3, r2, r3
 8043f9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8043f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8043fc8 <HAL_RCC_GetHCLKFreq+0x50>)
 8043f9e:	699b      	ldr	r3, [r3, #24]
 8043fa0:	f003 030f 	and.w	r3, r3, #15
 8043fa4:	4a09      	ldr	r2, [pc, #36]	@ (8043fcc <HAL_RCC_GetHCLKFreq+0x54>)
 8043fa6:	5cd3      	ldrb	r3, [r2, r3]
 8043fa8:	f003 031f 	and.w	r3, r3, #31
 8043fac:	687a      	ldr	r2, [r7, #4]
 8043fae:	fa22 f303 	lsr.w	r3, r2, r3
 8043fb2:	4a07      	ldr	r2, [pc, #28]	@ (8043fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8043fb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8043fb6:	4a07      	ldr	r2, [pc, #28]	@ (8043fd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8043fb8:	687b      	ldr	r3, [r7, #4]
 8043fba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8043fbc:	4b04      	ldr	r3, [pc, #16]	@ (8043fd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8043fbe:	681b      	ldr	r3, [r3, #0]
}
 8043fc0:	4618      	mov	r0, r3
 8043fc2:	3708      	adds	r7, #8
 8043fc4:	46bd      	mov	sp, r7
 8043fc6:	bd80      	pop	{r7, pc}
 8043fc8:	58024400 	.word	0x58024400
 8043fcc:	0804c328 	.word	0x0804c328
 8043fd0:	24000004 	.word	0x24000004
 8043fd4:	24000000 	.word	0x24000000

08043fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8043fd8:	b580      	push	{r7, lr}
 8043fda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8043fdc:	f7ff ffcc 	bl	8043f78 <HAL_RCC_GetHCLKFreq>
 8043fe0:	4602      	mov	r2, r0
 8043fe2:	4b06      	ldr	r3, [pc, #24]	@ (8043ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8043fe4:	69db      	ldr	r3, [r3, #28]
 8043fe6:	091b      	lsrs	r3, r3, #4
 8043fe8:	f003 0307 	and.w	r3, r3, #7
 8043fec:	4904      	ldr	r1, [pc, #16]	@ (8044000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8043fee:	5ccb      	ldrb	r3, [r1, r3]
 8043ff0:	f003 031f 	and.w	r3, r3, #31
 8043ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8043ff8:	4618      	mov	r0, r3
 8043ffa:	bd80      	pop	{r7, pc}
 8043ffc:	58024400 	.word	0x58024400
 8044000:	0804c328 	.word	0x0804c328

08044004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8044004:	b580      	push	{r7, lr}
 8044006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8044008:	f7ff ffb6 	bl	8043f78 <HAL_RCC_GetHCLKFreq>
 804400c:	4602      	mov	r2, r0
 804400e:	4b06      	ldr	r3, [pc, #24]	@ (8044028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8044010:	69db      	ldr	r3, [r3, #28]
 8044012:	0a1b      	lsrs	r3, r3, #8
 8044014:	f003 0307 	and.w	r3, r3, #7
 8044018:	4904      	ldr	r1, [pc, #16]	@ (804402c <HAL_RCC_GetPCLK2Freq+0x28>)
 804401a:	5ccb      	ldrb	r3, [r1, r3]
 804401c:	f003 031f 	and.w	r3, r3, #31
 8044020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8044024:	4618      	mov	r0, r3
 8044026:	bd80      	pop	{r7, pc}
 8044028:	58024400 	.word	0x58024400
 804402c:	0804c328 	.word	0x0804c328

08044030 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8044030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8044034:	b0cc      	sub	sp, #304	@ 0x130
 8044036:	af00      	add	r7, sp, #0
 8044038:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804403c:	2300      	movs	r3, #0
 804403e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8044042:	2300      	movs	r3, #0
 8044044:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8044048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044050:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8044054:	2500      	movs	r5, #0
 8044056:	ea54 0305 	orrs.w	r3, r4, r5
 804405a:	d049      	beq.n	80440f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 804405c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8044062:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8044066:	d02f      	beq.n	80440c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8044068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 804406c:	d828      	bhi.n	80440c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804406e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044072:	d01a      	beq.n	80440aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8044074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8044078:	d822      	bhi.n	80440c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804407a:	2b00      	cmp	r3, #0
 804407c:	d003      	beq.n	8044086 <HAL_RCCEx_PeriphCLKConfig+0x56>
 804407e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8044082:	d007      	beq.n	8044094 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8044084:	e01c      	b.n	80440c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044086:	4bb8      	ldr	r3, [pc, #736]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804408a:	4ab7      	ldr	r2, [pc, #732]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804408c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044090:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8044092:	e01a      	b.n	80440ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044098:	3308      	adds	r3, #8
 804409a:	2102      	movs	r1, #2
 804409c:	4618      	mov	r0, r3
 804409e:	f001 fccf 	bl	8045a40 <RCCEx_PLL2_Config>
 80440a2:	4603      	mov	r3, r0
 80440a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80440a8:	e00f      	b.n	80440ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80440aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440ae:	3328      	adds	r3, #40	@ 0x28
 80440b0:	2102      	movs	r1, #2
 80440b2:	4618      	mov	r0, r3
 80440b4:	f001 fd76 	bl	8045ba4 <RCCEx_PLL3_Config>
 80440b8:	4603      	mov	r3, r0
 80440ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80440be:	e004      	b.n	80440ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80440c0:	2301      	movs	r3, #1
 80440c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80440c6:	e000      	b.n	80440ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80440c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80440ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80440ce:	2b00      	cmp	r3, #0
 80440d0:	d10a      	bne.n	80440e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80440d2:	4ba5      	ldr	r3, [pc, #660]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80440d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80440da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80440e0:	4aa1      	ldr	r2, [pc, #644]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80440e2:	430b      	orrs	r3, r1
 80440e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80440e6:	e003      	b.n	80440f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80440e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80440ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80440f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80440f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80440f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80440fc:	f04f 0900 	mov.w	r9, #0
 8044100:	ea58 0309 	orrs.w	r3, r8, r9
 8044104:	d047      	beq.n	8044196 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8044106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 804410c:	2b04      	cmp	r3, #4
 804410e:	d82a      	bhi.n	8044166 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8044110:	a201      	add	r2, pc, #4	@ (adr r2, 8044118 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8044112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044116:	bf00      	nop
 8044118:	0804412d 	.word	0x0804412d
 804411c:	0804413b 	.word	0x0804413b
 8044120:	08044151 	.word	0x08044151
 8044124:	0804416f 	.word	0x0804416f
 8044128:	0804416f 	.word	0x0804416f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804412c:	4b8e      	ldr	r3, [pc, #568]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044130:	4a8d      	ldr	r2, [pc, #564]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044138:	e01a      	b.n	8044170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804413a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804413e:	3308      	adds	r3, #8
 8044140:	2100      	movs	r1, #0
 8044142:	4618      	mov	r0, r3
 8044144:	f001 fc7c 	bl	8045a40 <RCCEx_PLL2_Config>
 8044148:	4603      	mov	r3, r0
 804414a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804414e:	e00f      	b.n	8044170 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044154:	3328      	adds	r3, #40	@ 0x28
 8044156:	2100      	movs	r1, #0
 8044158:	4618      	mov	r0, r3
 804415a:	f001 fd23 	bl	8045ba4 <RCCEx_PLL3_Config>
 804415e:	4603      	mov	r3, r0
 8044160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044164:	e004      	b.n	8044170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044166:	2301      	movs	r3, #1
 8044168:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804416c:	e000      	b.n	8044170 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 804416e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044170:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044174:	2b00      	cmp	r3, #0
 8044176:	d10a      	bne.n	804418e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8044178:	4b7b      	ldr	r3, [pc, #492]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804417a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804417c:	f023 0107 	bic.w	r1, r3, #7
 8044180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8044186:	4a78      	ldr	r2, [pc, #480]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044188:	430b      	orrs	r3, r1
 804418a:	6513      	str	r3, [r2, #80]	@ 0x50
 804418c:	e003      	b.n	8044196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804418e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044192:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8044196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804419e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80441a2:	f04f 0b00 	mov.w	fp, #0
 80441a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80441aa:	d04c      	beq.n	8044246 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80441ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80441b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80441b6:	d030      	beq.n	804421a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80441b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80441bc:	d829      	bhi.n	8044212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80441be:	2bc0      	cmp	r3, #192	@ 0xc0
 80441c0:	d02d      	beq.n	804421e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80441c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80441c4:	d825      	bhi.n	8044212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80441c6:	2b80      	cmp	r3, #128	@ 0x80
 80441c8:	d018      	beq.n	80441fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80441ca:	2b80      	cmp	r3, #128	@ 0x80
 80441cc:	d821      	bhi.n	8044212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80441ce:	2b00      	cmp	r3, #0
 80441d0:	d002      	beq.n	80441d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80441d2:	2b40      	cmp	r3, #64	@ 0x40
 80441d4:	d007      	beq.n	80441e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80441d6:	e01c      	b.n	8044212 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80441d8:	4b63      	ldr	r3, [pc, #396]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80441dc:	4a62      	ldr	r2, [pc, #392]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80441de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80441e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441e4:	e01c      	b.n	8044220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80441e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80441ea:	3308      	adds	r3, #8
 80441ec:	2100      	movs	r1, #0
 80441ee:	4618      	mov	r0, r3
 80441f0:	f001 fc26 	bl	8045a40 <RCCEx_PLL2_Config>
 80441f4:	4603      	mov	r3, r0
 80441f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80441fa:	e011      	b.n	8044220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80441fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044200:	3328      	adds	r3, #40	@ 0x28
 8044202:	2100      	movs	r1, #0
 8044204:	4618      	mov	r0, r3
 8044206:	f001 fccd 	bl	8045ba4 <RCCEx_PLL3_Config>
 804420a:	4603      	mov	r3, r0
 804420c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8044210:	e006      	b.n	8044220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044212:	2301      	movs	r3, #1
 8044214:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044218:	e002      	b.n	8044220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 804421a:	bf00      	nop
 804421c:	e000      	b.n	8044220 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 804421e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044220:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044224:	2b00      	cmp	r3, #0
 8044226:	d10a      	bne.n	804423e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8044228:	4b4f      	ldr	r3, [pc, #316]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804422c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8044230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8044236:	4a4c      	ldr	r2, [pc, #304]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044238:	430b      	orrs	r3, r1
 804423a:	6513      	str	r3, [r2, #80]	@ 0x50
 804423c:	e003      	b.n	8044246 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804423e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044242:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8044246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804424e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8044252:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8044256:	2300      	movs	r3, #0
 8044258:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 804425c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8044260:	460b      	mov	r3, r1
 8044262:	4313      	orrs	r3, r2
 8044264:	d053      	beq.n	804430e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8044266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804426a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 804426e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044272:	d035      	beq.n	80442e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8044274:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8044278:	d82e      	bhi.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804427a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 804427e:	d031      	beq.n	80442e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8044280:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8044284:	d828      	bhi.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804428a:	d01a      	beq.n	80442c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 804428c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8044290:	d822      	bhi.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8044292:	2b00      	cmp	r3, #0
 8044294:	d003      	beq.n	804429e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8044296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 804429a:	d007      	beq.n	80442ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 804429c:	e01c      	b.n	80442d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804429e:	4b32      	ldr	r3, [pc, #200]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80442a2:	4a31      	ldr	r2, [pc, #196]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80442a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80442aa:	e01c      	b.n	80442e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80442ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442b0:	3308      	adds	r3, #8
 80442b2:	2100      	movs	r1, #0
 80442b4:	4618      	mov	r0, r3
 80442b6:	f001 fbc3 	bl	8045a40 <RCCEx_PLL2_Config>
 80442ba:	4603      	mov	r3, r0
 80442bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80442c0:	e011      	b.n	80442e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80442c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442c6:	3328      	adds	r3, #40	@ 0x28
 80442c8:	2100      	movs	r1, #0
 80442ca:	4618      	mov	r0, r3
 80442cc:	f001 fc6a 	bl	8045ba4 <RCCEx_PLL3_Config>
 80442d0:	4603      	mov	r3, r0
 80442d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80442d6:	e006      	b.n	80442e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80442d8:	2301      	movs	r3, #1
 80442da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80442de:	e002      	b.n	80442e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80442e0:	bf00      	nop
 80442e2:	e000      	b.n	80442e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80442e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80442e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80442ea:	2b00      	cmp	r3, #0
 80442ec:	d10b      	bne.n	8044306 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80442ee:	4b1e      	ldr	r3, [pc, #120]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80442f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80442f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80442f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80442fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80442fe:	4a1a      	ldr	r2, [pc, #104]	@ (8044368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8044300:	430b      	orrs	r3, r1
 8044302:	6593      	str	r3, [r2, #88]	@ 0x58
 8044304:	e003      	b.n	804430e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804430a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 804430e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044316:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 804431a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 804431e:	2300      	movs	r3, #0
 8044320:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8044324:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8044328:	460b      	mov	r3, r1
 804432a:	4313      	orrs	r3, r2
 804432c:	d056      	beq.n	80443dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 804432e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8044336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 804433a:	d038      	beq.n	80443ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 804433c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8044340:	d831      	bhi.n	80443a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044342:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8044346:	d034      	beq.n	80443b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8044348:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 804434c:	d82b      	bhi.n	80443a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804434e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044352:	d01d      	beq.n	8044390 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8044354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8044358:	d825      	bhi.n	80443a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 804435a:	2b00      	cmp	r3, #0
 804435c:	d006      	beq.n	804436c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 804435e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8044362:	d00a      	beq.n	804437a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8044364:	e01f      	b.n	80443a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8044366:	bf00      	nop
 8044368:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804436c:	4ba2      	ldr	r3, [pc, #648]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044370:	4aa1      	ldr	r2, [pc, #644]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8044378:	e01c      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804437a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804437e:	3308      	adds	r3, #8
 8044380:	2100      	movs	r1, #0
 8044382:	4618      	mov	r0, r3
 8044384:	f001 fb5c 	bl	8045a40 <RCCEx_PLL2_Config>
 8044388:	4603      	mov	r3, r0
 804438a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 804438e:	e011      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8044390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044394:	3328      	adds	r3, #40	@ 0x28
 8044396:	2100      	movs	r1, #0
 8044398:	4618      	mov	r0, r3
 804439a:	f001 fc03 	bl	8045ba4 <RCCEx_PLL3_Config>
 804439e:	4603      	mov	r3, r0
 80443a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80443a4:	e006      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80443a6:	2301      	movs	r3, #1
 80443a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80443ac:	e002      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80443ae:	bf00      	nop
 80443b0:	e000      	b.n	80443b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80443b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80443b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80443b8:	2b00      	cmp	r3, #0
 80443ba:	d10b      	bne.n	80443d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80443bc:	4b8e      	ldr	r3, [pc, #568]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80443be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80443c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80443c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80443cc:	4a8a      	ldr	r2, [pc, #552]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80443ce:	430b      	orrs	r3, r1
 80443d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80443d2:	e003      	b.n	80443dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80443d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80443d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80443dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80443e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80443e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80443e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80443ec:	2300      	movs	r3, #0
 80443ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80443f2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80443f6:	460b      	mov	r3, r1
 80443f8:	4313      	orrs	r3, r2
 80443fa:	d03a      	beq.n	8044472 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80443fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044402:	2b30      	cmp	r3, #48	@ 0x30
 8044404:	d01f      	beq.n	8044446 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8044406:	2b30      	cmp	r3, #48	@ 0x30
 8044408:	d819      	bhi.n	804443e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 804440a:	2b20      	cmp	r3, #32
 804440c:	d00c      	beq.n	8044428 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 804440e:	2b20      	cmp	r3, #32
 8044410:	d815      	bhi.n	804443e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8044412:	2b00      	cmp	r3, #0
 8044414:	d019      	beq.n	804444a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8044416:	2b10      	cmp	r3, #16
 8044418:	d111      	bne.n	804443e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804441a:	4b77      	ldr	r3, [pc, #476]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804441c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804441e:	4a76      	ldr	r2, [pc, #472]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8044426:	e011      	b.n	804444c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804442c:	3308      	adds	r3, #8
 804442e:	2102      	movs	r1, #2
 8044430:	4618      	mov	r0, r3
 8044432:	f001 fb05 	bl	8045a40 <RCCEx_PLL2_Config>
 8044436:	4603      	mov	r3, r0
 8044438:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 804443c:	e006      	b.n	804444c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804443e:	2301      	movs	r3, #1
 8044440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044444:	e002      	b.n	804444c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8044446:	bf00      	nop
 8044448:	e000      	b.n	804444c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 804444a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804444c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044450:	2b00      	cmp	r3, #0
 8044452:	d10a      	bne.n	804446a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8044454:	4b68      	ldr	r3, [pc, #416]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044458:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 804445c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044462:	4a65      	ldr	r2, [pc, #404]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044464:	430b      	orrs	r3, r1
 8044466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044468:	e003      	b.n	8044472 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804446a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804446e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8044472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044476:	e9d3 2300 	ldrd	r2, r3, [r3]
 804447a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 804447e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8044482:	2300      	movs	r3, #0
 8044484:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8044488:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 804448c:	460b      	mov	r3, r1
 804448e:	4313      	orrs	r3, r2
 8044490:	d051      	beq.n	8044536 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8044492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8044498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 804449c:	d035      	beq.n	804450a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 804449e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80444a2:	d82e      	bhi.n	8044502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80444a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80444a8:	d031      	beq.n	804450e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80444aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80444ae:	d828      	bhi.n	8044502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80444b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80444b4:	d01a      	beq.n	80444ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80444b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80444ba:	d822      	bhi.n	8044502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80444bc:	2b00      	cmp	r3, #0
 80444be:	d003      	beq.n	80444c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80444c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80444c4:	d007      	beq.n	80444d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80444c6:	e01c      	b.n	8044502 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80444c8:	4b4b      	ldr	r3, [pc, #300]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80444cc:	4a4a      	ldr	r2, [pc, #296]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80444ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80444d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80444d4:	e01c      	b.n	8044510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80444d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444da:	3308      	adds	r3, #8
 80444dc:	2100      	movs	r1, #0
 80444de:	4618      	mov	r0, r3
 80444e0:	f001 faae 	bl	8045a40 <RCCEx_PLL2_Config>
 80444e4:	4603      	mov	r3, r0
 80444e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80444ea:	e011      	b.n	8044510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80444ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80444f0:	3328      	adds	r3, #40	@ 0x28
 80444f2:	2100      	movs	r1, #0
 80444f4:	4618      	mov	r0, r3
 80444f6:	f001 fb55 	bl	8045ba4 <RCCEx_PLL3_Config>
 80444fa:	4603      	mov	r3, r0
 80444fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8044500:	e006      	b.n	8044510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044502:	2301      	movs	r3, #1
 8044504:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044508:	e002      	b.n	8044510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 804450a:	bf00      	nop
 804450c:	e000      	b.n	8044510 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 804450e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044510:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044514:	2b00      	cmp	r3, #0
 8044516:	d10a      	bne.n	804452e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8044518:	4b37      	ldr	r3, [pc, #220]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 804451a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804451c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8044520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8044526:	4a34      	ldr	r2, [pc, #208]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8044528:	430b      	orrs	r3, r1
 804452a:	6513      	str	r3, [r2, #80]	@ 0x50
 804452c:	e003      	b.n	8044536 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804452e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8044536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804453e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8044542:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8044546:	2300      	movs	r3, #0
 8044548:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 804454c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8044550:	460b      	mov	r3, r1
 8044552:	4313      	orrs	r3, r2
 8044554:	d056      	beq.n	8044604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8044556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804455a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 804455c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044560:	d033      	beq.n	80445ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8044562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8044566:	d82c      	bhi.n	80445c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044568:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 804456c:	d02f      	beq.n	80445ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 804456e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8044572:	d826      	bhi.n	80445c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044574:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8044578:	d02b      	beq.n	80445d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 804457a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 804457e:	d820      	bhi.n	80445c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8044580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044584:	d012      	beq.n	80445ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8044586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 804458a:	d81a      	bhi.n	80445c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 804458c:	2b00      	cmp	r3, #0
 804458e:	d022      	beq.n	80445d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8044590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044594:	d115      	bne.n	80445c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804459a:	3308      	adds	r3, #8
 804459c:	2101      	movs	r1, #1
 804459e:	4618      	mov	r0, r3
 80445a0:	f001 fa4e 	bl	8045a40 <RCCEx_PLL2_Config>
 80445a4:	4603      	mov	r3, r0
 80445a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80445aa:	e015      	b.n	80445d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80445ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445b0:	3328      	adds	r3, #40	@ 0x28
 80445b2:	2101      	movs	r1, #1
 80445b4:	4618      	mov	r0, r3
 80445b6:	f001 faf5 	bl	8045ba4 <RCCEx_PLL3_Config>
 80445ba:	4603      	mov	r3, r0
 80445bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80445c0:	e00a      	b.n	80445d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80445c2:	2301      	movs	r3, #1
 80445c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80445c8:	e006      	b.n	80445d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80445ca:	bf00      	nop
 80445cc:	e004      	b.n	80445d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80445ce:	bf00      	nop
 80445d0:	e002      	b.n	80445d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80445d2:	bf00      	nop
 80445d4:	e000      	b.n	80445d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80445d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80445d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80445dc:	2b00      	cmp	r3, #0
 80445de:	d10d      	bne.n	80445fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80445e0:	4b05      	ldr	r3, [pc, #20]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80445e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80445e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80445ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80445ee:	4a02      	ldr	r2, [pc, #8]	@ (80445f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80445f0:	430b      	orrs	r3, r1
 80445f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80445f4:	e006      	b.n	8044604 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80445f6:	bf00      	nop
 80445f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80445fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044600:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8044604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044608:	e9d3 2300 	ldrd	r2, r3, [r3]
 804460c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8044610:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8044614:	2300      	movs	r3, #0
 8044616:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 804461a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 804461e:	460b      	mov	r3, r1
 8044620:	4313      	orrs	r3, r2
 8044622:	d055      	beq.n	80446d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8044624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 804462c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044630:	d033      	beq.n	804469a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8044632:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044636:	d82c      	bhi.n	8044692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804463c:	d02f      	beq.n	804469e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 804463e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044642:	d826      	bhi.n	8044692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044648:	d02b      	beq.n	80446a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 804464a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 804464e:	d820      	bhi.n	8044692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8044650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044654:	d012      	beq.n	804467c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8044656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 804465a:	d81a      	bhi.n	8044692 <HAL_RCCEx_PeriphCLKConfig+0x662>
 804465c:	2b00      	cmp	r3, #0
 804465e:	d022      	beq.n	80446a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8044660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044664:	d115      	bne.n	8044692 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804466a:	3308      	adds	r3, #8
 804466c:	2101      	movs	r1, #1
 804466e:	4618      	mov	r0, r3
 8044670:	f001 f9e6 	bl	8045a40 <RCCEx_PLL2_Config>
 8044674:	4603      	mov	r3, r0
 8044676:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 804467a:	e015      	b.n	80446a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804467c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044680:	3328      	adds	r3, #40	@ 0x28
 8044682:	2101      	movs	r1, #1
 8044684:	4618      	mov	r0, r3
 8044686:	f001 fa8d 	bl	8045ba4 <RCCEx_PLL3_Config>
 804468a:	4603      	mov	r3, r0
 804468c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8044690:	e00a      	b.n	80446a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8044692:	2301      	movs	r3, #1
 8044694:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044698:	e006      	b.n	80446a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804469a:	bf00      	nop
 804469c:	e004      	b.n	80446a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 804469e:	bf00      	nop
 80446a0:	e002      	b.n	80446a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80446a2:	bf00      	nop
 80446a4:	e000      	b.n	80446a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80446a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80446a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80446ac:	2b00      	cmp	r3, #0
 80446ae:	d10b      	bne.n	80446c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80446b0:	4bb6      	ldr	r3, [pc, #728]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80446b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80446b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80446b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80446c0:	4ab2      	ldr	r2, [pc, #712]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80446c2:	430b      	orrs	r3, r1
 80446c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80446c6:	e003      	b.n	80446d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80446c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80446cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80446d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80446d8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80446dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80446e0:	2300      	movs	r3, #0
 80446e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80446e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80446ea:	460b      	mov	r3, r1
 80446ec:	4313      	orrs	r3, r2
 80446ee:	d02a      	beq.n	8044746 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80446f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80446f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80446f6:	2b00      	cmp	r3, #0
 80446f8:	d011      	beq.n	804471e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80446fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80446fe:	d10a      	bne.n	8044716 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044704:	3308      	adds	r3, #8
 8044706:	2101      	movs	r1, #1
 8044708:	4618      	mov	r0, r3
 804470a:	f001 f999 	bl	8045a40 <RCCEx_PLL2_Config>
 804470e:	4603      	mov	r3, r0
 8044710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8044714:	e004      	b.n	8044720 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044716:	2301      	movs	r3, #1
 8044718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 804471c:	e000      	b.n	8044720 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 804471e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044720:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044724:	2b00      	cmp	r3, #0
 8044726:	d10a      	bne.n	804473e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8044728:	4b98      	ldr	r3, [pc, #608]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804472a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 804472c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8044730:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8044736:	4a95      	ldr	r2, [pc, #596]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044738:	430b      	orrs	r3, r1
 804473a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 804473c:	e003      	b.n	8044746 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804473e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044742:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8044746:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804474e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8044752:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8044756:	2300      	movs	r3, #0
 8044758:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 804475c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8044760:	460b      	mov	r3, r1
 8044762:	4313      	orrs	r3, r2
 8044764:	d037      	beq.n	80447d6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8044766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804476a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804476c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044770:	d00e      	beq.n	8044790 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8044772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044776:	d816      	bhi.n	80447a6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8044778:	2b00      	cmp	r3, #0
 804477a:	d018      	beq.n	80447ae <HAL_RCCEx_PeriphCLKConfig+0x77e>
 804477c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044780:	d111      	bne.n	80447a6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044782:	4b82      	ldr	r3, [pc, #520]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8044786:	4a81      	ldr	r2, [pc, #516]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 804478c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 804478e:	e00f      	b.n	80447b0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044794:	3308      	adds	r3, #8
 8044796:	2101      	movs	r1, #1
 8044798:	4618      	mov	r0, r3
 804479a:	f001 f951 	bl	8045a40 <RCCEx_PLL2_Config>
 804479e:	4603      	mov	r3, r0
 80447a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80447a4:	e004      	b.n	80447b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80447a6:	2301      	movs	r3, #1
 80447a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80447ac:	e000      	b.n	80447b0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80447ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80447b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80447b4:	2b00      	cmp	r3, #0
 80447b6:	d10a      	bne.n	80447ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80447b8:	4b74      	ldr	r3, [pc, #464]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80447bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80447c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80447c6:	4a71      	ldr	r2, [pc, #452]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80447c8:	430b      	orrs	r3, r1
 80447ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80447cc:	e003      	b.n	80447d6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80447ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80447d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80447d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80447de:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80447e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80447e6:	2300      	movs	r3, #0
 80447e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80447ec:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80447f0:	460b      	mov	r3, r1
 80447f2:	4313      	orrs	r3, r2
 80447f4:	d03a      	beq.n	804486c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80447f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80447fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80447fc:	2b03      	cmp	r3, #3
 80447fe:	d81d      	bhi.n	804483c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8044800:	a201      	add	r2, pc, #4	@ (adr r2, 8044808 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8044802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044806:	bf00      	nop
 8044808:	08044845 	.word	0x08044845
 804480c:	08044819 	.word	0x08044819
 8044810:	08044827 	.word	0x08044827
 8044814:	08044845 	.word	0x08044845
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8044818:	4b5c      	ldr	r3, [pc, #368]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804481c:	4a5b      	ldr	r2, [pc, #364]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804481e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8044822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8044824:	e00f      	b.n	8044846 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8044826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804482a:	3308      	adds	r3, #8
 804482c:	2102      	movs	r1, #2
 804482e:	4618      	mov	r0, r3
 8044830:	f001 f906 	bl	8045a40 <RCCEx_PLL2_Config>
 8044834:	4603      	mov	r3, r0
 8044836:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 804483a:	e004      	b.n	8044846 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 804483c:	2301      	movs	r3, #1
 804483e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044842:	e000      	b.n	8044846 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8044844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044846:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804484a:	2b00      	cmp	r3, #0
 804484c:	d10a      	bne.n	8044864 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 804484e:	4b4f      	ldr	r3, [pc, #316]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8044852:	f023 0103 	bic.w	r1, r3, #3
 8044856:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804485a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804485c:	4a4b      	ldr	r2, [pc, #300]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804485e:	430b      	orrs	r3, r1
 8044860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8044862:	e003      	b.n	804486c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044864:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044868:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804486c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044874:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8044878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 804487c:	2300      	movs	r3, #0
 804487e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8044882:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8044886:	460b      	mov	r3, r1
 8044888:	4313      	orrs	r3, r2
 804488a:	f000 80a0 	beq.w	80449ce <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804488e:	4b40      	ldr	r3, [pc, #256]	@ (8044990 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044890:	681b      	ldr	r3, [r3, #0]
 8044892:	4a3f      	ldr	r2, [pc, #252]	@ (8044990 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8044894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8044898:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804489a:	f7fc fc45 	bl	8041128 <HAL_GetTick>
 804489e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80448a2:	e00b      	b.n	80448bc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80448a4:	f7fc fc40 	bl	8041128 <HAL_GetTick>
 80448a8:	4602      	mov	r2, r0
 80448aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80448ae:	1ad3      	subs	r3, r2, r3
 80448b0:	2b64      	cmp	r3, #100	@ 0x64
 80448b2:	d903      	bls.n	80448bc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80448b4:	2303      	movs	r3, #3
 80448b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80448ba:	e005      	b.n	80448c8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80448bc:	4b34      	ldr	r3, [pc, #208]	@ (8044990 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80448be:	681b      	ldr	r3, [r3, #0]
 80448c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80448c4:	2b00      	cmp	r3, #0
 80448c6:	d0ed      	beq.n	80448a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80448c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80448cc:	2b00      	cmp	r3, #0
 80448ce:	d17a      	bne.n	80449c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80448d0:	4b2e      	ldr	r3, [pc, #184]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80448d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80448d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80448dc:	4053      	eors	r3, r2
 80448de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80448e2:	2b00      	cmp	r3, #0
 80448e4:	d015      	beq.n	8044912 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80448e6:	4b29      	ldr	r3, [pc, #164]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80448ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80448f2:	4b26      	ldr	r3, [pc, #152]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80448f6:	4a25      	ldr	r2, [pc, #148]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80448f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80448fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80448fe:	4b23      	ldr	r3, [pc, #140]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8044902:	4a22      	ldr	r2, [pc, #136]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8044908:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 804490a:	4a20      	ldr	r2, [pc, #128]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804490c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8044910:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8044912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044916:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 804491a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 804491e:	d118      	bne.n	8044952 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044920:	f7fc fc02 	bl	8041128 <HAL_GetTick>
 8044924:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8044928:	e00d      	b.n	8044946 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804492a:	f7fc fbfd 	bl	8041128 <HAL_GetTick>
 804492e:	4602      	mov	r2, r0
 8044930:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8044934:	1ad2      	subs	r2, r2, r3
 8044936:	f241 3388 	movw	r3, #5000	@ 0x1388
 804493a:	429a      	cmp	r2, r3
 804493c:	d903      	bls.n	8044946 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 804493e:	2303      	movs	r3, #3
 8044940:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8044944:	e005      	b.n	8044952 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8044946:	4b11      	ldr	r3, [pc, #68]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 804494a:	f003 0302 	and.w	r3, r3, #2
 804494e:	2b00      	cmp	r3, #0
 8044950:	d0eb      	beq.n	804492a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8044952:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044956:	2b00      	cmp	r3, #0
 8044958:	d130      	bne.n	80449bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804495a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804495e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8044962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8044966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804496a:	d115      	bne.n	8044998 <HAL_RCCEx_PeriphCLKConfig+0x968>
 804496c:	4b07      	ldr	r3, [pc, #28]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804496e:	691b      	ldr	r3, [r3, #16]
 8044970:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8044974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 804497c:	091a      	lsrs	r2, r3, #4
 804497e:	4b05      	ldr	r3, [pc, #20]	@ (8044994 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8044980:	4013      	ands	r3, r2
 8044982:	4a02      	ldr	r2, [pc, #8]	@ (804498c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8044984:	430b      	orrs	r3, r1
 8044986:	6113      	str	r3, [r2, #16]
 8044988:	e00c      	b.n	80449a4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 804498a:	bf00      	nop
 804498c:	58024400 	.word	0x58024400
 8044990:	58024800 	.word	0x58024800
 8044994:	00ffffcf 	.word	0x00ffffcf
 8044998:	4bd4      	ldr	r3, [pc, #848]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804499a:	691b      	ldr	r3, [r3, #16]
 804499c:	4ad3      	ldr	r2, [pc, #844]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804499e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80449a2:	6113      	str	r3, [r2, #16]
 80449a4:	4bd1      	ldr	r3, [pc, #836]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80449a6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80449a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80449ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80449b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80449b4:	4acd      	ldr	r2, [pc, #820]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80449b6:	430b      	orrs	r3, r1
 80449b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80449ba:	e008      	b.n	80449ce <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80449bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80449c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80449c4:	e003      	b.n	80449ce <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80449c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80449ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80449ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80449d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80449d6:	f002 0301 	and.w	r3, r2, #1
 80449da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80449de:	2300      	movs	r3, #0
 80449e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80449e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80449e8:	460b      	mov	r3, r1
 80449ea:	4313      	orrs	r3, r2
 80449ec:	f000 808b 	beq.w	8044b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80449f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80449f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80449f8:	2b28      	cmp	r3, #40	@ 0x28
 80449fa:	d86b      	bhi.n	8044ad4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80449fc:	a201      	add	r2, pc, #4	@ (adr r2, 8044a04 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80449fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044a02:	bf00      	nop
 8044a04:	08044add 	.word	0x08044add
 8044a08:	08044ad5 	.word	0x08044ad5
 8044a0c:	08044ad5 	.word	0x08044ad5
 8044a10:	08044ad5 	.word	0x08044ad5
 8044a14:	08044ad5 	.word	0x08044ad5
 8044a18:	08044ad5 	.word	0x08044ad5
 8044a1c:	08044ad5 	.word	0x08044ad5
 8044a20:	08044ad5 	.word	0x08044ad5
 8044a24:	08044aa9 	.word	0x08044aa9
 8044a28:	08044ad5 	.word	0x08044ad5
 8044a2c:	08044ad5 	.word	0x08044ad5
 8044a30:	08044ad5 	.word	0x08044ad5
 8044a34:	08044ad5 	.word	0x08044ad5
 8044a38:	08044ad5 	.word	0x08044ad5
 8044a3c:	08044ad5 	.word	0x08044ad5
 8044a40:	08044ad5 	.word	0x08044ad5
 8044a44:	08044abf 	.word	0x08044abf
 8044a48:	08044ad5 	.word	0x08044ad5
 8044a4c:	08044ad5 	.word	0x08044ad5
 8044a50:	08044ad5 	.word	0x08044ad5
 8044a54:	08044ad5 	.word	0x08044ad5
 8044a58:	08044ad5 	.word	0x08044ad5
 8044a5c:	08044ad5 	.word	0x08044ad5
 8044a60:	08044ad5 	.word	0x08044ad5
 8044a64:	08044add 	.word	0x08044add
 8044a68:	08044ad5 	.word	0x08044ad5
 8044a6c:	08044ad5 	.word	0x08044ad5
 8044a70:	08044ad5 	.word	0x08044ad5
 8044a74:	08044ad5 	.word	0x08044ad5
 8044a78:	08044ad5 	.word	0x08044ad5
 8044a7c:	08044ad5 	.word	0x08044ad5
 8044a80:	08044ad5 	.word	0x08044ad5
 8044a84:	08044add 	.word	0x08044add
 8044a88:	08044ad5 	.word	0x08044ad5
 8044a8c:	08044ad5 	.word	0x08044ad5
 8044a90:	08044ad5 	.word	0x08044ad5
 8044a94:	08044ad5 	.word	0x08044ad5
 8044a98:	08044ad5 	.word	0x08044ad5
 8044a9c:	08044ad5 	.word	0x08044ad5
 8044aa0:	08044ad5 	.word	0x08044ad5
 8044aa4:	08044add 	.word	0x08044add
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044aac:	3308      	adds	r3, #8
 8044aae:	2101      	movs	r1, #1
 8044ab0:	4618      	mov	r0, r3
 8044ab2:	f000 ffc5 	bl	8045a40 <RCCEx_PLL2_Config>
 8044ab6:	4603      	mov	r3, r0
 8044ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044abc:	e00f      	b.n	8044ade <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ac2:	3328      	adds	r3, #40	@ 0x28
 8044ac4:	2101      	movs	r1, #1
 8044ac6:	4618      	mov	r0, r3
 8044ac8:	f001 f86c 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044acc:	4603      	mov	r3, r0
 8044ace:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8044ad2:	e004      	b.n	8044ade <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044ad4:	2301      	movs	r3, #1
 8044ad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044ada:	e000      	b.n	8044ade <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8044adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044ade:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ae2:	2b00      	cmp	r3, #0
 8044ae4:	d10b      	bne.n	8044afe <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8044ae6:	4b81      	ldr	r3, [pc, #516]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044aea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8044aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8044af6:	4a7d      	ldr	r2, [pc, #500]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044af8:	430b      	orrs	r3, r1
 8044afa:	6553      	str	r3, [r2, #84]	@ 0x54
 8044afc:	e003      	b.n	8044b06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044afe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044b02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8044b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044b0e:	f002 0302 	and.w	r3, r2, #2
 8044b12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8044b16:	2300      	movs	r3, #0
 8044b18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8044b1c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8044b20:	460b      	mov	r3, r1
 8044b22:	4313      	orrs	r3, r2
 8044b24:	d042      	beq.n	8044bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8044b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044b2c:	2b05      	cmp	r3, #5
 8044b2e:	d825      	bhi.n	8044b7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8044b30:	a201      	add	r2, pc, #4	@ (adr r2, 8044b38 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8044b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044b36:	bf00      	nop
 8044b38:	08044b85 	.word	0x08044b85
 8044b3c:	08044b51 	.word	0x08044b51
 8044b40:	08044b67 	.word	0x08044b67
 8044b44:	08044b85 	.word	0x08044b85
 8044b48:	08044b85 	.word	0x08044b85
 8044b4c:	08044b85 	.word	0x08044b85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b54:	3308      	adds	r3, #8
 8044b56:	2101      	movs	r1, #1
 8044b58:	4618      	mov	r0, r3
 8044b5a:	f000 ff71 	bl	8045a40 <RCCEx_PLL2_Config>
 8044b5e:	4603      	mov	r3, r0
 8044b60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044b64:	e00f      	b.n	8044b86 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b6a:	3328      	adds	r3, #40	@ 0x28
 8044b6c:	2101      	movs	r1, #1
 8044b6e:	4618      	mov	r0, r3
 8044b70:	f001 f818 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044b74:	4603      	mov	r3, r0
 8044b76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8044b7a:	e004      	b.n	8044b86 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044b7c:	2301      	movs	r3, #1
 8044b7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044b82:	e000      	b.n	8044b86 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8044b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044b86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044b8a:	2b00      	cmp	r3, #0
 8044b8c:	d10a      	bne.n	8044ba4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8044b8e:	4b57      	ldr	r3, [pc, #348]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044b92:	f023 0107 	bic.w	r1, r3, #7
 8044b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8044b9c:	4a53      	ldr	r2, [pc, #332]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044b9e:	430b      	orrs	r3, r1
 8044ba0:	6553      	str	r3, [r2, #84]	@ 0x54
 8044ba2:	e003      	b.n	8044bac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044ba4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ba8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8044bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044bb4:	f002 0304 	and.w	r3, r2, #4
 8044bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8044bbc:	2300      	movs	r3, #0
 8044bbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8044bc2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8044bc6:	460b      	mov	r3, r1
 8044bc8:	4313      	orrs	r3, r2
 8044bca:	d044      	beq.n	8044c56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8044bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044bd4:	2b05      	cmp	r3, #5
 8044bd6:	d825      	bhi.n	8044c24 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8044bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8044be0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8044bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044bde:	bf00      	nop
 8044be0:	08044c2d 	.word	0x08044c2d
 8044be4:	08044bf9 	.word	0x08044bf9
 8044be8:	08044c0f 	.word	0x08044c0f
 8044bec:	08044c2d 	.word	0x08044c2d
 8044bf0:	08044c2d 	.word	0x08044c2d
 8044bf4:	08044c2d 	.word	0x08044c2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8044bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044bfc:	3308      	adds	r3, #8
 8044bfe:	2101      	movs	r1, #1
 8044c00:	4618      	mov	r0, r3
 8044c02:	f000 ff1d 	bl	8045a40 <RCCEx_PLL2_Config>
 8044c06:	4603      	mov	r3, r0
 8044c08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044c0c:	e00f      	b.n	8044c2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8044c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c12:	3328      	adds	r3, #40	@ 0x28
 8044c14:	2101      	movs	r1, #1
 8044c16:	4618      	mov	r0, r3
 8044c18:	f000 ffc4 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044c1c:	4603      	mov	r3, r0
 8044c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8044c22:	e004      	b.n	8044c2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044c24:	2301      	movs	r3, #1
 8044c26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044c2a:	e000      	b.n	8044c2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8044c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044c2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044c32:	2b00      	cmp	r3, #0
 8044c34:	d10b      	bne.n	8044c4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8044c36:	4b2d      	ldr	r3, [pc, #180]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044c3a:	f023 0107 	bic.w	r1, r3, #7
 8044c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8044c46:	4a29      	ldr	r2, [pc, #164]	@ (8044cec <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8044c48:	430b      	orrs	r3, r1
 8044c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8044c4c:	e003      	b.n	8044c56 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044c4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044c52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8044c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044c5e:	f002 0320 	and.w	r3, r2, #32
 8044c62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8044c66:	2300      	movs	r3, #0
 8044c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8044c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8044c70:	460b      	mov	r3, r1
 8044c72:	4313      	orrs	r3, r2
 8044c74:	d057      	beq.n	8044d26 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8044c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044c82:	d035      	beq.n	8044cf0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8044c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8044c88:	d82c      	bhi.n	8044ce4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044c8e:	d031      	beq.n	8044cf4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8044c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8044c94:	d826      	bhi.n	8044ce4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044c96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044c9a:	d02d      	beq.n	8044cf8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8044c9c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8044ca0:	d820      	bhi.n	8044ce4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044ca2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044ca6:	d012      	beq.n	8044cce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8044ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8044cac:	d81a      	bhi.n	8044ce4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8044cae:	2b00      	cmp	r3, #0
 8044cb0:	d024      	beq.n	8044cfc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8044cb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8044cb6:	d115      	bne.n	8044ce4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cbc:	3308      	adds	r3, #8
 8044cbe:	2100      	movs	r1, #0
 8044cc0:	4618      	mov	r0, r3
 8044cc2:	f000 febd 	bl	8045a40 <RCCEx_PLL2_Config>
 8044cc6:	4603      	mov	r3, r0
 8044cc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044ccc:	e017      	b.n	8044cfe <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044cd2:	3328      	adds	r3, #40	@ 0x28
 8044cd4:	2102      	movs	r1, #2
 8044cd6:	4618      	mov	r0, r3
 8044cd8:	f000 ff64 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044cdc:	4603      	mov	r3, r0
 8044cde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8044ce2:	e00c      	b.n	8044cfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044ce4:	2301      	movs	r3, #1
 8044ce6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044cea:	e008      	b.n	8044cfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8044cec:	58024400 	.word	0x58024400
        break;
 8044cf0:	bf00      	nop
 8044cf2:	e004      	b.n	8044cfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cf4:	bf00      	nop
 8044cf6:	e002      	b.n	8044cfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cf8:	bf00      	nop
 8044cfa:	e000      	b.n	8044cfe <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8044cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044cfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d02:	2b00      	cmp	r3, #0
 8044d04:	d10b      	bne.n	8044d1e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8044d06:	4bc2      	ldr	r3, [pc, #776]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044d0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8044d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8044d16:	4abe      	ldr	r2, [pc, #760]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044d18:	430b      	orrs	r3, r1
 8044d1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8044d1c:	e003      	b.n	8044d26 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044d22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8044d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044d2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8044d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8044d36:	2300      	movs	r3, #0
 8044d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8044d3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8044d40:	460b      	mov	r3, r1
 8044d42:	4313      	orrs	r3, r2
 8044d44:	d055      	beq.n	8044df2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8044d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044d4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044d52:	d033      	beq.n	8044dbc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8044d54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8044d58:	d82c      	bhi.n	8044db4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044d5e:	d02f      	beq.n	8044dc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8044d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044d64:	d826      	bhi.n	8044db4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044d6a:	d02b      	beq.n	8044dc4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8044d6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8044d70:	d820      	bhi.n	8044db4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044d76:	d012      	beq.n	8044d9e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8044d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8044d7c:	d81a      	bhi.n	8044db4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8044d7e:	2b00      	cmp	r3, #0
 8044d80:	d022      	beq.n	8044dc8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8044d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8044d86:	d115      	bne.n	8044db4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044d8c:	3308      	adds	r3, #8
 8044d8e:	2100      	movs	r1, #0
 8044d90:	4618      	mov	r0, r3
 8044d92:	f000 fe55 	bl	8045a40 <RCCEx_PLL2_Config>
 8044d96:	4603      	mov	r3, r0
 8044d98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044d9c:	e015      	b.n	8044dca <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044da2:	3328      	adds	r3, #40	@ 0x28
 8044da4:	2102      	movs	r1, #2
 8044da6:	4618      	mov	r0, r3
 8044da8:	f000 fefc 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044dac:	4603      	mov	r3, r0
 8044dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8044db2:	e00a      	b.n	8044dca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044db4:	2301      	movs	r3, #1
 8044db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044dba:	e006      	b.n	8044dca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044dbc:	bf00      	nop
 8044dbe:	e004      	b.n	8044dca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044dc0:	bf00      	nop
 8044dc2:	e002      	b.n	8044dca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044dc4:	bf00      	nop
 8044dc6:	e000      	b.n	8044dca <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8044dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044dca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044dce:	2b00      	cmp	r3, #0
 8044dd0:	d10b      	bne.n	8044dea <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8044dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044dd6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8044dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044dde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8044de2:	4a8b      	ldr	r2, [pc, #556]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044de4:	430b      	orrs	r3, r1
 8044de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8044de8:	e003      	b.n	8044df2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044dee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8044df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044dfa:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8044dfe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8044e02:	2300      	movs	r3, #0
 8044e04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8044e08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8044e0c:	460b      	mov	r3, r1
 8044e0e:	4313      	orrs	r3, r2
 8044e10:	d055      	beq.n	8044ebe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8044e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044e1a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044e1e:	d033      	beq.n	8044e88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8044e20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8044e24:	d82c      	bhi.n	8044e80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044e26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044e2a:	d02f      	beq.n	8044e8c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8044e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8044e30:	d826      	bhi.n	8044e80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044e32:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044e36:	d02b      	beq.n	8044e90 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8044e38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8044e3c:	d820      	bhi.n	8044e80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044e42:	d012      	beq.n	8044e6a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8044e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8044e48:	d81a      	bhi.n	8044e80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8044e4a:	2b00      	cmp	r3, #0
 8044e4c:	d022      	beq.n	8044e94 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8044e4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8044e52:	d115      	bne.n	8044e80 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e58:	3308      	adds	r3, #8
 8044e5a:	2100      	movs	r1, #0
 8044e5c:	4618      	mov	r0, r3
 8044e5e:	f000 fdef 	bl	8045a40 <RCCEx_PLL2_Config>
 8044e62:	4603      	mov	r3, r0
 8044e64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044e68:	e015      	b.n	8044e96 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044e6e:	3328      	adds	r3, #40	@ 0x28
 8044e70:	2102      	movs	r1, #2
 8044e72:	4618      	mov	r0, r3
 8044e74:	f000 fe96 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044e78:	4603      	mov	r3, r0
 8044e7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8044e7e:	e00a      	b.n	8044e96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044e80:	2301      	movs	r3, #1
 8044e82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044e86:	e006      	b.n	8044e96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e88:	bf00      	nop
 8044e8a:	e004      	b.n	8044e96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e8c:	bf00      	nop
 8044e8e:	e002      	b.n	8044e96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e90:	bf00      	nop
 8044e92:	e000      	b.n	8044e96 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8044e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044e96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044e9a:	2b00      	cmp	r3, #0
 8044e9c:	d10b      	bne.n	8044eb6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8044e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044ea2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8044ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8044eae:	4a58      	ldr	r2, [pc, #352]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044eb0:	430b      	orrs	r3, r1
 8044eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8044eb4:	e003      	b.n	8044ebe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044eba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8044ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044ec6:	f002 0308 	and.w	r3, r2, #8
 8044eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8044ece:	2300      	movs	r3, #0
 8044ed0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8044ed4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8044ed8:	460b      	mov	r3, r1
 8044eda:	4313      	orrs	r3, r2
 8044edc:	d01e      	beq.n	8044f1c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8044ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8044eea:	d10c      	bne.n	8044f06 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044ef0:	3328      	adds	r3, #40	@ 0x28
 8044ef2:	2102      	movs	r1, #2
 8044ef4:	4618      	mov	r0, r3
 8044ef6:	f000 fe55 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044efa:	4603      	mov	r3, r0
 8044efc:	2b00      	cmp	r3, #0
 8044efe:	d002      	beq.n	8044f06 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8044f00:	2301      	movs	r3, #1
 8044f02:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8044f06:	4b42      	ldr	r3, [pc, #264]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8044f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8044f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8044f16:	4a3e      	ldr	r2, [pc, #248]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f18:	430b      	orrs	r3, r1
 8044f1a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8044f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044f24:	f002 0310 	and.w	r3, r2, #16
 8044f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8044f2c:	2300      	movs	r3, #0
 8044f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8044f32:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8044f36:	460b      	mov	r3, r1
 8044f38:	4313      	orrs	r3, r2
 8044f3a:	d01e      	beq.n	8044f7a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8044f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8044f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8044f48:	d10c      	bne.n	8044f64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8044f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f4e:	3328      	adds	r3, #40	@ 0x28
 8044f50:	2102      	movs	r1, #2
 8044f52:	4618      	mov	r0, r3
 8044f54:	f000 fe26 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044f58:	4603      	mov	r3, r0
 8044f5a:	2b00      	cmp	r3, #0
 8044f5c:	d002      	beq.n	8044f64 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8044f5e:	2301      	movs	r3, #1
 8044f60:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8044f64:	4b2a      	ldr	r3, [pc, #168]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044f68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8044f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8044f74:	4a26      	ldr	r2, [pc, #152]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044f76:	430b      	orrs	r3, r1
 8044f78:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8044f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8044f82:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8044f86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8044f8a:	2300      	movs	r3, #0
 8044f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8044f90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8044f94:	460b      	mov	r3, r1
 8044f96:	4313      	orrs	r3, r2
 8044f98:	d040      	beq.n	804501c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8044f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8044fa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044fa6:	d022      	beq.n	8044fee <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8044fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8044fac:	d81b      	bhi.n	8044fe6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8044fae:	2b00      	cmp	r3, #0
 8044fb0:	d003      	beq.n	8044fba <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8044fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8044fb6:	d00b      	beq.n	8044fd0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8044fb8:	e015      	b.n	8044fe6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8044fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fbe:	3308      	adds	r3, #8
 8044fc0:	2100      	movs	r1, #0
 8044fc2:	4618      	mov	r0, r3
 8044fc4:	f000 fd3c 	bl	8045a40 <RCCEx_PLL2_Config>
 8044fc8:	4603      	mov	r3, r0
 8044fca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8044fce:	e00f      	b.n	8044ff0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8044fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8044fd4:	3328      	adds	r3, #40	@ 0x28
 8044fd6:	2102      	movs	r1, #2
 8044fd8:	4618      	mov	r0, r3
 8044fda:	f000 fde3 	bl	8045ba4 <RCCEx_PLL3_Config>
 8044fde:	4603      	mov	r3, r0
 8044fe0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8044fe4:	e004      	b.n	8044ff0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044fe6:	2301      	movs	r3, #1
 8044fe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8044fec:	e000      	b.n	8044ff0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8044fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044ff0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8044ff4:	2b00      	cmp	r3, #0
 8044ff6:	d10d      	bne.n	8045014 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8044ff8:	4b05      	ldr	r3, [pc, #20]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8044ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8044ffc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8045000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045004:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8045008:	4a01      	ldr	r2, [pc, #4]	@ (8045010 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804500a:	430b      	orrs	r3, r1
 804500c:	6593      	str	r3, [r2, #88]	@ 0x58
 804500e:	e005      	b.n	804501c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8045010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8045014:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045018:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 804501c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045024:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8045028:	67bb      	str	r3, [r7, #120]	@ 0x78
 804502a:	2300      	movs	r3, #0
 804502c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 804502e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8045032:	460b      	mov	r3, r1
 8045034:	4313      	orrs	r3, r2
 8045036:	d03b      	beq.n	80450b0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8045038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8045040:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8045044:	d01f      	beq.n	8045086 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8045046:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 804504a:	d818      	bhi.n	804507e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 804504c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8045050:	d003      	beq.n	804505a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8045052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8045056:	d007      	beq.n	8045068 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8045058:	e011      	b.n	804507e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804505a:	4b64      	ldr	r3, [pc, #400]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804505e:	4a63      	ldr	r2, [pc, #396]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8045064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8045066:	e00f      	b.n	8045088 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8045068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804506c:	3328      	adds	r3, #40	@ 0x28
 804506e:	2101      	movs	r1, #1
 8045070:	4618      	mov	r0, r3
 8045072:	f000 fd97 	bl	8045ba4 <RCCEx_PLL3_Config>
 8045076:	4603      	mov	r3, r0
 8045078:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 804507c:	e004      	b.n	8045088 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804507e:	2301      	movs	r3, #1
 8045080:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045084:	e000      	b.n	8045088 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8045086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8045088:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804508c:	2b00      	cmp	r3, #0
 804508e:	d10b      	bne.n	80450a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8045090:	4b56      	ldr	r3, [pc, #344]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045094:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8045098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804509c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80450a0:	4a52      	ldr	r2, [pc, #328]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450a2:	430b      	orrs	r3, r1
 80450a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80450a6:	e003      	b.n	80450b0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80450a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80450ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80450b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80450b8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80450bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80450be:	2300      	movs	r3, #0
 80450c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80450c2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80450c6:	460b      	mov	r3, r1
 80450c8:	4313      	orrs	r3, r2
 80450ca:	d031      	beq.n	8045130 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80450cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80450d2:	2b00      	cmp	r3, #0
 80450d4:	d003      	beq.n	80450de <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80450d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80450da:	d007      	beq.n	80450ec <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80450dc:	e011      	b.n	8045102 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80450de:	4b43      	ldr	r3, [pc, #268]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80450e2:	4a42      	ldr	r2, [pc, #264]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80450e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80450e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80450ea:	e00e      	b.n	804510a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80450ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80450f0:	3308      	adds	r3, #8
 80450f2:	2102      	movs	r1, #2
 80450f4:	4618      	mov	r0, r3
 80450f6:	f000 fca3 	bl	8045a40 <RCCEx_PLL2_Config>
 80450fa:	4603      	mov	r3, r0
 80450fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8045100:	e003      	b.n	804510a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8045102:	2301      	movs	r3, #1
 8045104:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8045108:	bf00      	nop
    }

    if (ret == HAL_OK)
 804510a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804510e:	2b00      	cmp	r3, #0
 8045110:	d10a      	bne.n	8045128 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8045112:	4b36      	ldr	r3, [pc, #216]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8045116:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 804511a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804511e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045120:	4a32      	ldr	r2, [pc, #200]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8045122:	430b      	orrs	r3, r1
 8045124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8045126:	e003      	b.n	8045130 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8045128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804512c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8045130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045138:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 804513c:	66bb      	str	r3, [r7, #104]	@ 0x68
 804513e:	2300      	movs	r3, #0
 8045140:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8045142:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8045146:	460b      	mov	r3, r1
 8045148:	4313      	orrs	r3, r2
 804514a:	d00c      	beq.n	8045166 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 804514c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045150:	3328      	adds	r3, #40	@ 0x28
 8045152:	2102      	movs	r1, #2
 8045154:	4618      	mov	r0, r3
 8045156:	f000 fd25 	bl	8045ba4 <RCCEx_PLL3_Config>
 804515a:	4603      	mov	r3, r0
 804515c:	2b00      	cmp	r3, #0
 804515e:	d002      	beq.n	8045166 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8045160:	2301      	movs	r3, #1
 8045162:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8045166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804516e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8045172:	663b      	str	r3, [r7, #96]	@ 0x60
 8045174:	2300      	movs	r3, #0
 8045176:	667b      	str	r3, [r7, #100]	@ 0x64
 8045178:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 804517c:	460b      	mov	r3, r1
 804517e:	4313      	orrs	r3, r2
 8045180:	d03a      	beq.n	80451f8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8045182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 804518a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804518e:	d018      	beq.n	80451c2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8045190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8045194:	d811      	bhi.n	80451ba <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8045196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804519a:	d014      	beq.n	80451c6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 804519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80451a0:	d80b      	bhi.n	80451ba <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80451a2:	2b00      	cmp	r3, #0
 80451a4:	d011      	beq.n	80451ca <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80451a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80451aa:	d106      	bne.n	80451ba <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80451ac:	4b0f      	ldr	r3, [pc, #60]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80451b0:	4a0e      	ldr	r2, [pc, #56]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80451b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80451b8:	e008      	b.n	80451cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80451ba:	2301      	movs	r3, #1
 80451bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80451c0:	e004      	b.n	80451cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80451c2:	bf00      	nop
 80451c4:	e002      	b.n	80451cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80451c6:	bf00      	nop
 80451c8:	e000      	b.n	80451cc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80451ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80451cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80451d0:	2b00      	cmp	r3, #0
 80451d2:	d10d      	bne.n	80451f0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80451d4:	4b05      	ldr	r3, [pc, #20]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80451d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80451dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80451e4:	4a01      	ldr	r2, [pc, #4]	@ (80451ec <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80451e6:	430b      	orrs	r3, r1
 80451e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80451ea:	e005      	b.n	80451f8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80451ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80451f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80451f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80451f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80451fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045200:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8045204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8045206:	2300      	movs	r3, #0
 8045208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 804520a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 804520e:	460b      	mov	r3, r1
 8045210:	4313      	orrs	r3, r2
 8045212:	d009      	beq.n	8045228 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8045214:	4baa      	ldr	r3, [pc, #680]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8045218:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 804521c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8045222:	4aa7      	ldr	r2, [pc, #668]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045224:	430b      	orrs	r3, r1
 8045226:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8045228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045230:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8045234:	653b      	str	r3, [r7, #80]	@ 0x50
 8045236:	2300      	movs	r3, #0
 8045238:	657b      	str	r3, [r7, #84]	@ 0x54
 804523a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 804523e:	460b      	mov	r3, r1
 8045240:	4313      	orrs	r3, r2
 8045242:	d00a      	beq.n	804525a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8045244:	4b9e      	ldr	r3, [pc, #632]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045246:	691b      	ldr	r3, [r3, #16]
 8045248:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 804524c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045250:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8045254:	4a9a      	ldr	r2, [pc, #616]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045256:	430b      	orrs	r3, r1
 8045258:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804525a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045262:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8045266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8045268:	2300      	movs	r3, #0
 804526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 804526c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8045270:	460b      	mov	r3, r1
 8045272:	4313      	orrs	r3, r2
 8045274:	d009      	beq.n	804528a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8045276:	4b92      	ldr	r3, [pc, #584]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 804527a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 804527e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8045284:	4a8e      	ldr	r2, [pc, #568]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045286:	430b      	orrs	r3, r1
 8045288:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804528a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045292:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8045296:	643b      	str	r3, [r7, #64]	@ 0x40
 8045298:	2300      	movs	r3, #0
 804529a:	647b      	str	r3, [r7, #68]	@ 0x44
 804529c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80452a0:	460b      	mov	r3, r1
 80452a2:	4313      	orrs	r3, r2
 80452a4:	d00e      	beq.n	80452c4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80452a6:	4b86      	ldr	r3, [pc, #536]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452a8:	691b      	ldr	r3, [r3, #16]
 80452aa:	4a85      	ldr	r2, [pc, #532]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80452b0:	6113      	str	r3, [r2, #16]
 80452b2:	4b83      	ldr	r3, [pc, #524]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452b4:	6919      	ldr	r1, [r3, #16]
 80452b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80452be:	4a80      	ldr	r2, [pc, #512]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452c0:	430b      	orrs	r3, r1
 80452c2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80452c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80452cc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80452d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80452d2:	2300      	movs	r3, #0
 80452d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80452d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80452da:	460b      	mov	r3, r1
 80452dc:	4313      	orrs	r3, r2
 80452de:	d009      	beq.n	80452f4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80452e0:	4b77      	ldr	r3, [pc, #476]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80452e4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80452e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80452ee:	4a74      	ldr	r2, [pc, #464]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80452f0:	430b      	orrs	r3, r1
 80452f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80452f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80452f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80452fc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8045300:	633b      	str	r3, [r7, #48]	@ 0x30
 8045302:	2300      	movs	r3, #0
 8045304:	637b      	str	r3, [r7, #52]	@ 0x34
 8045306:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 804530a:	460b      	mov	r3, r1
 804530c:	4313      	orrs	r3, r2
 804530e:	d00a      	beq.n	8045326 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8045310:	4b6b      	ldr	r3, [pc, #428]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045314:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8045318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8045320:	4a67      	ldr	r2, [pc, #412]	@ (80454c0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8045322:	430b      	orrs	r3, r1
 8045324:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8045326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804532e:	2100      	movs	r1, #0
 8045330:	62b9      	str	r1, [r7, #40]	@ 0x28
 8045332:	f003 0301 	and.w	r3, r3, #1
 8045336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8045338:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 804533c:	460b      	mov	r3, r1
 804533e:	4313      	orrs	r3, r2
 8045340:	d011      	beq.n	8045366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8045342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045346:	3308      	adds	r3, #8
 8045348:	2100      	movs	r1, #0
 804534a:	4618      	mov	r0, r3
 804534c:	f000 fb78 	bl	8045a40 <RCCEx_PLL2_Config>
 8045350:	4603      	mov	r3, r0
 8045352:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045356:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804535a:	2b00      	cmp	r3, #0
 804535c:	d003      	beq.n	8045366 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804535e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045362:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8045366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804536e:	2100      	movs	r1, #0
 8045370:	6239      	str	r1, [r7, #32]
 8045372:	f003 0302 	and.w	r3, r3, #2
 8045376:	627b      	str	r3, [r7, #36]	@ 0x24
 8045378:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 804537c:	460b      	mov	r3, r1
 804537e:	4313      	orrs	r3, r2
 8045380:	d011      	beq.n	80453a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8045382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045386:	3308      	adds	r3, #8
 8045388:	2101      	movs	r1, #1
 804538a:	4618      	mov	r0, r3
 804538c:	f000 fb58 	bl	8045a40 <RCCEx_PLL2_Config>
 8045390:	4603      	mov	r3, r0
 8045392:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804539a:	2b00      	cmp	r3, #0
 804539c:	d003      	beq.n	80453a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804539e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80453a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453ae:	2100      	movs	r1, #0
 80453b0:	61b9      	str	r1, [r7, #24]
 80453b2:	f003 0304 	and.w	r3, r3, #4
 80453b6:	61fb      	str	r3, [r7, #28]
 80453b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80453bc:	460b      	mov	r3, r1
 80453be:	4313      	orrs	r3, r2
 80453c0:	d011      	beq.n	80453e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80453c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453c6:	3308      	adds	r3, #8
 80453c8:	2102      	movs	r1, #2
 80453ca:	4618      	mov	r0, r3
 80453cc:	f000 fb38 	bl	8045a40 <RCCEx_PLL2_Config>
 80453d0:	4603      	mov	r3, r0
 80453d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80453d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453da:	2b00      	cmp	r3, #0
 80453dc:	d003      	beq.n	80453e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80453de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80453e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80453e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80453ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80453ee:	2100      	movs	r1, #0
 80453f0:	6139      	str	r1, [r7, #16]
 80453f2:	f003 0308 	and.w	r3, r3, #8
 80453f6:	617b      	str	r3, [r7, #20]
 80453f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80453fc:	460b      	mov	r3, r1
 80453fe:	4313      	orrs	r3, r2
 8045400:	d011      	beq.n	8045426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8045402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045406:	3328      	adds	r3, #40	@ 0x28
 8045408:	2100      	movs	r1, #0
 804540a:	4618      	mov	r0, r3
 804540c:	f000 fbca 	bl	8045ba4 <RCCEx_PLL3_Config>
 8045410:	4603      	mov	r3, r0
 8045412:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8045416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804541a:	2b00      	cmp	r3, #0
 804541c:	d003      	beq.n	8045426 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804541e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045422:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8045426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804542e:	2100      	movs	r1, #0
 8045430:	60b9      	str	r1, [r7, #8]
 8045432:	f003 0310 	and.w	r3, r3, #16
 8045436:	60fb      	str	r3, [r7, #12]
 8045438:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 804543c:	460b      	mov	r3, r1
 804543e:	4313      	orrs	r3, r2
 8045440:	d011      	beq.n	8045466 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8045442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045446:	3328      	adds	r3, #40	@ 0x28
 8045448:	2101      	movs	r1, #1
 804544a:	4618      	mov	r0, r3
 804544c:	f000 fbaa 	bl	8045ba4 <RCCEx_PLL3_Config>
 8045450:	4603      	mov	r3, r0
 8045452:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045456:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804545a:	2b00      	cmp	r3, #0
 804545c:	d003      	beq.n	8045466 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804545e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8045462:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8045466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 804546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804546e:	2100      	movs	r1, #0
 8045470:	6039      	str	r1, [r7, #0]
 8045472:	f003 0320 	and.w	r3, r3, #32
 8045476:	607b      	str	r3, [r7, #4]
 8045478:	e9d7 1200 	ldrd	r1, r2, [r7]
 804547c:	460b      	mov	r3, r1
 804547e:	4313      	orrs	r3, r2
 8045480:	d011      	beq.n	80454a6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8045482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8045486:	3328      	adds	r3, #40	@ 0x28
 8045488:	2102      	movs	r1, #2
 804548a:	4618      	mov	r0, r3
 804548c:	f000 fb8a 	bl	8045ba4 <RCCEx_PLL3_Config>
 8045490:	4603      	mov	r3, r0
 8045492:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8045496:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 804549a:	2b00      	cmp	r3, #0
 804549c:	d003      	beq.n	80454a6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 804549e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80454a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80454a6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80454aa:	2b00      	cmp	r3, #0
 80454ac:	d101      	bne.n	80454b2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80454ae:	2300      	movs	r3, #0
 80454b0:	e000      	b.n	80454b4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80454b2:	2301      	movs	r3, #1
}
 80454b4:	4618      	mov	r0, r3
 80454b6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80454ba:	46bd      	mov	sp, r7
 80454bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80454c0:	58024400 	.word	0x58024400

080454c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80454c4:	b580      	push	{r7, lr}
 80454c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80454c8:	f7fe fd56 	bl	8043f78 <HAL_RCC_GetHCLKFreq>
 80454cc:	4602      	mov	r2, r0
 80454ce:	4b06      	ldr	r3, [pc, #24]	@ (80454e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80454d0:	6a1b      	ldr	r3, [r3, #32]
 80454d2:	091b      	lsrs	r3, r3, #4
 80454d4:	f003 0307 	and.w	r3, r3, #7
 80454d8:	4904      	ldr	r1, [pc, #16]	@ (80454ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80454da:	5ccb      	ldrb	r3, [r1, r3]
 80454dc:	f003 031f 	and.w	r3, r3, #31
 80454e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80454e4:	4618      	mov	r0, r3
 80454e6:	bd80      	pop	{r7, pc}
 80454e8:	58024400 	.word	0x58024400
 80454ec:	0804c328 	.word	0x0804c328

080454f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80454f0:	b480      	push	{r7}
 80454f2:	b089      	sub	sp, #36	@ 0x24
 80454f4:	af00      	add	r7, sp, #0
 80454f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80454f8:	4ba1      	ldr	r3, [pc, #644]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80454fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80454fc:	f003 0303 	and.w	r3, r3, #3
 8045500:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8045502:	4b9f      	ldr	r3, [pc, #636]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045506:	0b1b      	lsrs	r3, r3, #12
 8045508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 804550c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 804550e:	4b9c      	ldr	r3, [pc, #624]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045512:	091b      	lsrs	r3, r3, #4
 8045514:	f003 0301 	and.w	r3, r3, #1
 8045518:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 804551a:	4b99      	ldr	r3, [pc, #612]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804551c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804551e:	08db      	lsrs	r3, r3, #3
 8045520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8045524:	693a      	ldr	r2, [r7, #16]
 8045526:	fb02 f303 	mul.w	r3, r2, r3
 804552a:	ee07 3a90 	vmov	s15, r3
 804552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8045536:	697b      	ldr	r3, [r7, #20]
 8045538:	2b00      	cmp	r3, #0
 804553a:	f000 8111 	beq.w	8045760 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 804553e:	69bb      	ldr	r3, [r7, #24]
 8045540:	2b02      	cmp	r3, #2
 8045542:	f000 8083 	beq.w	804564c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8045546:	69bb      	ldr	r3, [r7, #24]
 8045548:	2b02      	cmp	r3, #2
 804554a:	f200 80a1 	bhi.w	8045690 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 804554e:	69bb      	ldr	r3, [r7, #24]
 8045550:	2b00      	cmp	r3, #0
 8045552:	d003      	beq.n	804555c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8045554:	69bb      	ldr	r3, [r7, #24]
 8045556:	2b01      	cmp	r3, #1
 8045558:	d056      	beq.n	8045608 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 804555a:	e099      	b.n	8045690 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804555c:	4b88      	ldr	r3, [pc, #544]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804555e:	681b      	ldr	r3, [r3, #0]
 8045560:	f003 0320 	and.w	r3, r3, #32
 8045564:	2b00      	cmp	r3, #0
 8045566:	d02d      	beq.n	80455c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8045568:	4b85      	ldr	r3, [pc, #532]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804556a:	681b      	ldr	r3, [r3, #0]
 804556c:	08db      	lsrs	r3, r3, #3
 804556e:	f003 0303 	and.w	r3, r3, #3
 8045572:	4a84      	ldr	r2, [pc, #528]	@ (8045784 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8045574:	fa22 f303 	lsr.w	r3, r2, r3
 8045578:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 804557a:	68bb      	ldr	r3, [r7, #8]
 804557c:	ee07 3a90 	vmov	s15, r3
 8045580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045584:	697b      	ldr	r3, [r7, #20]
 8045586:	ee07 3a90 	vmov	s15, r3
 804558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804558e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045592:	4b7b      	ldr	r3, [pc, #492]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804559a:	ee07 3a90 	vmov	s15, r3
 804559e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80455a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80455a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8045788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80455aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80455ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80455b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80455b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80455ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80455be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80455c2:	e087      	b.n	80456d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80455c4:	697b      	ldr	r3, [r7, #20]
 80455c6:	ee07 3a90 	vmov	s15, r3
 80455ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80455ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 804578c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80455d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80455d6:	4b6a      	ldr	r3, [pc, #424]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80455d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80455da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80455de:	ee07 3a90 	vmov	s15, r3
 80455e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80455e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80455ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8045788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80455ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80455f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80455f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80455fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80455fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045606:	e065      	b.n	80456d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045608:	697b      	ldr	r3, [r7, #20]
 804560a:	ee07 3a90 	vmov	s15, r3
 804560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045612:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8045790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8045616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804561a:	4b59      	ldr	r3, [pc, #356]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 804561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045622:	ee07 3a90 	vmov	s15, r3
 8045626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804562a:	ed97 6a03 	vldr	s12, [r7, #12]
 804562e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8045788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804563a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804563e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804564a:	e043      	b.n	80456d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 804564c:	697b      	ldr	r3, [r7, #20]
 804564e:	ee07 3a90 	vmov	s15, r3
 8045652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045656:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 804565a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804565e:	4b48      	ldr	r3, [pc, #288]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045666:	ee07 3a90 	vmov	s15, r3
 804566a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804566e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045672:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8045788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8045676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804567a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804567e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8045682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045686:	ee67 7a27 	vmul.f32	s15, s14, s15
 804568a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804568e:	e021      	b.n	80456d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8045690:	697b      	ldr	r3, [r7, #20]
 8045692:	ee07 3a90 	vmov	s15, r3
 8045696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804569a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8045790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 804569e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80456a2:	4b37      	ldr	r3, [pc, #220]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80456aa:	ee07 3a90 	vmov	s15, r3
 80456ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80456b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80456b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8045788 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80456ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80456be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80456c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80456c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80456ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80456ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80456d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80456d4:	4b2a      	ldr	r3, [pc, #168]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80456d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80456d8:	0a5b      	lsrs	r3, r3, #9
 80456da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80456de:	ee07 3a90 	vmov	s15, r3
 80456e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80456e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80456ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80456ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80456f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80456f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80456fa:	ee17 2a90 	vmov	r2, s15
 80456fe:	687b      	ldr	r3, [r7, #4]
 8045700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8045702:	4b1f      	ldr	r3, [pc, #124]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045706:	0c1b      	lsrs	r3, r3, #16
 8045708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804570c:	ee07 3a90 	vmov	s15, r3
 8045710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045714:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045718:	ee37 7a87 	vadd.f32	s14, s15, s14
 804571c:	edd7 6a07 	vldr	s13, [r7, #28]
 8045720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045728:	ee17 2a90 	vmov	r2, s15
 804572c:	687b      	ldr	r3, [r7, #4]
 804572e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8045730:	4b13      	ldr	r3, [pc, #76]	@ (8045780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8045732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8045734:	0e1b      	lsrs	r3, r3, #24
 8045736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 804573a:	ee07 3a90 	vmov	s15, r3
 804573e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045746:	ee37 7a87 	vadd.f32	s14, s15, s14
 804574a:	edd7 6a07 	vldr	s13, [r7, #28]
 804574e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8045752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8045756:	ee17 2a90 	vmov	r2, s15
 804575a:	687b      	ldr	r3, [r7, #4]
 804575c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 804575e:	e008      	b.n	8045772 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8045760:	687b      	ldr	r3, [r7, #4]
 8045762:	2200      	movs	r2, #0
 8045764:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8045766:	687b      	ldr	r3, [r7, #4]
 8045768:	2200      	movs	r2, #0
 804576a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 804576c:	687b      	ldr	r3, [r7, #4]
 804576e:	2200      	movs	r2, #0
 8045770:	609a      	str	r2, [r3, #8]
}
 8045772:	bf00      	nop
 8045774:	3724      	adds	r7, #36	@ 0x24
 8045776:	46bd      	mov	sp, r7
 8045778:	f85d 7b04 	ldr.w	r7, [sp], #4
 804577c:	4770      	bx	lr
 804577e:	bf00      	nop
 8045780:	58024400 	.word	0x58024400
 8045784:	03d09000 	.word	0x03d09000
 8045788:	46000000 	.word	0x46000000
 804578c:	4c742400 	.word	0x4c742400
 8045790:	4a742400 	.word	0x4a742400
 8045794:	4bbebc20 	.word	0x4bbebc20

08045798 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8045798:	b480      	push	{r7}
 804579a:	b089      	sub	sp, #36	@ 0x24
 804579c:	af00      	add	r7, sp, #0
 804579e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80457a0:	4ba1      	ldr	r3, [pc, #644]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80457a4:	f003 0303 	and.w	r3, r3, #3
 80457a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80457aa:	4b9f      	ldr	r3, [pc, #636]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80457ae:	0d1b      	lsrs	r3, r3, #20
 80457b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80457b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80457b6:	4b9c      	ldr	r3, [pc, #624]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80457ba:	0a1b      	lsrs	r3, r3, #8
 80457bc:	f003 0301 	and.w	r3, r3, #1
 80457c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80457c2:	4b99      	ldr	r3, [pc, #612]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80457c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80457c6:	08db      	lsrs	r3, r3, #3
 80457c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80457cc:	693a      	ldr	r2, [r7, #16]
 80457ce:	fb02 f303 	mul.w	r3, r2, r3
 80457d2:	ee07 3a90 	vmov	s15, r3
 80457d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80457da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80457de:	697b      	ldr	r3, [r7, #20]
 80457e0:	2b00      	cmp	r3, #0
 80457e2:	f000 8111 	beq.w	8045a08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80457e6:	69bb      	ldr	r3, [r7, #24]
 80457e8:	2b02      	cmp	r3, #2
 80457ea:	f000 8083 	beq.w	80458f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80457ee:	69bb      	ldr	r3, [r7, #24]
 80457f0:	2b02      	cmp	r3, #2
 80457f2:	f200 80a1 	bhi.w	8045938 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80457f6:	69bb      	ldr	r3, [r7, #24]
 80457f8:	2b00      	cmp	r3, #0
 80457fa:	d003      	beq.n	8045804 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80457fc:	69bb      	ldr	r3, [r7, #24]
 80457fe:	2b01      	cmp	r3, #1
 8045800:	d056      	beq.n	80458b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8045802:	e099      	b.n	8045938 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8045804:	4b88      	ldr	r3, [pc, #544]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045806:	681b      	ldr	r3, [r3, #0]
 8045808:	f003 0320 	and.w	r3, r3, #32
 804580c:	2b00      	cmp	r3, #0
 804580e:	d02d      	beq.n	804586c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8045810:	4b85      	ldr	r3, [pc, #532]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045812:	681b      	ldr	r3, [r3, #0]
 8045814:	08db      	lsrs	r3, r3, #3
 8045816:	f003 0303 	and.w	r3, r3, #3
 804581a:	4a84      	ldr	r2, [pc, #528]	@ (8045a2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 804581c:	fa22 f303 	lsr.w	r3, r2, r3
 8045820:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045822:	68bb      	ldr	r3, [r7, #8]
 8045824:	ee07 3a90 	vmov	s15, r3
 8045828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804582c:	697b      	ldr	r3, [r7, #20]
 804582e:	ee07 3a90 	vmov	s15, r3
 8045832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804583a:	4b7b      	ldr	r3, [pc, #492]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045842:	ee07 3a90 	vmov	s15, r3
 8045846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804584a:	ed97 6a03 	vldr	s12, [r7, #12]
 804584e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8045a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804585a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045866:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 804586a:	e087      	b.n	804597c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 804586c:	697b      	ldr	r3, [r7, #20]
 804586e:	ee07 3a90 	vmov	s15, r3
 8045872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045876:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8045a34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 804587a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804587e:	4b6a      	ldr	r3, [pc, #424]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045886:	ee07 3a90 	vmov	s15, r3
 804588a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804588e:	ed97 6a03 	vldr	s12, [r7, #12]
 8045892:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8045a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804589a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804589e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80458a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80458a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80458aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80458ae:	e065      	b.n	804597c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80458b0:	697b      	ldr	r3, [r7, #20]
 80458b2:	ee07 3a90 	vmov	s15, r3
 80458b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80458ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8045a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80458be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80458c2:	4b59      	ldr	r3, [pc, #356]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80458c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80458c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80458ca:	ee07 3a90 	vmov	s15, r3
 80458ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80458d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80458d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8045a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80458da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80458de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80458e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80458e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80458ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80458ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80458f2:	e043      	b.n	804597c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80458f4:	697b      	ldr	r3, [r7, #20]
 80458f6:	ee07 3a90 	vmov	s15, r3
 80458fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80458fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8045a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8045902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8045906:	4b48      	ldr	r3, [pc, #288]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8045908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804590a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804590e:	ee07 3a90 	vmov	s15, r3
 8045912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8045916:	ed97 6a03 	vldr	s12, [r7, #12]
 804591a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8045a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 804591e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8045926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804592a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804592e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8045936:	e021      	b.n	804597c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8045938:	697b      	ldr	r3, [r7, #20]
 804593a:	ee07 3a90 	vmov	s15, r3
 804593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8045942:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8045a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8045946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804594a:	4b37      	ldr	r3, [pc, #220]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804594e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8045952:	ee07 3a90 	vmov	s15, r3
 8045956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804595a:	ed97 6a03 	vldr	s12, [r7, #12]
 804595e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8045a30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8045962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8045966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804596a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 804596e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8045972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8045976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804597a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 804597c:	4b2a      	ldr	r3, [pc, #168]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804597e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8045980:	0a5b      	lsrs	r3, r3, #9
 8045982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8045986:	ee07 3a90 	vmov	s15, r3
 804598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804598e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8045992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8045996:	edd7 6a07 	vldr	s13, [r7, #28]
 804599a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804599e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80459a2:	ee17 2a90 	vmov	r2, s15
 80459a6:	687b      	ldr	r3, [r7, #4]
 80459a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80459aa:	4b1f      	ldr	r3, [pc, #124]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80459ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80459ae:	0c1b      	lsrs	r3, r3, #16
 80459b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80459b4:	ee07 3a90 	vmov	s15, r3
 80459b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80459bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80459c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80459c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80459c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80459cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80459d0:	ee17 2a90 	vmov	r2, s15
 80459d4:	687b      	ldr	r3, [r7, #4]
 80459d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80459d8:	4b13      	ldr	r3, [pc, #76]	@ (8045a28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80459da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80459dc:	0e1b      	lsrs	r3, r3, #24
 80459de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80459e2:	ee07 3a90 	vmov	s15, r3
 80459e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80459ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80459ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80459f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80459f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80459fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80459fe:	ee17 2a90 	vmov	r2, s15
 8045a02:	687b      	ldr	r3, [r7, #4]
 8045a04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8045a06:	e008      	b.n	8045a1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8045a08:	687b      	ldr	r3, [r7, #4]
 8045a0a:	2200      	movs	r2, #0
 8045a0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8045a0e:	687b      	ldr	r3, [r7, #4]
 8045a10:	2200      	movs	r2, #0
 8045a12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8045a14:	687b      	ldr	r3, [r7, #4]
 8045a16:	2200      	movs	r2, #0
 8045a18:	609a      	str	r2, [r3, #8]
}
 8045a1a:	bf00      	nop
 8045a1c:	3724      	adds	r7, #36	@ 0x24
 8045a1e:	46bd      	mov	sp, r7
 8045a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045a24:	4770      	bx	lr
 8045a26:	bf00      	nop
 8045a28:	58024400 	.word	0x58024400
 8045a2c:	03d09000 	.word	0x03d09000
 8045a30:	46000000 	.word	0x46000000
 8045a34:	4c742400 	.word	0x4c742400
 8045a38:	4a742400 	.word	0x4a742400
 8045a3c:	4bbebc20 	.word	0x4bbebc20

08045a40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8045a40:	b580      	push	{r7, lr}
 8045a42:	b084      	sub	sp, #16
 8045a44:	af00      	add	r7, sp, #0
 8045a46:	6078      	str	r0, [r7, #4]
 8045a48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045a4a:	2300      	movs	r3, #0
 8045a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045a4e:	4b53      	ldr	r3, [pc, #332]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045a52:	f003 0303 	and.w	r3, r3, #3
 8045a56:	2b03      	cmp	r3, #3
 8045a58:	d101      	bne.n	8045a5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8045a5a:	2301      	movs	r3, #1
 8045a5c:	e099      	b.n	8045b92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8045a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045a60:	681b      	ldr	r3, [r3, #0]
 8045a62:	4a4e      	ldr	r2, [pc, #312]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045a64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8045a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045a6a:	f7fb fb5d 	bl	8041128 <HAL_GetTick>
 8045a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045a70:	e008      	b.n	8045a84 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045a72:	f7fb fb59 	bl	8041128 <HAL_GetTick>
 8045a76:	4602      	mov	r2, r0
 8045a78:	68bb      	ldr	r3, [r7, #8]
 8045a7a:	1ad3      	subs	r3, r2, r3
 8045a7c:	2b02      	cmp	r3, #2
 8045a7e:	d901      	bls.n	8045a84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045a80:	2303      	movs	r3, #3
 8045a82:	e086      	b.n	8045b92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8045a84:	4b45      	ldr	r3, [pc, #276]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045a86:	681b      	ldr	r3, [r3, #0]
 8045a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045a8c:	2b00      	cmp	r3, #0
 8045a8e:	d1f0      	bne.n	8045a72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8045a90:	4b42      	ldr	r3, [pc, #264]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045a94:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8045a98:	687b      	ldr	r3, [r7, #4]
 8045a9a:	681b      	ldr	r3, [r3, #0]
 8045a9c:	031b      	lsls	r3, r3, #12
 8045a9e:	493f      	ldr	r1, [pc, #252]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045aa0:	4313      	orrs	r3, r2
 8045aa2:	628b      	str	r3, [r1, #40]	@ 0x28
 8045aa4:	687b      	ldr	r3, [r7, #4]
 8045aa6:	685b      	ldr	r3, [r3, #4]
 8045aa8:	3b01      	subs	r3, #1
 8045aaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045aae:	687b      	ldr	r3, [r7, #4]
 8045ab0:	689b      	ldr	r3, [r3, #8]
 8045ab2:	3b01      	subs	r3, #1
 8045ab4:	025b      	lsls	r3, r3, #9
 8045ab6:	b29b      	uxth	r3, r3
 8045ab8:	431a      	orrs	r2, r3
 8045aba:	687b      	ldr	r3, [r7, #4]
 8045abc:	68db      	ldr	r3, [r3, #12]
 8045abe:	3b01      	subs	r3, #1
 8045ac0:	041b      	lsls	r3, r3, #16
 8045ac2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045ac6:	431a      	orrs	r2, r3
 8045ac8:	687b      	ldr	r3, [r7, #4]
 8045aca:	691b      	ldr	r3, [r3, #16]
 8045acc:	3b01      	subs	r3, #1
 8045ace:	061b      	lsls	r3, r3, #24
 8045ad0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045ad4:	4931      	ldr	r1, [pc, #196]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045ad6:	4313      	orrs	r3, r2
 8045ad8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8045ada:	4b30      	ldr	r3, [pc, #192]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045ade:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8045ae2:	687b      	ldr	r3, [r7, #4]
 8045ae4:	695b      	ldr	r3, [r3, #20]
 8045ae6:	492d      	ldr	r1, [pc, #180]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045ae8:	4313      	orrs	r3, r2
 8045aea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8045aec:	4b2b      	ldr	r3, [pc, #172]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045af0:	f023 0220 	bic.w	r2, r3, #32
 8045af4:	687b      	ldr	r3, [r7, #4]
 8045af6:	699b      	ldr	r3, [r3, #24]
 8045af8:	4928      	ldr	r1, [pc, #160]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045afa:	4313      	orrs	r3, r2
 8045afc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8045afe:	4b27      	ldr	r3, [pc, #156]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b02:	4a26      	ldr	r2, [pc, #152]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b04:	f023 0310 	bic.w	r3, r3, #16
 8045b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8045b0a:	4b24      	ldr	r3, [pc, #144]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8045b0e:	4b24      	ldr	r3, [pc, #144]	@ (8045ba0 <RCCEx_PLL2_Config+0x160>)
 8045b10:	4013      	ands	r3, r2
 8045b12:	687a      	ldr	r2, [r7, #4]
 8045b14:	69d2      	ldr	r2, [r2, #28]
 8045b16:	00d2      	lsls	r2, r2, #3
 8045b18:	4920      	ldr	r1, [pc, #128]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b1a:	4313      	orrs	r3, r2
 8045b1c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8045b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b22:	4a1e      	ldr	r2, [pc, #120]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b24:	f043 0310 	orr.w	r3, r3, #16
 8045b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045b2a:	683b      	ldr	r3, [r7, #0]
 8045b2c:	2b00      	cmp	r3, #0
 8045b2e:	d106      	bne.n	8045b3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8045b30:	4b1a      	ldr	r3, [pc, #104]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b34:	4a19      	ldr	r2, [pc, #100]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8045b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045b3c:	e00f      	b.n	8045b5e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045b3e:	683b      	ldr	r3, [r7, #0]
 8045b40:	2b01      	cmp	r3, #1
 8045b42:	d106      	bne.n	8045b52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8045b44:	4b15      	ldr	r3, [pc, #84]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b48:	4a14      	ldr	r2, [pc, #80]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8045b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045b50:	e005      	b.n	8045b5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8045b52:	4b12      	ldr	r3, [pc, #72]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045b56:	4a11      	ldr	r2, [pc, #68]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8045b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8045b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b60:	681b      	ldr	r3, [r3, #0]
 8045b62:	4a0e      	ldr	r2, [pc, #56]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8045b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b6a:	f7fb fadd 	bl	8041128 <HAL_GetTick>
 8045b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045b70:	e008      	b.n	8045b84 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8045b72:	f7fb fad9 	bl	8041128 <HAL_GetTick>
 8045b76:	4602      	mov	r2, r0
 8045b78:	68bb      	ldr	r3, [r7, #8]
 8045b7a:	1ad3      	subs	r3, r2, r3
 8045b7c:	2b02      	cmp	r3, #2
 8045b7e:	d901      	bls.n	8045b84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045b80:	2303      	movs	r3, #3
 8045b82:	e006      	b.n	8045b92 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8045b84:	4b05      	ldr	r3, [pc, #20]	@ (8045b9c <RCCEx_PLL2_Config+0x15c>)
 8045b86:	681b      	ldr	r3, [r3, #0]
 8045b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8045b8c:	2b00      	cmp	r3, #0
 8045b8e:	d0f0      	beq.n	8045b72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8045b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8045b92:	4618      	mov	r0, r3
 8045b94:	3710      	adds	r7, #16
 8045b96:	46bd      	mov	sp, r7
 8045b98:	bd80      	pop	{r7, pc}
 8045b9a:	bf00      	nop
 8045b9c:	58024400 	.word	0x58024400
 8045ba0:	ffff0007 	.word	0xffff0007

08045ba4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8045ba4:	b580      	push	{r7, lr}
 8045ba6:	b084      	sub	sp, #16
 8045ba8:	af00      	add	r7, sp, #0
 8045baa:	6078      	str	r0, [r7, #4]
 8045bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8045bae:	2300      	movs	r3, #0
 8045bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8045bb2:	4b53      	ldr	r3, [pc, #332]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045bb6:	f003 0303 	and.w	r3, r3, #3
 8045bba:	2b03      	cmp	r3, #3
 8045bbc:	d101      	bne.n	8045bc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8045bbe:	2301      	movs	r3, #1
 8045bc0:	e099      	b.n	8045cf6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8045bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045bc4:	681b      	ldr	r3, [r3, #0]
 8045bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8045bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045bce:	f7fb faab 	bl	8041128 <HAL_GetTick>
 8045bd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045bd4:	e008      	b.n	8045be8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045bd6:	f7fb faa7 	bl	8041128 <HAL_GetTick>
 8045bda:	4602      	mov	r2, r0
 8045bdc:	68bb      	ldr	r3, [r7, #8]
 8045bde:	1ad3      	subs	r3, r2, r3
 8045be0:	2b02      	cmp	r3, #2
 8045be2:	d901      	bls.n	8045be8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8045be4:	2303      	movs	r3, #3
 8045be6:	e086      	b.n	8045cf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8045be8:	4b45      	ldr	r3, [pc, #276]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045bea:	681b      	ldr	r3, [r3, #0]
 8045bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045bf0:	2b00      	cmp	r3, #0
 8045bf2:	d1f0      	bne.n	8045bd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8045bf4:	4b42      	ldr	r3, [pc, #264]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045bf8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8045bfc:	687b      	ldr	r3, [r7, #4]
 8045bfe:	681b      	ldr	r3, [r3, #0]
 8045c00:	051b      	lsls	r3, r3, #20
 8045c02:	493f      	ldr	r1, [pc, #252]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c04:	4313      	orrs	r3, r2
 8045c06:	628b      	str	r3, [r1, #40]	@ 0x28
 8045c08:	687b      	ldr	r3, [r7, #4]
 8045c0a:	685b      	ldr	r3, [r3, #4]
 8045c0c:	3b01      	subs	r3, #1
 8045c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8045c12:	687b      	ldr	r3, [r7, #4]
 8045c14:	689b      	ldr	r3, [r3, #8]
 8045c16:	3b01      	subs	r3, #1
 8045c18:	025b      	lsls	r3, r3, #9
 8045c1a:	b29b      	uxth	r3, r3
 8045c1c:	431a      	orrs	r2, r3
 8045c1e:	687b      	ldr	r3, [r7, #4]
 8045c20:	68db      	ldr	r3, [r3, #12]
 8045c22:	3b01      	subs	r3, #1
 8045c24:	041b      	lsls	r3, r3, #16
 8045c26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8045c2a:	431a      	orrs	r2, r3
 8045c2c:	687b      	ldr	r3, [r7, #4]
 8045c2e:	691b      	ldr	r3, [r3, #16]
 8045c30:	3b01      	subs	r3, #1
 8045c32:	061b      	lsls	r3, r3, #24
 8045c34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8045c38:	4931      	ldr	r1, [pc, #196]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c3a:	4313      	orrs	r3, r2
 8045c3c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8045c3e:	4b30      	ldr	r3, [pc, #192]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8045c46:	687b      	ldr	r3, [r7, #4]
 8045c48:	695b      	ldr	r3, [r3, #20]
 8045c4a:	492d      	ldr	r1, [pc, #180]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c4c:	4313      	orrs	r3, r2
 8045c4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8045c50:	4b2b      	ldr	r3, [pc, #172]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8045c58:	687b      	ldr	r3, [r7, #4]
 8045c5a:	699b      	ldr	r3, [r3, #24]
 8045c5c:	4928      	ldr	r1, [pc, #160]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c5e:	4313      	orrs	r3, r2
 8045c60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8045c62:	4b27      	ldr	r3, [pc, #156]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c66:	4a26      	ldr	r2, [pc, #152]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8045c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8045c6e:	4b24      	ldr	r3, [pc, #144]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8045c72:	4b24      	ldr	r3, [pc, #144]	@ (8045d04 <RCCEx_PLL3_Config+0x160>)
 8045c74:	4013      	ands	r3, r2
 8045c76:	687a      	ldr	r2, [r7, #4]
 8045c78:	69d2      	ldr	r2, [r2, #28]
 8045c7a:	00d2      	lsls	r2, r2, #3
 8045c7c:	4920      	ldr	r1, [pc, #128]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c7e:	4313      	orrs	r3, r2
 8045c80:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8045c82:	4b1f      	ldr	r3, [pc, #124]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c86:	4a1e      	ldr	r2, [pc, #120]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8045c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8045c8e:	683b      	ldr	r3, [r7, #0]
 8045c90:	2b00      	cmp	r3, #0
 8045c92:	d106      	bne.n	8045ca2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8045c94:	4b1a      	ldr	r3, [pc, #104]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045c98:	4a19      	ldr	r2, [pc, #100]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045c9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8045c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045ca0:	e00f      	b.n	8045cc2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8045ca2:	683b      	ldr	r3, [r7, #0]
 8045ca4:	2b01      	cmp	r3, #1
 8045ca6:	d106      	bne.n	8045cb6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8045ca8:	4b15      	ldr	r3, [pc, #84]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045cac:	4a14      	ldr	r2, [pc, #80]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045cae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8045cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8045cb4:	e005      	b.n	8045cc2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8045cb6:	4b12      	ldr	r3, [pc, #72]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045cba:	4a11      	ldr	r2, [pc, #68]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045cbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8045cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8045cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045cc4:	681b      	ldr	r3, [r3, #0]
 8045cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8045ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045cce:	f7fb fa2b 	bl	8041128 <HAL_GetTick>
 8045cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045cd4:	e008      	b.n	8045ce8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8045cd6:	f7fb fa27 	bl	8041128 <HAL_GetTick>
 8045cda:	4602      	mov	r2, r0
 8045cdc:	68bb      	ldr	r3, [r7, #8]
 8045cde:	1ad3      	subs	r3, r2, r3
 8045ce0:	2b02      	cmp	r3, #2
 8045ce2:	d901      	bls.n	8045ce8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8045ce4:	2303      	movs	r3, #3
 8045ce6:	e006      	b.n	8045cf6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8045ce8:	4b05      	ldr	r3, [pc, #20]	@ (8045d00 <RCCEx_PLL3_Config+0x15c>)
 8045cea:	681b      	ldr	r3, [r3, #0]
 8045cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8045cf0:	2b00      	cmp	r3, #0
 8045cf2:	d0f0      	beq.n	8045cd6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8045cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8045cf6:	4618      	mov	r0, r3
 8045cf8:	3710      	adds	r7, #16
 8045cfa:	46bd      	mov	sp, r7
 8045cfc:	bd80      	pop	{r7, pc}
 8045cfe:	bf00      	nop
 8045d00:	58024400 	.word	0x58024400
 8045d04:	ffff0007 	.word	0xffff0007

08045d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8045d08:	b580      	push	{r7, lr}
 8045d0a:	b082      	sub	sp, #8
 8045d0c:	af00      	add	r7, sp, #0
 8045d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8045d10:	687b      	ldr	r3, [r7, #4]
 8045d12:	2b00      	cmp	r3, #0
 8045d14:	d101      	bne.n	8045d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8045d16:	2301      	movs	r3, #1
 8045d18:	e042      	b.n	8045da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8045d1a:	687b      	ldr	r3, [r7, #4]
 8045d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8045d20:	2b00      	cmp	r3, #0
 8045d22:	d106      	bne.n	8045d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8045d24:	687b      	ldr	r3, [r7, #4]
 8045d26:	2200      	movs	r2, #0
 8045d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8045d2c:	6878      	ldr	r0, [r7, #4]
 8045d2e:	f7fa ffd9 	bl	8040ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045d32:	687b      	ldr	r3, [r7, #4]
 8045d34:	2224      	movs	r2, #36	@ 0x24
 8045d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8045d3a:	687b      	ldr	r3, [r7, #4]
 8045d3c:	681b      	ldr	r3, [r3, #0]
 8045d3e:	681a      	ldr	r2, [r3, #0]
 8045d40:	687b      	ldr	r3, [r7, #4]
 8045d42:	681b      	ldr	r3, [r3, #0]
 8045d44:	f022 0201 	bic.w	r2, r2, #1
 8045d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8045d4a:	687b      	ldr	r3, [r7, #4]
 8045d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8045d4e:	2b00      	cmp	r3, #0
 8045d50:	d002      	beq.n	8045d58 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8045d52:	6878      	ldr	r0, [r7, #4]
 8045d54:	f000 fd90 	bl	8046878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8045d58:	6878      	ldr	r0, [r7, #4]
 8045d5a:	f000 f825 	bl	8045da8 <UART_SetConfig>
 8045d5e:	4603      	mov	r3, r0
 8045d60:	2b01      	cmp	r3, #1
 8045d62:	d101      	bne.n	8045d68 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8045d64:	2301      	movs	r3, #1
 8045d66:	e01b      	b.n	8045da0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045d68:	687b      	ldr	r3, [r7, #4]
 8045d6a:	681b      	ldr	r3, [r3, #0]
 8045d6c:	685a      	ldr	r2, [r3, #4]
 8045d6e:	687b      	ldr	r3, [r7, #4]
 8045d70:	681b      	ldr	r3, [r3, #0]
 8045d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8045d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045d78:	687b      	ldr	r3, [r7, #4]
 8045d7a:	681b      	ldr	r3, [r3, #0]
 8045d7c:	689a      	ldr	r2, [r3, #8]
 8045d7e:	687b      	ldr	r3, [r7, #4]
 8045d80:	681b      	ldr	r3, [r3, #0]
 8045d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8045d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8045d88:	687b      	ldr	r3, [r7, #4]
 8045d8a:	681b      	ldr	r3, [r3, #0]
 8045d8c:	681a      	ldr	r2, [r3, #0]
 8045d8e:	687b      	ldr	r3, [r7, #4]
 8045d90:	681b      	ldr	r3, [r3, #0]
 8045d92:	f042 0201 	orr.w	r2, r2, #1
 8045d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8045d98:	6878      	ldr	r0, [r7, #4]
 8045d9a:	f000 fe0f 	bl	80469bc <UART_CheckIdleState>
 8045d9e:	4603      	mov	r3, r0
}
 8045da0:	4618      	mov	r0, r3
 8045da2:	3708      	adds	r7, #8
 8045da4:	46bd      	mov	sp, r7
 8045da6:	bd80      	pop	{r7, pc}

08045da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8045da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045dac:	b092      	sub	sp, #72	@ 0x48
 8045dae:	af00      	add	r7, sp, #0
 8045db0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8045db2:	2300      	movs	r3, #0
 8045db4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8045db8:	697b      	ldr	r3, [r7, #20]
 8045dba:	689a      	ldr	r2, [r3, #8]
 8045dbc:	697b      	ldr	r3, [r7, #20]
 8045dbe:	691b      	ldr	r3, [r3, #16]
 8045dc0:	431a      	orrs	r2, r3
 8045dc2:	697b      	ldr	r3, [r7, #20]
 8045dc4:	695b      	ldr	r3, [r3, #20]
 8045dc6:	431a      	orrs	r2, r3
 8045dc8:	697b      	ldr	r3, [r7, #20]
 8045dca:	69db      	ldr	r3, [r3, #28]
 8045dcc:	4313      	orrs	r3, r2
 8045dce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8045dd0:	697b      	ldr	r3, [r7, #20]
 8045dd2:	681b      	ldr	r3, [r3, #0]
 8045dd4:	681a      	ldr	r2, [r3, #0]
 8045dd6:	4bbe      	ldr	r3, [pc, #760]	@ (80460d0 <UART_SetConfig+0x328>)
 8045dd8:	4013      	ands	r3, r2
 8045dda:	697a      	ldr	r2, [r7, #20]
 8045ddc:	6812      	ldr	r2, [r2, #0]
 8045dde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045de0:	430b      	orrs	r3, r1
 8045de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8045de4:	697b      	ldr	r3, [r7, #20]
 8045de6:	681b      	ldr	r3, [r3, #0]
 8045de8:	685b      	ldr	r3, [r3, #4]
 8045dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8045dee:	697b      	ldr	r3, [r7, #20]
 8045df0:	68da      	ldr	r2, [r3, #12]
 8045df2:	697b      	ldr	r3, [r7, #20]
 8045df4:	681b      	ldr	r3, [r3, #0]
 8045df6:	430a      	orrs	r2, r1
 8045df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8045dfa:	697b      	ldr	r3, [r7, #20]
 8045dfc:	699b      	ldr	r3, [r3, #24]
 8045dfe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8045e00:	697b      	ldr	r3, [r7, #20]
 8045e02:	681b      	ldr	r3, [r3, #0]
 8045e04:	4ab3      	ldr	r2, [pc, #716]	@ (80460d4 <UART_SetConfig+0x32c>)
 8045e06:	4293      	cmp	r3, r2
 8045e08:	d004      	beq.n	8045e14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8045e0a:	697b      	ldr	r3, [r7, #20]
 8045e0c:	6a1b      	ldr	r3, [r3, #32]
 8045e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8045e10:	4313      	orrs	r3, r2
 8045e12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8045e14:	697b      	ldr	r3, [r7, #20]
 8045e16:	681b      	ldr	r3, [r3, #0]
 8045e18:	689a      	ldr	r2, [r3, #8]
 8045e1a:	4baf      	ldr	r3, [pc, #700]	@ (80460d8 <UART_SetConfig+0x330>)
 8045e1c:	4013      	ands	r3, r2
 8045e1e:	697a      	ldr	r2, [r7, #20]
 8045e20:	6812      	ldr	r2, [r2, #0]
 8045e22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8045e24:	430b      	orrs	r3, r1
 8045e26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8045e28:	697b      	ldr	r3, [r7, #20]
 8045e2a:	681b      	ldr	r3, [r3, #0]
 8045e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8045e2e:	f023 010f 	bic.w	r1, r3, #15
 8045e32:	697b      	ldr	r3, [r7, #20]
 8045e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8045e36:	697b      	ldr	r3, [r7, #20]
 8045e38:	681b      	ldr	r3, [r3, #0]
 8045e3a:	430a      	orrs	r2, r1
 8045e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8045e3e:	697b      	ldr	r3, [r7, #20]
 8045e40:	681b      	ldr	r3, [r3, #0]
 8045e42:	4aa6      	ldr	r2, [pc, #664]	@ (80460dc <UART_SetConfig+0x334>)
 8045e44:	4293      	cmp	r3, r2
 8045e46:	d177      	bne.n	8045f38 <UART_SetConfig+0x190>
 8045e48:	4ba5      	ldr	r3, [pc, #660]	@ (80460e0 <UART_SetConfig+0x338>)
 8045e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8045e50:	2b28      	cmp	r3, #40	@ 0x28
 8045e52:	d86d      	bhi.n	8045f30 <UART_SetConfig+0x188>
 8045e54:	a201      	add	r2, pc, #4	@ (adr r2, 8045e5c <UART_SetConfig+0xb4>)
 8045e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045e5a:	bf00      	nop
 8045e5c:	08045f01 	.word	0x08045f01
 8045e60:	08045f31 	.word	0x08045f31
 8045e64:	08045f31 	.word	0x08045f31
 8045e68:	08045f31 	.word	0x08045f31
 8045e6c:	08045f31 	.word	0x08045f31
 8045e70:	08045f31 	.word	0x08045f31
 8045e74:	08045f31 	.word	0x08045f31
 8045e78:	08045f31 	.word	0x08045f31
 8045e7c:	08045f09 	.word	0x08045f09
 8045e80:	08045f31 	.word	0x08045f31
 8045e84:	08045f31 	.word	0x08045f31
 8045e88:	08045f31 	.word	0x08045f31
 8045e8c:	08045f31 	.word	0x08045f31
 8045e90:	08045f31 	.word	0x08045f31
 8045e94:	08045f31 	.word	0x08045f31
 8045e98:	08045f31 	.word	0x08045f31
 8045e9c:	08045f11 	.word	0x08045f11
 8045ea0:	08045f31 	.word	0x08045f31
 8045ea4:	08045f31 	.word	0x08045f31
 8045ea8:	08045f31 	.word	0x08045f31
 8045eac:	08045f31 	.word	0x08045f31
 8045eb0:	08045f31 	.word	0x08045f31
 8045eb4:	08045f31 	.word	0x08045f31
 8045eb8:	08045f31 	.word	0x08045f31
 8045ebc:	08045f19 	.word	0x08045f19
 8045ec0:	08045f31 	.word	0x08045f31
 8045ec4:	08045f31 	.word	0x08045f31
 8045ec8:	08045f31 	.word	0x08045f31
 8045ecc:	08045f31 	.word	0x08045f31
 8045ed0:	08045f31 	.word	0x08045f31
 8045ed4:	08045f31 	.word	0x08045f31
 8045ed8:	08045f31 	.word	0x08045f31
 8045edc:	08045f21 	.word	0x08045f21
 8045ee0:	08045f31 	.word	0x08045f31
 8045ee4:	08045f31 	.word	0x08045f31
 8045ee8:	08045f31 	.word	0x08045f31
 8045eec:	08045f31 	.word	0x08045f31
 8045ef0:	08045f31 	.word	0x08045f31
 8045ef4:	08045f31 	.word	0x08045f31
 8045ef8:	08045f31 	.word	0x08045f31
 8045efc:	08045f29 	.word	0x08045f29
 8045f00:	2301      	movs	r3, #1
 8045f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f06:	e222      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f08:	2304      	movs	r3, #4
 8045f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f0e:	e21e      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f10:	2308      	movs	r3, #8
 8045f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f16:	e21a      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f18:	2310      	movs	r3, #16
 8045f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f1e:	e216      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f20:	2320      	movs	r3, #32
 8045f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f26:	e212      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f28:	2340      	movs	r3, #64	@ 0x40
 8045f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f2e:	e20e      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f30:	2380      	movs	r3, #128	@ 0x80
 8045f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f36:	e20a      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f38:	697b      	ldr	r3, [r7, #20]
 8045f3a:	681b      	ldr	r3, [r3, #0]
 8045f3c:	4a69      	ldr	r2, [pc, #420]	@ (80460e4 <UART_SetConfig+0x33c>)
 8045f3e:	4293      	cmp	r3, r2
 8045f40:	d130      	bne.n	8045fa4 <UART_SetConfig+0x1fc>
 8045f42:	4b67      	ldr	r3, [pc, #412]	@ (80460e0 <UART_SetConfig+0x338>)
 8045f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045f46:	f003 0307 	and.w	r3, r3, #7
 8045f4a:	2b05      	cmp	r3, #5
 8045f4c:	d826      	bhi.n	8045f9c <UART_SetConfig+0x1f4>
 8045f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8045f54 <UART_SetConfig+0x1ac>)
 8045f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045f54:	08045f6d 	.word	0x08045f6d
 8045f58:	08045f75 	.word	0x08045f75
 8045f5c:	08045f7d 	.word	0x08045f7d
 8045f60:	08045f85 	.word	0x08045f85
 8045f64:	08045f8d 	.word	0x08045f8d
 8045f68:	08045f95 	.word	0x08045f95
 8045f6c:	2300      	movs	r3, #0
 8045f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f72:	e1ec      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f74:	2304      	movs	r3, #4
 8045f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f7a:	e1e8      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f7c:	2308      	movs	r3, #8
 8045f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f82:	e1e4      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f84:	2310      	movs	r3, #16
 8045f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f8a:	e1e0      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f8c:	2320      	movs	r3, #32
 8045f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f92:	e1dc      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f94:	2340      	movs	r3, #64	@ 0x40
 8045f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045f9a:	e1d8      	b.n	804634e <UART_SetConfig+0x5a6>
 8045f9c:	2380      	movs	r3, #128	@ 0x80
 8045f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fa2:	e1d4      	b.n	804634e <UART_SetConfig+0x5a6>
 8045fa4:	697b      	ldr	r3, [r7, #20]
 8045fa6:	681b      	ldr	r3, [r3, #0]
 8045fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80460e8 <UART_SetConfig+0x340>)
 8045faa:	4293      	cmp	r3, r2
 8045fac:	d130      	bne.n	8046010 <UART_SetConfig+0x268>
 8045fae:	4b4c      	ldr	r3, [pc, #304]	@ (80460e0 <UART_SetConfig+0x338>)
 8045fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8045fb2:	f003 0307 	and.w	r3, r3, #7
 8045fb6:	2b05      	cmp	r3, #5
 8045fb8:	d826      	bhi.n	8046008 <UART_SetConfig+0x260>
 8045fba:	a201      	add	r2, pc, #4	@ (adr r2, 8045fc0 <UART_SetConfig+0x218>)
 8045fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045fc0:	08045fd9 	.word	0x08045fd9
 8045fc4:	08045fe1 	.word	0x08045fe1
 8045fc8:	08045fe9 	.word	0x08045fe9
 8045fcc:	08045ff1 	.word	0x08045ff1
 8045fd0:	08045ff9 	.word	0x08045ff9
 8045fd4:	08046001 	.word	0x08046001
 8045fd8:	2300      	movs	r3, #0
 8045fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fde:	e1b6      	b.n	804634e <UART_SetConfig+0x5a6>
 8045fe0:	2304      	movs	r3, #4
 8045fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fe6:	e1b2      	b.n	804634e <UART_SetConfig+0x5a6>
 8045fe8:	2308      	movs	r3, #8
 8045fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045fee:	e1ae      	b.n	804634e <UART_SetConfig+0x5a6>
 8045ff0:	2310      	movs	r3, #16
 8045ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ff6:	e1aa      	b.n	804634e <UART_SetConfig+0x5a6>
 8045ff8:	2320      	movs	r3, #32
 8045ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8045ffe:	e1a6      	b.n	804634e <UART_SetConfig+0x5a6>
 8046000:	2340      	movs	r3, #64	@ 0x40
 8046002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046006:	e1a2      	b.n	804634e <UART_SetConfig+0x5a6>
 8046008:	2380      	movs	r3, #128	@ 0x80
 804600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804600e:	e19e      	b.n	804634e <UART_SetConfig+0x5a6>
 8046010:	697b      	ldr	r3, [r7, #20]
 8046012:	681b      	ldr	r3, [r3, #0]
 8046014:	4a35      	ldr	r2, [pc, #212]	@ (80460ec <UART_SetConfig+0x344>)
 8046016:	4293      	cmp	r3, r2
 8046018:	d130      	bne.n	804607c <UART_SetConfig+0x2d4>
 804601a:	4b31      	ldr	r3, [pc, #196]	@ (80460e0 <UART_SetConfig+0x338>)
 804601c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804601e:	f003 0307 	and.w	r3, r3, #7
 8046022:	2b05      	cmp	r3, #5
 8046024:	d826      	bhi.n	8046074 <UART_SetConfig+0x2cc>
 8046026:	a201      	add	r2, pc, #4	@ (adr r2, 804602c <UART_SetConfig+0x284>)
 8046028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804602c:	08046045 	.word	0x08046045
 8046030:	0804604d 	.word	0x0804604d
 8046034:	08046055 	.word	0x08046055
 8046038:	0804605d 	.word	0x0804605d
 804603c:	08046065 	.word	0x08046065
 8046040:	0804606d 	.word	0x0804606d
 8046044:	2300      	movs	r3, #0
 8046046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804604a:	e180      	b.n	804634e <UART_SetConfig+0x5a6>
 804604c:	2304      	movs	r3, #4
 804604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046052:	e17c      	b.n	804634e <UART_SetConfig+0x5a6>
 8046054:	2308      	movs	r3, #8
 8046056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804605a:	e178      	b.n	804634e <UART_SetConfig+0x5a6>
 804605c:	2310      	movs	r3, #16
 804605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046062:	e174      	b.n	804634e <UART_SetConfig+0x5a6>
 8046064:	2320      	movs	r3, #32
 8046066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804606a:	e170      	b.n	804634e <UART_SetConfig+0x5a6>
 804606c:	2340      	movs	r3, #64	@ 0x40
 804606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046072:	e16c      	b.n	804634e <UART_SetConfig+0x5a6>
 8046074:	2380      	movs	r3, #128	@ 0x80
 8046076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804607a:	e168      	b.n	804634e <UART_SetConfig+0x5a6>
 804607c:	697b      	ldr	r3, [r7, #20]
 804607e:	681b      	ldr	r3, [r3, #0]
 8046080:	4a1b      	ldr	r2, [pc, #108]	@ (80460f0 <UART_SetConfig+0x348>)
 8046082:	4293      	cmp	r3, r2
 8046084:	d142      	bne.n	804610c <UART_SetConfig+0x364>
 8046086:	4b16      	ldr	r3, [pc, #88]	@ (80460e0 <UART_SetConfig+0x338>)
 8046088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804608a:	f003 0307 	and.w	r3, r3, #7
 804608e:	2b05      	cmp	r3, #5
 8046090:	d838      	bhi.n	8046104 <UART_SetConfig+0x35c>
 8046092:	a201      	add	r2, pc, #4	@ (adr r2, 8046098 <UART_SetConfig+0x2f0>)
 8046094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046098:	080460b1 	.word	0x080460b1
 804609c:	080460b9 	.word	0x080460b9
 80460a0:	080460c1 	.word	0x080460c1
 80460a4:	080460c9 	.word	0x080460c9
 80460a8:	080460f5 	.word	0x080460f5
 80460ac:	080460fd 	.word	0x080460fd
 80460b0:	2300      	movs	r3, #0
 80460b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460b6:	e14a      	b.n	804634e <UART_SetConfig+0x5a6>
 80460b8:	2304      	movs	r3, #4
 80460ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460be:	e146      	b.n	804634e <UART_SetConfig+0x5a6>
 80460c0:	2308      	movs	r3, #8
 80460c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460c6:	e142      	b.n	804634e <UART_SetConfig+0x5a6>
 80460c8:	2310      	movs	r3, #16
 80460ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460ce:	e13e      	b.n	804634e <UART_SetConfig+0x5a6>
 80460d0:	cfff69f3 	.word	0xcfff69f3
 80460d4:	58000c00 	.word	0x58000c00
 80460d8:	11fff4ff 	.word	0x11fff4ff
 80460dc:	40011000 	.word	0x40011000
 80460e0:	58024400 	.word	0x58024400
 80460e4:	40004400 	.word	0x40004400
 80460e8:	40004800 	.word	0x40004800
 80460ec:	40004c00 	.word	0x40004c00
 80460f0:	40005000 	.word	0x40005000
 80460f4:	2320      	movs	r3, #32
 80460f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80460fa:	e128      	b.n	804634e <UART_SetConfig+0x5a6>
 80460fc:	2340      	movs	r3, #64	@ 0x40
 80460fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046102:	e124      	b.n	804634e <UART_SetConfig+0x5a6>
 8046104:	2380      	movs	r3, #128	@ 0x80
 8046106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804610a:	e120      	b.n	804634e <UART_SetConfig+0x5a6>
 804610c:	697b      	ldr	r3, [r7, #20]
 804610e:	681b      	ldr	r3, [r3, #0]
 8046110:	4acb      	ldr	r2, [pc, #812]	@ (8046440 <UART_SetConfig+0x698>)
 8046112:	4293      	cmp	r3, r2
 8046114:	d176      	bne.n	8046204 <UART_SetConfig+0x45c>
 8046116:	4bcb      	ldr	r3, [pc, #812]	@ (8046444 <UART_SetConfig+0x69c>)
 8046118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804611a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 804611e:	2b28      	cmp	r3, #40	@ 0x28
 8046120:	d86c      	bhi.n	80461fc <UART_SetConfig+0x454>
 8046122:	a201      	add	r2, pc, #4	@ (adr r2, 8046128 <UART_SetConfig+0x380>)
 8046124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046128:	080461cd 	.word	0x080461cd
 804612c:	080461fd 	.word	0x080461fd
 8046130:	080461fd 	.word	0x080461fd
 8046134:	080461fd 	.word	0x080461fd
 8046138:	080461fd 	.word	0x080461fd
 804613c:	080461fd 	.word	0x080461fd
 8046140:	080461fd 	.word	0x080461fd
 8046144:	080461fd 	.word	0x080461fd
 8046148:	080461d5 	.word	0x080461d5
 804614c:	080461fd 	.word	0x080461fd
 8046150:	080461fd 	.word	0x080461fd
 8046154:	080461fd 	.word	0x080461fd
 8046158:	080461fd 	.word	0x080461fd
 804615c:	080461fd 	.word	0x080461fd
 8046160:	080461fd 	.word	0x080461fd
 8046164:	080461fd 	.word	0x080461fd
 8046168:	080461dd 	.word	0x080461dd
 804616c:	080461fd 	.word	0x080461fd
 8046170:	080461fd 	.word	0x080461fd
 8046174:	080461fd 	.word	0x080461fd
 8046178:	080461fd 	.word	0x080461fd
 804617c:	080461fd 	.word	0x080461fd
 8046180:	080461fd 	.word	0x080461fd
 8046184:	080461fd 	.word	0x080461fd
 8046188:	080461e5 	.word	0x080461e5
 804618c:	080461fd 	.word	0x080461fd
 8046190:	080461fd 	.word	0x080461fd
 8046194:	080461fd 	.word	0x080461fd
 8046198:	080461fd 	.word	0x080461fd
 804619c:	080461fd 	.word	0x080461fd
 80461a0:	080461fd 	.word	0x080461fd
 80461a4:	080461fd 	.word	0x080461fd
 80461a8:	080461ed 	.word	0x080461ed
 80461ac:	080461fd 	.word	0x080461fd
 80461b0:	080461fd 	.word	0x080461fd
 80461b4:	080461fd 	.word	0x080461fd
 80461b8:	080461fd 	.word	0x080461fd
 80461bc:	080461fd 	.word	0x080461fd
 80461c0:	080461fd 	.word	0x080461fd
 80461c4:	080461fd 	.word	0x080461fd
 80461c8:	080461f5 	.word	0x080461f5
 80461cc:	2301      	movs	r3, #1
 80461ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461d2:	e0bc      	b.n	804634e <UART_SetConfig+0x5a6>
 80461d4:	2304      	movs	r3, #4
 80461d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461da:	e0b8      	b.n	804634e <UART_SetConfig+0x5a6>
 80461dc:	2308      	movs	r3, #8
 80461de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461e2:	e0b4      	b.n	804634e <UART_SetConfig+0x5a6>
 80461e4:	2310      	movs	r3, #16
 80461e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461ea:	e0b0      	b.n	804634e <UART_SetConfig+0x5a6>
 80461ec:	2320      	movs	r3, #32
 80461ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461f2:	e0ac      	b.n	804634e <UART_SetConfig+0x5a6>
 80461f4:	2340      	movs	r3, #64	@ 0x40
 80461f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80461fa:	e0a8      	b.n	804634e <UART_SetConfig+0x5a6>
 80461fc:	2380      	movs	r3, #128	@ 0x80
 80461fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046202:	e0a4      	b.n	804634e <UART_SetConfig+0x5a6>
 8046204:	697b      	ldr	r3, [r7, #20]
 8046206:	681b      	ldr	r3, [r3, #0]
 8046208:	4a8f      	ldr	r2, [pc, #572]	@ (8046448 <UART_SetConfig+0x6a0>)
 804620a:	4293      	cmp	r3, r2
 804620c:	d130      	bne.n	8046270 <UART_SetConfig+0x4c8>
 804620e:	4b8d      	ldr	r3, [pc, #564]	@ (8046444 <UART_SetConfig+0x69c>)
 8046210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8046212:	f003 0307 	and.w	r3, r3, #7
 8046216:	2b05      	cmp	r3, #5
 8046218:	d826      	bhi.n	8046268 <UART_SetConfig+0x4c0>
 804621a:	a201      	add	r2, pc, #4	@ (adr r2, 8046220 <UART_SetConfig+0x478>)
 804621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046220:	08046239 	.word	0x08046239
 8046224:	08046241 	.word	0x08046241
 8046228:	08046249 	.word	0x08046249
 804622c:	08046251 	.word	0x08046251
 8046230:	08046259 	.word	0x08046259
 8046234:	08046261 	.word	0x08046261
 8046238:	2300      	movs	r3, #0
 804623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804623e:	e086      	b.n	804634e <UART_SetConfig+0x5a6>
 8046240:	2304      	movs	r3, #4
 8046242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046246:	e082      	b.n	804634e <UART_SetConfig+0x5a6>
 8046248:	2308      	movs	r3, #8
 804624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804624e:	e07e      	b.n	804634e <UART_SetConfig+0x5a6>
 8046250:	2310      	movs	r3, #16
 8046252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046256:	e07a      	b.n	804634e <UART_SetConfig+0x5a6>
 8046258:	2320      	movs	r3, #32
 804625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804625e:	e076      	b.n	804634e <UART_SetConfig+0x5a6>
 8046260:	2340      	movs	r3, #64	@ 0x40
 8046262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046266:	e072      	b.n	804634e <UART_SetConfig+0x5a6>
 8046268:	2380      	movs	r3, #128	@ 0x80
 804626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804626e:	e06e      	b.n	804634e <UART_SetConfig+0x5a6>
 8046270:	697b      	ldr	r3, [r7, #20]
 8046272:	681b      	ldr	r3, [r3, #0]
 8046274:	4a75      	ldr	r2, [pc, #468]	@ (804644c <UART_SetConfig+0x6a4>)
 8046276:	4293      	cmp	r3, r2
 8046278:	d130      	bne.n	80462dc <UART_SetConfig+0x534>
 804627a:	4b72      	ldr	r3, [pc, #456]	@ (8046444 <UART_SetConfig+0x69c>)
 804627c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804627e:	f003 0307 	and.w	r3, r3, #7
 8046282:	2b05      	cmp	r3, #5
 8046284:	d826      	bhi.n	80462d4 <UART_SetConfig+0x52c>
 8046286:	a201      	add	r2, pc, #4	@ (adr r2, 804628c <UART_SetConfig+0x4e4>)
 8046288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804628c:	080462a5 	.word	0x080462a5
 8046290:	080462ad 	.word	0x080462ad
 8046294:	080462b5 	.word	0x080462b5
 8046298:	080462bd 	.word	0x080462bd
 804629c:	080462c5 	.word	0x080462c5
 80462a0:	080462cd 	.word	0x080462cd
 80462a4:	2300      	movs	r3, #0
 80462a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462aa:	e050      	b.n	804634e <UART_SetConfig+0x5a6>
 80462ac:	2304      	movs	r3, #4
 80462ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462b2:	e04c      	b.n	804634e <UART_SetConfig+0x5a6>
 80462b4:	2308      	movs	r3, #8
 80462b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462ba:	e048      	b.n	804634e <UART_SetConfig+0x5a6>
 80462bc:	2310      	movs	r3, #16
 80462be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462c2:	e044      	b.n	804634e <UART_SetConfig+0x5a6>
 80462c4:	2320      	movs	r3, #32
 80462c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462ca:	e040      	b.n	804634e <UART_SetConfig+0x5a6>
 80462cc:	2340      	movs	r3, #64	@ 0x40
 80462ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462d2:	e03c      	b.n	804634e <UART_SetConfig+0x5a6>
 80462d4:	2380      	movs	r3, #128	@ 0x80
 80462d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80462da:	e038      	b.n	804634e <UART_SetConfig+0x5a6>
 80462dc:	697b      	ldr	r3, [r7, #20]
 80462de:	681b      	ldr	r3, [r3, #0]
 80462e0:	4a5b      	ldr	r2, [pc, #364]	@ (8046450 <UART_SetConfig+0x6a8>)
 80462e2:	4293      	cmp	r3, r2
 80462e4:	d130      	bne.n	8046348 <UART_SetConfig+0x5a0>
 80462e6:	4b57      	ldr	r3, [pc, #348]	@ (8046444 <UART_SetConfig+0x69c>)
 80462e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80462ea:	f003 0307 	and.w	r3, r3, #7
 80462ee:	2b05      	cmp	r3, #5
 80462f0:	d826      	bhi.n	8046340 <UART_SetConfig+0x598>
 80462f2:	a201      	add	r2, pc, #4	@ (adr r2, 80462f8 <UART_SetConfig+0x550>)
 80462f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80462f8:	08046311 	.word	0x08046311
 80462fc:	08046319 	.word	0x08046319
 8046300:	08046321 	.word	0x08046321
 8046304:	08046329 	.word	0x08046329
 8046308:	08046331 	.word	0x08046331
 804630c:	08046339 	.word	0x08046339
 8046310:	2302      	movs	r3, #2
 8046312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046316:	e01a      	b.n	804634e <UART_SetConfig+0x5a6>
 8046318:	2304      	movs	r3, #4
 804631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804631e:	e016      	b.n	804634e <UART_SetConfig+0x5a6>
 8046320:	2308      	movs	r3, #8
 8046322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046326:	e012      	b.n	804634e <UART_SetConfig+0x5a6>
 8046328:	2310      	movs	r3, #16
 804632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804632e:	e00e      	b.n	804634e <UART_SetConfig+0x5a6>
 8046330:	2320      	movs	r3, #32
 8046332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046336:	e00a      	b.n	804634e <UART_SetConfig+0x5a6>
 8046338:	2340      	movs	r3, #64	@ 0x40
 804633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 804633e:	e006      	b.n	804634e <UART_SetConfig+0x5a6>
 8046340:	2380      	movs	r3, #128	@ 0x80
 8046342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8046346:	e002      	b.n	804634e <UART_SetConfig+0x5a6>
 8046348:	2380      	movs	r3, #128	@ 0x80
 804634a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804634e:	697b      	ldr	r3, [r7, #20]
 8046350:	681b      	ldr	r3, [r3, #0]
 8046352:	4a3f      	ldr	r2, [pc, #252]	@ (8046450 <UART_SetConfig+0x6a8>)
 8046354:	4293      	cmp	r3, r2
 8046356:	f040 80f8 	bne.w	804654a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804635a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804635e:	2b20      	cmp	r3, #32
 8046360:	dc46      	bgt.n	80463f0 <UART_SetConfig+0x648>
 8046362:	2b02      	cmp	r3, #2
 8046364:	f2c0 8082 	blt.w	804646c <UART_SetConfig+0x6c4>
 8046368:	3b02      	subs	r3, #2
 804636a:	2b1e      	cmp	r3, #30
 804636c:	d87e      	bhi.n	804646c <UART_SetConfig+0x6c4>
 804636e:	a201      	add	r2, pc, #4	@ (adr r2, 8046374 <UART_SetConfig+0x5cc>)
 8046370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046374:	080463f7 	.word	0x080463f7
 8046378:	0804646d 	.word	0x0804646d
 804637c:	080463ff 	.word	0x080463ff
 8046380:	0804646d 	.word	0x0804646d
 8046384:	0804646d 	.word	0x0804646d
 8046388:	0804646d 	.word	0x0804646d
 804638c:	0804640f 	.word	0x0804640f
 8046390:	0804646d 	.word	0x0804646d
 8046394:	0804646d 	.word	0x0804646d
 8046398:	0804646d 	.word	0x0804646d
 804639c:	0804646d 	.word	0x0804646d
 80463a0:	0804646d 	.word	0x0804646d
 80463a4:	0804646d 	.word	0x0804646d
 80463a8:	0804646d 	.word	0x0804646d
 80463ac:	0804641f 	.word	0x0804641f
 80463b0:	0804646d 	.word	0x0804646d
 80463b4:	0804646d 	.word	0x0804646d
 80463b8:	0804646d 	.word	0x0804646d
 80463bc:	0804646d 	.word	0x0804646d
 80463c0:	0804646d 	.word	0x0804646d
 80463c4:	0804646d 	.word	0x0804646d
 80463c8:	0804646d 	.word	0x0804646d
 80463cc:	0804646d 	.word	0x0804646d
 80463d0:	0804646d 	.word	0x0804646d
 80463d4:	0804646d 	.word	0x0804646d
 80463d8:	0804646d 	.word	0x0804646d
 80463dc:	0804646d 	.word	0x0804646d
 80463e0:	0804646d 	.word	0x0804646d
 80463e4:	0804646d 	.word	0x0804646d
 80463e8:	0804646d 	.word	0x0804646d
 80463ec:	0804645f 	.word	0x0804645f
 80463f0:	2b40      	cmp	r3, #64	@ 0x40
 80463f2:	d037      	beq.n	8046464 <UART_SetConfig+0x6bc>
 80463f4:	e03a      	b.n	804646c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80463f6:	f7ff f865 	bl	80454c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80463fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80463fc:	e03c      	b.n	8046478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80463fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8046402:	4618      	mov	r0, r3
 8046404:	f7ff f874 	bl	80454f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8046408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804640c:	e034      	b.n	8046478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 804640e:	f107 0318 	add.w	r3, r7, #24
 8046412:	4618      	mov	r0, r3
 8046414:	f7ff f9c0 	bl	8045798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8046418:	69fb      	ldr	r3, [r7, #28]
 804641a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804641c:	e02c      	b.n	8046478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804641e:	4b09      	ldr	r3, [pc, #36]	@ (8046444 <UART_SetConfig+0x69c>)
 8046420:	681b      	ldr	r3, [r3, #0]
 8046422:	f003 0320 	and.w	r3, r3, #32
 8046426:	2b00      	cmp	r3, #0
 8046428:	d016      	beq.n	8046458 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 804642a:	4b06      	ldr	r3, [pc, #24]	@ (8046444 <UART_SetConfig+0x69c>)
 804642c:	681b      	ldr	r3, [r3, #0]
 804642e:	08db      	lsrs	r3, r3, #3
 8046430:	f003 0303 	and.w	r3, r3, #3
 8046434:	4a07      	ldr	r2, [pc, #28]	@ (8046454 <UART_SetConfig+0x6ac>)
 8046436:	fa22 f303 	lsr.w	r3, r2, r3
 804643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 804643c:	e01c      	b.n	8046478 <UART_SetConfig+0x6d0>
 804643e:	bf00      	nop
 8046440:	40011400 	.word	0x40011400
 8046444:	58024400 	.word	0x58024400
 8046448:	40007800 	.word	0x40007800
 804644c:	40007c00 	.word	0x40007c00
 8046450:	58000c00 	.word	0x58000c00
 8046454:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8046458:	4b9d      	ldr	r3, [pc, #628]	@ (80466d0 <UART_SetConfig+0x928>)
 804645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804645c:	e00c      	b.n	8046478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804645e:	4b9d      	ldr	r3, [pc, #628]	@ (80466d4 <UART_SetConfig+0x92c>)
 8046460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046462:	e009      	b.n	8046478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046464:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804646a:	e005      	b.n	8046478 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 804646c:	2300      	movs	r3, #0
 804646e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8046470:	2301      	movs	r3, #1
 8046472:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046476:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8046478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804647a:	2b00      	cmp	r3, #0
 804647c:	f000 81de 	beq.w	804683c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8046480:	697b      	ldr	r3, [r7, #20]
 8046482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046484:	4a94      	ldr	r2, [pc, #592]	@ (80466d8 <UART_SetConfig+0x930>)
 8046486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804648a:	461a      	mov	r2, r3
 804648c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804648e:	fbb3 f3f2 	udiv	r3, r3, r2
 8046492:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8046494:	697b      	ldr	r3, [r7, #20]
 8046496:	685a      	ldr	r2, [r3, #4]
 8046498:	4613      	mov	r3, r2
 804649a:	005b      	lsls	r3, r3, #1
 804649c:	4413      	add	r3, r2
 804649e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80464a0:	429a      	cmp	r2, r3
 80464a2:	d305      	bcc.n	80464b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80464a4:	697b      	ldr	r3, [r7, #20]
 80464a6:	685b      	ldr	r3, [r3, #4]
 80464a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80464aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80464ac:	429a      	cmp	r2, r3
 80464ae:	d903      	bls.n	80464b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80464b0:	2301      	movs	r3, #1
 80464b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80464b6:	e1c1      	b.n	804683c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80464b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80464ba:	2200      	movs	r2, #0
 80464bc:	60bb      	str	r3, [r7, #8]
 80464be:	60fa      	str	r2, [r7, #12]
 80464c0:	697b      	ldr	r3, [r7, #20]
 80464c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80464c4:	4a84      	ldr	r2, [pc, #528]	@ (80466d8 <UART_SetConfig+0x930>)
 80464c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80464ca:	b29b      	uxth	r3, r3
 80464cc:	2200      	movs	r2, #0
 80464ce:	603b      	str	r3, [r7, #0]
 80464d0:	607a      	str	r2, [r7, #4]
 80464d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80464d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80464da:	f7f9 ff51 	bl	8040380 <__aeabi_uldivmod>
 80464de:	4602      	mov	r2, r0
 80464e0:	460b      	mov	r3, r1
 80464e2:	4610      	mov	r0, r2
 80464e4:	4619      	mov	r1, r3
 80464e6:	f04f 0200 	mov.w	r2, #0
 80464ea:	f04f 0300 	mov.w	r3, #0
 80464ee:	020b      	lsls	r3, r1, #8
 80464f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80464f4:	0202      	lsls	r2, r0, #8
 80464f6:	6979      	ldr	r1, [r7, #20]
 80464f8:	6849      	ldr	r1, [r1, #4]
 80464fa:	0849      	lsrs	r1, r1, #1
 80464fc:	2000      	movs	r0, #0
 80464fe:	460c      	mov	r4, r1
 8046500:	4605      	mov	r5, r0
 8046502:	eb12 0804 	adds.w	r8, r2, r4
 8046506:	eb43 0905 	adc.w	r9, r3, r5
 804650a:	697b      	ldr	r3, [r7, #20]
 804650c:	685b      	ldr	r3, [r3, #4]
 804650e:	2200      	movs	r2, #0
 8046510:	469a      	mov	sl, r3
 8046512:	4693      	mov	fp, r2
 8046514:	4652      	mov	r2, sl
 8046516:	465b      	mov	r3, fp
 8046518:	4640      	mov	r0, r8
 804651a:	4649      	mov	r1, r9
 804651c:	f7f9 ff30 	bl	8040380 <__aeabi_uldivmod>
 8046520:	4602      	mov	r2, r0
 8046522:	460b      	mov	r3, r1
 8046524:	4613      	mov	r3, r2
 8046526:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8046528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804652a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 804652e:	d308      	bcc.n	8046542 <UART_SetConfig+0x79a>
 8046530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046536:	d204      	bcs.n	8046542 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8046538:	697b      	ldr	r3, [r7, #20]
 804653a:	681b      	ldr	r3, [r3, #0]
 804653c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 804653e:	60da      	str	r2, [r3, #12]
 8046540:	e17c      	b.n	804683c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8046542:	2301      	movs	r3, #1
 8046544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8046548:	e178      	b.n	804683c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804654a:	697b      	ldr	r3, [r7, #20]
 804654c:	69db      	ldr	r3, [r3, #28]
 804654e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8046552:	f040 80c5 	bne.w	80466e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8046556:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 804655a:	2b20      	cmp	r3, #32
 804655c:	dc48      	bgt.n	80465f0 <UART_SetConfig+0x848>
 804655e:	2b00      	cmp	r3, #0
 8046560:	db7b      	blt.n	804665a <UART_SetConfig+0x8b2>
 8046562:	2b20      	cmp	r3, #32
 8046564:	d879      	bhi.n	804665a <UART_SetConfig+0x8b2>
 8046566:	a201      	add	r2, pc, #4	@ (adr r2, 804656c <UART_SetConfig+0x7c4>)
 8046568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804656c:	080465f7 	.word	0x080465f7
 8046570:	080465ff 	.word	0x080465ff
 8046574:	0804665b 	.word	0x0804665b
 8046578:	0804665b 	.word	0x0804665b
 804657c:	08046607 	.word	0x08046607
 8046580:	0804665b 	.word	0x0804665b
 8046584:	0804665b 	.word	0x0804665b
 8046588:	0804665b 	.word	0x0804665b
 804658c:	08046617 	.word	0x08046617
 8046590:	0804665b 	.word	0x0804665b
 8046594:	0804665b 	.word	0x0804665b
 8046598:	0804665b 	.word	0x0804665b
 804659c:	0804665b 	.word	0x0804665b
 80465a0:	0804665b 	.word	0x0804665b
 80465a4:	0804665b 	.word	0x0804665b
 80465a8:	0804665b 	.word	0x0804665b
 80465ac:	08046627 	.word	0x08046627
 80465b0:	0804665b 	.word	0x0804665b
 80465b4:	0804665b 	.word	0x0804665b
 80465b8:	0804665b 	.word	0x0804665b
 80465bc:	0804665b 	.word	0x0804665b
 80465c0:	0804665b 	.word	0x0804665b
 80465c4:	0804665b 	.word	0x0804665b
 80465c8:	0804665b 	.word	0x0804665b
 80465cc:	0804665b 	.word	0x0804665b
 80465d0:	0804665b 	.word	0x0804665b
 80465d4:	0804665b 	.word	0x0804665b
 80465d8:	0804665b 	.word	0x0804665b
 80465dc:	0804665b 	.word	0x0804665b
 80465e0:	0804665b 	.word	0x0804665b
 80465e4:	0804665b 	.word	0x0804665b
 80465e8:	0804665b 	.word	0x0804665b
 80465ec:	0804664d 	.word	0x0804664d
 80465f0:	2b40      	cmp	r3, #64	@ 0x40
 80465f2:	d02e      	beq.n	8046652 <UART_SetConfig+0x8aa>
 80465f4:	e031      	b.n	804665a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80465f6:	f7fd fcef 	bl	8043fd8 <HAL_RCC_GetPCLK1Freq>
 80465fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80465fc:	e033      	b.n	8046666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80465fe:	f7fd fd01 	bl	8044004 <HAL_RCC_GetPCLK2Freq>
 8046602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046604:	e02f      	b.n	8046666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8046606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 804660a:	4618      	mov	r0, r3
 804660c:	f7fe ff70 	bl	80454f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8046610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046614:	e027      	b.n	8046666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8046616:	f107 0318 	add.w	r3, r7, #24
 804661a:	4618      	mov	r0, r3
 804661c:	f7ff f8bc 	bl	8045798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8046620:	69fb      	ldr	r3, [r7, #28]
 8046622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046624:	e01f      	b.n	8046666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8046626:	4b2d      	ldr	r3, [pc, #180]	@ (80466dc <UART_SetConfig+0x934>)
 8046628:	681b      	ldr	r3, [r3, #0]
 804662a:	f003 0320 	and.w	r3, r3, #32
 804662e:	2b00      	cmp	r3, #0
 8046630:	d009      	beq.n	8046646 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8046632:	4b2a      	ldr	r3, [pc, #168]	@ (80466dc <UART_SetConfig+0x934>)
 8046634:	681b      	ldr	r3, [r3, #0]
 8046636:	08db      	lsrs	r3, r3, #3
 8046638:	f003 0303 	and.w	r3, r3, #3
 804663c:	4a24      	ldr	r2, [pc, #144]	@ (80466d0 <UART_SetConfig+0x928>)
 804663e:	fa22 f303 	lsr.w	r3, r2, r3
 8046642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8046644:	e00f      	b.n	8046666 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8046646:	4b22      	ldr	r3, [pc, #136]	@ (80466d0 <UART_SetConfig+0x928>)
 8046648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 804664a:	e00c      	b.n	8046666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 804664c:	4b21      	ldr	r3, [pc, #132]	@ (80466d4 <UART_SetConfig+0x92c>)
 804664e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046650:	e009      	b.n	8046666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8046656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8046658:	e005      	b.n	8046666 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 804665a:	2300      	movs	r3, #0
 804665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 804665e:	2301      	movs	r3, #1
 8046660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8046664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8046666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046668:	2b00      	cmp	r3, #0
 804666a:	f000 80e7 	beq.w	804683c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804666e:	697b      	ldr	r3, [r7, #20]
 8046670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8046672:	4a19      	ldr	r2, [pc, #100]	@ (80466d8 <UART_SetConfig+0x930>)
 8046674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046678:	461a      	mov	r2, r3
 804667a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 804667c:	fbb3 f3f2 	udiv	r3, r3, r2
 8046680:	005a      	lsls	r2, r3, #1
 8046682:	697b      	ldr	r3, [r7, #20]
 8046684:	685b      	ldr	r3, [r3, #4]
 8046686:	085b      	lsrs	r3, r3, #1
 8046688:	441a      	add	r2, r3
 804668a:	697b      	ldr	r3, [r7, #20]
 804668c:	685b      	ldr	r3, [r3, #4]
 804668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8046692:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046696:	2b0f      	cmp	r3, #15
 8046698:	d916      	bls.n	80466c8 <UART_SetConfig+0x920>
 804669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804669c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80466a0:	d212      	bcs.n	80466c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80466a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80466a4:	b29b      	uxth	r3, r3
 80466a6:	f023 030f 	bic.w	r3, r3, #15
 80466aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80466ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80466ae:	085b      	lsrs	r3, r3, #1
 80466b0:	b29b      	uxth	r3, r3
 80466b2:	f003 0307 	and.w	r3, r3, #7
 80466b6:	b29a      	uxth	r2, r3
 80466b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80466ba:	4313      	orrs	r3, r2
 80466bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80466be:	697b      	ldr	r3, [r7, #20]
 80466c0:	681b      	ldr	r3, [r3, #0]
 80466c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80466c4:	60da      	str	r2, [r3, #12]
 80466c6:	e0b9      	b.n	804683c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80466c8:	2301      	movs	r3, #1
 80466ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80466ce:	e0b5      	b.n	804683c <UART_SetConfig+0xa94>
 80466d0:	03d09000 	.word	0x03d09000
 80466d4:	003d0900 	.word	0x003d0900
 80466d8:	0804c338 	.word	0x0804c338
 80466dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80466e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80466e4:	2b20      	cmp	r3, #32
 80466e6:	dc49      	bgt.n	804677c <UART_SetConfig+0x9d4>
 80466e8:	2b00      	cmp	r3, #0
 80466ea:	db7c      	blt.n	80467e6 <UART_SetConfig+0xa3e>
 80466ec:	2b20      	cmp	r3, #32
 80466ee:	d87a      	bhi.n	80467e6 <UART_SetConfig+0xa3e>
 80466f0:	a201      	add	r2, pc, #4	@ (adr r2, 80466f8 <UART_SetConfig+0x950>)
 80466f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80466f6:	bf00      	nop
 80466f8:	08046783 	.word	0x08046783
 80466fc:	0804678b 	.word	0x0804678b
 8046700:	080467e7 	.word	0x080467e7
 8046704:	080467e7 	.word	0x080467e7
 8046708:	08046793 	.word	0x08046793
 804670c:	080467e7 	.word	0x080467e7
 8046710:	080467e7 	.word	0x080467e7
 8046714:	080467e7 	.word	0x080467e7
 8046718:	080467a3 	.word	0x080467a3
 804671c:	080467e7 	.word	0x080467e7
 8046720:	080467e7 	.word	0x080467e7
 8046724:	080467e7 	.word	0x080467e7
 8046728:	080467e7 	.word	0x080467e7
 804672c:	080467e7 	.word	0x080467e7
 8046730:	080467e7 	.word	0x080467e7
 8046734:	080467e7 	.word	0x080467e7
 8046738:	080467b3 	.word	0x080467b3
 804673c:	080467e7 	.word	0x080467e7
 8046740:	080467e7 	.word	0x080467e7
 8046744:	080467e7 	.word	0x080467e7
 8046748:	080467e7 	.word	0x080467e7
 804674c:	080467e7 	.word	0x080467e7
 8046750:	080467e7 	.word	0x080467e7
 8046754:	080467e7 	.word	0x080467e7
 8046758:	080467e7 	.word	0x080467e7
 804675c:	080467e7 	.word	0x080467e7
 8046760:	080467e7 	.word	0x080467e7
 8046764:	080467e7 	.word	0x080467e7
 8046768:	080467e7 	.word	0x080467e7
 804676c:	080467e7 	.word	0x080467e7
 8046770:	080467e7 	.word	0x080467e7
 8046774:	080467e7 	.word	0x080467e7
 8046778:	080467d9 	.word	0x080467d9
 804677c:	2b40      	cmp	r3, #64	@ 0x40
 804677e:	d02e      	beq.n	80467de <UART_SetConfig+0xa36>
 8046780:	e031      	b.n	80467e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8046782:	f7fd fc29 	bl	8043fd8 <HAL_RCC_GetPCLK1Freq>
 8046786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046788:	e033      	b.n	80467f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804678a:	f7fd fc3b 	bl	8044004 <HAL_RCC_GetPCLK2Freq>
 804678e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8046790:	e02f      	b.n	80467f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8046792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8046796:	4618      	mov	r0, r3
 8046798:	f7fe feaa 	bl	80454f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 804679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467a0:	e027      	b.n	80467f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80467a2:	f107 0318 	add.w	r3, r7, #24
 80467a6:	4618      	mov	r0, r3
 80467a8:	f7fe fff6 	bl	8045798 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80467ac:	69fb      	ldr	r3, [r7, #28]
 80467ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467b0:	e01f      	b.n	80467f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80467b2:	4b2d      	ldr	r3, [pc, #180]	@ (8046868 <UART_SetConfig+0xac0>)
 80467b4:	681b      	ldr	r3, [r3, #0]
 80467b6:	f003 0320 	and.w	r3, r3, #32
 80467ba:	2b00      	cmp	r3, #0
 80467bc:	d009      	beq.n	80467d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80467be:	4b2a      	ldr	r3, [pc, #168]	@ (8046868 <UART_SetConfig+0xac0>)
 80467c0:	681b      	ldr	r3, [r3, #0]
 80467c2:	08db      	lsrs	r3, r3, #3
 80467c4:	f003 0303 	and.w	r3, r3, #3
 80467c8:	4a28      	ldr	r2, [pc, #160]	@ (804686c <UART_SetConfig+0xac4>)
 80467ca:	fa22 f303 	lsr.w	r3, r2, r3
 80467ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80467d0:	e00f      	b.n	80467f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80467d2:	4b26      	ldr	r3, [pc, #152]	@ (804686c <UART_SetConfig+0xac4>)
 80467d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467d6:	e00c      	b.n	80467f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80467d8:	4b25      	ldr	r3, [pc, #148]	@ (8046870 <UART_SetConfig+0xac8>)
 80467da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467dc:	e009      	b.n	80467f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80467de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80467e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80467e4:	e005      	b.n	80467f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80467e6:	2300      	movs	r3, #0
 80467e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80467ea:	2301      	movs	r3, #1
 80467ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80467f0:	bf00      	nop
    }

    if (pclk != 0U)
 80467f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80467f4:	2b00      	cmp	r3, #0
 80467f6:	d021      	beq.n	804683c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80467f8:	697b      	ldr	r3, [r7, #20]
 80467fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80467fc:	4a1d      	ldr	r2, [pc, #116]	@ (8046874 <UART_SetConfig+0xacc>)
 80467fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8046802:	461a      	mov	r2, r3
 8046804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046806:	fbb3 f2f2 	udiv	r2, r3, r2
 804680a:	697b      	ldr	r3, [r7, #20]
 804680c:	685b      	ldr	r3, [r3, #4]
 804680e:	085b      	lsrs	r3, r3, #1
 8046810:	441a      	add	r2, r3
 8046812:	697b      	ldr	r3, [r7, #20]
 8046814:	685b      	ldr	r3, [r3, #4]
 8046816:	fbb2 f3f3 	udiv	r3, r2, r3
 804681a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804681e:	2b0f      	cmp	r3, #15
 8046820:	d909      	bls.n	8046836 <UART_SetConfig+0xa8e>
 8046822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8046828:	d205      	bcs.n	8046836 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 804682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 804682c:	b29a      	uxth	r2, r3
 804682e:	697b      	ldr	r3, [r7, #20]
 8046830:	681b      	ldr	r3, [r3, #0]
 8046832:	60da      	str	r2, [r3, #12]
 8046834:	e002      	b.n	804683c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8046836:	2301      	movs	r3, #1
 8046838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804683c:	697b      	ldr	r3, [r7, #20]
 804683e:	2201      	movs	r2, #1
 8046840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8046844:	697b      	ldr	r3, [r7, #20]
 8046846:	2201      	movs	r2, #1
 8046848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804684c:	697b      	ldr	r3, [r7, #20]
 804684e:	2200      	movs	r2, #0
 8046850:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8046852:	697b      	ldr	r3, [r7, #20]
 8046854:	2200      	movs	r2, #0
 8046856:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8046858:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 804685c:	4618      	mov	r0, r3
 804685e:	3748      	adds	r7, #72	@ 0x48
 8046860:	46bd      	mov	sp, r7
 8046862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8046866:	bf00      	nop
 8046868:	58024400 	.word	0x58024400
 804686c:	03d09000 	.word	0x03d09000
 8046870:	003d0900 	.word	0x003d0900
 8046874:	0804c338 	.word	0x0804c338

08046878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8046878:	b480      	push	{r7}
 804687a:	b083      	sub	sp, #12
 804687c:	af00      	add	r7, sp, #0
 804687e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8046880:	687b      	ldr	r3, [r7, #4]
 8046882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046884:	f003 0308 	and.w	r3, r3, #8
 8046888:	2b00      	cmp	r3, #0
 804688a:	d00a      	beq.n	80468a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804688c:	687b      	ldr	r3, [r7, #4]
 804688e:	681b      	ldr	r3, [r3, #0]
 8046890:	685b      	ldr	r3, [r3, #4]
 8046892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8046896:	687b      	ldr	r3, [r7, #4]
 8046898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 804689a:	687b      	ldr	r3, [r7, #4]
 804689c:	681b      	ldr	r3, [r3, #0]
 804689e:	430a      	orrs	r2, r1
 80468a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80468a2:	687b      	ldr	r3, [r7, #4]
 80468a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468a6:	f003 0301 	and.w	r3, r3, #1
 80468aa:	2b00      	cmp	r3, #0
 80468ac:	d00a      	beq.n	80468c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80468ae:	687b      	ldr	r3, [r7, #4]
 80468b0:	681b      	ldr	r3, [r3, #0]
 80468b2:	685b      	ldr	r3, [r3, #4]
 80468b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80468b8:	687b      	ldr	r3, [r7, #4]
 80468ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80468bc:	687b      	ldr	r3, [r7, #4]
 80468be:	681b      	ldr	r3, [r3, #0]
 80468c0:	430a      	orrs	r2, r1
 80468c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80468c4:	687b      	ldr	r3, [r7, #4]
 80468c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468c8:	f003 0302 	and.w	r3, r3, #2
 80468cc:	2b00      	cmp	r3, #0
 80468ce:	d00a      	beq.n	80468e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80468d0:	687b      	ldr	r3, [r7, #4]
 80468d2:	681b      	ldr	r3, [r3, #0]
 80468d4:	685b      	ldr	r3, [r3, #4]
 80468d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80468da:	687b      	ldr	r3, [r7, #4]
 80468dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80468de:	687b      	ldr	r3, [r7, #4]
 80468e0:	681b      	ldr	r3, [r3, #0]
 80468e2:	430a      	orrs	r2, r1
 80468e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80468e6:	687b      	ldr	r3, [r7, #4]
 80468e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80468ea:	f003 0304 	and.w	r3, r3, #4
 80468ee:	2b00      	cmp	r3, #0
 80468f0:	d00a      	beq.n	8046908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80468f2:	687b      	ldr	r3, [r7, #4]
 80468f4:	681b      	ldr	r3, [r3, #0]
 80468f6:	685b      	ldr	r3, [r3, #4]
 80468f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80468fc:	687b      	ldr	r3, [r7, #4]
 80468fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8046900:	687b      	ldr	r3, [r7, #4]
 8046902:	681b      	ldr	r3, [r3, #0]
 8046904:	430a      	orrs	r2, r1
 8046906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8046908:	687b      	ldr	r3, [r7, #4]
 804690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804690c:	f003 0310 	and.w	r3, r3, #16
 8046910:	2b00      	cmp	r3, #0
 8046912:	d00a      	beq.n	804692a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8046914:	687b      	ldr	r3, [r7, #4]
 8046916:	681b      	ldr	r3, [r3, #0]
 8046918:	689b      	ldr	r3, [r3, #8]
 804691a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 804691e:	687b      	ldr	r3, [r7, #4]
 8046920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8046922:	687b      	ldr	r3, [r7, #4]
 8046924:	681b      	ldr	r3, [r3, #0]
 8046926:	430a      	orrs	r2, r1
 8046928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804692a:	687b      	ldr	r3, [r7, #4]
 804692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 804692e:	f003 0320 	and.w	r3, r3, #32
 8046932:	2b00      	cmp	r3, #0
 8046934:	d00a      	beq.n	804694c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8046936:	687b      	ldr	r3, [r7, #4]
 8046938:	681b      	ldr	r3, [r3, #0]
 804693a:	689b      	ldr	r3, [r3, #8]
 804693c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8046940:	687b      	ldr	r3, [r7, #4]
 8046942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8046944:	687b      	ldr	r3, [r7, #4]
 8046946:	681b      	ldr	r3, [r3, #0]
 8046948:	430a      	orrs	r2, r1
 804694a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804694c:	687b      	ldr	r3, [r7, #4]
 804694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8046954:	2b00      	cmp	r3, #0
 8046956:	d01a      	beq.n	804698e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8046958:	687b      	ldr	r3, [r7, #4]
 804695a:	681b      	ldr	r3, [r3, #0]
 804695c:	685b      	ldr	r3, [r3, #4]
 804695e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8046962:	687b      	ldr	r3, [r7, #4]
 8046964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8046966:	687b      	ldr	r3, [r7, #4]
 8046968:	681b      	ldr	r3, [r3, #0]
 804696a:	430a      	orrs	r2, r1
 804696c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804696e:	687b      	ldr	r3, [r7, #4]
 8046970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8046972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8046976:	d10a      	bne.n	804698e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8046978:	687b      	ldr	r3, [r7, #4]
 804697a:	681b      	ldr	r3, [r3, #0]
 804697c:	685b      	ldr	r3, [r3, #4]
 804697e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8046982:	687b      	ldr	r3, [r7, #4]
 8046984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8046986:	687b      	ldr	r3, [r7, #4]
 8046988:	681b      	ldr	r3, [r3, #0]
 804698a:	430a      	orrs	r2, r1
 804698c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804698e:	687b      	ldr	r3, [r7, #4]
 8046990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8046992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8046996:	2b00      	cmp	r3, #0
 8046998:	d00a      	beq.n	80469b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804699a:	687b      	ldr	r3, [r7, #4]
 804699c:	681b      	ldr	r3, [r3, #0]
 804699e:	685b      	ldr	r3, [r3, #4]
 80469a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80469a4:	687b      	ldr	r3, [r7, #4]
 80469a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80469a8:	687b      	ldr	r3, [r7, #4]
 80469aa:	681b      	ldr	r3, [r3, #0]
 80469ac:	430a      	orrs	r2, r1
 80469ae:	605a      	str	r2, [r3, #4]
  }
}
 80469b0:	bf00      	nop
 80469b2:	370c      	adds	r7, #12
 80469b4:	46bd      	mov	sp, r7
 80469b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80469ba:	4770      	bx	lr

080469bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80469bc:	b580      	push	{r7, lr}
 80469be:	b098      	sub	sp, #96	@ 0x60
 80469c0:	af02      	add	r7, sp, #8
 80469c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80469c4:	687b      	ldr	r3, [r7, #4]
 80469c6:	2200      	movs	r2, #0
 80469c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80469cc:	f7fa fbac 	bl	8041128 <HAL_GetTick>
 80469d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80469d2:	687b      	ldr	r3, [r7, #4]
 80469d4:	681b      	ldr	r3, [r3, #0]
 80469d6:	681b      	ldr	r3, [r3, #0]
 80469d8:	f003 0308 	and.w	r3, r3, #8
 80469dc:	2b08      	cmp	r3, #8
 80469de:	d12f      	bne.n	8046a40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80469e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80469e4:	9300      	str	r3, [sp, #0]
 80469e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80469e8:	2200      	movs	r2, #0
 80469ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80469ee:	6878      	ldr	r0, [r7, #4]
 80469f0:	f000 f88e 	bl	8046b10 <UART_WaitOnFlagUntilTimeout>
 80469f4:	4603      	mov	r3, r0
 80469f6:	2b00      	cmp	r3, #0
 80469f8:	d022      	beq.n	8046a40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80469fa:	687b      	ldr	r3, [r7, #4]
 80469fc:	681b      	ldr	r3, [r3, #0]
 80469fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046a02:	e853 3f00 	ldrex	r3, [r3]
 8046a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8046a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8046a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8046a10:	687b      	ldr	r3, [r7, #4]
 8046a12:	681b      	ldr	r3, [r3, #0]
 8046a14:	461a      	mov	r2, r3
 8046a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8046a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8046a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8046a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8046a20:	e841 2300 	strex	r3, r2, [r1]
 8046a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8046a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8046a28:	2b00      	cmp	r3, #0
 8046a2a:	d1e6      	bne.n	80469fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8046a2c:	687b      	ldr	r3, [r7, #4]
 8046a2e:	2220      	movs	r2, #32
 8046a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8046a34:	687b      	ldr	r3, [r7, #4]
 8046a36:	2200      	movs	r2, #0
 8046a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046a3c:	2303      	movs	r3, #3
 8046a3e:	e063      	b.n	8046b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8046a40:	687b      	ldr	r3, [r7, #4]
 8046a42:	681b      	ldr	r3, [r3, #0]
 8046a44:	681b      	ldr	r3, [r3, #0]
 8046a46:	f003 0304 	and.w	r3, r3, #4
 8046a4a:	2b04      	cmp	r3, #4
 8046a4c:	d149      	bne.n	8046ae2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046a4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8046a52:	9300      	str	r3, [sp, #0]
 8046a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8046a56:	2200      	movs	r2, #0
 8046a58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8046a5c:	6878      	ldr	r0, [r7, #4]
 8046a5e:	f000 f857 	bl	8046b10 <UART_WaitOnFlagUntilTimeout>
 8046a62:	4603      	mov	r3, r0
 8046a64:	2b00      	cmp	r3, #0
 8046a66:	d03c      	beq.n	8046ae2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046a68:	687b      	ldr	r3, [r7, #4]
 8046a6a:	681b      	ldr	r3, [r3, #0]
 8046a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046a70:	e853 3f00 	ldrex	r3, [r3]
 8046a74:	623b      	str	r3, [r7, #32]
   return(result);
 8046a76:	6a3b      	ldr	r3, [r7, #32]
 8046a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046a7e:	687b      	ldr	r3, [r7, #4]
 8046a80:	681b      	ldr	r3, [r3, #0]
 8046a82:	461a      	mov	r2, r3
 8046a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8046a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8046a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8046a8e:	e841 2300 	strex	r3, r2, [r1]
 8046a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8046a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8046a96:	2b00      	cmp	r3, #0
 8046a98:	d1e6      	bne.n	8046a68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046a9a:	687b      	ldr	r3, [r7, #4]
 8046a9c:	681b      	ldr	r3, [r3, #0]
 8046a9e:	3308      	adds	r3, #8
 8046aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046aa2:	693b      	ldr	r3, [r7, #16]
 8046aa4:	e853 3f00 	ldrex	r3, [r3]
 8046aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8046aaa:	68fb      	ldr	r3, [r7, #12]
 8046aac:	f023 0301 	bic.w	r3, r3, #1
 8046ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046ab2:	687b      	ldr	r3, [r7, #4]
 8046ab4:	681b      	ldr	r3, [r3, #0]
 8046ab6:	3308      	adds	r3, #8
 8046ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046aba:	61fa      	str	r2, [r7, #28]
 8046abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046abe:	69b9      	ldr	r1, [r7, #24]
 8046ac0:	69fa      	ldr	r2, [r7, #28]
 8046ac2:	e841 2300 	strex	r3, r2, [r1]
 8046ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8046ac8:	697b      	ldr	r3, [r7, #20]
 8046aca:	2b00      	cmp	r3, #0
 8046acc:	d1e5      	bne.n	8046a9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8046ace:	687b      	ldr	r3, [r7, #4]
 8046ad0:	2220      	movs	r2, #32
 8046ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8046ad6:	687b      	ldr	r3, [r7, #4]
 8046ad8:	2200      	movs	r2, #0
 8046ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046ade:	2303      	movs	r3, #3
 8046ae0:	e012      	b.n	8046b08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8046ae2:	687b      	ldr	r3, [r7, #4]
 8046ae4:	2220      	movs	r2, #32
 8046ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8046aea:	687b      	ldr	r3, [r7, #4]
 8046aec:	2220      	movs	r2, #32
 8046aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046af2:	687b      	ldr	r3, [r7, #4]
 8046af4:	2200      	movs	r2, #0
 8046af6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8046af8:	687b      	ldr	r3, [r7, #4]
 8046afa:	2200      	movs	r2, #0
 8046afc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8046afe:	687b      	ldr	r3, [r7, #4]
 8046b00:	2200      	movs	r2, #0
 8046b02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046b06:	2300      	movs	r3, #0
}
 8046b08:	4618      	mov	r0, r3
 8046b0a:	3758      	adds	r7, #88	@ 0x58
 8046b0c:	46bd      	mov	sp, r7
 8046b0e:	bd80      	pop	{r7, pc}

08046b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8046b10:	b580      	push	{r7, lr}
 8046b12:	b084      	sub	sp, #16
 8046b14:	af00      	add	r7, sp, #0
 8046b16:	60f8      	str	r0, [r7, #12]
 8046b18:	60b9      	str	r1, [r7, #8]
 8046b1a:	603b      	str	r3, [r7, #0]
 8046b1c:	4613      	mov	r3, r2
 8046b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046b20:	e04f      	b.n	8046bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046b22:	69bb      	ldr	r3, [r7, #24]
 8046b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046b28:	d04b      	beq.n	8046bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046b2a:	f7fa fafd 	bl	8041128 <HAL_GetTick>
 8046b2e:	4602      	mov	r2, r0
 8046b30:	683b      	ldr	r3, [r7, #0]
 8046b32:	1ad3      	subs	r3, r2, r3
 8046b34:	69ba      	ldr	r2, [r7, #24]
 8046b36:	429a      	cmp	r2, r3
 8046b38:	d302      	bcc.n	8046b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8046b3a:	69bb      	ldr	r3, [r7, #24]
 8046b3c:	2b00      	cmp	r3, #0
 8046b3e:	d101      	bne.n	8046b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8046b40:	2303      	movs	r3, #3
 8046b42:	e04e      	b.n	8046be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8046b44:	68fb      	ldr	r3, [r7, #12]
 8046b46:	681b      	ldr	r3, [r3, #0]
 8046b48:	681b      	ldr	r3, [r3, #0]
 8046b4a:	f003 0304 	and.w	r3, r3, #4
 8046b4e:	2b00      	cmp	r3, #0
 8046b50:	d037      	beq.n	8046bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8046b52:	68bb      	ldr	r3, [r7, #8]
 8046b54:	2b80      	cmp	r3, #128	@ 0x80
 8046b56:	d034      	beq.n	8046bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8046b58:	68bb      	ldr	r3, [r7, #8]
 8046b5a:	2b40      	cmp	r3, #64	@ 0x40
 8046b5c:	d031      	beq.n	8046bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8046b5e:	68fb      	ldr	r3, [r7, #12]
 8046b60:	681b      	ldr	r3, [r3, #0]
 8046b62:	69db      	ldr	r3, [r3, #28]
 8046b64:	f003 0308 	and.w	r3, r3, #8
 8046b68:	2b08      	cmp	r3, #8
 8046b6a:	d110      	bne.n	8046b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8046b6c:	68fb      	ldr	r3, [r7, #12]
 8046b6e:	681b      	ldr	r3, [r3, #0]
 8046b70:	2208      	movs	r2, #8
 8046b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046b74:	68f8      	ldr	r0, [r7, #12]
 8046b76:	f000 f839 	bl	8046bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8046b7a:	68fb      	ldr	r3, [r7, #12]
 8046b7c:	2208      	movs	r2, #8
 8046b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046b82:	68fb      	ldr	r3, [r7, #12]
 8046b84:	2200      	movs	r2, #0
 8046b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8046b8a:	2301      	movs	r3, #1
 8046b8c:	e029      	b.n	8046be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8046b8e:	68fb      	ldr	r3, [r7, #12]
 8046b90:	681b      	ldr	r3, [r3, #0]
 8046b92:	69db      	ldr	r3, [r3, #28]
 8046b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8046b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8046b9c:	d111      	bne.n	8046bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8046b9e:	68fb      	ldr	r3, [r7, #12]
 8046ba0:	681b      	ldr	r3, [r3, #0]
 8046ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8046ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8046ba8:	68f8      	ldr	r0, [r7, #12]
 8046baa:	f000 f81f 	bl	8046bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8046bae:	68fb      	ldr	r3, [r7, #12]
 8046bb0:	2220      	movs	r2, #32
 8046bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8046bb6:	68fb      	ldr	r3, [r7, #12]
 8046bb8:	2200      	movs	r2, #0
 8046bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8046bbe:	2303      	movs	r3, #3
 8046bc0:	e00f      	b.n	8046be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046bc2:	68fb      	ldr	r3, [r7, #12]
 8046bc4:	681b      	ldr	r3, [r3, #0]
 8046bc6:	69da      	ldr	r2, [r3, #28]
 8046bc8:	68bb      	ldr	r3, [r7, #8]
 8046bca:	4013      	ands	r3, r2
 8046bcc:	68ba      	ldr	r2, [r7, #8]
 8046bce:	429a      	cmp	r2, r3
 8046bd0:	bf0c      	ite	eq
 8046bd2:	2301      	moveq	r3, #1
 8046bd4:	2300      	movne	r3, #0
 8046bd6:	b2db      	uxtb	r3, r3
 8046bd8:	461a      	mov	r2, r3
 8046bda:	79fb      	ldrb	r3, [r7, #7]
 8046bdc:	429a      	cmp	r2, r3
 8046bde:	d0a0      	beq.n	8046b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8046be0:	2300      	movs	r3, #0
}
 8046be2:	4618      	mov	r0, r3
 8046be4:	3710      	adds	r7, #16
 8046be6:	46bd      	mov	sp, r7
 8046be8:	bd80      	pop	{r7, pc}
	...

08046bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8046bec:	b480      	push	{r7}
 8046bee:	b095      	sub	sp, #84	@ 0x54
 8046bf0:	af00      	add	r7, sp, #0
 8046bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8046bf4:	687b      	ldr	r3, [r7, #4]
 8046bf6:	681b      	ldr	r3, [r3, #0]
 8046bf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8046bfc:	e853 3f00 	ldrex	r3, [r3]
 8046c00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8046c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8046c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8046c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8046c0a:	687b      	ldr	r3, [r7, #4]
 8046c0c:	681b      	ldr	r3, [r3, #0]
 8046c0e:	461a      	mov	r2, r3
 8046c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8046c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8046c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046c16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8046c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8046c1a:	e841 2300 	strex	r3, r2, [r1]
 8046c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8046c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8046c22:	2b00      	cmp	r3, #0
 8046c24:	d1e6      	bne.n	8046bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8046c26:	687b      	ldr	r3, [r7, #4]
 8046c28:	681b      	ldr	r3, [r3, #0]
 8046c2a:	3308      	adds	r3, #8
 8046c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046c2e:	6a3b      	ldr	r3, [r7, #32]
 8046c30:	e853 3f00 	ldrex	r3, [r3]
 8046c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8046c36:	69fa      	ldr	r2, [r7, #28]
 8046c38:	4b1e      	ldr	r3, [pc, #120]	@ (8046cb4 <UART_EndRxTransfer+0xc8>)
 8046c3a:	4013      	ands	r3, r2
 8046c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8046c3e:	687b      	ldr	r3, [r7, #4]
 8046c40:	681b      	ldr	r3, [r3, #0]
 8046c42:	3308      	adds	r3, #8
 8046c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8046c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8046c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8046c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8046c4e:	e841 2300 	strex	r3, r2, [r1]
 8046c52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8046c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8046c56:	2b00      	cmp	r3, #0
 8046c58:	d1e5      	bne.n	8046c26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046c5a:	687b      	ldr	r3, [r7, #4]
 8046c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8046c5e:	2b01      	cmp	r3, #1
 8046c60:	d118      	bne.n	8046c94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8046c62:	687b      	ldr	r3, [r7, #4]
 8046c64:	681b      	ldr	r3, [r3, #0]
 8046c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046c68:	68fb      	ldr	r3, [r7, #12]
 8046c6a:	e853 3f00 	ldrex	r3, [r3]
 8046c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8046c70:	68bb      	ldr	r3, [r7, #8]
 8046c72:	f023 0310 	bic.w	r3, r3, #16
 8046c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8046c78:	687b      	ldr	r3, [r7, #4]
 8046c7a:	681b      	ldr	r3, [r3, #0]
 8046c7c:	461a      	mov	r2, r3
 8046c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8046c80:	61bb      	str	r3, [r7, #24]
 8046c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046c84:	6979      	ldr	r1, [r7, #20]
 8046c86:	69ba      	ldr	r2, [r7, #24]
 8046c88:	e841 2300 	strex	r3, r2, [r1]
 8046c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8046c8e:	693b      	ldr	r3, [r7, #16]
 8046c90:	2b00      	cmp	r3, #0
 8046c92:	d1e6      	bne.n	8046c62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8046c94:	687b      	ldr	r3, [r7, #4]
 8046c96:	2220      	movs	r2, #32
 8046c98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046c9c:	687b      	ldr	r3, [r7, #4]
 8046c9e:	2200      	movs	r2, #0
 8046ca0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8046ca2:	687b      	ldr	r3, [r7, #4]
 8046ca4:	2200      	movs	r2, #0
 8046ca6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8046ca8:	bf00      	nop
 8046caa:	3754      	adds	r7, #84	@ 0x54
 8046cac:	46bd      	mov	sp, r7
 8046cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046cb2:	4770      	bx	lr
 8046cb4:	effffffe 	.word	0xeffffffe

08046cb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8046cb8:	b480      	push	{r7}
 8046cba:	b085      	sub	sp, #20
 8046cbc:	af00      	add	r7, sp, #0
 8046cbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046cc0:	687b      	ldr	r3, [r7, #4]
 8046cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046cc6:	2b01      	cmp	r3, #1
 8046cc8:	d101      	bne.n	8046cce <HAL_UARTEx_DisableFifoMode+0x16>
 8046cca:	2302      	movs	r3, #2
 8046ccc:	e027      	b.n	8046d1e <HAL_UARTEx_DisableFifoMode+0x66>
 8046cce:	687b      	ldr	r3, [r7, #4]
 8046cd0:	2201      	movs	r2, #1
 8046cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046cd6:	687b      	ldr	r3, [r7, #4]
 8046cd8:	2224      	movs	r2, #36	@ 0x24
 8046cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046cde:	687b      	ldr	r3, [r7, #4]
 8046ce0:	681b      	ldr	r3, [r3, #0]
 8046ce2:	681b      	ldr	r3, [r3, #0]
 8046ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046ce6:	687b      	ldr	r3, [r7, #4]
 8046ce8:	681b      	ldr	r3, [r3, #0]
 8046cea:	681a      	ldr	r2, [r3, #0]
 8046cec:	687b      	ldr	r3, [r7, #4]
 8046cee:	681b      	ldr	r3, [r3, #0]
 8046cf0:	f022 0201 	bic.w	r2, r2, #1
 8046cf4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8046cf6:	68fb      	ldr	r3, [r7, #12]
 8046cf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8046cfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8046cfe:	687b      	ldr	r3, [r7, #4]
 8046d00:	2200      	movs	r2, #0
 8046d02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046d04:	687b      	ldr	r3, [r7, #4]
 8046d06:	681b      	ldr	r3, [r3, #0]
 8046d08:	68fa      	ldr	r2, [r7, #12]
 8046d0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046d0c:	687b      	ldr	r3, [r7, #4]
 8046d0e:	2220      	movs	r2, #32
 8046d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046d14:	687b      	ldr	r3, [r7, #4]
 8046d16:	2200      	movs	r2, #0
 8046d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046d1c:	2300      	movs	r3, #0
}
 8046d1e:	4618      	mov	r0, r3
 8046d20:	3714      	adds	r7, #20
 8046d22:	46bd      	mov	sp, r7
 8046d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d28:	4770      	bx	lr

08046d2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046d2a:	b580      	push	{r7, lr}
 8046d2c:	b084      	sub	sp, #16
 8046d2e:	af00      	add	r7, sp, #0
 8046d30:	6078      	str	r0, [r7, #4]
 8046d32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046d34:	687b      	ldr	r3, [r7, #4]
 8046d36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046d3a:	2b01      	cmp	r3, #1
 8046d3c:	d101      	bne.n	8046d42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8046d3e:	2302      	movs	r3, #2
 8046d40:	e02d      	b.n	8046d9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8046d42:	687b      	ldr	r3, [r7, #4]
 8046d44:	2201      	movs	r2, #1
 8046d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046d4a:	687b      	ldr	r3, [r7, #4]
 8046d4c:	2224      	movs	r2, #36	@ 0x24
 8046d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046d52:	687b      	ldr	r3, [r7, #4]
 8046d54:	681b      	ldr	r3, [r3, #0]
 8046d56:	681b      	ldr	r3, [r3, #0]
 8046d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046d5a:	687b      	ldr	r3, [r7, #4]
 8046d5c:	681b      	ldr	r3, [r3, #0]
 8046d5e:	681a      	ldr	r2, [r3, #0]
 8046d60:	687b      	ldr	r3, [r7, #4]
 8046d62:	681b      	ldr	r3, [r3, #0]
 8046d64:	f022 0201 	bic.w	r2, r2, #1
 8046d68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8046d6a:	687b      	ldr	r3, [r7, #4]
 8046d6c:	681b      	ldr	r3, [r3, #0]
 8046d6e:	689b      	ldr	r3, [r3, #8]
 8046d70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8046d74:	687b      	ldr	r3, [r7, #4]
 8046d76:	681b      	ldr	r3, [r3, #0]
 8046d78:	683a      	ldr	r2, [r7, #0]
 8046d7a:	430a      	orrs	r2, r1
 8046d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046d7e:	6878      	ldr	r0, [r7, #4]
 8046d80:	f000 f850 	bl	8046e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046d84:	687b      	ldr	r3, [r7, #4]
 8046d86:	681b      	ldr	r3, [r3, #0]
 8046d88:	68fa      	ldr	r2, [r7, #12]
 8046d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046d8c:	687b      	ldr	r3, [r7, #4]
 8046d8e:	2220      	movs	r2, #32
 8046d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046d94:	687b      	ldr	r3, [r7, #4]
 8046d96:	2200      	movs	r2, #0
 8046d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046d9c:	2300      	movs	r3, #0
}
 8046d9e:	4618      	mov	r0, r3
 8046da0:	3710      	adds	r7, #16
 8046da2:	46bd      	mov	sp, r7
 8046da4:	bd80      	pop	{r7, pc}

08046da6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8046da6:	b580      	push	{r7, lr}
 8046da8:	b084      	sub	sp, #16
 8046daa:	af00      	add	r7, sp, #0
 8046dac:	6078      	str	r0, [r7, #4]
 8046dae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8046db0:	687b      	ldr	r3, [r7, #4]
 8046db2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8046db6:	2b01      	cmp	r3, #1
 8046db8:	d101      	bne.n	8046dbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8046dba:	2302      	movs	r3, #2
 8046dbc:	e02d      	b.n	8046e1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8046dbe:	687b      	ldr	r3, [r7, #4]
 8046dc0:	2201      	movs	r2, #1
 8046dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8046dc6:	687b      	ldr	r3, [r7, #4]
 8046dc8:	2224      	movs	r2, #36	@ 0x24
 8046dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8046dce:	687b      	ldr	r3, [r7, #4]
 8046dd0:	681b      	ldr	r3, [r3, #0]
 8046dd2:	681b      	ldr	r3, [r3, #0]
 8046dd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8046dd6:	687b      	ldr	r3, [r7, #4]
 8046dd8:	681b      	ldr	r3, [r3, #0]
 8046dda:	681a      	ldr	r2, [r3, #0]
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	681b      	ldr	r3, [r3, #0]
 8046de0:	f022 0201 	bic.w	r2, r2, #1
 8046de4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8046de6:	687b      	ldr	r3, [r7, #4]
 8046de8:	681b      	ldr	r3, [r3, #0]
 8046dea:	689b      	ldr	r3, [r3, #8]
 8046dec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8046df0:	687b      	ldr	r3, [r7, #4]
 8046df2:	681b      	ldr	r3, [r3, #0]
 8046df4:	683a      	ldr	r2, [r7, #0]
 8046df6:	430a      	orrs	r2, r1
 8046df8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8046dfa:	6878      	ldr	r0, [r7, #4]
 8046dfc:	f000 f812 	bl	8046e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8046e00:	687b      	ldr	r3, [r7, #4]
 8046e02:	681b      	ldr	r3, [r3, #0]
 8046e04:	68fa      	ldr	r2, [r7, #12]
 8046e06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8046e08:	687b      	ldr	r3, [r7, #4]
 8046e0a:	2220      	movs	r2, #32
 8046e0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8046e10:	687b      	ldr	r3, [r7, #4]
 8046e12:	2200      	movs	r2, #0
 8046e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8046e18:	2300      	movs	r3, #0
}
 8046e1a:	4618      	mov	r0, r3
 8046e1c:	3710      	adds	r7, #16
 8046e1e:	46bd      	mov	sp, r7
 8046e20:	bd80      	pop	{r7, pc}
	...

08046e24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8046e24:	b480      	push	{r7}
 8046e26:	b085      	sub	sp, #20
 8046e28:	af00      	add	r7, sp, #0
 8046e2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8046e2c:	687b      	ldr	r3, [r7, #4]
 8046e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8046e30:	2b00      	cmp	r3, #0
 8046e32:	d108      	bne.n	8046e46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8046e34:	687b      	ldr	r3, [r7, #4]
 8046e36:	2201      	movs	r2, #1
 8046e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8046e3c:	687b      	ldr	r3, [r7, #4]
 8046e3e:	2201      	movs	r2, #1
 8046e40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8046e44:	e031      	b.n	8046eaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8046e46:	2310      	movs	r3, #16
 8046e48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8046e4a:	2310      	movs	r3, #16
 8046e4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8046e4e:	687b      	ldr	r3, [r7, #4]
 8046e50:	681b      	ldr	r3, [r3, #0]
 8046e52:	689b      	ldr	r3, [r3, #8]
 8046e54:	0e5b      	lsrs	r3, r3, #25
 8046e56:	b2db      	uxtb	r3, r3
 8046e58:	f003 0307 	and.w	r3, r3, #7
 8046e5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8046e5e:	687b      	ldr	r3, [r7, #4]
 8046e60:	681b      	ldr	r3, [r3, #0]
 8046e62:	689b      	ldr	r3, [r3, #8]
 8046e64:	0f5b      	lsrs	r3, r3, #29
 8046e66:	b2db      	uxtb	r3, r3
 8046e68:	f003 0307 	and.w	r3, r3, #7
 8046e6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046e6e:	7bbb      	ldrb	r3, [r7, #14]
 8046e70:	7b3a      	ldrb	r2, [r7, #12]
 8046e72:	4911      	ldr	r1, [pc, #68]	@ (8046eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8046e74:	5c8a      	ldrb	r2, [r1, r2]
 8046e76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8046e7a:	7b3a      	ldrb	r2, [r7, #12]
 8046e7c:	490f      	ldr	r1, [pc, #60]	@ (8046ebc <UARTEx_SetNbDataToProcess+0x98>)
 8046e7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8046e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8046e84:	b29a      	uxth	r2, r3
 8046e86:	687b      	ldr	r3, [r7, #4]
 8046e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046e8c:	7bfb      	ldrb	r3, [r7, #15]
 8046e8e:	7b7a      	ldrb	r2, [r7, #13]
 8046e90:	4909      	ldr	r1, [pc, #36]	@ (8046eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8046e92:	5c8a      	ldrb	r2, [r1, r2]
 8046e94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8046e98:	7b7a      	ldrb	r2, [r7, #13]
 8046e9a:	4908      	ldr	r1, [pc, #32]	@ (8046ebc <UARTEx_SetNbDataToProcess+0x98>)
 8046e9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8046e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8046ea2:	b29a      	uxth	r2, r3
 8046ea4:	687b      	ldr	r3, [r7, #4]
 8046ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8046eaa:	bf00      	nop
 8046eac:	3714      	adds	r7, #20
 8046eae:	46bd      	mov	sp, r7
 8046eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046eb4:	4770      	bx	lr
 8046eb6:	bf00      	nop
 8046eb8:	0804c350 	.word	0x0804c350
 8046ebc:	0804c358 	.word	0x0804c358

08046ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8046ec0:	b084      	sub	sp, #16
 8046ec2:	b580      	push	{r7, lr}
 8046ec4:	b084      	sub	sp, #16
 8046ec6:	af00      	add	r7, sp, #0
 8046ec8:	6078      	str	r0, [r7, #4]
 8046eca:	f107 001c 	add.w	r0, r7, #28
 8046ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8046ed2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8046ed6:	2b01      	cmp	r3, #1
 8046ed8:	d121      	bne.n	8046f1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046eda:	687b      	ldr	r3, [r7, #4]
 8046edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046ede:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046ee2:	687b      	ldr	r3, [r7, #4]
 8046ee4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8046ee6:	687b      	ldr	r3, [r7, #4]
 8046ee8:	68da      	ldr	r2, [r3, #12]
 8046eea:	4b2c      	ldr	r3, [pc, #176]	@ (8046f9c <USB_CoreInit+0xdc>)
 8046eec:	4013      	ands	r3, r2
 8046eee:	687a      	ldr	r2, [r7, #4]
 8046ef0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8046ef2:	687b      	ldr	r3, [r7, #4]
 8046ef4:	68db      	ldr	r3, [r3, #12]
 8046ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8046efa:	687b      	ldr	r3, [r7, #4]
 8046efc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8046efe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8046f02:	2b01      	cmp	r3, #1
 8046f04:	d105      	bne.n	8046f12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8046f06:	687b      	ldr	r3, [r7, #4]
 8046f08:	68db      	ldr	r3, [r3, #12]
 8046f0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8046f0e:	687b      	ldr	r3, [r7, #4]
 8046f10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046f12:	6878      	ldr	r0, [r7, #4]
 8046f14:	f001 fa1e 	bl	8048354 <USB_CoreReset>
 8046f18:	4603      	mov	r3, r0
 8046f1a:	73fb      	strb	r3, [r7, #15]
 8046f1c:	e01b      	b.n	8046f56 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8046f1e:	687b      	ldr	r3, [r7, #4]
 8046f20:	68db      	ldr	r3, [r3, #12]
 8046f22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8046f26:	687b      	ldr	r3, [r7, #4]
 8046f28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8046f2a:	6878      	ldr	r0, [r7, #4]
 8046f2c:	f001 fa12 	bl	8048354 <USB_CoreReset>
 8046f30:	4603      	mov	r3, r0
 8046f32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8046f34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8046f38:	2b00      	cmp	r3, #0
 8046f3a:	d106      	bne.n	8046f4a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8046f3c:	687b      	ldr	r3, [r7, #4]
 8046f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046f40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8046f44:	687b      	ldr	r3, [r7, #4]
 8046f46:	639a      	str	r2, [r3, #56]	@ 0x38
 8046f48:	e005      	b.n	8046f56 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8046f4a:	687b      	ldr	r3, [r7, #4]
 8046f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8046f4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8046f52:	687b      	ldr	r3, [r7, #4]
 8046f54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8046f56:	7fbb      	ldrb	r3, [r7, #30]
 8046f58:	2b01      	cmp	r3, #1
 8046f5a:	d116      	bne.n	8046f8a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8046f5c:	687b      	ldr	r3, [r7, #4]
 8046f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8046f60:	b29a      	uxth	r2, r3
 8046f62:	687b      	ldr	r3, [r7, #4]
 8046f64:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8046f66:	687b      	ldr	r3, [r7, #4]
 8046f68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8046f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8046fa0 <USB_CoreInit+0xe0>)
 8046f6c:	4313      	orrs	r3, r2
 8046f6e:	687a      	ldr	r2, [r7, #4]
 8046f70:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8046f72:	687b      	ldr	r3, [r7, #4]
 8046f74:	689b      	ldr	r3, [r3, #8]
 8046f76:	f043 0206 	orr.w	r2, r3, #6
 8046f7a:	687b      	ldr	r3, [r7, #4]
 8046f7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8046f7e:	687b      	ldr	r3, [r7, #4]
 8046f80:	689b      	ldr	r3, [r3, #8]
 8046f82:	f043 0220 	orr.w	r2, r3, #32
 8046f86:	687b      	ldr	r3, [r7, #4]
 8046f88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8046f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8046f8c:	4618      	mov	r0, r3
 8046f8e:	3710      	adds	r7, #16
 8046f90:	46bd      	mov	sp, r7
 8046f92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8046f96:	b004      	add	sp, #16
 8046f98:	4770      	bx	lr
 8046f9a:	bf00      	nop
 8046f9c:	ffbdffbf 	.word	0xffbdffbf
 8046fa0:	03ee0000 	.word	0x03ee0000

08046fa4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8046fa4:	b480      	push	{r7}
 8046fa6:	b087      	sub	sp, #28
 8046fa8:	af00      	add	r7, sp, #0
 8046faa:	60f8      	str	r0, [r7, #12]
 8046fac:	60b9      	str	r1, [r7, #8]
 8046fae:	4613      	mov	r3, r2
 8046fb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8046fb2:	79fb      	ldrb	r3, [r7, #7]
 8046fb4:	2b02      	cmp	r3, #2
 8046fb6:	d165      	bne.n	8047084 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8046fb8:	68bb      	ldr	r3, [r7, #8]
 8046fba:	4a41      	ldr	r2, [pc, #260]	@ (80470c0 <USB_SetTurnaroundTime+0x11c>)
 8046fbc:	4293      	cmp	r3, r2
 8046fbe:	d906      	bls.n	8046fce <USB_SetTurnaroundTime+0x2a>
 8046fc0:	68bb      	ldr	r3, [r7, #8]
 8046fc2:	4a40      	ldr	r2, [pc, #256]	@ (80470c4 <USB_SetTurnaroundTime+0x120>)
 8046fc4:	4293      	cmp	r3, r2
 8046fc6:	d202      	bcs.n	8046fce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8046fc8:	230f      	movs	r3, #15
 8046fca:	617b      	str	r3, [r7, #20]
 8046fcc:	e062      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8046fce:	68bb      	ldr	r3, [r7, #8]
 8046fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80470c4 <USB_SetTurnaroundTime+0x120>)
 8046fd2:	4293      	cmp	r3, r2
 8046fd4:	d306      	bcc.n	8046fe4 <USB_SetTurnaroundTime+0x40>
 8046fd6:	68bb      	ldr	r3, [r7, #8]
 8046fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80470c8 <USB_SetTurnaroundTime+0x124>)
 8046fda:	4293      	cmp	r3, r2
 8046fdc:	d202      	bcs.n	8046fe4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8046fde:	230e      	movs	r3, #14
 8046fe0:	617b      	str	r3, [r7, #20]
 8046fe2:	e057      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8046fe4:	68bb      	ldr	r3, [r7, #8]
 8046fe6:	4a38      	ldr	r2, [pc, #224]	@ (80470c8 <USB_SetTurnaroundTime+0x124>)
 8046fe8:	4293      	cmp	r3, r2
 8046fea:	d306      	bcc.n	8046ffa <USB_SetTurnaroundTime+0x56>
 8046fec:	68bb      	ldr	r3, [r7, #8]
 8046fee:	4a37      	ldr	r2, [pc, #220]	@ (80470cc <USB_SetTurnaroundTime+0x128>)
 8046ff0:	4293      	cmp	r3, r2
 8046ff2:	d202      	bcs.n	8046ffa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8046ff4:	230d      	movs	r3, #13
 8046ff6:	617b      	str	r3, [r7, #20]
 8046ff8:	e04c      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8046ffa:	68bb      	ldr	r3, [r7, #8]
 8046ffc:	4a33      	ldr	r2, [pc, #204]	@ (80470cc <USB_SetTurnaroundTime+0x128>)
 8046ffe:	4293      	cmp	r3, r2
 8047000:	d306      	bcc.n	8047010 <USB_SetTurnaroundTime+0x6c>
 8047002:	68bb      	ldr	r3, [r7, #8]
 8047004:	4a32      	ldr	r2, [pc, #200]	@ (80470d0 <USB_SetTurnaroundTime+0x12c>)
 8047006:	4293      	cmp	r3, r2
 8047008:	d802      	bhi.n	8047010 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 804700a:	230c      	movs	r3, #12
 804700c:	617b      	str	r3, [r7, #20]
 804700e:	e041      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8047010:	68bb      	ldr	r3, [r7, #8]
 8047012:	4a2f      	ldr	r2, [pc, #188]	@ (80470d0 <USB_SetTurnaroundTime+0x12c>)
 8047014:	4293      	cmp	r3, r2
 8047016:	d906      	bls.n	8047026 <USB_SetTurnaroundTime+0x82>
 8047018:	68bb      	ldr	r3, [r7, #8]
 804701a:	4a2e      	ldr	r2, [pc, #184]	@ (80470d4 <USB_SetTurnaroundTime+0x130>)
 804701c:	4293      	cmp	r3, r2
 804701e:	d802      	bhi.n	8047026 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8047020:	230b      	movs	r3, #11
 8047022:	617b      	str	r3, [r7, #20]
 8047024:	e036      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8047026:	68bb      	ldr	r3, [r7, #8]
 8047028:	4a2a      	ldr	r2, [pc, #168]	@ (80470d4 <USB_SetTurnaroundTime+0x130>)
 804702a:	4293      	cmp	r3, r2
 804702c:	d906      	bls.n	804703c <USB_SetTurnaroundTime+0x98>
 804702e:	68bb      	ldr	r3, [r7, #8]
 8047030:	4a29      	ldr	r2, [pc, #164]	@ (80470d8 <USB_SetTurnaroundTime+0x134>)
 8047032:	4293      	cmp	r3, r2
 8047034:	d802      	bhi.n	804703c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8047036:	230a      	movs	r3, #10
 8047038:	617b      	str	r3, [r7, #20]
 804703a:	e02b      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 804703c:	68bb      	ldr	r3, [r7, #8]
 804703e:	4a26      	ldr	r2, [pc, #152]	@ (80470d8 <USB_SetTurnaroundTime+0x134>)
 8047040:	4293      	cmp	r3, r2
 8047042:	d906      	bls.n	8047052 <USB_SetTurnaroundTime+0xae>
 8047044:	68bb      	ldr	r3, [r7, #8]
 8047046:	4a25      	ldr	r2, [pc, #148]	@ (80470dc <USB_SetTurnaroundTime+0x138>)
 8047048:	4293      	cmp	r3, r2
 804704a:	d202      	bcs.n	8047052 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 804704c:	2309      	movs	r3, #9
 804704e:	617b      	str	r3, [r7, #20]
 8047050:	e020      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8047052:	68bb      	ldr	r3, [r7, #8]
 8047054:	4a21      	ldr	r2, [pc, #132]	@ (80470dc <USB_SetTurnaroundTime+0x138>)
 8047056:	4293      	cmp	r3, r2
 8047058:	d306      	bcc.n	8047068 <USB_SetTurnaroundTime+0xc4>
 804705a:	68bb      	ldr	r3, [r7, #8]
 804705c:	4a20      	ldr	r2, [pc, #128]	@ (80470e0 <USB_SetTurnaroundTime+0x13c>)
 804705e:	4293      	cmp	r3, r2
 8047060:	d802      	bhi.n	8047068 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8047062:	2308      	movs	r3, #8
 8047064:	617b      	str	r3, [r7, #20]
 8047066:	e015      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8047068:	68bb      	ldr	r3, [r7, #8]
 804706a:	4a1d      	ldr	r2, [pc, #116]	@ (80470e0 <USB_SetTurnaroundTime+0x13c>)
 804706c:	4293      	cmp	r3, r2
 804706e:	d906      	bls.n	804707e <USB_SetTurnaroundTime+0xda>
 8047070:	68bb      	ldr	r3, [r7, #8]
 8047072:	4a1c      	ldr	r2, [pc, #112]	@ (80470e4 <USB_SetTurnaroundTime+0x140>)
 8047074:	4293      	cmp	r3, r2
 8047076:	d202      	bcs.n	804707e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8047078:	2307      	movs	r3, #7
 804707a:	617b      	str	r3, [r7, #20]
 804707c:	e00a      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 804707e:	2306      	movs	r3, #6
 8047080:	617b      	str	r3, [r7, #20]
 8047082:	e007      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8047084:	79fb      	ldrb	r3, [r7, #7]
 8047086:	2b00      	cmp	r3, #0
 8047088:	d102      	bne.n	8047090 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 804708a:	2309      	movs	r3, #9
 804708c:	617b      	str	r3, [r7, #20]
 804708e:	e001      	b.n	8047094 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8047090:	2309      	movs	r3, #9
 8047092:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8047094:	68fb      	ldr	r3, [r7, #12]
 8047096:	68db      	ldr	r3, [r3, #12]
 8047098:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 804709c:	68fb      	ldr	r3, [r7, #12]
 804709e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80470a0:	68fb      	ldr	r3, [r7, #12]
 80470a2:	68da      	ldr	r2, [r3, #12]
 80470a4:	697b      	ldr	r3, [r7, #20]
 80470a6:	029b      	lsls	r3, r3, #10
 80470a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80470ac:	431a      	orrs	r2, r3
 80470ae:	68fb      	ldr	r3, [r7, #12]
 80470b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80470b2:	2300      	movs	r3, #0
}
 80470b4:	4618      	mov	r0, r3
 80470b6:	371c      	adds	r7, #28
 80470b8:	46bd      	mov	sp, r7
 80470ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80470be:	4770      	bx	lr
 80470c0:	00d8acbf 	.word	0x00d8acbf
 80470c4:	00e4e1c0 	.word	0x00e4e1c0
 80470c8:	00f42400 	.word	0x00f42400
 80470cc:	01067380 	.word	0x01067380
 80470d0:	011a499f 	.word	0x011a499f
 80470d4:	01312cff 	.word	0x01312cff
 80470d8:	014ca43f 	.word	0x014ca43f
 80470dc:	016e3600 	.word	0x016e3600
 80470e0:	01a6ab1f 	.word	0x01a6ab1f
 80470e4:	01e84800 	.word	0x01e84800

080470e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80470e8:	b480      	push	{r7}
 80470ea:	b083      	sub	sp, #12
 80470ec:	af00      	add	r7, sp, #0
 80470ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80470f0:	687b      	ldr	r3, [r7, #4]
 80470f2:	689b      	ldr	r3, [r3, #8]
 80470f4:	f043 0201 	orr.w	r2, r3, #1
 80470f8:	687b      	ldr	r3, [r7, #4]
 80470fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80470fc:	2300      	movs	r3, #0
}
 80470fe:	4618      	mov	r0, r3
 8047100:	370c      	adds	r7, #12
 8047102:	46bd      	mov	sp, r7
 8047104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047108:	4770      	bx	lr

0804710a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 804710a:	b480      	push	{r7}
 804710c:	b083      	sub	sp, #12
 804710e:	af00      	add	r7, sp, #0
 8047110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8047112:	687b      	ldr	r3, [r7, #4]
 8047114:	689b      	ldr	r3, [r3, #8]
 8047116:	f023 0201 	bic.w	r2, r3, #1
 804711a:	687b      	ldr	r3, [r7, #4]
 804711c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804711e:	2300      	movs	r3, #0
}
 8047120:	4618      	mov	r0, r3
 8047122:	370c      	adds	r7, #12
 8047124:	46bd      	mov	sp, r7
 8047126:	f85d 7b04 	ldr.w	r7, [sp], #4
 804712a:	4770      	bx	lr

0804712c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 804712c:	b580      	push	{r7, lr}
 804712e:	b084      	sub	sp, #16
 8047130:	af00      	add	r7, sp, #0
 8047132:	6078      	str	r0, [r7, #4]
 8047134:	460b      	mov	r3, r1
 8047136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8047138:	2300      	movs	r3, #0
 804713a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 804713c:	687b      	ldr	r3, [r7, #4]
 804713e:	68db      	ldr	r3, [r3, #12]
 8047140:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8047144:	687b      	ldr	r3, [r7, #4]
 8047146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8047148:	78fb      	ldrb	r3, [r7, #3]
 804714a:	2b01      	cmp	r3, #1
 804714c:	d115      	bne.n	804717a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804714e:	687b      	ldr	r3, [r7, #4]
 8047150:	68db      	ldr	r3, [r3, #12]
 8047152:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8047156:	687b      	ldr	r3, [r7, #4]
 8047158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 804715a:	200a      	movs	r0, #10
 804715c:	f7f9 fff0 	bl	8041140 <HAL_Delay>
      ms += 10U;
 8047160:	68fb      	ldr	r3, [r7, #12]
 8047162:	330a      	adds	r3, #10
 8047164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047166:	6878      	ldr	r0, [r7, #4]
 8047168:	f001 f863 	bl	8048232 <USB_GetMode>
 804716c:	4603      	mov	r3, r0
 804716e:	2b01      	cmp	r3, #1
 8047170:	d01e      	beq.n	80471b0 <USB_SetCurrentMode+0x84>
 8047172:	68fb      	ldr	r3, [r7, #12]
 8047174:	2bc7      	cmp	r3, #199	@ 0xc7
 8047176:	d9f0      	bls.n	804715a <USB_SetCurrentMode+0x2e>
 8047178:	e01a      	b.n	80471b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 804717a:	78fb      	ldrb	r3, [r7, #3]
 804717c:	2b00      	cmp	r3, #0
 804717e:	d115      	bne.n	80471ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8047180:	687b      	ldr	r3, [r7, #4]
 8047182:	68db      	ldr	r3, [r3, #12]
 8047184:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8047188:	687b      	ldr	r3, [r7, #4]
 804718a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 804718c:	200a      	movs	r0, #10
 804718e:	f7f9 ffd7 	bl	8041140 <HAL_Delay>
      ms += 10U;
 8047192:	68fb      	ldr	r3, [r7, #12]
 8047194:	330a      	adds	r3, #10
 8047196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8047198:	6878      	ldr	r0, [r7, #4]
 804719a:	f001 f84a 	bl	8048232 <USB_GetMode>
 804719e:	4603      	mov	r3, r0
 80471a0:	2b00      	cmp	r3, #0
 80471a2:	d005      	beq.n	80471b0 <USB_SetCurrentMode+0x84>
 80471a4:	68fb      	ldr	r3, [r7, #12]
 80471a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80471a8:	d9f0      	bls.n	804718c <USB_SetCurrentMode+0x60>
 80471aa:	e001      	b.n	80471b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80471ac:	2301      	movs	r3, #1
 80471ae:	e005      	b.n	80471bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80471b0:	68fb      	ldr	r3, [r7, #12]
 80471b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80471b4:	d101      	bne.n	80471ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80471b6:	2301      	movs	r3, #1
 80471b8:	e000      	b.n	80471bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80471ba:	2300      	movs	r3, #0
}
 80471bc:	4618      	mov	r0, r3
 80471be:	3710      	adds	r7, #16
 80471c0:	46bd      	mov	sp, r7
 80471c2:	bd80      	pop	{r7, pc}

080471c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80471c4:	b084      	sub	sp, #16
 80471c6:	b580      	push	{r7, lr}
 80471c8:	b086      	sub	sp, #24
 80471ca:	af00      	add	r7, sp, #0
 80471cc:	6078      	str	r0, [r7, #4]
 80471ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80471d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80471d6:	2300      	movs	r3, #0
 80471d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80471da:	687b      	ldr	r3, [r7, #4]
 80471dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80471de:	2300      	movs	r3, #0
 80471e0:	613b      	str	r3, [r7, #16]
 80471e2:	e009      	b.n	80471f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80471e4:	687a      	ldr	r2, [r7, #4]
 80471e6:	693b      	ldr	r3, [r7, #16]
 80471e8:	3340      	adds	r3, #64	@ 0x40
 80471ea:	009b      	lsls	r3, r3, #2
 80471ec:	4413      	add	r3, r2
 80471ee:	2200      	movs	r2, #0
 80471f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80471f2:	693b      	ldr	r3, [r7, #16]
 80471f4:	3301      	adds	r3, #1
 80471f6:	613b      	str	r3, [r7, #16]
 80471f8:	693b      	ldr	r3, [r7, #16]
 80471fa:	2b0e      	cmp	r3, #14
 80471fc:	d9f2      	bls.n	80471e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80471fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8047202:	2b00      	cmp	r3, #0
 8047204:	d11c      	bne.n	8047240 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8047206:	68fb      	ldr	r3, [r7, #12]
 8047208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804720c:	685b      	ldr	r3, [r3, #4]
 804720e:	68fa      	ldr	r2, [r7, #12]
 8047210:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8047214:	f043 0302 	orr.w	r3, r3, #2
 8047218:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 804721a:	687b      	ldr	r3, [r7, #4]
 804721c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804721e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8047222:	687b      	ldr	r3, [r7, #4]
 8047224:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8047226:	687b      	ldr	r3, [r7, #4]
 8047228:	681b      	ldr	r3, [r3, #0]
 804722a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 804722e:	687b      	ldr	r3, [r7, #4]
 8047230:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8047232:	687b      	ldr	r3, [r7, #4]
 8047234:	681b      	ldr	r3, [r3, #0]
 8047236:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 804723a:	687b      	ldr	r3, [r7, #4]
 804723c:	601a      	str	r2, [r3, #0]
 804723e:	e005      	b.n	804724c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8047240:	687b      	ldr	r3, [r7, #4]
 8047242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8047244:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8047248:	687b      	ldr	r3, [r7, #4]
 804724a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 804724c:	68fb      	ldr	r3, [r7, #12]
 804724e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8047252:	461a      	mov	r2, r3
 8047254:	2300      	movs	r3, #0
 8047256:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8047258:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 804725c:	2b01      	cmp	r3, #1
 804725e:	d10d      	bne.n	804727c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8047260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8047264:	2b00      	cmp	r3, #0
 8047266:	d104      	bne.n	8047272 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8047268:	2100      	movs	r1, #0
 804726a:	6878      	ldr	r0, [r7, #4]
 804726c:	f000 f968 	bl	8047540 <USB_SetDevSpeed>
 8047270:	e008      	b.n	8047284 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8047272:	2101      	movs	r1, #1
 8047274:	6878      	ldr	r0, [r7, #4]
 8047276:	f000 f963 	bl	8047540 <USB_SetDevSpeed>
 804727a:	e003      	b.n	8047284 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 804727c:	2103      	movs	r1, #3
 804727e:	6878      	ldr	r0, [r7, #4]
 8047280:	f000 f95e 	bl	8047540 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8047284:	2110      	movs	r1, #16
 8047286:	6878      	ldr	r0, [r7, #4]
 8047288:	f000 f8fa 	bl	8047480 <USB_FlushTxFifo>
 804728c:	4603      	mov	r3, r0
 804728e:	2b00      	cmp	r3, #0
 8047290:	d001      	beq.n	8047296 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8047292:	2301      	movs	r3, #1
 8047294:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8047296:	6878      	ldr	r0, [r7, #4]
 8047298:	f000 f924 	bl	80474e4 <USB_FlushRxFifo>
 804729c:	4603      	mov	r3, r0
 804729e:	2b00      	cmp	r3, #0
 80472a0:	d001      	beq.n	80472a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80472a2:	2301      	movs	r3, #1
 80472a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80472a6:	68fb      	ldr	r3, [r7, #12]
 80472a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80472ac:	461a      	mov	r2, r3
 80472ae:	2300      	movs	r3, #0
 80472b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80472b2:	68fb      	ldr	r3, [r7, #12]
 80472b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80472b8:	461a      	mov	r2, r3
 80472ba:	2300      	movs	r3, #0
 80472bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80472be:	68fb      	ldr	r3, [r7, #12]
 80472c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80472c4:	461a      	mov	r2, r3
 80472c6:	2300      	movs	r3, #0
 80472c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80472ca:	2300      	movs	r3, #0
 80472cc:	613b      	str	r3, [r7, #16]
 80472ce:	e043      	b.n	8047358 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80472d0:	693b      	ldr	r3, [r7, #16]
 80472d2:	015a      	lsls	r2, r3, #5
 80472d4:	68fb      	ldr	r3, [r7, #12]
 80472d6:	4413      	add	r3, r2
 80472d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472dc:	681b      	ldr	r3, [r3, #0]
 80472de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80472e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80472e6:	d118      	bne.n	804731a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80472e8:	693b      	ldr	r3, [r7, #16]
 80472ea:	2b00      	cmp	r3, #0
 80472ec:	d10a      	bne.n	8047304 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80472ee:	693b      	ldr	r3, [r7, #16]
 80472f0:	015a      	lsls	r2, r3, #5
 80472f2:	68fb      	ldr	r3, [r7, #12]
 80472f4:	4413      	add	r3, r2
 80472f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80472fa:	461a      	mov	r2, r3
 80472fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8047300:	6013      	str	r3, [r2, #0]
 8047302:	e013      	b.n	804732c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8047304:	693b      	ldr	r3, [r7, #16]
 8047306:	015a      	lsls	r2, r3, #5
 8047308:	68fb      	ldr	r3, [r7, #12]
 804730a:	4413      	add	r3, r2
 804730c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047310:	461a      	mov	r2, r3
 8047312:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8047316:	6013      	str	r3, [r2, #0]
 8047318:	e008      	b.n	804732c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 804731a:	693b      	ldr	r3, [r7, #16]
 804731c:	015a      	lsls	r2, r3, #5
 804731e:	68fb      	ldr	r3, [r7, #12]
 8047320:	4413      	add	r3, r2
 8047322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047326:	461a      	mov	r2, r3
 8047328:	2300      	movs	r3, #0
 804732a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 804732c:	693b      	ldr	r3, [r7, #16]
 804732e:	015a      	lsls	r2, r3, #5
 8047330:	68fb      	ldr	r3, [r7, #12]
 8047332:	4413      	add	r3, r2
 8047334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047338:	461a      	mov	r2, r3
 804733a:	2300      	movs	r3, #0
 804733c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 804733e:	693b      	ldr	r3, [r7, #16]
 8047340:	015a      	lsls	r2, r3, #5
 8047342:	68fb      	ldr	r3, [r7, #12]
 8047344:	4413      	add	r3, r2
 8047346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804734a:	461a      	mov	r2, r3
 804734c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8047350:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047352:	693b      	ldr	r3, [r7, #16]
 8047354:	3301      	adds	r3, #1
 8047356:	613b      	str	r3, [r7, #16]
 8047358:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 804735c:	461a      	mov	r2, r3
 804735e:	693b      	ldr	r3, [r7, #16]
 8047360:	4293      	cmp	r3, r2
 8047362:	d3b5      	bcc.n	80472d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8047364:	2300      	movs	r3, #0
 8047366:	613b      	str	r3, [r7, #16]
 8047368:	e043      	b.n	80473f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 804736a:	693b      	ldr	r3, [r7, #16]
 804736c:	015a      	lsls	r2, r3, #5
 804736e:	68fb      	ldr	r3, [r7, #12]
 8047370:	4413      	add	r3, r2
 8047372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047376:	681b      	ldr	r3, [r3, #0]
 8047378:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 804737c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047380:	d118      	bne.n	80473b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8047382:	693b      	ldr	r3, [r7, #16]
 8047384:	2b00      	cmp	r3, #0
 8047386:	d10a      	bne.n	804739e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8047388:	693b      	ldr	r3, [r7, #16]
 804738a:	015a      	lsls	r2, r3, #5
 804738c:	68fb      	ldr	r3, [r7, #12]
 804738e:	4413      	add	r3, r2
 8047390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047394:	461a      	mov	r2, r3
 8047396:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 804739a:	6013      	str	r3, [r2, #0]
 804739c:	e013      	b.n	80473c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 804739e:	693b      	ldr	r3, [r7, #16]
 80473a0:	015a      	lsls	r2, r3, #5
 80473a2:	68fb      	ldr	r3, [r7, #12]
 80473a4:	4413      	add	r3, r2
 80473a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80473aa:	461a      	mov	r2, r3
 80473ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80473b0:	6013      	str	r3, [r2, #0]
 80473b2:	e008      	b.n	80473c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80473b4:	693b      	ldr	r3, [r7, #16]
 80473b6:	015a      	lsls	r2, r3, #5
 80473b8:	68fb      	ldr	r3, [r7, #12]
 80473ba:	4413      	add	r3, r2
 80473bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80473c0:	461a      	mov	r2, r3
 80473c2:	2300      	movs	r3, #0
 80473c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80473c6:	693b      	ldr	r3, [r7, #16]
 80473c8:	015a      	lsls	r2, r3, #5
 80473ca:	68fb      	ldr	r3, [r7, #12]
 80473cc:	4413      	add	r3, r2
 80473ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80473d2:	461a      	mov	r2, r3
 80473d4:	2300      	movs	r3, #0
 80473d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80473d8:	693b      	ldr	r3, [r7, #16]
 80473da:	015a      	lsls	r2, r3, #5
 80473dc:	68fb      	ldr	r3, [r7, #12]
 80473de:	4413      	add	r3, r2
 80473e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80473e4:	461a      	mov	r2, r3
 80473e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80473ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80473ec:	693b      	ldr	r3, [r7, #16]
 80473ee:	3301      	adds	r3, #1
 80473f0:	613b      	str	r3, [r7, #16]
 80473f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80473f6:	461a      	mov	r2, r3
 80473f8:	693b      	ldr	r3, [r7, #16]
 80473fa:	4293      	cmp	r3, r2
 80473fc:	d3b5      	bcc.n	804736a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80473fe:	68fb      	ldr	r3, [r7, #12]
 8047400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047404:	691b      	ldr	r3, [r3, #16]
 8047406:	68fa      	ldr	r2, [r7, #12]
 8047408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804740c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8047410:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8047412:	687b      	ldr	r3, [r7, #4]
 8047414:	2200      	movs	r2, #0
 8047416:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8047418:	687b      	ldr	r3, [r7, #4]
 804741a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 804741e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8047420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8047424:	2b00      	cmp	r3, #0
 8047426:	d105      	bne.n	8047434 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8047428:	687b      	ldr	r3, [r7, #4]
 804742a:	699b      	ldr	r3, [r3, #24]
 804742c:	f043 0210 	orr.w	r2, r3, #16
 8047430:	687b      	ldr	r3, [r7, #4]
 8047432:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8047434:	687b      	ldr	r3, [r7, #4]
 8047436:	699a      	ldr	r2, [r3, #24]
 8047438:	4b0f      	ldr	r3, [pc, #60]	@ (8047478 <USB_DevInit+0x2b4>)
 804743a:	4313      	orrs	r3, r2
 804743c:	687a      	ldr	r2, [r7, #4]
 804743e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8047440:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8047444:	2b00      	cmp	r3, #0
 8047446:	d005      	beq.n	8047454 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8047448:	687b      	ldr	r3, [r7, #4]
 804744a:	699b      	ldr	r3, [r3, #24]
 804744c:	f043 0208 	orr.w	r2, r3, #8
 8047450:	687b      	ldr	r3, [r7, #4]
 8047452:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8047454:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8047458:	2b01      	cmp	r3, #1
 804745a:	d105      	bne.n	8047468 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 804745c:	687b      	ldr	r3, [r7, #4]
 804745e:	699a      	ldr	r2, [r3, #24]
 8047460:	4b06      	ldr	r3, [pc, #24]	@ (804747c <USB_DevInit+0x2b8>)
 8047462:	4313      	orrs	r3, r2
 8047464:	687a      	ldr	r2, [r7, #4]
 8047466:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8047468:	7dfb      	ldrb	r3, [r7, #23]
}
 804746a:	4618      	mov	r0, r3
 804746c:	3718      	adds	r7, #24
 804746e:	46bd      	mov	sp, r7
 8047470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8047474:	b004      	add	sp, #16
 8047476:	4770      	bx	lr
 8047478:	803c3800 	.word	0x803c3800
 804747c:	40000004 	.word	0x40000004

08047480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8047480:	b480      	push	{r7}
 8047482:	b085      	sub	sp, #20
 8047484:	af00      	add	r7, sp, #0
 8047486:	6078      	str	r0, [r7, #4]
 8047488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804748a:	2300      	movs	r3, #0
 804748c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 804748e:	68fb      	ldr	r3, [r7, #12]
 8047490:	3301      	adds	r3, #1
 8047492:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8047494:	68fb      	ldr	r3, [r7, #12]
 8047496:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804749a:	d901      	bls.n	80474a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 804749c:	2303      	movs	r3, #3
 804749e:	e01b      	b.n	80474d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80474a0:	687b      	ldr	r3, [r7, #4]
 80474a2:	691b      	ldr	r3, [r3, #16]
 80474a4:	2b00      	cmp	r3, #0
 80474a6:	daf2      	bge.n	804748e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80474a8:	2300      	movs	r3, #0
 80474aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80474ac:	683b      	ldr	r3, [r7, #0]
 80474ae:	019b      	lsls	r3, r3, #6
 80474b0:	f043 0220 	orr.w	r2, r3, #32
 80474b4:	687b      	ldr	r3, [r7, #4]
 80474b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80474b8:	68fb      	ldr	r3, [r7, #12]
 80474ba:	3301      	adds	r3, #1
 80474bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80474be:	68fb      	ldr	r3, [r7, #12]
 80474c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80474c4:	d901      	bls.n	80474ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80474c6:	2303      	movs	r3, #3
 80474c8:	e006      	b.n	80474d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80474ca:	687b      	ldr	r3, [r7, #4]
 80474cc:	691b      	ldr	r3, [r3, #16]
 80474ce:	f003 0320 	and.w	r3, r3, #32
 80474d2:	2b20      	cmp	r3, #32
 80474d4:	d0f0      	beq.n	80474b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80474d6:	2300      	movs	r3, #0
}
 80474d8:	4618      	mov	r0, r3
 80474da:	3714      	adds	r7, #20
 80474dc:	46bd      	mov	sp, r7
 80474de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474e2:	4770      	bx	lr

080474e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80474e4:	b480      	push	{r7}
 80474e6:	b085      	sub	sp, #20
 80474e8:	af00      	add	r7, sp, #0
 80474ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80474ec:	2300      	movs	r3, #0
 80474ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80474f0:	68fb      	ldr	r3, [r7, #12]
 80474f2:	3301      	adds	r3, #1
 80474f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80474f6:	68fb      	ldr	r3, [r7, #12]
 80474f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80474fc:	d901      	bls.n	8047502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80474fe:	2303      	movs	r3, #3
 8047500:	e018      	b.n	8047534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8047502:	687b      	ldr	r3, [r7, #4]
 8047504:	691b      	ldr	r3, [r3, #16]
 8047506:	2b00      	cmp	r3, #0
 8047508:	daf2      	bge.n	80474f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 804750a:	2300      	movs	r3, #0
 804750c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 804750e:	687b      	ldr	r3, [r7, #4]
 8047510:	2210      	movs	r2, #16
 8047512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8047514:	68fb      	ldr	r3, [r7, #12]
 8047516:	3301      	adds	r3, #1
 8047518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 804751a:	68fb      	ldr	r3, [r7, #12]
 804751c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8047520:	d901      	bls.n	8047526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8047522:	2303      	movs	r3, #3
 8047524:	e006      	b.n	8047534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8047526:	687b      	ldr	r3, [r7, #4]
 8047528:	691b      	ldr	r3, [r3, #16]
 804752a:	f003 0310 	and.w	r3, r3, #16
 804752e:	2b10      	cmp	r3, #16
 8047530:	d0f0      	beq.n	8047514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8047532:	2300      	movs	r3, #0
}
 8047534:	4618      	mov	r0, r3
 8047536:	3714      	adds	r7, #20
 8047538:	46bd      	mov	sp, r7
 804753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804753e:	4770      	bx	lr

08047540 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8047540:	b480      	push	{r7}
 8047542:	b085      	sub	sp, #20
 8047544:	af00      	add	r7, sp, #0
 8047546:	6078      	str	r0, [r7, #4]
 8047548:	460b      	mov	r3, r1
 804754a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804754c:	687b      	ldr	r3, [r7, #4]
 804754e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8047550:	68fb      	ldr	r3, [r7, #12]
 8047552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047556:	681a      	ldr	r2, [r3, #0]
 8047558:	78fb      	ldrb	r3, [r7, #3]
 804755a:	68f9      	ldr	r1, [r7, #12]
 804755c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047560:	4313      	orrs	r3, r2
 8047562:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8047564:	2300      	movs	r3, #0
}
 8047566:	4618      	mov	r0, r3
 8047568:	3714      	adds	r7, #20
 804756a:	46bd      	mov	sp, r7
 804756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047570:	4770      	bx	lr

08047572 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8047572:	b480      	push	{r7}
 8047574:	b087      	sub	sp, #28
 8047576:	af00      	add	r7, sp, #0
 8047578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804757a:	687b      	ldr	r3, [r7, #4]
 804757c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 804757e:	693b      	ldr	r3, [r7, #16]
 8047580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047584:	689b      	ldr	r3, [r3, #8]
 8047586:	f003 0306 	and.w	r3, r3, #6
 804758a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 804758c:	68fb      	ldr	r3, [r7, #12]
 804758e:	2b00      	cmp	r3, #0
 8047590:	d102      	bne.n	8047598 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8047592:	2300      	movs	r3, #0
 8047594:	75fb      	strb	r3, [r7, #23]
 8047596:	e00a      	b.n	80475ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8047598:	68fb      	ldr	r3, [r7, #12]
 804759a:	2b02      	cmp	r3, #2
 804759c:	d002      	beq.n	80475a4 <USB_GetDevSpeed+0x32>
 804759e:	68fb      	ldr	r3, [r7, #12]
 80475a0:	2b06      	cmp	r3, #6
 80475a2:	d102      	bne.n	80475aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80475a4:	2302      	movs	r3, #2
 80475a6:	75fb      	strb	r3, [r7, #23]
 80475a8:	e001      	b.n	80475ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80475aa:	230f      	movs	r3, #15
 80475ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80475ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80475b0:	4618      	mov	r0, r3
 80475b2:	371c      	adds	r7, #28
 80475b4:	46bd      	mov	sp, r7
 80475b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80475ba:	4770      	bx	lr

080475bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80475bc:	b480      	push	{r7}
 80475be:	b085      	sub	sp, #20
 80475c0:	af00      	add	r7, sp, #0
 80475c2:	6078      	str	r0, [r7, #4]
 80475c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80475c6:	687b      	ldr	r3, [r7, #4]
 80475c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80475ca:	683b      	ldr	r3, [r7, #0]
 80475cc:	781b      	ldrb	r3, [r3, #0]
 80475ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80475d0:	683b      	ldr	r3, [r7, #0]
 80475d2:	785b      	ldrb	r3, [r3, #1]
 80475d4:	2b01      	cmp	r3, #1
 80475d6:	d139      	bne.n	804764c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80475d8:	68fb      	ldr	r3, [r7, #12]
 80475da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80475de:	69da      	ldr	r2, [r3, #28]
 80475e0:	683b      	ldr	r3, [r7, #0]
 80475e2:	781b      	ldrb	r3, [r3, #0]
 80475e4:	f003 030f 	and.w	r3, r3, #15
 80475e8:	2101      	movs	r1, #1
 80475ea:	fa01 f303 	lsl.w	r3, r1, r3
 80475ee:	b29b      	uxth	r3, r3
 80475f0:	68f9      	ldr	r1, [r7, #12]
 80475f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80475f6:	4313      	orrs	r3, r2
 80475f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80475fa:	68bb      	ldr	r3, [r7, #8]
 80475fc:	015a      	lsls	r2, r3, #5
 80475fe:	68fb      	ldr	r3, [r7, #12]
 8047600:	4413      	add	r3, r2
 8047602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047606:	681b      	ldr	r3, [r3, #0]
 8047608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 804760c:	2b00      	cmp	r3, #0
 804760e:	d153      	bne.n	80476b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8047610:	68bb      	ldr	r3, [r7, #8]
 8047612:	015a      	lsls	r2, r3, #5
 8047614:	68fb      	ldr	r3, [r7, #12]
 8047616:	4413      	add	r3, r2
 8047618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804761c:	681a      	ldr	r2, [r3, #0]
 804761e:	683b      	ldr	r3, [r7, #0]
 8047620:	689b      	ldr	r3, [r3, #8]
 8047622:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8047626:	683b      	ldr	r3, [r7, #0]
 8047628:	791b      	ldrb	r3, [r3, #4]
 804762a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 804762c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 804762e:	68bb      	ldr	r3, [r7, #8]
 8047630:	059b      	lsls	r3, r3, #22
 8047632:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8047634:	431a      	orrs	r2, r3
 8047636:	68bb      	ldr	r3, [r7, #8]
 8047638:	0159      	lsls	r1, r3, #5
 804763a:	68fb      	ldr	r3, [r7, #12]
 804763c:	440b      	add	r3, r1
 804763e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047642:	4619      	mov	r1, r3
 8047644:	4b20      	ldr	r3, [pc, #128]	@ (80476c8 <USB_ActivateEndpoint+0x10c>)
 8047646:	4313      	orrs	r3, r2
 8047648:	600b      	str	r3, [r1, #0]
 804764a:	e035      	b.n	80476b8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 804764c:	68fb      	ldr	r3, [r7, #12]
 804764e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047652:	69da      	ldr	r2, [r3, #28]
 8047654:	683b      	ldr	r3, [r7, #0]
 8047656:	781b      	ldrb	r3, [r3, #0]
 8047658:	f003 030f 	and.w	r3, r3, #15
 804765c:	2101      	movs	r1, #1
 804765e:	fa01 f303 	lsl.w	r3, r1, r3
 8047662:	041b      	lsls	r3, r3, #16
 8047664:	68f9      	ldr	r1, [r7, #12]
 8047666:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 804766a:	4313      	orrs	r3, r2
 804766c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 804766e:	68bb      	ldr	r3, [r7, #8]
 8047670:	015a      	lsls	r2, r3, #5
 8047672:	68fb      	ldr	r3, [r7, #12]
 8047674:	4413      	add	r3, r2
 8047676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804767a:	681b      	ldr	r3, [r3, #0]
 804767c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8047680:	2b00      	cmp	r3, #0
 8047682:	d119      	bne.n	80476b8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8047684:	68bb      	ldr	r3, [r7, #8]
 8047686:	015a      	lsls	r2, r3, #5
 8047688:	68fb      	ldr	r3, [r7, #12]
 804768a:	4413      	add	r3, r2
 804768c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047690:	681a      	ldr	r2, [r3, #0]
 8047692:	683b      	ldr	r3, [r7, #0]
 8047694:	689b      	ldr	r3, [r3, #8]
 8047696:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 804769a:	683b      	ldr	r3, [r7, #0]
 804769c:	791b      	ldrb	r3, [r3, #4]
 804769e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80476a0:	430b      	orrs	r3, r1
 80476a2:	431a      	orrs	r2, r3
 80476a4:	68bb      	ldr	r3, [r7, #8]
 80476a6:	0159      	lsls	r1, r3, #5
 80476a8:	68fb      	ldr	r3, [r7, #12]
 80476aa:	440b      	add	r3, r1
 80476ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80476b0:	4619      	mov	r1, r3
 80476b2:	4b05      	ldr	r3, [pc, #20]	@ (80476c8 <USB_ActivateEndpoint+0x10c>)
 80476b4:	4313      	orrs	r3, r2
 80476b6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80476b8:	2300      	movs	r3, #0
}
 80476ba:	4618      	mov	r0, r3
 80476bc:	3714      	adds	r7, #20
 80476be:	46bd      	mov	sp, r7
 80476c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80476c4:	4770      	bx	lr
 80476c6:	bf00      	nop
 80476c8:	10008000 	.word	0x10008000

080476cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80476cc:	b580      	push	{r7, lr}
 80476ce:	b08a      	sub	sp, #40	@ 0x28
 80476d0:	af02      	add	r7, sp, #8
 80476d2:	60f8      	str	r0, [r7, #12]
 80476d4:	60b9      	str	r1, [r7, #8]
 80476d6:	4613      	mov	r3, r2
 80476d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80476da:	68fb      	ldr	r3, [r7, #12]
 80476dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80476de:	68bb      	ldr	r3, [r7, #8]
 80476e0:	781b      	ldrb	r3, [r3, #0]
 80476e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80476e4:	68bb      	ldr	r3, [r7, #8]
 80476e6:	785b      	ldrb	r3, [r3, #1]
 80476e8:	2b01      	cmp	r3, #1
 80476ea:	f040 8185 	bne.w	80479f8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80476ee:	68bb      	ldr	r3, [r7, #8]
 80476f0:	691b      	ldr	r3, [r3, #16]
 80476f2:	2b00      	cmp	r3, #0
 80476f4:	d132      	bne.n	804775c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80476f6:	69bb      	ldr	r3, [r7, #24]
 80476f8:	015a      	lsls	r2, r3, #5
 80476fa:	69fb      	ldr	r3, [r7, #28]
 80476fc:	4413      	add	r3, r2
 80476fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047702:	691a      	ldr	r2, [r3, #16]
 8047704:	69bb      	ldr	r3, [r7, #24]
 8047706:	0159      	lsls	r1, r3, #5
 8047708:	69fb      	ldr	r3, [r7, #28]
 804770a:	440b      	add	r3, r1
 804770c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047710:	4619      	mov	r1, r3
 8047712:	4ba7      	ldr	r3, [pc, #668]	@ (80479b0 <USB_EPStartXfer+0x2e4>)
 8047714:	4013      	ands	r3, r2
 8047716:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8047718:	69bb      	ldr	r3, [r7, #24]
 804771a:	015a      	lsls	r2, r3, #5
 804771c:	69fb      	ldr	r3, [r7, #28]
 804771e:	4413      	add	r3, r2
 8047720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047724:	691b      	ldr	r3, [r3, #16]
 8047726:	69ba      	ldr	r2, [r7, #24]
 8047728:	0151      	lsls	r1, r2, #5
 804772a:	69fa      	ldr	r2, [r7, #28]
 804772c:	440a      	add	r2, r1
 804772e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047732:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047736:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8047738:	69bb      	ldr	r3, [r7, #24]
 804773a:	015a      	lsls	r2, r3, #5
 804773c:	69fb      	ldr	r3, [r7, #28]
 804773e:	4413      	add	r3, r2
 8047740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047744:	691a      	ldr	r2, [r3, #16]
 8047746:	69bb      	ldr	r3, [r7, #24]
 8047748:	0159      	lsls	r1, r3, #5
 804774a:	69fb      	ldr	r3, [r7, #28]
 804774c:	440b      	add	r3, r1
 804774e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047752:	4619      	mov	r1, r3
 8047754:	4b97      	ldr	r3, [pc, #604]	@ (80479b4 <USB_EPStartXfer+0x2e8>)
 8047756:	4013      	ands	r3, r2
 8047758:	610b      	str	r3, [r1, #16]
 804775a:	e097      	b.n	804788c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 804775c:	69bb      	ldr	r3, [r7, #24]
 804775e:	015a      	lsls	r2, r3, #5
 8047760:	69fb      	ldr	r3, [r7, #28]
 8047762:	4413      	add	r3, r2
 8047764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047768:	691a      	ldr	r2, [r3, #16]
 804776a:	69bb      	ldr	r3, [r7, #24]
 804776c:	0159      	lsls	r1, r3, #5
 804776e:	69fb      	ldr	r3, [r7, #28]
 8047770:	440b      	add	r3, r1
 8047772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047776:	4619      	mov	r1, r3
 8047778:	4b8e      	ldr	r3, [pc, #568]	@ (80479b4 <USB_EPStartXfer+0x2e8>)
 804777a:	4013      	ands	r3, r2
 804777c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 804777e:	69bb      	ldr	r3, [r7, #24]
 8047780:	015a      	lsls	r2, r3, #5
 8047782:	69fb      	ldr	r3, [r7, #28]
 8047784:	4413      	add	r3, r2
 8047786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804778a:	691a      	ldr	r2, [r3, #16]
 804778c:	69bb      	ldr	r3, [r7, #24]
 804778e:	0159      	lsls	r1, r3, #5
 8047790:	69fb      	ldr	r3, [r7, #28]
 8047792:	440b      	add	r3, r1
 8047794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047798:	4619      	mov	r1, r3
 804779a:	4b85      	ldr	r3, [pc, #532]	@ (80479b0 <USB_EPStartXfer+0x2e4>)
 804779c:	4013      	ands	r3, r2
 804779e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80477a0:	69bb      	ldr	r3, [r7, #24]
 80477a2:	2b00      	cmp	r3, #0
 80477a4:	d11a      	bne.n	80477dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80477a6:	68bb      	ldr	r3, [r7, #8]
 80477a8:	691a      	ldr	r2, [r3, #16]
 80477aa:	68bb      	ldr	r3, [r7, #8]
 80477ac:	689b      	ldr	r3, [r3, #8]
 80477ae:	429a      	cmp	r2, r3
 80477b0:	d903      	bls.n	80477ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80477b2:	68bb      	ldr	r3, [r7, #8]
 80477b4:	689a      	ldr	r2, [r3, #8]
 80477b6:	68bb      	ldr	r3, [r7, #8]
 80477b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80477ba:	69bb      	ldr	r3, [r7, #24]
 80477bc:	015a      	lsls	r2, r3, #5
 80477be:	69fb      	ldr	r3, [r7, #28]
 80477c0:	4413      	add	r3, r2
 80477c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80477c6:	691b      	ldr	r3, [r3, #16]
 80477c8:	69ba      	ldr	r2, [r7, #24]
 80477ca:	0151      	lsls	r1, r2, #5
 80477cc:	69fa      	ldr	r2, [r7, #28]
 80477ce:	440a      	add	r2, r1
 80477d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80477d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80477d8:	6113      	str	r3, [r2, #16]
 80477da:	e044      	b.n	8047866 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80477dc:	68bb      	ldr	r3, [r7, #8]
 80477de:	691a      	ldr	r2, [r3, #16]
 80477e0:	68bb      	ldr	r3, [r7, #8]
 80477e2:	689b      	ldr	r3, [r3, #8]
 80477e4:	4413      	add	r3, r2
 80477e6:	1e5a      	subs	r2, r3, #1
 80477e8:	68bb      	ldr	r3, [r7, #8]
 80477ea:	689b      	ldr	r3, [r3, #8]
 80477ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80477f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80477f2:	69bb      	ldr	r3, [r7, #24]
 80477f4:	015a      	lsls	r2, r3, #5
 80477f6:	69fb      	ldr	r3, [r7, #28]
 80477f8:	4413      	add	r3, r2
 80477fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80477fe:	691a      	ldr	r2, [r3, #16]
 8047800:	8afb      	ldrh	r3, [r7, #22]
 8047802:	04d9      	lsls	r1, r3, #19
 8047804:	4b6c      	ldr	r3, [pc, #432]	@ (80479b8 <USB_EPStartXfer+0x2ec>)
 8047806:	400b      	ands	r3, r1
 8047808:	69b9      	ldr	r1, [r7, #24]
 804780a:	0148      	lsls	r0, r1, #5
 804780c:	69f9      	ldr	r1, [r7, #28]
 804780e:	4401      	add	r1, r0
 8047810:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047814:	4313      	orrs	r3, r2
 8047816:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8047818:	68bb      	ldr	r3, [r7, #8]
 804781a:	791b      	ldrb	r3, [r3, #4]
 804781c:	2b01      	cmp	r3, #1
 804781e:	d122      	bne.n	8047866 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8047820:	69bb      	ldr	r3, [r7, #24]
 8047822:	015a      	lsls	r2, r3, #5
 8047824:	69fb      	ldr	r3, [r7, #28]
 8047826:	4413      	add	r3, r2
 8047828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804782c:	691b      	ldr	r3, [r3, #16]
 804782e:	69ba      	ldr	r2, [r7, #24]
 8047830:	0151      	lsls	r1, r2, #5
 8047832:	69fa      	ldr	r2, [r7, #28]
 8047834:	440a      	add	r2, r1
 8047836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 804783a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 804783e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8047840:	69bb      	ldr	r3, [r7, #24]
 8047842:	015a      	lsls	r2, r3, #5
 8047844:	69fb      	ldr	r3, [r7, #28]
 8047846:	4413      	add	r3, r2
 8047848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804784c:	691a      	ldr	r2, [r3, #16]
 804784e:	8afb      	ldrh	r3, [r7, #22]
 8047850:	075b      	lsls	r3, r3, #29
 8047852:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8047856:	69b9      	ldr	r1, [r7, #24]
 8047858:	0148      	lsls	r0, r1, #5
 804785a:	69f9      	ldr	r1, [r7, #28]
 804785c:	4401      	add	r1, r0
 804785e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047862:	4313      	orrs	r3, r2
 8047864:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8047866:	69bb      	ldr	r3, [r7, #24]
 8047868:	015a      	lsls	r2, r3, #5
 804786a:	69fb      	ldr	r3, [r7, #28]
 804786c:	4413      	add	r3, r2
 804786e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047872:	691a      	ldr	r2, [r3, #16]
 8047874:	68bb      	ldr	r3, [r7, #8]
 8047876:	691b      	ldr	r3, [r3, #16]
 8047878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804787c:	69b9      	ldr	r1, [r7, #24]
 804787e:	0148      	lsls	r0, r1, #5
 8047880:	69f9      	ldr	r1, [r7, #28]
 8047882:	4401      	add	r1, r0
 8047884:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8047888:	4313      	orrs	r3, r2
 804788a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 804788c:	79fb      	ldrb	r3, [r7, #7]
 804788e:	2b01      	cmp	r3, #1
 8047890:	d14b      	bne.n	804792a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8047892:	68bb      	ldr	r3, [r7, #8]
 8047894:	69db      	ldr	r3, [r3, #28]
 8047896:	2b00      	cmp	r3, #0
 8047898:	d009      	beq.n	80478ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 804789a:	69bb      	ldr	r3, [r7, #24]
 804789c:	015a      	lsls	r2, r3, #5
 804789e:	69fb      	ldr	r3, [r7, #28]
 80478a0:	4413      	add	r3, r2
 80478a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478a6:	461a      	mov	r2, r3
 80478a8:	68bb      	ldr	r3, [r7, #8]
 80478aa:	69db      	ldr	r3, [r3, #28]
 80478ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80478ae:	68bb      	ldr	r3, [r7, #8]
 80478b0:	791b      	ldrb	r3, [r3, #4]
 80478b2:	2b01      	cmp	r3, #1
 80478b4:	d128      	bne.n	8047908 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80478b6:	69fb      	ldr	r3, [r7, #28]
 80478b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80478bc:	689b      	ldr	r3, [r3, #8]
 80478be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80478c2:	2b00      	cmp	r3, #0
 80478c4:	d110      	bne.n	80478e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80478c6:	69bb      	ldr	r3, [r7, #24]
 80478c8:	015a      	lsls	r2, r3, #5
 80478ca:	69fb      	ldr	r3, [r7, #28]
 80478cc:	4413      	add	r3, r2
 80478ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478d2:	681b      	ldr	r3, [r3, #0]
 80478d4:	69ba      	ldr	r2, [r7, #24]
 80478d6:	0151      	lsls	r1, r2, #5
 80478d8:	69fa      	ldr	r2, [r7, #28]
 80478da:	440a      	add	r2, r1
 80478dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80478e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80478e4:	6013      	str	r3, [r2, #0]
 80478e6:	e00f      	b.n	8047908 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80478e8:	69bb      	ldr	r3, [r7, #24]
 80478ea:	015a      	lsls	r2, r3, #5
 80478ec:	69fb      	ldr	r3, [r7, #28]
 80478ee:	4413      	add	r3, r2
 80478f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80478f4:	681b      	ldr	r3, [r3, #0]
 80478f6:	69ba      	ldr	r2, [r7, #24]
 80478f8:	0151      	lsls	r1, r2, #5
 80478fa:	69fa      	ldr	r2, [r7, #28]
 80478fc:	440a      	add	r2, r1
 80478fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047906:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8047908:	69bb      	ldr	r3, [r7, #24]
 804790a:	015a      	lsls	r2, r3, #5
 804790c:	69fb      	ldr	r3, [r7, #28]
 804790e:	4413      	add	r3, r2
 8047910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047914:	681b      	ldr	r3, [r3, #0]
 8047916:	69ba      	ldr	r2, [r7, #24]
 8047918:	0151      	lsls	r1, r2, #5
 804791a:	69fa      	ldr	r2, [r7, #28]
 804791c:	440a      	add	r2, r1
 804791e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047922:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047926:	6013      	str	r3, [r2, #0]
 8047928:	e169      	b.n	8047bfe <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 804792a:	69bb      	ldr	r3, [r7, #24]
 804792c:	015a      	lsls	r2, r3, #5
 804792e:	69fb      	ldr	r3, [r7, #28]
 8047930:	4413      	add	r3, r2
 8047932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047936:	681b      	ldr	r3, [r3, #0]
 8047938:	69ba      	ldr	r2, [r7, #24]
 804793a:	0151      	lsls	r1, r2, #5
 804793c:	69fa      	ldr	r2, [r7, #28]
 804793e:	440a      	add	r2, r1
 8047940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047944:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047948:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 804794a:	68bb      	ldr	r3, [r7, #8]
 804794c:	791b      	ldrb	r3, [r3, #4]
 804794e:	2b01      	cmp	r3, #1
 8047950:	d015      	beq.n	804797e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8047952:	68bb      	ldr	r3, [r7, #8]
 8047954:	691b      	ldr	r3, [r3, #16]
 8047956:	2b00      	cmp	r3, #0
 8047958:	f000 8151 	beq.w	8047bfe <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 804795c:	69fb      	ldr	r3, [r7, #28]
 804795e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8047964:	68bb      	ldr	r3, [r7, #8]
 8047966:	781b      	ldrb	r3, [r3, #0]
 8047968:	f003 030f 	and.w	r3, r3, #15
 804796c:	2101      	movs	r1, #1
 804796e:	fa01 f303 	lsl.w	r3, r1, r3
 8047972:	69f9      	ldr	r1, [r7, #28]
 8047974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8047978:	4313      	orrs	r3, r2
 804797a:	634b      	str	r3, [r1, #52]	@ 0x34
 804797c:	e13f      	b.n	8047bfe <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 804797e:	69fb      	ldr	r3, [r7, #28]
 8047980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047984:	689b      	ldr	r3, [r3, #8]
 8047986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804798a:	2b00      	cmp	r3, #0
 804798c:	d116      	bne.n	80479bc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 804798e:	69bb      	ldr	r3, [r7, #24]
 8047990:	015a      	lsls	r2, r3, #5
 8047992:	69fb      	ldr	r3, [r7, #28]
 8047994:	4413      	add	r3, r2
 8047996:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804799a:	681b      	ldr	r3, [r3, #0]
 804799c:	69ba      	ldr	r2, [r7, #24]
 804799e:	0151      	lsls	r1, r2, #5
 80479a0:	69fa      	ldr	r2, [r7, #28]
 80479a2:	440a      	add	r2, r1
 80479a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80479a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80479ac:	6013      	str	r3, [r2, #0]
 80479ae:	e015      	b.n	80479dc <USB_EPStartXfer+0x310>
 80479b0:	e007ffff 	.word	0xe007ffff
 80479b4:	fff80000 	.word	0xfff80000
 80479b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80479bc:	69bb      	ldr	r3, [r7, #24]
 80479be:	015a      	lsls	r2, r3, #5
 80479c0:	69fb      	ldr	r3, [r7, #28]
 80479c2:	4413      	add	r3, r2
 80479c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80479c8:	681b      	ldr	r3, [r3, #0]
 80479ca:	69ba      	ldr	r2, [r7, #24]
 80479cc:	0151      	lsls	r1, r2, #5
 80479ce:	69fa      	ldr	r2, [r7, #28]
 80479d0:	440a      	add	r2, r1
 80479d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80479d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80479da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80479dc:	68bb      	ldr	r3, [r7, #8]
 80479de:	68d9      	ldr	r1, [r3, #12]
 80479e0:	68bb      	ldr	r3, [r7, #8]
 80479e2:	781a      	ldrb	r2, [r3, #0]
 80479e4:	68bb      	ldr	r3, [r7, #8]
 80479e6:	691b      	ldr	r3, [r3, #16]
 80479e8:	b298      	uxth	r0, r3
 80479ea:	79fb      	ldrb	r3, [r7, #7]
 80479ec:	9300      	str	r3, [sp, #0]
 80479ee:	4603      	mov	r3, r0
 80479f0:	68f8      	ldr	r0, [r7, #12]
 80479f2:	f000 f9b9 	bl	8047d68 <USB_WritePacket>
 80479f6:	e102      	b.n	8047bfe <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80479f8:	69bb      	ldr	r3, [r7, #24]
 80479fa:	015a      	lsls	r2, r3, #5
 80479fc:	69fb      	ldr	r3, [r7, #28]
 80479fe:	4413      	add	r3, r2
 8047a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a04:	691a      	ldr	r2, [r3, #16]
 8047a06:	69bb      	ldr	r3, [r7, #24]
 8047a08:	0159      	lsls	r1, r3, #5
 8047a0a:	69fb      	ldr	r3, [r7, #28]
 8047a0c:	440b      	add	r3, r1
 8047a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a12:	4619      	mov	r1, r3
 8047a14:	4b7c      	ldr	r3, [pc, #496]	@ (8047c08 <USB_EPStartXfer+0x53c>)
 8047a16:	4013      	ands	r3, r2
 8047a18:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8047a1a:	69bb      	ldr	r3, [r7, #24]
 8047a1c:	015a      	lsls	r2, r3, #5
 8047a1e:	69fb      	ldr	r3, [r7, #28]
 8047a20:	4413      	add	r3, r2
 8047a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a26:	691a      	ldr	r2, [r3, #16]
 8047a28:	69bb      	ldr	r3, [r7, #24]
 8047a2a:	0159      	lsls	r1, r3, #5
 8047a2c:	69fb      	ldr	r3, [r7, #28]
 8047a2e:	440b      	add	r3, r1
 8047a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a34:	4619      	mov	r1, r3
 8047a36:	4b75      	ldr	r3, [pc, #468]	@ (8047c0c <USB_EPStartXfer+0x540>)
 8047a38:	4013      	ands	r3, r2
 8047a3a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8047a3c:	69bb      	ldr	r3, [r7, #24]
 8047a3e:	2b00      	cmp	r3, #0
 8047a40:	d12f      	bne.n	8047aa2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8047a42:	68bb      	ldr	r3, [r7, #8]
 8047a44:	691b      	ldr	r3, [r3, #16]
 8047a46:	2b00      	cmp	r3, #0
 8047a48:	d003      	beq.n	8047a52 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8047a4a:	68bb      	ldr	r3, [r7, #8]
 8047a4c:	689a      	ldr	r2, [r3, #8]
 8047a4e:	68bb      	ldr	r3, [r7, #8]
 8047a50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8047a52:	68bb      	ldr	r3, [r7, #8]
 8047a54:	689a      	ldr	r2, [r3, #8]
 8047a56:	68bb      	ldr	r3, [r7, #8]
 8047a58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8047a5a:	69bb      	ldr	r3, [r7, #24]
 8047a5c:	015a      	lsls	r2, r3, #5
 8047a5e:	69fb      	ldr	r3, [r7, #28]
 8047a60:	4413      	add	r3, r2
 8047a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a66:	691a      	ldr	r2, [r3, #16]
 8047a68:	68bb      	ldr	r3, [r7, #8]
 8047a6a:	6a1b      	ldr	r3, [r3, #32]
 8047a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a70:	69b9      	ldr	r1, [r7, #24]
 8047a72:	0148      	lsls	r0, r1, #5
 8047a74:	69f9      	ldr	r1, [r7, #28]
 8047a76:	4401      	add	r1, r0
 8047a78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047a7c:	4313      	orrs	r3, r2
 8047a7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047a80:	69bb      	ldr	r3, [r7, #24]
 8047a82:	015a      	lsls	r2, r3, #5
 8047a84:	69fb      	ldr	r3, [r7, #28]
 8047a86:	4413      	add	r3, r2
 8047a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047a8c:	691b      	ldr	r3, [r3, #16]
 8047a8e:	69ba      	ldr	r2, [r7, #24]
 8047a90:	0151      	lsls	r1, r2, #5
 8047a92:	69fa      	ldr	r2, [r7, #28]
 8047a94:	440a      	add	r2, r1
 8047a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047a9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047a9e:	6113      	str	r3, [r2, #16]
 8047aa0:	e05f      	b.n	8047b62 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8047aa2:	68bb      	ldr	r3, [r7, #8]
 8047aa4:	691b      	ldr	r3, [r3, #16]
 8047aa6:	2b00      	cmp	r3, #0
 8047aa8:	d123      	bne.n	8047af2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8047aaa:	69bb      	ldr	r3, [r7, #24]
 8047aac:	015a      	lsls	r2, r3, #5
 8047aae:	69fb      	ldr	r3, [r7, #28]
 8047ab0:	4413      	add	r3, r2
 8047ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ab6:	691a      	ldr	r2, [r3, #16]
 8047ab8:	68bb      	ldr	r3, [r7, #8]
 8047aba:	689b      	ldr	r3, [r3, #8]
 8047abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047ac0:	69b9      	ldr	r1, [r7, #24]
 8047ac2:	0148      	lsls	r0, r1, #5
 8047ac4:	69f9      	ldr	r1, [r7, #28]
 8047ac6:	4401      	add	r1, r0
 8047ac8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047acc:	4313      	orrs	r3, r2
 8047ace:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8047ad0:	69bb      	ldr	r3, [r7, #24]
 8047ad2:	015a      	lsls	r2, r3, #5
 8047ad4:	69fb      	ldr	r3, [r7, #28]
 8047ad6:	4413      	add	r3, r2
 8047ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047adc:	691b      	ldr	r3, [r3, #16]
 8047ade:	69ba      	ldr	r2, [r7, #24]
 8047ae0:	0151      	lsls	r1, r2, #5
 8047ae2:	69fa      	ldr	r2, [r7, #28]
 8047ae4:	440a      	add	r2, r1
 8047ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047aea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8047aee:	6113      	str	r3, [r2, #16]
 8047af0:	e037      	b.n	8047b62 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8047af2:	68bb      	ldr	r3, [r7, #8]
 8047af4:	691a      	ldr	r2, [r3, #16]
 8047af6:	68bb      	ldr	r3, [r7, #8]
 8047af8:	689b      	ldr	r3, [r3, #8]
 8047afa:	4413      	add	r3, r2
 8047afc:	1e5a      	subs	r2, r3, #1
 8047afe:	68bb      	ldr	r3, [r7, #8]
 8047b00:	689b      	ldr	r3, [r3, #8]
 8047b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8047b06:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8047b08:	68bb      	ldr	r3, [r7, #8]
 8047b0a:	689b      	ldr	r3, [r3, #8]
 8047b0c:	8afa      	ldrh	r2, [r7, #22]
 8047b0e:	fb03 f202 	mul.w	r2, r3, r2
 8047b12:	68bb      	ldr	r3, [r7, #8]
 8047b14:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8047b16:	69bb      	ldr	r3, [r7, #24]
 8047b18:	015a      	lsls	r2, r3, #5
 8047b1a:	69fb      	ldr	r3, [r7, #28]
 8047b1c:	4413      	add	r3, r2
 8047b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b22:	691a      	ldr	r2, [r3, #16]
 8047b24:	8afb      	ldrh	r3, [r7, #22]
 8047b26:	04d9      	lsls	r1, r3, #19
 8047b28:	4b39      	ldr	r3, [pc, #228]	@ (8047c10 <USB_EPStartXfer+0x544>)
 8047b2a:	400b      	ands	r3, r1
 8047b2c:	69b9      	ldr	r1, [r7, #24]
 8047b2e:	0148      	lsls	r0, r1, #5
 8047b30:	69f9      	ldr	r1, [r7, #28]
 8047b32:	4401      	add	r1, r0
 8047b34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047b38:	4313      	orrs	r3, r2
 8047b3a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8047b3c:	69bb      	ldr	r3, [r7, #24]
 8047b3e:	015a      	lsls	r2, r3, #5
 8047b40:	69fb      	ldr	r3, [r7, #28]
 8047b42:	4413      	add	r3, r2
 8047b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b48:	691a      	ldr	r2, [r3, #16]
 8047b4a:	68bb      	ldr	r3, [r7, #8]
 8047b4c:	6a1b      	ldr	r3, [r3, #32]
 8047b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b52:	69b9      	ldr	r1, [r7, #24]
 8047b54:	0148      	lsls	r0, r1, #5
 8047b56:	69f9      	ldr	r1, [r7, #28]
 8047b58:	4401      	add	r1, r0
 8047b5a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8047b5e:	4313      	orrs	r3, r2
 8047b60:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8047b62:	79fb      	ldrb	r3, [r7, #7]
 8047b64:	2b01      	cmp	r3, #1
 8047b66:	d10d      	bne.n	8047b84 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8047b68:	68bb      	ldr	r3, [r7, #8]
 8047b6a:	68db      	ldr	r3, [r3, #12]
 8047b6c:	2b00      	cmp	r3, #0
 8047b6e:	d009      	beq.n	8047b84 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8047b70:	68bb      	ldr	r3, [r7, #8]
 8047b72:	68d9      	ldr	r1, [r3, #12]
 8047b74:	69bb      	ldr	r3, [r7, #24]
 8047b76:	015a      	lsls	r2, r3, #5
 8047b78:	69fb      	ldr	r3, [r7, #28]
 8047b7a:	4413      	add	r3, r2
 8047b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047b80:	460a      	mov	r2, r1
 8047b82:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8047b84:	68bb      	ldr	r3, [r7, #8]
 8047b86:	791b      	ldrb	r3, [r3, #4]
 8047b88:	2b01      	cmp	r3, #1
 8047b8a:	d128      	bne.n	8047bde <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8047b8c:	69fb      	ldr	r3, [r7, #28]
 8047b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8047b92:	689b      	ldr	r3, [r3, #8]
 8047b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8047b98:	2b00      	cmp	r3, #0
 8047b9a:	d110      	bne.n	8047bbe <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8047b9c:	69bb      	ldr	r3, [r7, #24]
 8047b9e:	015a      	lsls	r2, r3, #5
 8047ba0:	69fb      	ldr	r3, [r7, #28]
 8047ba2:	4413      	add	r3, r2
 8047ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047ba8:	681b      	ldr	r3, [r3, #0]
 8047baa:	69ba      	ldr	r2, [r7, #24]
 8047bac:	0151      	lsls	r1, r2, #5
 8047bae:	69fa      	ldr	r2, [r7, #28]
 8047bb0:	440a      	add	r2, r1
 8047bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047bb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8047bba:	6013      	str	r3, [r2, #0]
 8047bbc:	e00f      	b.n	8047bde <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8047bbe:	69bb      	ldr	r3, [r7, #24]
 8047bc0:	015a      	lsls	r2, r3, #5
 8047bc2:	69fb      	ldr	r3, [r7, #28]
 8047bc4:	4413      	add	r3, r2
 8047bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047bca:	681b      	ldr	r3, [r3, #0]
 8047bcc:	69ba      	ldr	r2, [r7, #24]
 8047bce:	0151      	lsls	r1, r2, #5
 8047bd0:	69fa      	ldr	r2, [r7, #28]
 8047bd2:	440a      	add	r2, r1
 8047bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047bdc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8047bde:	69bb      	ldr	r3, [r7, #24]
 8047be0:	015a      	lsls	r2, r3, #5
 8047be2:	69fb      	ldr	r3, [r7, #28]
 8047be4:	4413      	add	r3, r2
 8047be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047bea:	681b      	ldr	r3, [r3, #0]
 8047bec:	69ba      	ldr	r2, [r7, #24]
 8047bee:	0151      	lsls	r1, r2, #5
 8047bf0:	69fa      	ldr	r2, [r7, #28]
 8047bf2:	440a      	add	r2, r1
 8047bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047bf8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8047bfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8047bfe:	2300      	movs	r3, #0
}
 8047c00:	4618      	mov	r0, r3
 8047c02:	3720      	adds	r7, #32
 8047c04:	46bd      	mov	sp, r7
 8047c06:	bd80      	pop	{r7, pc}
 8047c08:	fff80000 	.word	0xfff80000
 8047c0c:	e007ffff 	.word	0xe007ffff
 8047c10:	1ff80000 	.word	0x1ff80000

08047c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8047c14:	b480      	push	{r7}
 8047c16:	b087      	sub	sp, #28
 8047c18:	af00      	add	r7, sp, #0
 8047c1a:	6078      	str	r0, [r7, #4]
 8047c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8047c1e:	2300      	movs	r3, #0
 8047c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8047c22:	2300      	movs	r3, #0
 8047c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047c26:	687b      	ldr	r3, [r7, #4]
 8047c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8047c2a:	683b      	ldr	r3, [r7, #0]
 8047c2c:	785b      	ldrb	r3, [r3, #1]
 8047c2e:	2b01      	cmp	r3, #1
 8047c30:	d14a      	bne.n	8047cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8047c32:	683b      	ldr	r3, [r7, #0]
 8047c34:	781b      	ldrb	r3, [r3, #0]
 8047c36:	015a      	lsls	r2, r3, #5
 8047c38:	693b      	ldr	r3, [r7, #16]
 8047c3a:	4413      	add	r3, r2
 8047c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c40:	681b      	ldr	r3, [r3, #0]
 8047c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047c4a:	f040 8086 	bne.w	8047d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8047c4e:	683b      	ldr	r3, [r7, #0]
 8047c50:	781b      	ldrb	r3, [r3, #0]
 8047c52:	015a      	lsls	r2, r3, #5
 8047c54:	693b      	ldr	r3, [r7, #16]
 8047c56:	4413      	add	r3, r2
 8047c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c5c:	681b      	ldr	r3, [r3, #0]
 8047c5e:	683a      	ldr	r2, [r7, #0]
 8047c60:	7812      	ldrb	r2, [r2, #0]
 8047c62:	0151      	lsls	r1, r2, #5
 8047c64:	693a      	ldr	r2, [r7, #16]
 8047c66:	440a      	add	r2, r1
 8047c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047c6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8047c72:	683b      	ldr	r3, [r7, #0]
 8047c74:	781b      	ldrb	r3, [r3, #0]
 8047c76:	015a      	lsls	r2, r3, #5
 8047c78:	693b      	ldr	r3, [r7, #16]
 8047c7a:	4413      	add	r3, r2
 8047c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047c80:	681b      	ldr	r3, [r3, #0]
 8047c82:	683a      	ldr	r2, [r7, #0]
 8047c84:	7812      	ldrb	r2, [r2, #0]
 8047c86:	0151      	lsls	r1, r2, #5
 8047c88:	693a      	ldr	r2, [r7, #16]
 8047c8a:	440a      	add	r2, r1
 8047c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047c90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047c96:	68fb      	ldr	r3, [r7, #12]
 8047c98:	3301      	adds	r3, #1
 8047c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047c9c:	68fb      	ldr	r3, [r7, #12]
 8047c9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047ca2:	4293      	cmp	r3, r2
 8047ca4:	d902      	bls.n	8047cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8047ca6:	2301      	movs	r3, #1
 8047ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8047caa:	e056      	b.n	8047d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8047cac:	683b      	ldr	r3, [r7, #0]
 8047cae:	781b      	ldrb	r3, [r3, #0]
 8047cb0:	015a      	lsls	r2, r3, #5
 8047cb2:	693b      	ldr	r3, [r7, #16]
 8047cb4:	4413      	add	r3, r2
 8047cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047cba:	681b      	ldr	r3, [r3, #0]
 8047cbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047cc4:	d0e7      	beq.n	8047c96 <USB_EPStopXfer+0x82>
 8047cc6:	e048      	b.n	8047d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8047cc8:	683b      	ldr	r3, [r7, #0]
 8047cca:	781b      	ldrb	r3, [r3, #0]
 8047ccc:	015a      	lsls	r2, r3, #5
 8047cce:	693b      	ldr	r3, [r7, #16]
 8047cd0:	4413      	add	r3, r2
 8047cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cd6:	681b      	ldr	r3, [r3, #0]
 8047cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047ce0:	d13b      	bne.n	8047d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8047ce2:	683b      	ldr	r3, [r7, #0]
 8047ce4:	781b      	ldrb	r3, [r3, #0]
 8047ce6:	015a      	lsls	r2, r3, #5
 8047ce8:	693b      	ldr	r3, [r7, #16]
 8047cea:	4413      	add	r3, r2
 8047cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047cf0:	681b      	ldr	r3, [r3, #0]
 8047cf2:	683a      	ldr	r2, [r7, #0]
 8047cf4:	7812      	ldrb	r2, [r2, #0]
 8047cf6:	0151      	lsls	r1, r2, #5
 8047cf8:	693a      	ldr	r2, [r7, #16]
 8047cfa:	440a      	add	r2, r1
 8047cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047d00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8047d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8047d06:	683b      	ldr	r3, [r7, #0]
 8047d08:	781b      	ldrb	r3, [r3, #0]
 8047d0a:	015a      	lsls	r2, r3, #5
 8047d0c:	693b      	ldr	r3, [r7, #16]
 8047d0e:	4413      	add	r3, r2
 8047d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d14:	681b      	ldr	r3, [r3, #0]
 8047d16:	683a      	ldr	r2, [r7, #0]
 8047d18:	7812      	ldrb	r2, [r2, #0]
 8047d1a:	0151      	lsls	r1, r2, #5
 8047d1c:	693a      	ldr	r2, [r7, #16]
 8047d1e:	440a      	add	r2, r1
 8047d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047d24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8047d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8047d2a:	68fb      	ldr	r3, [r7, #12]
 8047d2c:	3301      	adds	r3, #1
 8047d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8047d30:	68fb      	ldr	r3, [r7, #12]
 8047d32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8047d36:	4293      	cmp	r3, r2
 8047d38:	d902      	bls.n	8047d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8047d3a:	2301      	movs	r3, #1
 8047d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8047d3e:	e00c      	b.n	8047d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8047d40:	683b      	ldr	r3, [r7, #0]
 8047d42:	781b      	ldrb	r3, [r3, #0]
 8047d44:	015a      	lsls	r2, r3, #5
 8047d46:	693b      	ldr	r3, [r7, #16]
 8047d48:	4413      	add	r3, r2
 8047d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047d4e:	681b      	ldr	r3, [r3, #0]
 8047d50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8047d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8047d58:	d0e7      	beq.n	8047d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8047d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8047d5c:	4618      	mov	r0, r3
 8047d5e:	371c      	adds	r7, #28
 8047d60:	46bd      	mov	sp, r7
 8047d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047d66:	4770      	bx	lr

08047d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8047d68:	b480      	push	{r7}
 8047d6a:	b089      	sub	sp, #36	@ 0x24
 8047d6c:	af00      	add	r7, sp, #0
 8047d6e:	60f8      	str	r0, [r7, #12]
 8047d70:	60b9      	str	r1, [r7, #8]
 8047d72:	4611      	mov	r1, r2
 8047d74:	461a      	mov	r2, r3
 8047d76:	460b      	mov	r3, r1
 8047d78:	71fb      	strb	r3, [r7, #7]
 8047d7a:	4613      	mov	r3, r2
 8047d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047d7e:	68fb      	ldr	r3, [r7, #12]
 8047d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8047d82:	68bb      	ldr	r3, [r7, #8]
 8047d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8047d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8047d8a:	2b00      	cmp	r3, #0
 8047d8c:	d123      	bne.n	8047dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8047d8e:	88bb      	ldrh	r3, [r7, #4]
 8047d90:	3303      	adds	r3, #3
 8047d92:	089b      	lsrs	r3, r3, #2
 8047d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8047d96:	2300      	movs	r3, #0
 8047d98:	61bb      	str	r3, [r7, #24]
 8047d9a:	e018      	b.n	8047dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8047d9c:	79fb      	ldrb	r3, [r7, #7]
 8047d9e:	031a      	lsls	r2, r3, #12
 8047da0:	697b      	ldr	r3, [r7, #20]
 8047da2:	4413      	add	r3, r2
 8047da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047da8:	461a      	mov	r2, r3
 8047daa:	69fb      	ldr	r3, [r7, #28]
 8047dac:	681b      	ldr	r3, [r3, #0]
 8047dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8047db0:	69fb      	ldr	r3, [r7, #28]
 8047db2:	3301      	adds	r3, #1
 8047db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047db6:	69fb      	ldr	r3, [r7, #28]
 8047db8:	3301      	adds	r3, #1
 8047dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047dbc:	69fb      	ldr	r3, [r7, #28]
 8047dbe:	3301      	adds	r3, #1
 8047dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8047dc2:	69fb      	ldr	r3, [r7, #28]
 8047dc4:	3301      	adds	r3, #1
 8047dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8047dc8:	69bb      	ldr	r3, [r7, #24]
 8047dca:	3301      	adds	r3, #1
 8047dcc:	61bb      	str	r3, [r7, #24]
 8047dce:	69ba      	ldr	r2, [r7, #24]
 8047dd0:	693b      	ldr	r3, [r7, #16]
 8047dd2:	429a      	cmp	r2, r3
 8047dd4:	d3e2      	bcc.n	8047d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8047dd6:	2300      	movs	r3, #0
}
 8047dd8:	4618      	mov	r0, r3
 8047dda:	3724      	adds	r7, #36	@ 0x24
 8047ddc:	46bd      	mov	sp, r7
 8047dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047de2:	4770      	bx	lr

08047de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8047de4:	b480      	push	{r7}
 8047de6:	b08b      	sub	sp, #44	@ 0x2c
 8047de8:	af00      	add	r7, sp, #0
 8047dea:	60f8      	str	r0, [r7, #12]
 8047dec:	60b9      	str	r1, [r7, #8]
 8047dee:	4613      	mov	r3, r2
 8047df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047df2:	68fb      	ldr	r3, [r7, #12]
 8047df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8047df6:	68bb      	ldr	r3, [r7, #8]
 8047df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8047dfa:	88fb      	ldrh	r3, [r7, #6]
 8047dfc:	089b      	lsrs	r3, r3, #2
 8047dfe:	b29b      	uxth	r3, r3
 8047e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8047e02:	88fb      	ldrh	r3, [r7, #6]
 8047e04:	f003 0303 	and.w	r3, r3, #3
 8047e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8047e0a:	2300      	movs	r3, #0
 8047e0c:	623b      	str	r3, [r7, #32]
 8047e0e:	e014      	b.n	8047e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8047e10:	69bb      	ldr	r3, [r7, #24]
 8047e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047e16:	681a      	ldr	r2, [r3, #0]
 8047e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8047e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e1e:	3301      	adds	r3, #1
 8047e20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e24:	3301      	adds	r3, #1
 8047e26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e2a:	3301      	adds	r3, #1
 8047e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8047e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e30:	3301      	adds	r3, #1
 8047e32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8047e34:	6a3b      	ldr	r3, [r7, #32]
 8047e36:	3301      	adds	r3, #1
 8047e38:	623b      	str	r3, [r7, #32]
 8047e3a:	6a3a      	ldr	r2, [r7, #32]
 8047e3c:	697b      	ldr	r3, [r7, #20]
 8047e3e:	429a      	cmp	r2, r3
 8047e40:	d3e6      	bcc.n	8047e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8047e42:	8bfb      	ldrh	r3, [r7, #30]
 8047e44:	2b00      	cmp	r3, #0
 8047e46:	d01e      	beq.n	8047e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8047e48:	2300      	movs	r3, #0
 8047e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8047e4c:	69bb      	ldr	r3, [r7, #24]
 8047e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8047e52:	461a      	mov	r2, r3
 8047e54:	f107 0310 	add.w	r3, r7, #16
 8047e58:	6812      	ldr	r2, [r2, #0]
 8047e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8047e5c:	693a      	ldr	r2, [r7, #16]
 8047e5e:	6a3b      	ldr	r3, [r7, #32]
 8047e60:	b2db      	uxtb	r3, r3
 8047e62:	00db      	lsls	r3, r3, #3
 8047e64:	fa22 f303 	lsr.w	r3, r2, r3
 8047e68:	b2da      	uxtb	r2, r3
 8047e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8047e6e:	6a3b      	ldr	r3, [r7, #32]
 8047e70:	3301      	adds	r3, #1
 8047e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8047e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8047e76:	3301      	adds	r3, #1
 8047e78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8047e7a:	8bfb      	ldrh	r3, [r7, #30]
 8047e7c:	3b01      	subs	r3, #1
 8047e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8047e80:	8bfb      	ldrh	r3, [r7, #30]
 8047e82:	2b00      	cmp	r3, #0
 8047e84:	d1ea      	bne.n	8047e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8047e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8047e88:	4618      	mov	r0, r3
 8047e8a:	372c      	adds	r7, #44	@ 0x2c
 8047e8c:	46bd      	mov	sp, r7
 8047e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047e92:	4770      	bx	lr

08047e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8047e94:	b480      	push	{r7}
 8047e96:	b085      	sub	sp, #20
 8047e98:	af00      	add	r7, sp, #0
 8047e9a:	6078      	str	r0, [r7, #4]
 8047e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047e9e:	687b      	ldr	r3, [r7, #4]
 8047ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8047ea2:	683b      	ldr	r3, [r7, #0]
 8047ea4:	781b      	ldrb	r3, [r3, #0]
 8047ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8047ea8:	683b      	ldr	r3, [r7, #0]
 8047eaa:	785b      	ldrb	r3, [r3, #1]
 8047eac:	2b01      	cmp	r3, #1
 8047eae:	d12c      	bne.n	8047f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8047eb0:	68bb      	ldr	r3, [r7, #8]
 8047eb2:	015a      	lsls	r2, r3, #5
 8047eb4:	68fb      	ldr	r3, [r7, #12]
 8047eb6:	4413      	add	r3, r2
 8047eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ebc:	681b      	ldr	r3, [r3, #0]
 8047ebe:	2b00      	cmp	r3, #0
 8047ec0:	db12      	blt.n	8047ee8 <USB_EPSetStall+0x54>
 8047ec2:	68bb      	ldr	r3, [r7, #8]
 8047ec4:	2b00      	cmp	r3, #0
 8047ec6:	d00f      	beq.n	8047ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8047ec8:	68bb      	ldr	r3, [r7, #8]
 8047eca:	015a      	lsls	r2, r3, #5
 8047ecc:	68fb      	ldr	r3, [r7, #12]
 8047ece:	4413      	add	r3, r2
 8047ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ed4:	681b      	ldr	r3, [r3, #0]
 8047ed6:	68ba      	ldr	r2, [r7, #8]
 8047ed8:	0151      	lsls	r1, r2, #5
 8047eda:	68fa      	ldr	r2, [r7, #12]
 8047edc:	440a      	add	r2, r1
 8047ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047ee2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8047ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8047ee8:	68bb      	ldr	r3, [r7, #8]
 8047eea:	015a      	lsls	r2, r3, #5
 8047eec:	68fb      	ldr	r3, [r7, #12]
 8047eee:	4413      	add	r3, r2
 8047ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047ef4:	681b      	ldr	r3, [r3, #0]
 8047ef6:	68ba      	ldr	r2, [r7, #8]
 8047ef8:	0151      	lsls	r1, r2, #5
 8047efa:	68fa      	ldr	r2, [r7, #12]
 8047efc:	440a      	add	r2, r1
 8047efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047f02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8047f06:	6013      	str	r3, [r2, #0]
 8047f08:	e02b      	b.n	8047f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8047f0a:	68bb      	ldr	r3, [r7, #8]
 8047f0c:	015a      	lsls	r2, r3, #5
 8047f0e:	68fb      	ldr	r3, [r7, #12]
 8047f10:	4413      	add	r3, r2
 8047f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047f16:	681b      	ldr	r3, [r3, #0]
 8047f18:	2b00      	cmp	r3, #0
 8047f1a:	db12      	blt.n	8047f42 <USB_EPSetStall+0xae>
 8047f1c:	68bb      	ldr	r3, [r7, #8]
 8047f1e:	2b00      	cmp	r3, #0
 8047f20:	d00f      	beq.n	8047f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8047f22:	68bb      	ldr	r3, [r7, #8]
 8047f24:	015a      	lsls	r2, r3, #5
 8047f26:	68fb      	ldr	r3, [r7, #12]
 8047f28:	4413      	add	r3, r2
 8047f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047f2e:	681b      	ldr	r3, [r3, #0]
 8047f30:	68ba      	ldr	r2, [r7, #8]
 8047f32:	0151      	lsls	r1, r2, #5
 8047f34:	68fa      	ldr	r2, [r7, #12]
 8047f36:	440a      	add	r2, r1
 8047f38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047f3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8047f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8047f42:	68bb      	ldr	r3, [r7, #8]
 8047f44:	015a      	lsls	r2, r3, #5
 8047f46:	68fb      	ldr	r3, [r7, #12]
 8047f48:	4413      	add	r3, r2
 8047f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047f4e:	681b      	ldr	r3, [r3, #0]
 8047f50:	68ba      	ldr	r2, [r7, #8]
 8047f52:	0151      	lsls	r1, r2, #5
 8047f54:	68fa      	ldr	r2, [r7, #12]
 8047f56:	440a      	add	r2, r1
 8047f58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8047f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8047f62:	2300      	movs	r3, #0
}
 8047f64:	4618      	mov	r0, r3
 8047f66:	3714      	adds	r7, #20
 8047f68:	46bd      	mov	sp, r7
 8047f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f6e:	4770      	bx	lr

08047f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8047f70:	b480      	push	{r7}
 8047f72:	b085      	sub	sp, #20
 8047f74:	af00      	add	r7, sp, #0
 8047f76:	6078      	str	r0, [r7, #4]
 8047f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8047f7a:	687b      	ldr	r3, [r7, #4]
 8047f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8047f7e:	683b      	ldr	r3, [r7, #0]
 8047f80:	781b      	ldrb	r3, [r3, #0]
 8047f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8047f84:	683b      	ldr	r3, [r7, #0]
 8047f86:	785b      	ldrb	r3, [r3, #1]
 8047f88:	2b01      	cmp	r3, #1
 8047f8a:	d128      	bne.n	8047fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8047f8c:	68bb      	ldr	r3, [r7, #8]
 8047f8e:	015a      	lsls	r2, r3, #5
 8047f90:	68fb      	ldr	r3, [r7, #12]
 8047f92:	4413      	add	r3, r2
 8047f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047f98:	681b      	ldr	r3, [r3, #0]
 8047f9a:	68ba      	ldr	r2, [r7, #8]
 8047f9c:	0151      	lsls	r1, r2, #5
 8047f9e:	68fa      	ldr	r2, [r7, #12]
 8047fa0:	440a      	add	r2, r1
 8047fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047fa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8047faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8047fac:	683b      	ldr	r3, [r7, #0]
 8047fae:	791b      	ldrb	r3, [r3, #4]
 8047fb0:	2b03      	cmp	r3, #3
 8047fb2:	d003      	beq.n	8047fbc <USB_EPClearStall+0x4c>
 8047fb4:	683b      	ldr	r3, [r7, #0]
 8047fb6:	791b      	ldrb	r3, [r3, #4]
 8047fb8:	2b02      	cmp	r3, #2
 8047fba:	d138      	bne.n	804802e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8047fbc:	68bb      	ldr	r3, [r7, #8]
 8047fbe:	015a      	lsls	r2, r3, #5
 8047fc0:	68fb      	ldr	r3, [r7, #12]
 8047fc2:	4413      	add	r3, r2
 8047fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8047fc8:	681b      	ldr	r3, [r3, #0]
 8047fca:	68ba      	ldr	r2, [r7, #8]
 8047fcc:	0151      	lsls	r1, r2, #5
 8047fce:	68fa      	ldr	r2, [r7, #12]
 8047fd0:	440a      	add	r2, r1
 8047fd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8047fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8047fda:	6013      	str	r3, [r2, #0]
 8047fdc:	e027      	b.n	804802e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8047fde:	68bb      	ldr	r3, [r7, #8]
 8047fe0:	015a      	lsls	r2, r3, #5
 8047fe2:	68fb      	ldr	r3, [r7, #12]
 8047fe4:	4413      	add	r3, r2
 8047fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8047fea:	681b      	ldr	r3, [r3, #0]
 8047fec:	68ba      	ldr	r2, [r7, #8]
 8047fee:	0151      	lsls	r1, r2, #5
 8047ff0:	68fa      	ldr	r2, [r7, #12]
 8047ff2:	440a      	add	r2, r1
 8047ff4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8047ff8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8047ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8047ffe:	683b      	ldr	r3, [r7, #0]
 8048000:	791b      	ldrb	r3, [r3, #4]
 8048002:	2b03      	cmp	r3, #3
 8048004:	d003      	beq.n	804800e <USB_EPClearStall+0x9e>
 8048006:	683b      	ldr	r3, [r7, #0]
 8048008:	791b      	ldrb	r3, [r3, #4]
 804800a:	2b02      	cmp	r3, #2
 804800c:	d10f      	bne.n	804802e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 804800e:	68bb      	ldr	r3, [r7, #8]
 8048010:	015a      	lsls	r2, r3, #5
 8048012:	68fb      	ldr	r3, [r7, #12]
 8048014:	4413      	add	r3, r2
 8048016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804801a:	681b      	ldr	r3, [r3, #0]
 804801c:	68ba      	ldr	r2, [r7, #8]
 804801e:	0151      	lsls	r1, r2, #5
 8048020:	68fa      	ldr	r2, [r7, #12]
 8048022:	440a      	add	r2, r1
 8048024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 804802c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 804802e:	2300      	movs	r3, #0
}
 8048030:	4618      	mov	r0, r3
 8048032:	3714      	adds	r7, #20
 8048034:	46bd      	mov	sp, r7
 8048036:	f85d 7b04 	ldr.w	r7, [sp], #4
 804803a:	4770      	bx	lr

0804803c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 804803c:	b480      	push	{r7}
 804803e:	b085      	sub	sp, #20
 8048040:	af00      	add	r7, sp, #0
 8048042:	6078      	str	r0, [r7, #4]
 8048044:	460b      	mov	r3, r1
 8048046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048048:	687b      	ldr	r3, [r7, #4]
 804804a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 804804c:	68fb      	ldr	r3, [r7, #12]
 804804e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048052:	681b      	ldr	r3, [r3, #0]
 8048054:	68fa      	ldr	r2, [r7, #12]
 8048056:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 804805a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 804805e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8048060:	68fb      	ldr	r3, [r7, #12]
 8048062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048066:	681a      	ldr	r2, [r3, #0]
 8048068:	78fb      	ldrb	r3, [r7, #3]
 804806a:	011b      	lsls	r3, r3, #4
 804806c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8048070:	68f9      	ldr	r1, [r7, #12]
 8048072:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8048076:	4313      	orrs	r3, r2
 8048078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 804807a:	2300      	movs	r3, #0
}
 804807c:	4618      	mov	r0, r3
 804807e:	3714      	adds	r7, #20
 8048080:	46bd      	mov	sp, r7
 8048082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048086:	4770      	bx	lr

08048088 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8048088:	b480      	push	{r7}
 804808a:	b085      	sub	sp, #20
 804808c:	af00      	add	r7, sp, #0
 804808e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048090:	687b      	ldr	r3, [r7, #4]
 8048092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8048094:	68fb      	ldr	r3, [r7, #12]
 8048096:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804809a:	681b      	ldr	r3, [r3, #0]
 804809c:	68fa      	ldr	r2, [r7, #12]
 804809e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80480a2:	f023 0303 	bic.w	r3, r3, #3
 80480a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80480a8:	68fb      	ldr	r3, [r7, #12]
 80480aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80480ae:	685b      	ldr	r3, [r3, #4]
 80480b0:	68fa      	ldr	r2, [r7, #12]
 80480b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80480b6:	f023 0302 	bic.w	r3, r3, #2
 80480ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80480bc:	2300      	movs	r3, #0
}
 80480be:	4618      	mov	r0, r3
 80480c0:	3714      	adds	r7, #20
 80480c2:	46bd      	mov	sp, r7
 80480c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80480c8:	4770      	bx	lr

080480ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80480ca:	b480      	push	{r7}
 80480cc:	b085      	sub	sp, #20
 80480ce:	af00      	add	r7, sp, #0
 80480d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80480d2:	687b      	ldr	r3, [r7, #4]
 80480d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80480d6:	68fb      	ldr	r3, [r7, #12]
 80480d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80480dc:	681b      	ldr	r3, [r3, #0]
 80480de:	68fa      	ldr	r2, [r7, #12]
 80480e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80480e4:	f023 0303 	bic.w	r3, r3, #3
 80480e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80480ea:	68fb      	ldr	r3, [r7, #12]
 80480ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80480f0:	685b      	ldr	r3, [r3, #4]
 80480f2:	68fa      	ldr	r2, [r7, #12]
 80480f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80480f8:	f043 0302 	orr.w	r3, r3, #2
 80480fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80480fe:	2300      	movs	r3, #0
}
 8048100:	4618      	mov	r0, r3
 8048102:	3714      	adds	r7, #20
 8048104:	46bd      	mov	sp, r7
 8048106:	f85d 7b04 	ldr.w	r7, [sp], #4
 804810a:	4770      	bx	lr

0804810c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 804810c:	b480      	push	{r7}
 804810e:	b085      	sub	sp, #20
 8048110:	af00      	add	r7, sp, #0
 8048112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8048114:	687b      	ldr	r3, [r7, #4]
 8048116:	695b      	ldr	r3, [r3, #20]
 8048118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 804811a:	687b      	ldr	r3, [r7, #4]
 804811c:	699b      	ldr	r3, [r3, #24]
 804811e:	68fa      	ldr	r2, [r7, #12]
 8048120:	4013      	ands	r3, r2
 8048122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8048124:	68fb      	ldr	r3, [r7, #12]
}
 8048126:	4618      	mov	r0, r3
 8048128:	3714      	adds	r7, #20
 804812a:	46bd      	mov	sp, r7
 804812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048130:	4770      	bx	lr

08048132 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8048132:	b480      	push	{r7}
 8048134:	b085      	sub	sp, #20
 8048136:	af00      	add	r7, sp, #0
 8048138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804813a:	687b      	ldr	r3, [r7, #4]
 804813c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 804813e:	68fb      	ldr	r3, [r7, #12]
 8048140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048144:	699b      	ldr	r3, [r3, #24]
 8048146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8048148:	68fb      	ldr	r3, [r7, #12]
 804814a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 804814e:	69db      	ldr	r3, [r3, #28]
 8048150:	68ba      	ldr	r2, [r7, #8]
 8048152:	4013      	ands	r3, r2
 8048154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8048156:	68bb      	ldr	r3, [r7, #8]
 8048158:	0c1b      	lsrs	r3, r3, #16
}
 804815a:	4618      	mov	r0, r3
 804815c:	3714      	adds	r7, #20
 804815e:	46bd      	mov	sp, r7
 8048160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048164:	4770      	bx	lr

08048166 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8048166:	b480      	push	{r7}
 8048168:	b085      	sub	sp, #20
 804816a:	af00      	add	r7, sp, #0
 804816c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804816e:	687b      	ldr	r3, [r7, #4]
 8048170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8048172:	68fb      	ldr	r3, [r7, #12]
 8048174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048178:	699b      	ldr	r3, [r3, #24]
 804817a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 804817c:	68fb      	ldr	r3, [r7, #12]
 804817e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048182:	69db      	ldr	r3, [r3, #28]
 8048184:	68ba      	ldr	r2, [r7, #8]
 8048186:	4013      	ands	r3, r2
 8048188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 804818a:	68bb      	ldr	r3, [r7, #8]
 804818c:	b29b      	uxth	r3, r3
}
 804818e:	4618      	mov	r0, r3
 8048190:	3714      	adds	r7, #20
 8048192:	46bd      	mov	sp, r7
 8048194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048198:	4770      	bx	lr

0804819a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 804819a:	b480      	push	{r7}
 804819c:	b085      	sub	sp, #20
 804819e:	af00      	add	r7, sp, #0
 80481a0:	6078      	str	r0, [r7, #4]
 80481a2:	460b      	mov	r3, r1
 80481a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80481a6:	687b      	ldr	r3, [r7, #4]
 80481a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80481aa:	78fb      	ldrb	r3, [r7, #3]
 80481ac:	015a      	lsls	r2, r3, #5
 80481ae:	68fb      	ldr	r3, [r7, #12]
 80481b0:	4413      	add	r3, r2
 80481b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80481b6:	689b      	ldr	r3, [r3, #8]
 80481b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80481ba:	68fb      	ldr	r3, [r7, #12]
 80481bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80481c0:	695b      	ldr	r3, [r3, #20]
 80481c2:	68ba      	ldr	r2, [r7, #8]
 80481c4:	4013      	ands	r3, r2
 80481c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80481c8:	68bb      	ldr	r3, [r7, #8]
}
 80481ca:	4618      	mov	r0, r3
 80481cc:	3714      	adds	r7, #20
 80481ce:	46bd      	mov	sp, r7
 80481d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80481d4:	4770      	bx	lr

080481d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80481d6:	b480      	push	{r7}
 80481d8:	b087      	sub	sp, #28
 80481da:	af00      	add	r7, sp, #0
 80481dc:	6078      	str	r0, [r7, #4]
 80481de:	460b      	mov	r3, r1
 80481e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80481e2:	687b      	ldr	r3, [r7, #4]
 80481e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80481e6:	697b      	ldr	r3, [r7, #20]
 80481e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80481ec:	691b      	ldr	r3, [r3, #16]
 80481ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80481f0:	697b      	ldr	r3, [r7, #20]
 80481f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80481f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80481f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80481fa:	78fb      	ldrb	r3, [r7, #3]
 80481fc:	f003 030f 	and.w	r3, r3, #15
 8048200:	68fa      	ldr	r2, [r7, #12]
 8048202:	fa22 f303 	lsr.w	r3, r2, r3
 8048206:	01db      	lsls	r3, r3, #7
 8048208:	b2db      	uxtb	r3, r3
 804820a:	693a      	ldr	r2, [r7, #16]
 804820c:	4313      	orrs	r3, r2
 804820e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8048210:	78fb      	ldrb	r3, [r7, #3]
 8048212:	015a      	lsls	r2, r3, #5
 8048214:	697b      	ldr	r3, [r7, #20]
 8048216:	4413      	add	r3, r2
 8048218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804821c:	689b      	ldr	r3, [r3, #8]
 804821e:	693a      	ldr	r2, [r7, #16]
 8048220:	4013      	ands	r3, r2
 8048222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8048224:	68bb      	ldr	r3, [r7, #8]
}
 8048226:	4618      	mov	r0, r3
 8048228:	371c      	adds	r7, #28
 804822a:	46bd      	mov	sp, r7
 804822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048230:	4770      	bx	lr

08048232 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8048232:	b480      	push	{r7}
 8048234:	b083      	sub	sp, #12
 8048236:	af00      	add	r7, sp, #0
 8048238:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 804823a:	687b      	ldr	r3, [r7, #4]
 804823c:	695b      	ldr	r3, [r3, #20]
 804823e:	f003 0301 	and.w	r3, r3, #1
}
 8048242:	4618      	mov	r0, r3
 8048244:	370c      	adds	r7, #12
 8048246:	46bd      	mov	sp, r7
 8048248:	f85d 7b04 	ldr.w	r7, [sp], #4
 804824c:	4770      	bx	lr
	...

08048250 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8048250:	b480      	push	{r7}
 8048252:	b085      	sub	sp, #20
 8048254:	af00      	add	r7, sp, #0
 8048256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8048258:	687b      	ldr	r3, [r7, #4]
 804825a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 804825c:	68fb      	ldr	r3, [r7, #12]
 804825e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8048262:	681a      	ldr	r2, [r3, #0]
 8048264:	68fb      	ldr	r3, [r7, #12]
 8048266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 804826a:	4619      	mov	r1, r3
 804826c:	4b09      	ldr	r3, [pc, #36]	@ (8048294 <USB_ActivateSetup+0x44>)
 804826e:	4013      	ands	r3, r2
 8048270:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8048272:	68fb      	ldr	r3, [r7, #12]
 8048274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8048278:	685b      	ldr	r3, [r3, #4]
 804827a:	68fa      	ldr	r2, [r7, #12]
 804827c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8048280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8048284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8048286:	2300      	movs	r3, #0
}
 8048288:	4618      	mov	r0, r3
 804828a:	3714      	adds	r7, #20
 804828c:	46bd      	mov	sp, r7
 804828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048292:	4770      	bx	lr
 8048294:	fffff800 	.word	0xfffff800

08048298 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8048298:	b480      	push	{r7}
 804829a:	b087      	sub	sp, #28
 804829c:	af00      	add	r7, sp, #0
 804829e:	60f8      	str	r0, [r7, #12]
 80482a0:	460b      	mov	r3, r1
 80482a2:	607a      	str	r2, [r7, #4]
 80482a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80482a6:	68fb      	ldr	r3, [r7, #12]
 80482a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80482aa:	68fb      	ldr	r3, [r7, #12]
 80482ac:	333c      	adds	r3, #60	@ 0x3c
 80482ae:	3304      	adds	r3, #4
 80482b0:	681b      	ldr	r3, [r3, #0]
 80482b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80482b4:	693b      	ldr	r3, [r7, #16]
 80482b6:	4a26      	ldr	r2, [pc, #152]	@ (8048350 <USB_EP0_OutStart+0xb8>)
 80482b8:	4293      	cmp	r3, r2
 80482ba:	d90a      	bls.n	80482d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80482bc:	697b      	ldr	r3, [r7, #20]
 80482be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482c2:	681b      	ldr	r3, [r3, #0]
 80482c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80482c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80482cc:	d101      	bne.n	80482d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80482ce:	2300      	movs	r3, #0
 80482d0:	e037      	b.n	8048342 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80482d2:	697b      	ldr	r3, [r7, #20]
 80482d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482d8:	461a      	mov	r2, r3
 80482da:	2300      	movs	r3, #0
 80482dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80482de:	697b      	ldr	r3, [r7, #20]
 80482e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482e4:	691b      	ldr	r3, [r3, #16]
 80482e6:	697a      	ldr	r2, [r7, #20]
 80482e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80482ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80482f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80482f2:	697b      	ldr	r3, [r7, #20]
 80482f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80482f8:	691b      	ldr	r3, [r3, #16]
 80482fa:	697a      	ldr	r2, [r7, #20]
 80482fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048300:	f043 0318 	orr.w	r3, r3, #24
 8048304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8048306:	697b      	ldr	r3, [r7, #20]
 8048308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 804830c:	691b      	ldr	r3, [r3, #16]
 804830e:	697a      	ldr	r2, [r7, #20]
 8048310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8048314:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8048318:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 804831a:	7afb      	ldrb	r3, [r7, #11]
 804831c:	2b01      	cmp	r3, #1
 804831e:	d10f      	bne.n	8048340 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8048320:	697b      	ldr	r3, [r7, #20]
 8048322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048326:	461a      	mov	r2, r3
 8048328:	687b      	ldr	r3, [r7, #4]
 804832a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 804832c:	697b      	ldr	r3, [r7, #20]
 804832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8048332:	681b      	ldr	r3, [r3, #0]
 8048334:	697a      	ldr	r2, [r7, #20]
 8048336:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 804833a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 804833e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8048340:	2300      	movs	r3, #0
}
 8048342:	4618      	mov	r0, r3
 8048344:	371c      	adds	r7, #28
 8048346:	46bd      	mov	sp, r7
 8048348:	f85d 7b04 	ldr.w	r7, [sp], #4
 804834c:	4770      	bx	lr
 804834e:	bf00      	nop
 8048350:	4f54300a 	.word	0x4f54300a

08048354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8048354:	b480      	push	{r7}
 8048356:	b085      	sub	sp, #20
 8048358:	af00      	add	r7, sp, #0
 804835a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804835c:	2300      	movs	r3, #0
 804835e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8048360:	68fb      	ldr	r3, [r7, #12]
 8048362:	3301      	adds	r3, #1
 8048364:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8048366:	68fb      	ldr	r3, [r7, #12]
 8048368:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 804836c:	d901      	bls.n	8048372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 804836e:	2303      	movs	r3, #3
 8048370:	e01b      	b.n	80483aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8048372:	687b      	ldr	r3, [r7, #4]
 8048374:	691b      	ldr	r3, [r3, #16]
 8048376:	2b00      	cmp	r3, #0
 8048378:	daf2      	bge.n	8048360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 804837a:	2300      	movs	r3, #0
 804837c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 804837e:	687b      	ldr	r3, [r7, #4]
 8048380:	691b      	ldr	r3, [r3, #16]
 8048382:	f043 0201 	orr.w	r2, r3, #1
 8048386:	687b      	ldr	r3, [r7, #4]
 8048388:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804838a:	68fb      	ldr	r3, [r7, #12]
 804838c:	3301      	adds	r3, #1
 804838e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8048390:	68fb      	ldr	r3, [r7, #12]
 8048392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8048396:	d901      	bls.n	804839c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8048398:	2303      	movs	r3, #3
 804839a:	e006      	b.n	80483aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 804839c:	687b      	ldr	r3, [r7, #4]
 804839e:	691b      	ldr	r3, [r3, #16]
 80483a0:	f003 0301 	and.w	r3, r3, #1
 80483a4:	2b01      	cmp	r3, #1
 80483a6:	d0f0      	beq.n	804838a <USB_CoreReset+0x36>

  return HAL_OK;
 80483a8:	2300      	movs	r3, #0
}
 80483aa:	4618      	mov	r0, r3
 80483ac:	3714      	adds	r7, #20
 80483ae:	46bd      	mov	sp, r7
 80483b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483b4:	4770      	bx	lr

080483b6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80483b6:	b580      	push	{r7, lr}
 80483b8:	b086      	sub	sp, #24
 80483ba:	af00      	add	r7, sp, #0
 80483bc:	60f8      	str	r0, [r7, #12]
 80483be:	60b9      	str	r1, [r7, #8]
 80483c0:	4613      	mov	r3, r2
 80483c2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80483c4:	68fb      	ldr	r3, [r7, #12]
 80483c6:	2b00      	cmp	r3, #0
 80483c8:	d101      	bne.n	80483ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80483ca:	2303      	movs	r3, #3
 80483cc:	e01f      	b.n	804840e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80483ce:	68fb      	ldr	r3, [r7, #12]
 80483d0:	2200      	movs	r2, #0
 80483d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80483d6:	68fb      	ldr	r3, [r7, #12]
 80483d8:	2200      	movs	r2, #0
 80483da:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80483de:	68fb      	ldr	r3, [r7, #12]
 80483e0:	2200      	movs	r2, #0
 80483e2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80483e6:	68bb      	ldr	r3, [r7, #8]
 80483e8:	2b00      	cmp	r3, #0
 80483ea:	d003      	beq.n	80483f4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80483ec:	68fb      	ldr	r3, [r7, #12]
 80483ee:	68ba      	ldr	r2, [r7, #8]
 80483f0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80483f4:	68fb      	ldr	r3, [r7, #12]
 80483f6:	2201      	movs	r2, #1
 80483f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80483fc:	68fb      	ldr	r3, [r7, #12]
 80483fe:	79fa      	ldrb	r2, [r7, #7]
 8048400:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8048402:	68f8      	ldr	r0, [r7, #12]
 8048404:	f002 fe24 	bl	804b050 <USBD_LL_Init>
 8048408:	4603      	mov	r3, r0
 804840a:	75fb      	strb	r3, [r7, #23]

  return ret;
 804840c:	7dfb      	ldrb	r3, [r7, #23]
}
 804840e:	4618      	mov	r0, r3
 8048410:	3718      	adds	r7, #24
 8048412:	46bd      	mov	sp, r7
 8048414:	bd80      	pop	{r7, pc}

08048416 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8048416:	b580      	push	{r7, lr}
 8048418:	b084      	sub	sp, #16
 804841a:	af00      	add	r7, sp, #0
 804841c:	6078      	str	r0, [r7, #4]
 804841e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8048420:	2300      	movs	r3, #0
 8048422:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8048424:	683b      	ldr	r3, [r7, #0]
 8048426:	2b00      	cmp	r3, #0
 8048428:	d101      	bne.n	804842e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 804842a:	2303      	movs	r3, #3
 804842c:	e025      	b.n	804847a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 804842e:	687b      	ldr	r3, [r7, #4]
 8048430:	683a      	ldr	r2, [r7, #0]
 8048432:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8048436:	687b      	ldr	r3, [r7, #4]
 8048438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804843c:	687b      	ldr	r3, [r7, #4]
 804843e:	32ae      	adds	r2, #174	@ 0xae
 8048440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8048446:	2b00      	cmp	r3, #0
 8048448:	d00f      	beq.n	804846a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 804844a:	687b      	ldr	r3, [r7, #4]
 804844c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048450:	687b      	ldr	r3, [r7, #4]
 8048452:	32ae      	adds	r2, #174	@ 0xae
 8048454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 804845a:	f107 020e 	add.w	r2, r7, #14
 804845e:	4610      	mov	r0, r2
 8048460:	4798      	blx	r3
 8048462:	4602      	mov	r2, r0
 8048464:	687b      	ldr	r3, [r7, #4]
 8048466:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 804846a:	687b      	ldr	r3, [r7, #4]
 804846c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8048470:	1c5a      	adds	r2, r3, #1
 8048472:	687b      	ldr	r3, [r7, #4]
 8048474:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8048478:	2300      	movs	r3, #0
}
 804847a:	4618      	mov	r0, r3
 804847c:	3710      	adds	r7, #16
 804847e:	46bd      	mov	sp, r7
 8048480:	bd80      	pop	{r7, pc}

08048482 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8048482:	b580      	push	{r7, lr}
 8048484:	b082      	sub	sp, #8
 8048486:	af00      	add	r7, sp, #0
 8048488:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 804848a:	6878      	ldr	r0, [r7, #4]
 804848c:	f002 fe32 	bl	804b0f4 <USBD_LL_Start>
 8048490:	4603      	mov	r3, r0
}
 8048492:	4618      	mov	r0, r3
 8048494:	3708      	adds	r7, #8
 8048496:	46bd      	mov	sp, r7
 8048498:	bd80      	pop	{r7, pc}

0804849a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 804849a:	b580      	push	{r7, lr}
 804849c:	b082      	sub	sp, #8
 804849e:	af00      	add	r7, sp, #0
 80484a0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80484a2:	6878      	ldr	r0, [r7, #4]
 80484a4:	f002 fe41 	bl	804b12a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80484a8:	687b      	ldr	r3, [r7, #4]
 80484aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80484ae:	2b00      	cmp	r3, #0
 80484b0:	d009      	beq.n	80484c6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 80484b2:	687b      	ldr	r3, [r7, #4]
 80484b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80484b8:	685b      	ldr	r3, [r3, #4]
 80484ba:	687a      	ldr	r2, [r7, #4]
 80484bc:	6852      	ldr	r2, [r2, #4]
 80484be:	b2d2      	uxtb	r2, r2
 80484c0:	4611      	mov	r1, r2
 80484c2:	6878      	ldr	r0, [r7, #4]
 80484c4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 80484c6:	2300      	movs	r3, #0
}
 80484c8:	4618      	mov	r0, r3
 80484ca:	3708      	adds	r7, #8
 80484cc:	46bd      	mov	sp, r7
 80484ce:	bd80      	pop	{r7, pc}

080484d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80484d0:	b480      	push	{r7}
 80484d2:	b083      	sub	sp, #12
 80484d4:	af00      	add	r7, sp, #0
 80484d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80484d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80484da:	4618      	mov	r0, r3
 80484dc:	370c      	adds	r7, #12
 80484de:	46bd      	mov	sp, r7
 80484e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484e4:	4770      	bx	lr

080484e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80484e6:	b580      	push	{r7, lr}
 80484e8:	b084      	sub	sp, #16
 80484ea:	af00      	add	r7, sp, #0
 80484ec:	6078      	str	r0, [r7, #4]
 80484ee:	460b      	mov	r3, r1
 80484f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80484f2:	2300      	movs	r3, #0
 80484f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80484f6:	687b      	ldr	r3, [r7, #4]
 80484f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80484fc:	2b00      	cmp	r3, #0
 80484fe:	d009      	beq.n	8048514 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8048500:	687b      	ldr	r3, [r7, #4]
 8048502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048506:	681b      	ldr	r3, [r3, #0]
 8048508:	78fa      	ldrb	r2, [r7, #3]
 804850a:	4611      	mov	r1, r2
 804850c:	6878      	ldr	r0, [r7, #4]
 804850e:	4798      	blx	r3
 8048510:	4603      	mov	r3, r0
 8048512:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048514:	7bfb      	ldrb	r3, [r7, #15]
}
 8048516:	4618      	mov	r0, r3
 8048518:	3710      	adds	r7, #16
 804851a:	46bd      	mov	sp, r7
 804851c:	bd80      	pop	{r7, pc}

0804851e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 804851e:	b580      	push	{r7, lr}
 8048520:	b084      	sub	sp, #16
 8048522:	af00      	add	r7, sp, #0
 8048524:	6078      	str	r0, [r7, #4]
 8048526:	460b      	mov	r3, r1
 8048528:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 804852a:	2300      	movs	r3, #0
 804852c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 804852e:	687b      	ldr	r3, [r7, #4]
 8048530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048534:	685b      	ldr	r3, [r3, #4]
 8048536:	78fa      	ldrb	r2, [r7, #3]
 8048538:	4611      	mov	r1, r2
 804853a:	6878      	ldr	r0, [r7, #4]
 804853c:	4798      	blx	r3
 804853e:	4603      	mov	r3, r0
 8048540:	2b00      	cmp	r3, #0
 8048542:	d001      	beq.n	8048548 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8048544:	2303      	movs	r3, #3
 8048546:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048548:	7bfb      	ldrb	r3, [r7, #15]
}
 804854a:	4618      	mov	r0, r3
 804854c:	3710      	adds	r7, #16
 804854e:	46bd      	mov	sp, r7
 8048550:	bd80      	pop	{r7, pc}

08048552 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8048552:	b580      	push	{r7, lr}
 8048554:	b084      	sub	sp, #16
 8048556:	af00      	add	r7, sp, #0
 8048558:	6078      	str	r0, [r7, #4]
 804855a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 804855c:	687b      	ldr	r3, [r7, #4]
 804855e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8048562:	6839      	ldr	r1, [r7, #0]
 8048564:	4618      	mov	r0, r3
 8048566:	f001 f924 	bl	80497b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 804856a:	687b      	ldr	r3, [r7, #4]
 804856c:	2201      	movs	r2, #1
 804856e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8048572:	687b      	ldr	r3, [r7, #4]
 8048574:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8048578:	461a      	mov	r2, r3
 804857a:	687b      	ldr	r3, [r7, #4]
 804857c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8048580:	687b      	ldr	r3, [r7, #4]
 8048582:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8048586:	f003 031f 	and.w	r3, r3, #31
 804858a:	2b02      	cmp	r3, #2
 804858c:	d01a      	beq.n	80485c4 <USBD_LL_SetupStage+0x72>
 804858e:	2b02      	cmp	r3, #2
 8048590:	d822      	bhi.n	80485d8 <USBD_LL_SetupStage+0x86>
 8048592:	2b00      	cmp	r3, #0
 8048594:	d002      	beq.n	804859c <USBD_LL_SetupStage+0x4a>
 8048596:	2b01      	cmp	r3, #1
 8048598:	d00a      	beq.n	80485b0 <USBD_LL_SetupStage+0x5e>
 804859a:	e01d      	b.n	80485d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 804859c:	687b      	ldr	r3, [r7, #4]
 804859e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80485a2:	4619      	mov	r1, r3
 80485a4:	6878      	ldr	r0, [r7, #4]
 80485a6:	f000 fb2b 	bl	8048c00 <USBD_StdDevReq>
 80485aa:	4603      	mov	r3, r0
 80485ac:	73fb      	strb	r3, [r7, #15]
      break;
 80485ae:	e020      	b.n	80485f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80485b0:	687b      	ldr	r3, [r7, #4]
 80485b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80485b6:	4619      	mov	r1, r3
 80485b8:	6878      	ldr	r0, [r7, #4]
 80485ba:	f000 fb93 	bl	8048ce4 <USBD_StdItfReq>
 80485be:	4603      	mov	r3, r0
 80485c0:	73fb      	strb	r3, [r7, #15]
      break;
 80485c2:	e016      	b.n	80485f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80485c4:	687b      	ldr	r3, [r7, #4]
 80485c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80485ca:	4619      	mov	r1, r3
 80485cc:	6878      	ldr	r0, [r7, #4]
 80485ce:	f000 fbf5 	bl	8048dbc <USBD_StdEPReq>
 80485d2:	4603      	mov	r3, r0
 80485d4:	73fb      	strb	r3, [r7, #15]
      break;
 80485d6:	e00c      	b.n	80485f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80485d8:	687b      	ldr	r3, [r7, #4]
 80485da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80485de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80485e2:	b2db      	uxtb	r3, r3
 80485e4:	4619      	mov	r1, r3
 80485e6:	6878      	ldr	r0, [r7, #4]
 80485e8:	f002 fde0 	bl	804b1ac <USBD_LL_StallEP>
 80485ec:	4603      	mov	r3, r0
 80485ee:	73fb      	strb	r3, [r7, #15]
      break;
 80485f0:	bf00      	nop
  }

  return ret;
 80485f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80485f4:	4618      	mov	r0, r3
 80485f6:	3710      	adds	r7, #16
 80485f8:	46bd      	mov	sp, r7
 80485fa:	bd80      	pop	{r7, pc}

080485fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80485fc:	b580      	push	{r7, lr}
 80485fe:	b086      	sub	sp, #24
 8048600:	af00      	add	r7, sp, #0
 8048602:	60f8      	str	r0, [r7, #12]
 8048604:	460b      	mov	r3, r1
 8048606:	607a      	str	r2, [r7, #4]
 8048608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 804860a:	2300      	movs	r3, #0
 804860c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 804860e:	7afb      	ldrb	r3, [r7, #11]
 8048610:	2b00      	cmp	r3, #0
 8048612:	d16e      	bne.n	80486f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8048614:	68fb      	ldr	r3, [r7, #12]
 8048616:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 804861a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 804861c:	68fb      	ldr	r3, [r7, #12]
 804861e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8048622:	2b03      	cmp	r3, #3
 8048624:	f040 8098 	bne.w	8048758 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8048628:	693b      	ldr	r3, [r7, #16]
 804862a:	689a      	ldr	r2, [r3, #8]
 804862c:	693b      	ldr	r3, [r7, #16]
 804862e:	68db      	ldr	r3, [r3, #12]
 8048630:	429a      	cmp	r2, r3
 8048632:	d913      	bls.n	804865c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8048634:	693b      	ldr	r3, [r7, #16]
 8048636:	689a      	ldr	r2, [r3, #8]
 8048638:	693b      	ldr	r3, [r7, #16]
 804863a:	68db      	ldr	r3, [r3, #12]
 804863c:	1ad2      	subs	r2, r2, r3
 804863e:	693b      	ldr	r3, [r7, #16]
 8048640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8048642:	693b      	ldr	r3, [r7, #16]
 8048644:	68da      	ldr	r2, [r3, #12]
 8048646:	693b      	ldr	r3, [r7, #16]
 8048648:	689b      	ldr	r3, [r3, #8]
 804864a:	4293      	cmp	r3, r2
 804864c:	bf28      	it	cs
 804864e:	4613      	movcs	r3, r2
 8048650:	461a      	mov	r2, r3
 8048652:	6879      	ldr	r1, [r7, #4]
 8048654:	68f8      	ldr	r0, [r7, #12]
 8048656:	f002 f924 	bl	804a8a2 <USBD_CtlContinueRx>
 804865a:	e07d      	b.n	8048758 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 804865c:	68fb      	ldr	r3, [r7, #12]
 804865e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8048662:	f003 031f 	and.w	r3, r3, #31
 8048666:	2b02      	cmp	r3, #2
 8048668:	d014      	beq.n	8048694 <USBD_LL_DataOutStage+0x98>
 804866a:	2b02      	cmp	r3, #2
 804866c:	d81d      	bhi.n	80486aa <USBD_LL_DataOutStage+0xae>
 804866e:	2b00      	cmp	r3, #0
 8048670:	d002      	beq.n	8048678 <USBD_LL_DataOutStage+0x7c>
 8048672:	2b01      	cmp	r3, #1
 8048674:	d003      	beq.n	804867e <USBD_LL_DataOutStage+0x82>
 8048676:	e018      	b.n	80486aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8048678:	2300      	movs	r3, #0
 804867a:	75bb      	strb	r3, [r7, #22]
            break;
 804867c:	e018      	b.n	80486b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 804867e:	68fb      	ldr	r3, [r7, #12]
 8048680:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8048684:	b2db      	uxtb	r3, r3
 8048686:	4619      	mov	r1, r3
 8048688:	68f8      	ldr	r0, [r7, #12]
 804868a:	f000 fa64 	bl	8048b56 <USBD_CoreFindIF>
 804868e:	4603      	mov	r3, r0
 8048690:	75bb      	strb	r3, [r7, #22]
            break;
 8048692:	e00d      	b.n	80486b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8048694:	68fb      	ldr	r3, [r7, #12]
 8048696:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 804869a:	b2db      	uxtb	r3, r3
 804869c:	4619      	mov	r1, r3
 804869e:	68f8      	ldr	r0, [r7, #12]
 80486a0:	f000 fa66 	bl	8048b70 <USBD_CoreFindEP>
 80486a4:	4603      	mov	r3, r0
 80486a6:	75bb      	strb	r3, [r7, #22]
            break;
 80486a8:	e002      	b.n	80486b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80486aa:	2300      	movs	r3, #0
 80486ac:	75bb      	strb	r3, [r7, #22]
            break;
 80486ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80486b0:	7dbb      	ldrb	r3, [r7, #22]
 80486b2:	2b00      	cmp	r3, #0
 80486b4:	d119      	bne.n	80486ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80486b6:	68fb      	ldr	r3, [r7, #12]
 80486b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80486bc:	b2db      	uxtb	r3, r3
 80486be:	2b03      	cmp	r3, #3
 80486c0:	d113      	bne.n	80486ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80486c2:	7dba      	ldrb	r2, [r7, #22]
 80486c4:	68fb      	ldr	r3, [r7, #12]
 80486c6:	32ae      	adds	r2, #174	@ 0xae
 80486c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80486cc:	691b      	ldr	r3, [r3, #16]
 80486ce:	2b00      	cmp	r3, #0
 80486d0:	d00b      	beq.n	80486ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80486d2:	7dba      	ldrb	r2, [r7, #22]
 80486d4:	68fb      	ldr	r3, [r7, #12]
 80486d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80486da:	7dba      	ldrb	r2, [r7, #22]
 80486dc:	68fb      	ldr	r3, [r7, #12]
 80486de:	32ae      	adds	r2, #174	@ 0xae
 80486e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80486e4:	691b      	ldr	r3, [r3, #16]
 80486e6:	68f8      	ldr	r0, [r7, #12]
 80486e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80486ea:	68f8      	ldr	r0, [r7, #12]
 80486ec:	f002 f8ea 	bl	804a8c4 <USBD_CtlSendStatus>
 80486f0:	e032      	b.n	8048758 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80486f2:	7afb      	ldrb	r3, [r7, #11]
 80486f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80486f8:	b2db      	uxtb	r3, r3
 80486fa:	4619      	mov	r1, r3
 80486fc:	68f8      	ldr	r0, [r7, #12]
 80486fe:	f000 fa37 	bl	8048b70 <USBD_CoreFindEP>
 8048702:	4603      	mov	r3, r0
 8048704:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048706:	7dbb      	ldrb	r3, [r7, #22]
 8048708:	2bff      	cmp	r3, #255	@ 0xff
 804870a:	d025      	beq.n	8048758 <USBD_LL_DataOutStage+0x15c>
 804870c:	7dbb      	ldrb	r3, [r7, #22]
 804870e:	2b00      	cmp	r3, #0
 8048710:	d122      	bne.n	8048758 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048712:	68fb      	ldr	r3, [r7, #12]
 8048714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048718:	b2db      	uxtb	r3, r3
 804871a:	2b03      	cmp	r3, #3
 804871c:	d117      	bne.n	804874e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 804871e:	7dba      	ldrb	r2, [r7, #22]
 8048720:	68fb      	ldr	r3, [r7, #12]
 8048722:	32ae      	adds	r2, #174	@ 0xae
 8048724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048728:	699b      	ldr	r3, [r3, #24]
 804872a:	2b00      	cmp	r3, #0
 804872c:	d00f      	beq.n	804874e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 804872e:	7dba      	ldrb	r2, [r7, #22]
 8048730:	68fb      	ldr	r3, [r7, #12]
 8048732:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8048736:	7dba      	ldrb	r2, [r7, #22]
 8048738:	68fb      	ldr	r3, [r7, #12]
 804873a:	32ae      	adds	r2, #174	@ 0xae
 804873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048740:	699b      	ldr	r3, [r3, #24]
 8048742:	7afa      	ldrb	r2, [r7, #11]
 8048744:	4611      	mov	r1, r2
 8048746:	68f8      	ldr	r0, [r7, #12]
 8048748:	4798      	blx	r3
 804874a:	4603      	mov	r3, r0
 804874c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 804874e:	7dfb      	ldrb	r3, [r7, #23]
 8048750:	2b00      	cmp	r3, #0
 8048752:	d001      	beq.n	8048758 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8048754:	7dfb      	ldrb	r3, [r7, #23]
 8048756:	e000      	b.n	804875a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8048758:	2300      	movs	r3, #0
}
 804875a:	4618      	mov	r0, r3
 804875c:	3718      	adds	r7, #24
 804875e:	46bd      	mov	sp, r7
 8048760:	bd80      	pop	{r7, pc}

08048762 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8048762:	b580      	push	{r7, lr}
 8048764:	b086      	sub	sp, #24
 8048766:	af00      	add	r7, sp, #0
 8048768:	60f8      	str	r0, [r7, #12]
 804876a:	460b      	mov	r3, r1
 804876c:	607a      	str	r2, [r7, #4]
 804876e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8048770:	7afb      	ldrb	r3, [r7, #11]
 8048772:	2b00      	cmp	r3, #0
 8048774:	d16f      	bne.n	8048856 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8048776:	68fb      	ldr	r3, [r7, #12]
 8048778:	3314      	adds	r3, #20
 804877a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 804877c:	68fb      	ldr	r3, [r7, #12]
 804877e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8048782:	2b02      	cmp	r3, #2
 8048784:	d15a      	bne.n	804883c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8048786:	693b      	ldr	r3, [r7, #16]
 8048788:	689a      	ldr	r2, [r3, #8]
 804878a:	693b      	ldr	r3, [r7, #16]
 804878c:	68db      	ldr	r3, [r3, #12]
 804878e:	429a      	cmp	r2, r3
 8048790:	d914      	bls.n	80487bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8048792:	693b      	ldr	r3, [r7, #16]
 8048794:	689a      	ldr	r2, [r3, #8]
 8048796:	693b      	ldr	r3, [r7, #16]
 8048798:	68db      	ldr	r3, [r3, #12]
 804879a:	1ad2      	subs	r2, r2, r3
 804879c:	693b      	ldr	r3, [r7, #16]
 804879e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80487a0:	693b      	ldr	r3, [r7, #16]
 80487a2:	689b      	ldr	r3, [r3, #8]
 80487a4:	461a      	mov	r2, r3
 80487a6:	6879      	ldr	r1, [r7, #4]
 80487a8:	68f8      	ldr	r0, [r7, #12]
 80487aa:	f002 f84c 	bl	804a846 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80487ae:	2300      	movs	r3, #0
 80487b0:	2200      	movs	r2, #0
 80487b2:	2100      	movs	r1, #0
 80487b4:	68f8      	ldr	r0, [r7, #12]
 80487b6:	f002 fda3 	bl	804b300 <USBD_LL_PrepareReceive>
 80487ba:	e03f      	b.n	804883c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80487bc:	693b      	ldr	r3, [r7, #16]
 80487be:	68da      	ldr	r2, [r3, #12]
 80487c0:	693b      	ldr	r3, [r7, #16]
 80487c2:	689b      	ldr	r3, [r3, #8]
 80487c4:	429a      	cmp	r2, r3
 80487c6:	d11c      	bne.n	8048802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80487c8:	693b      	ldr	r3, [r7, #16]
 80487ca:	685a      	ldr	r2, [r3, #4]
 80487cc:	693b      	ldr	r3, [r7, #16]
 80487ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80487d0:	429a      	cmp	r2, r3
 80487d2:	d316      	bcc.n	8048802 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80487d4:	693b      	ldr	r3, [r7, #16]
 80487d6:	685a      	ldr	r2, [r3, #4]
 80487d8:	68fb      	ldr	r3, [r7, #12]
 80487da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80487de:	429a      	cmp	r2, r3
 80487e0:	d20f      	bcs.n	8048802 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80487e2:	2200      	movs	r2, #0
 80487e4:	2100      	movs	r1, #0
 80487e6:	68f8      	ldr	r0, [r7, #12]
 80487e8:	f002 f82d 	bl	804a846 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80487ec:	68fb      	ldr	r3, [r7, #12]
 80487ee:	2200      	movs	r2, #0
 80487f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80487f4:	2300      	movs	r3, #0
 80487f6:	2200      	movs	r2, #0
 80487f8:	2100      	movs	r1, #0
 80487fa:	68f8      	ldr	r0, [r7, #12]
 80487fc:	f002 fd80 	bl	804b300 <USBD_LL_PrepareReceive>
 8048800:	e01c      	b.n	804883c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048802:	68fb      	ldr	r3, [r7, #12]
 8048804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048808:	b2db      	uxtb	r3, r3
 804880a:	2b03      	cmp	r3, #3
 804880c:	d10f      	bne.n	804882e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 804880e:	68fb      	ldr	r3, [r7, #12]
 8048810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048814:	68db      	ldr	r3, [r3, #12]
 8048816:	2b00      	cmp	r3, #0
 8048818:	d009      	beq.n	804882e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 804881a:	68fb      	ldr	r3, [r7, #12]
 804881c:	2200      	movs	r2, #0
 804881e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8048822:	68fb      	ldr	r3, [r7, #12]
 8048824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048828:	68db      	ldr	r3, [r3, #12]
 804882a:	68f8      	ldr	r0, [r7, #12]
 804882c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 804882e:	2180      	movs	r1, #128	@ 0x80
 8048830:	68f8      	ldr	r0, [r7, #12]
 8048832:	f002 fcbb 	bl	804b1ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8048836:	68f8      	ldr	r0, [r7, #12]
 8048838:	f002 f857 	bl	804a8ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 804883c:	68fb      	ldr	r3, [r7, #12]
 804883e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8048842:	2b00      	cmp	r3, #0
 8048844:	d03a      	beq.n	80488bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8048846:	68f8      	ldr	r0, [r7, #12]
 8048848:	f7ff fe42 	bl	80484d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 804884c:	68fb      	ldr	r3, [r7, #12]
 804884e:	2200      	movs	r2, #0
 8048850:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8048854:	e032      	b.n	80488bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8048856:	7afb      	ldrb	r3, [r7, #11]
 8048858:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 804885c:	b2db      	uxtb	r3, r3
 804885e:	4619      	mov	r1, r3
 8048860:	68f8      	ldr	r0, [r7, #12]
 8048862:	f000 f985 	bl	8048b70 <USBD_CoreFindEP>
 8048866:	4603      	mov	r3, r0
 8048868:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 804886a:	7dfb      	ldrb	r3, [r7, #23]
 804886c:	2bff      	cmp	r3, #255	@ 0xff
 804886e:	d025      	beq.n	80488bc <USBD_LL_DataInStage+0x15a>
 8048870:	7dfb      	ldrb	r3, [r7, #23]
 8048872:	2b00      	cmp	r3, #0
 8048874:	d122      	bne.n	80488bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048876:	68fb      	ldr	r3, [r7, #12]
 8048878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804887c:	b2db      	uxtb	r3, r3
 804887e:	2b03      	cmp	r3, #3
 8048880:	d11c      	bne.n	80488bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8048882:	7dfa      	ldrb	r2, [r7, #23]
 8048884:	68fb      	ldr	r3, [r7, #12]
 8048886:	32ae      	adds	r2, #174	@ 0xae
 8048888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804888c:	695b      	ldr	r3, [r3, #20]
 804888e:	2b00      	cmp	r3, #0
 8048890:	d014      	beq.n	80488bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8048892:	7dfa      	ldrb	r2, [r7, #23]
 8048894:	68fb      	ldr	r3, [r7, #12]
 8048896:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 804889a:	7dfa      	ldrb	r2, [r7, #23]
 804889c:	68fb      	ldr	r3, [r7, #12]
 804889e:	32ae      	adds	r2, #174	@ 0xae
 80488a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80488a4:	695b      	ldr	r3, [r3, #20]
 80488a6:	7afa      	ldrb	r2, [r7, #11]
 80488a8:	4611      	mov	r1, r2
 80488aa:	68f8      	ldr	r0, [r7, #12]
 80488ac:	4798      	blx	r3
 80488ae:	4603      	mov	r3, r0
 80488b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80488b2:	7dbb      	ldrb	r3, [r7, #22]
 80488b4:	2b00      	cmp	r3, #0
 80488b6:	d001      	beq.n	80488bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80488b8:	7dbb      	ldrb	r3, [r7, #22]
 80488ba:	e000      	b.n	80488be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80488bc:	2300      	movs	r3, #0
}
 80488be:	4618      	mov	r0, r3
 80488c0:	3718      	adds	r7, #24
 80488c2:	46bd      	mov	sp, r7
 80488c4:	bd80      	pop	{r7, pc}

080488c6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80488c6:	b580      	push	{r7, lr}
 80488c8:	b084      	sub	sp, #16
 80488ca:	af00      	add	r7, sp, #0
 80488cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80488ce:	2300      	movs	r3, #0
 80488d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80488d2:	687b      	ldr	r3, [r7, #4]
 80488d4:	2201      	movs	r2, #1
 80488d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80488da:	687b      	ldr	r3, [r7, #4]
 80488dc:	2200      	movs	r2, #0
 80488de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80488e2:	687b      	ldr	r3, [r7, #4]
 80488e4:	2200      	movs	r2, #0
 80488e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80488e8:	687b      	ldr	r3, [r7, #4]
 80488ea:	2200      	movs	r2, #0
 80488ec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80488f0:	687b      	ldr	r3, [r7, #4]
 80488f2:	2200      	movs	r2, #0
 80488f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80488f8:	687b      	ldr	r3, [r7, #4]
 80488fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80488fe:	2b00      	cmp	r3, #0
 8048900:	d014      	beq.n	804892c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8048902:	687b      	ldr	r3, [r7, #4]
 8048904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048908:	685b      	ldr	r3, [r3, #4]
 804890a:	2b00      	cmp	r3, #0
 804890c:	d00e      	beq.n	804892c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 804890e:	687b      	ldr	r3, [r7, #4]
 8048910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048914:	685b      	ldr	r3, [r3, #4]
 8048916:	687a      	ldr	r2, [r7, #4]
 8048918:	6852      	ldr	r2, [r2, #4]
 804891a:	b2d2      	uxtb	r2, r2
 804891c:	4611      	mov	r1, r2
 804891e:	6878      	ldr	r0, [r7, #4]
 8048920:	4798      	blx	r3
 8048922:	4603      	mov	r3, r0
 8048924:	2b00      	cmp	r3, #0
 8048926:	d001      	beq.n	804892c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8048928:	2303      	movs	r3, #3
 804892a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 804892c:	2340      	movs	r3, #64	@ 0x40
 804892e:	2200      	movs	r2, #0
 8048930:	2100      	movs	r1, #0
 8048932:	6878      	ldr	r0, [r7, #4]
 8048934:	f002 fc14 	bl	804b160 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8048938:	687b      	ldr	r3, [r7, #4]
 804893a:	2201      	movs	r2, #1
 804893c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8048940:	687b      	ldr	r3, [r7, #4]
 8048942:	2240      	movs	r2, #64	@ 0x40
 8048944:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8048948:	2340      	movs	r3, #64	@ 0x40
 804894a:	2200      	movs	r2, #0
 804894c:	2180      	movs	r1, #128	@ 0x80
 804894e:	6878      	ldr	r0, [r7, #4]
 8048950:	f002 fc06 	bl	804b160 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8048954:	687b      	ldr	r3, [r7, #4]
 8048956:	2201      	movs	r2, #1
 8048958:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 804895a:	687b      	ldr	r3, [r7, #4]
 804895c:	2240      	movs	r2, #64	@ 0x40
 804895e:	621a      	str	r2, [r3, #32]

  return ret;
 8048960:	7bfb      	ldrb	r3, [r7, #15]
}
 8048962:	4618      	mov	r0, r3
 8048964:	3710      	adds	r7, #16
 8048966:	46bd      	mov	sp, r7
 8048968:	bd80      	pop	{r7, pc}

0804896a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 804896a:	b480      	push	{r7}
 804896c:	b083      	sub	sp, #12
 804896e:	af00      	add	r7, sp, #0
 8048970:	6078      	str	r0, [r7, #4]
 8048972:	460b      	mov	r3, r1
 8048974:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8048976:	687b      	ldr	r3, [r7, #4]
 8048978:	78fa      	ldrb	r2, [r7, #3]
 804897a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 804897c:	2300      	movs	r3, #0
}
 804897e:	4618      	mov	r0, r3
 8048980:	370c      	adds	r7, #12
 8048982:	46bd      	mov	sp, r7
 8048984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048988:	4770      	bx	lr

0804898a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 804898a:	b480      	push	{r7}
 804898c:	b083      	sub	sp, #12
 804898e:	af00      	add	r7, sp, #0
 8048990:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8048992:	687b      	ldr	r3, [r7, #4]
 8048994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048998:	b2db      	uxtb	r3, r3
 804899a:	2b04      	cmp	r3, #4
 804899c:	d006      	beq.n	80489ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 804899e:	687b      	ldr	r3, [r7, #4]
 80489a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80489a4:	b2da      	uxtb	r2, r3
 80489a6:	687b      	ldr	r3, [r7, #4]
 80489a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80489ac:	687b      	ldr	r3, [r7, #4]
 80489ae:	2204      	movs	r2, #4
 80489b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80489b4:	2300      	movs	r3, #0
}
 80489b6:	4618      	mov	r0, r3
 80489b8:	370c      	adds	r7, #12
 80489ba:	46bd      	mov	sp, r7
 80489bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489c0:	4770      	bx	lr

080489c2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80489c2:	b480      	push	{r7}
 80489c4:	b083      	sub	sp, #12
 80489c6:	af00      	add	r7, sp, #0
 80489c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80489ca:	687b      	ldr	r3, [r7, #4]
 80489cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80489d0:	b2db      	uxtb	r3, r3
 80489d2:	2b04      	cmp	r3, #4
 80489d4:	d106      	bne.n	80489e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80489d6:	687b      	ldr	r3, [r7, #4]
 80489d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80489dc:	b2da      	uxtb	r2, r3
 80489de:	687b      	ldr	r3, [r7, #4]
 80489e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80489e4:	2300      	movs	r3, #0
}
 80489e6:	4618      	mov	r0, r3
 80489e8:	370c      	adds	r7, #12
 80489ea:	46bd      	mov	sp, r7
 80489ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489f0:	4770      	bx	lr

080489f2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80489f2:	b580      	push	{r7, lr}
 80489f4:	b082      	sub	sp, #8
 80489f6:	af00      	add	r7, sp, #0
 80489f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80489fa:	687b      	ldr	r3, [r7, #4]
 80489fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048a00:	b2db      	uxtb	r3, r3
 8048a02:	2b03      	cmp	r3, #3
 8048a04:	d110      	bne.n	8048a28 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8048a06:	687b      	ldr	r3, [r7, #4]
 8048a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a0c:	2b00      	cmp	r3, #0
 8048a0e:	d00b      	beq.n	8048a28 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8048a10:	687b      	ldr	r3, [r7, #4]
 8048a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a16:	69db      	ldr	r3, [r3, #28]
 8048a18:	2b00      	cmp	r3, #0
 8048a1a:	d005      	beq.n	8048a28 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8048a1c:	687b      	ldr	r3, [r7, #4]
 8048a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048a22:	69db      	ldr	r3, [r3, #28]
 8048a24:	6878      	ldr	r0, [r7, #4]
 8048a26:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8048a28:	2300      	movs	r3, #0
}
 8048a2a:	4618      	mov	r0, r3
 8048a2c:	3708      	adds	r7, #8
 8048a2e:	46bd      	mov	sp, r7
 8048a30:	bd80      	pop	{r7, pc}

08048a32 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8048a32:	b580      	push	{r7, lr}
 8048a34:	b082      	sub	sp, #8
 8048a36:	af00      	add	r7, sp, #0
 8048a38:	6078      	str	r0, [r7, #4]
 8048a3a:	460b      	mov	r3, r1
 8048a3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048a3e:	687b      	ldr	r3, [r7, #4]
 8048a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a44:	687b      	ldr	r3, [r7, #4]
 8048a46:	32ae      	adds	r2, #174	@ 0xae
 8048a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a4c:	2b00      	cmp	r3, #0
 8048a4e:	d101      	bne.n	8048a54 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8048a50:	2303      	movs	r3, #3
 8048a52:	e01c      	b.n	8048a8e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048a54:	687b      	ldr	r3, [r7, #4]
 8048a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048a5a:	b2db      	uxtb	r3, r3
 8048a5c:	2b03      	cmp	r3, #3
 8048a5e:	d115      	bne.n	8048a8c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8048a60:	687b      	ldr	r3, [r7, #4]
 8048a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a66:	687b      	ldr	r3, [r7, #4]
 8048a68:	32ae      	adds	r2, #174	@ 0xae
 8048a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a6e:	6a1b      	ldr	r3, [r3, #32]
 8048a70:	2b00      	cmp	r3, #0
 8048a72:	d00b      	beq.n	8048a8c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8048a74:	687b      	ldr	r3, [r7, #4]
 8048a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048a7a:	687b      	ldr	r3, [r7, #4]
 8048a7c:	32ae      	adds	r2, #174	@ 0xae
 8048a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048a82:	6a1b      	ldr	r3, [r3, #32]
 8048a84:	78fa      	ldrb	r2, [r7, #3]
 8048a86:	4611      	mov	r1, r2
 8048a88:	6878      	ldr	r0, [r7, #4]
 8048a8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048a8c:	2300      	movs	r3, #0
}
 8048a8e:	4618      	mov	r0, r3
 8048a90:	3708      	adds	r7, #8
 8048a92:	46bd      	mov	sp, r7
 8048a94:	bd80      	pop	{r7, pc}

08048a96 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8048a96:	b580      	push	{r7, lr}
 8048a98:	b082      	sub	sp, #8
 8048a9a:	af00      	add	r7, sp, #0
 8048a9c:	6078      	str	r0, [r7, #4]
 8048a9e:	460b      	mov	r3, r1
 8048aa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8048aa2:	687b      	ldr	r3, [r7, #4]
 8048aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048aa8:	687b      	ldr	r3, [r7, #4]
 8048aaa:	32ae      	adds	r2, #174	@ 0xae
 8048aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048ab0:	2b00      	cmp	r3, #0
 8048ab2:	d101      	bne.n	8048ab8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8048ab4:	2303      	movs	r3, #3
 8048ab6:	e01c      	b.n	8048af2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8048ab8:	687b      	ldr	r3, [r7, #4]
 8048aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048abe:	b2db      	uxtb	r3, r3
 8048ac0:	2b03      	cmp	r3, #3
 8048ac2:	d115      	bne.n	8048af0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8048ac4:	687b      	ldr	r3, [r7, #4]
 8048ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048aca:	687b      	ldr	r3, [r7, #4]
 8048acc:	32ae      	adds	r2, #174	@ 0xae
 8048ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048ad4:	2b00      	cmp	r3, #0
 8048ad6:	d00b      	beq.n	8048af0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8048ad8:	687b      	ldr	r3, [r7, #4]
 8048ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048ade:	687b      	ldr	r3, [r7, #4]
 8048ae0:	32ae      	adds	r2, #174	@ 0xae
 8048ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8048ae8:	78fa      	ldrb	r2, [r7, #3]
 8048aea:	4611      	mov	r1, r2
 8048aec:	6878      	ldr	r0, [r7, #4]
 8048aee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8048af0:	2300      	movs	r3, #0
}
 8048af2:	4618      	mov	r0, r3
 8048af4:	3708      	adds	r7, #8
 8048af6:	46bd      	mov	sp, r7
 8048af8:	bd80      	pop	{r7, pc}

08048afa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8048afa:	b480      	push	{r7}
 8048afc:	b083      	sub	sp, #12
 8048afe:	af00      	add	r7, sp, #0
 8048b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8048b02:	2300      	movs	r3, #0
}
 8048b04:	4618      	mov	r0, r3
 8048b06:	370c      	adds	r7, #12
 8048b08:	46bd      	mov	sp, r7
 8048b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b0e:	4770      	bx	lr

08048b10 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8048b10:	b580      	push	{r7, lr}
 8048b12:	b084      	sub	sp, #16
 8048b14:	af00      	add	r7, sp, #0
 8048b16:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8048b18:	2300      	movs	r3, #0
 8048b1a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8048b1c:	687b      	ldr	r3, [r7, #4]
 8048b1e:	2201      	movs	r2, #1
 8048b20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8048b24:	687b      	ldr	r3, [r7, #4]
 8048b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b2a:	2b00      	cmp	r3, #0
 8048b2c:	d00e      	beq.n	8048b4c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8048b2e:	687b      	ldr	r3, [r7, #4]
 8048b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8048b34:	685b      	ldr	r3, [r3, #4]
 8048b36:	687a      	ldr	r2, [r7, #4]
 8048b38:	6852      	ldr	r2, [r2, #4]
 8048b3a:	b2d2      	uxtb	r2, r2
 8048b3c:	4611      	mov	r1, r2
 8048b3e:	6878      	ldr	r0, [r7, #4]
 8048b40:	4798      	blx	r3
 8048b42:	4603      	mov	r3, r0
 8048b44:	2b00      	cmp	r3, #0
 8048b46:	d001      	beq.n	8048b4c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8048b48:	2303      	movs	r3, #3
 8048b4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8048b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8048b4e:	4618      	mov	r0, r3
 8048b50:	3710      	adds	r7, #16
 8048b52:	46bd      	mov	sp, r7
 8048b54:	bd80      	pop	{r7, pc}

08048b56 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048b56:	b480      	push	{r7}
 8048b58:	b083      	sub	sp, #12
 8048b5a:	af00      	add	r7, sp, #0
 8048b5c:	6078      	str	r0, [r7, #4]
 8048b5e:	460b      	mov	r3, r1
 8048b60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048b62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048b64:	4618      	mov	r0, r3
 8048b66:	370c      	adds	r7, #12
 8048b68:	46bd      	mov	sp, r7
 8048b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b6e:	4770      	bx	lr

08048b70 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8048b70:	b480      	push	{r7}
 8048b72:	b083      	sub	sp, #12
 8048b74:	af00      	add	r7, sp, #0
 8048b76:	6078      	str	r0, [r7, #4]
 8048b78:	460b      	mov	r3, r1
 8048b7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8048b7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8048b7e:	4618      	mov	r0, r3
 8048b80:	370c      	adds	r7, #12
 8048b82:	46bd      	mov	sp, r7
 8048b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b88:	4770      	bx	lr

08048b8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8048b8a:	b480      	push	{r7}
 8048b8c:	b085      	sub	sp, #20
 8048b8e:	af00      	add	r7, sp, #0
 8048b90:	6078      	str	r0, [r7, #4]
 8048b92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8048b94:	687b      	ldr	r3, [r7, #4]
 8048b96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8048b98:	683b      	ldr	r3, [r7, #0]
 8048b9a:	881b      	ldrh	r3, [r3, #0]
 8048b9c:	68fa      	ldr	r2, [r7, #12]
 8048b9e:	7812      	ldrb	r2, [r2, #0]
 8048ba0:	4413      	add	r3, r2
 8048ba2:	b29a      	uxth	r2, r3
 8048ba4:	683b      	ldr	r3, [r7, #0]
 8048ba6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8048ba8:	68fb      	ldr	r3, [r7, #12]
 8048baa:	781b      	ldrb	r3, [r3, #0]
 8048bac:	461a      	mov	r2, r3
 8048bae:	687b      	ldr	r3, [r7, #4]
 8048bb0:	4413      	add	r3, r2
 8048bb2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8048bb4:	68fb      	ldr	r3, [r7, #12]
}
 8048bb6:	4618      	mov	r0, r3
 8048bb8:	3714      	adds	r7, #20
 8048bba:	46bd      	mov	sp, r7
 8048bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048bc0:	4770      	bx	lr

08048bc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8048bc2:	b480      	push	{r7}
 8048bc4:	b087      	sub	sp, #28
 8048bc6:	af00      	add	r7, sp, #0
 8048bc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8048bca:	687b      	ldr	r3, [r7, #4]
 8048bcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8048bce:	697b      	ldr	r3, [r7, #20]
 8048bd0:	781b      	ldrb	r3, [r3, #0]
 8048bd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8048bd4:	697b      	ldr	r3, [r7, #20]
 8048bd6:	3301      	adds	r3, #1
 8048bd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8048bda:	697b      	ldr	r3, [r7, #20]
 8048bdc:	781b      	ldrb	r3, [r3, #0]
 8048bde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8048be0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8048be4:	021b      	lsls	r3, r3, #8
 8048be6:	b21a      	sxth	r2, r3
 8048be8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8048bec:	4313      	orrs	r3, r2
 8048bee:	b21b      	sxth	r3, r3
 8048bf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8048bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8048bf4:	4618      	mov	r0, r3
 8048bf6:	371c      	adds	r7, #28
 8048bf8:	46bd      	mov	sp, r7
 8048bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048bfe:	4770      	bx	lr

08048c00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048c00:	b580      	push	{r7, lr}
 8048c02:	b084      	sub	sp, #16
 8048c04:	af00      	add	r7, sp, #0
 8048c06:	6078      	str	r0, [r7, #4]
 8048c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048c0a:	2300      	movs	r3, #0
 8048c0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048c0e:	683b      	ldr	r3, [r7, #0]
 8048c10:	781b      	ldrb	r3, [r3, #0]
 8048c12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048c16:	2b40      	cmp	r3, #64	@ 0x40
 8048c18:	d005      	beq.n	8048c26 <USBD_StdDevReq+0x26>
 8048c1a:	2b40      	cmp	r3, #64	@ 0x40
 8048c1c:	d857      	bhi.n	8048cce <USBD_StdDevReq+0xce>
 8048c1e:	2b00      	cmp	r3, #0
 8048c20:	d00f      	beq.n	8048c42 <USBD_StdDevReq+0x42>
 8048c22:	2b20      	cmp	r3, #32
 8048c24:	d153      	bne.n	8048cce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8048c26:	687b      	ldr	r3, [r7, #4]
 8048c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8048c2c:	687b      	ldr	r3, [r7, #4]
 8048c2e:	32ae      	adds	r2, #174	@ 0xae
 8048c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048c34:	689b      	ldr	r3, [r3, #8]
 8048c36:	6839      	ldr	r1, [r7, #0]
 8048c38:	6878      	ldr	r0, [r7, #4]
 8048c3a:	4798      	blx	r3
 8048c3c:	4603      	mov	r3, r0
 8048c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8048c40:	e04a      	b.n	8048cd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048c42:	683b      	ldr	r3, [r7, #0]
 8048c44:	785b      	ldrb	r3, [r3, #1]
 8048c46:	2b09      	cmp	r3, #9
 8048c48:	d83b      	bhi.n	8048cc2 <USBD_StdDevReq+0xc2>
 8048c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8048c50 <USBD_StdDevReq+0x50>)
 8048c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048c50:	08048ca5 	.word	0x08048ca5
 8048c54:	08048cb9 	.word	0x08048cb9
 8048c58:	08048cc3 	.word	0x08048cc3
 8048c5c:	08048caf 	.word	0x08048caf
 8048c60:	08048cc3 	.word	0x08048cc3
 8048c64:	08048c83 	.word	0x08048c83
 8048c68:	08048c79 	.word	0x08048c79
 8048c6c:	08048cc3 	.word	0x08048cc3
 8048c70:	08048c9b 	.word	0x08048c9b
 8048c74:	08048c8d 	.word	0x08048c8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8048c78:	6839      	ldr	r1, [r7, #0]
 8048c7a:	6878      	ldr	r0, [r7, #4]
 8048c7c:	f000 fa3c 	bl	80490f8 <USBD_GetDescriptor>
          break;
 8048c80:	e024      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8048c82:	6839      	ldr	r1, [r7, #0]
 8048c84:	6878      	ldr	r0, [r7, #4]
 8048c86:	f000 fbf1 	bl	804946c <USBD_SetAddress>
          break;
 8048c8a:	e01f      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8048c8c:	6839      	ldr	r1, [r7, #0]
 8048c8e:	6878      	ldr	r0, [r7, #4]
 8048c90:	f000 fc30 	bl	80494f4 <USBD_SetConfig>
 8048c94:	4603      	mov	r3, r0
 8048c96:	73fb      	strb	r3, [r7, #15]
          break;
 8048c98:	e018      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8048c9a:	6839      	ldr	r1, [r7, #0]
 8048c9c:	6878      	ldr	r0, [r7, #4]
 8048c9e:	f000 fcd3 	bl	8049648 <USBD_GetConfig>
          break;
 8048ca2:	e013      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8048ca4:	6839      	ldr	r1, [r7, #0]
 8048ca6:	6878      	ldr	r0, [r7, #4]
 8048ca8:	f000 fd04 	bl	80496b4 <USBD_GetStatus>
          break;
 8048cac:	e00e      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8048cae:	6839      	ldr	r1, [r7, #0]
 8048cb0:	6878      	ldr	r0, [r7, #4]
 8048cb2:	f000 fd33 	bl	804971c <USBD_SetFeature>
          break;
 8048cb6:	e009      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8048cb8:	6839      	ldr	r1, [r7, #0]
 8048cba:	6878      	ldr	r0, [r7, #4]
 8048cbc:	f000 fd57 	bl	804976e <USBD_ClrFeature>
          break;
 8048cc0:	e004      	b.n	8048ccc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8048cc2:	6839      	ldr	r1, [r7, #0]
 8048cc4:	6878      	ldr	r0, [r7, #4]
 8048cc6:	f000 fdae 	bl	8049826 <USBD_CtlError>
          break;
 8048cca:	bf00      	nop
      }
      break;
 8048ccc:	e004      	b.n	8048cd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8048cce:	6839      	ldr	r1, [r7, #0]
 8048cd0:	6878      	ldr	r0, [r7, #4]
 8048cd2:	f000 fda8 	bl	8049826 <USBD_CtlError>
      break;
 8048cd6:	bf00      	nop
  }

  return ret;
 8048cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8048cda:	4618      	mov	r0, r3
 8048cdc:	3710      	adds	r7, #16
 8048cde:	46bd      	mov	sp, r7
 8048ce0:	bd80      	pop	{r7, pc}
 8048ce2:	bf00      	nop

08048ce4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048ce4:	b580      	push	{r7, lr}
 8048ce6:	b084      	sub	sp, #16
 8048ce8:	af00      	add	r7, sp, #0
 8048cea:	6078      	str	r0, [r7, #4]
 8048cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8048cee:	2300      	movs	r3, #0
 8048cf0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048cf2:	683b      	ldr	r3, [r7, #0]
 8048cf4:	781b      	ldrb	r3, [r3, #0]
 8048cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048cfa:	2b40      	cmp	r3, #64	@ 0x40
 8048cfc:	d005      	beq.n	8048d0a <USBD_StdItfReq+0x26>
 8048cfe:	2b40      	cmp	r3, #64	@ 0x40
 8048d00:	d852      	bhi.n	8048da8 <USBD_StdItfReq+0xc4>
 8048d02:	2b00      	cmp	r3, #0
 8048d04:	d001      	beq.n	8048d0a <USBD_StdItfReq+0x26>
 8048d06:	2b20      	cmp	r3, #32
 8048d08:	d14e      	bne.n	8048da8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8048d0a:	687b      	ldr	r3, [r7, #4]
 8048d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048d10:	b2db      	uxtb	r3, r3
 8048d12:	3b01      	subs	r3, #1
 8048d14:	2b02      	cmp	r3, #2
 8048d16:	d840      	bhi.n	8048d9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8048d18:	683b      	ldr	r3, [r7, #0]
 8048d1a:	889b      	ldrh	r3, [r3, #4]
 8048d1c:	b2db      	uxtb	r3, r3
 8048d1e:	2b01      	cmp	r3, #1
 8048d20:	d836      	bhi.n	8048d90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8048d22:	683b      	ldr	r3, [r7, #0]
 8048d24:	889b      	ldrh	r3, [r3, #4]
 8048d26:	b2db      	uxtb	r3, r3
 8048d28:	4619      	mov	r1, r3
 8048d2a:	6878      	ldr	r0, [r7, #4]
 8048d2c:	f7ff ff13 	bl	8048b56 <USBD_CoreFindIF>
 8048d30:	4603      	mov	r3, r0
 8048d32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048d34:	7bbb      	ldrb	r3, [r7, #14]
 8048d36:	2bff      	cmp	r3, #255	@ 0xff
 8048d38:	d01d      	beq.n	8048d76 <USBD_StdItfReq+0x92>
 8048d3a:	7bbb      	ldrb	r3, [r7, #14]
 8048d3c:	2b00      	cmp	r3, #0
 8048d3e:	d11a      	bne.n	8048d76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8048d40:	7bba      	ldrb	r2, [r7, #14]
 8048d42:	687b      	ldr	r3, [r7, #4]
 8048d44:	32ae      	adds	r2, #174	@ 0xae
 8048d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d4a:	689b      	ldr	r3, [r3, #8]
 8048d4c:	2b00      	cmp	r3, #0
 8048d4e:	d00f      	beq.n	8048d70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8048d50:	7bba      	ldrb	r2, [r7, #14]
 8048d52:	687b      	ldr	r3, [r7, #4]
 8048d54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8048d58:	7bba      	ldrb	r2, [r7, #14]
 8048d5a:	687b      	ldr	r3, [r7, #4]
 8048d5c:	32ae      	adds	r2, #174	@ 0xae
 8048d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d62:	689b      	ldr	r3, [r3, #8]
 8048d64:	6839      	ldr	r1, [r7, #0]
 8048d66:	6878      	ldr	r0, [r7, #4]
 8048d68:	4798      	blx	r3
 8048d6a:	4603      	mov	r3, r0
 8048d6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8048d6e:	e004      	b.n	8048d7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8048d70:	2303      	movs	r3, #3
 8048d72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8048d74:	e001      	b.n	8048d7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8048d76:	2303      	movs	r3, #3
 8048d78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8048d7a:	683b      	ldr	r3, [r7, #0]
 8048d7c:	88db      	ldrh	r3, [r3, #6]
 8048d7e:	2b00      	cmp	r3, #0
 8048d80:	d110      	bne.n	8048da4 <USBD_StdItfReq+0xc0>
 8048d82:	7bfb      	ldrb	r3, [r7, #15]
 8048d84:	2b00      	cmp	r3, #0
 8048d86:	d10d      	bne.n	8048da4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8048d88:	6878      	ldr	r0, [r7, #4]
 8048d8a:	f001 fd9b 	bl	804a8c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8048d8e:	e009      	b.n	8048da4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8048d90:	6839      	ldr	r1, [r7, #0]
 8048d92:	6878      	ldr	r0, [r7, #4]
 8048d94:	f000 fd47 	bl	8049826 <USBD_CtlError>
          break;
 8048d98:	e004      	b.n	8048da4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8048d9a:	6839      	ldr	r1, [r7, #0]
 8048d9c:	6878      	ldr	r0, [r7, #4]
 8048d9e:	f000 fd42 	bl	8049826 <USBD_CtlError>
          break;
 8048da2:	e000      	b.n	8048da6 <USBD_StdItfReq+0xc2>
          break;
 8048da4:	bf00      	nop
      }
      break;
 8048da6:	e004      	b.n	8048db2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8048da8:	6839      	ldr	r1, [r7, #0]
 8048daa:	6878      	ldr	r0, [r7, #4]
 8048dac:	f000 fd3b 	bl	8049826 <USBD_CtlError>
      break;
 8048db0:	bf00      	nop
  }

  return ret;
 8048db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8048db4:	4618      	mov	r0, r3
 8048db6:	3710      	adds	r7, #16
 8048db8:	46bd      	mov	sp, r7
 8048dba:	bd80      	pop	{r7, pc}

08048dbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8048dbc:	b580      	push	{r7, lr}
 8048dbe:	b084      	sub	sp, #16
 8048dc0:	af00      	add	r7, sp, #0
 8048dc2:	6078      	str	r0, [r7, #4]
 8048dc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8048dc6:	2300      	movs	r3, #0
 8048dc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8048dca:	683b      	ldr	r3, [r7, #0]
 8048dcc:	889b      	ldrh	r3, [r3, #4]
 8048dce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8048dd0:	683b      	ldr	r3, [r7, #0]
 8048dd2:	781b      	ldrb	r3, [r3, #0]
 8048dd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8048dd8:	2b40      	cmp	r3, #64	@ 0x40
 8048dda:	d007      	beq.n	8048dec <USBD_StdEPReq+0x30>
 8048ddc:	2b40      	cmp	r3, #64	@ 0x40
 8048dde:	f200 817f 	bhi.w	80490e0 <USBD_StdEPReq+0x324>
 8048de2:	2b00      	cmp	r3, #0
 8048de4:	d02a      	beq.n	8048e3c <USBD_StdEPReq+0x80>
 8048de6:	2b20      	cmp	r3, #32
 8048de8:	f040 817a 	bne.w	80490e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8048dec:	7bbb      	ldrb	r3, [r7, #14]
 8048dee:	4619      	mov	r1, r3
 8048df0:	6878      	ldr	r0, [r7, #4]
 8048df2:	f7ff febd 	bl	8048b70 <USBD_CoreFindEP>
 8048df6:	4603      	mov	r3, r0
 8048df8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048dfa:	7b7b      	ldrb	r3, [r7, #13]
 8048dfc:	2bff      	cmp	r3, #255	@ 0xff
 8048dfe:	f000 8174 	beq.w	80490ea <USBD_StdEPReq+0x32e>
 8048e02:	7b7b      	ldrb	r3, [r7, #13]
 8048e04:	2b00      	cmp	r3, #0
 8048e06:	f040 8170 	bne.w	80490ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8048e0a:	7b7a      	ldrb	r2, [r7, #13]
 8048e0c:	687b      	ldr	r3, [r7, #4]
 8048e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8048e12:	7b7a      	ldrb	r2, [r7, #13]
 8048e14:	687b      	ldr	r3, [r7, #4]
 8048e16:	32ae      	adds	r2, #174	@ 0xae
 8048e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048e1c:	689b      	ldr	r3, [r3, #8]
 8048e1e:	2b00      	cmp	r3, #0
 8048e20:	f000 8163 	beq.w	80490ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8048e24:	7b7a      	ldrb	r2, [r7, #13]
 8048e26:	687b      	ldr	r3, [r7, #4]
 8048e28:	32ae      	adds	r2, #174	@ 0xae
 8048e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048e2e:	689b      	ldr	r3, [r3, #8]
 8048e30:	6839      	ldr	r1, [r7, #0]
 8048e32:	6878      	ldr	r0, [r7, #4]
 8048e34:	4798      	blx	r3
 8048e36:	4603      	mov	r3, r0
 8048e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8048e3a:	e156      	b.n	80490ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8048e3c:	683b      	ldr	r3, [r7, #0]
 8048e3e:	785b      	ldrb	r3, [r3, #1]
 8048e40:	2b03      	cmp	r3, #3
 8048e42:	d008      	beq.n	8048e56 <USBD_StdEPReq+0x9a>
 8048e44:	2b03      	cmp	r3, #3
 8048e46:	f300 8145 	bgt.w	80490d4 <USBD_StdEPReq+0x318>
 8048e4a:	2b00      	cmp	r3, #0
 8048e4c:	f000 809b 	beq.w	8048f86 <USBD_StdEPReq+0x1ca>
 8048e50:	2b01      	cmp	r3, #1
 8048e52:	d03c      	beq.n	8048ece <USBD_StdEPReq+0x112>
 8048e54:	e13e      	b.n	80490d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8048e56:	687b      	ldr	r3, [r7, #4]
 8048e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048e5c:	b2db      	uxtb	r3, r3
 8048e5e:	2b02      	cmp	r3, #2
 8048e60:	d002      	beq.n	8048e68 <USBD_StdEPReq+0xac>
 8048e62:	2b03      	cmp	r3, #3
 8048e64:	d016      	beq.n	8048e94 <USBD_StdEPReq+0xd8>
 8048e66:	e02c      	b.n	8048ec2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8048e68:	7bbb      	ldrb	r3, [r7, #14]
 8048e6a:	2b00      	cmp	r3, #0
 8048e6c:	d00d      	beq.n	8048e8a <USBD_StdEPReq+0xce>
 8048e6e:	7bbb      	ldrb	r3, [r7, #14]
 8048e70:	2b80      	cmp	r3, #128	@ 0x80
 8048e72:	d00a      	beq.n	8048e8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8048e74:	7bbb      	ldrb	r3, [r7, #14]
 8048e76:	4619      	mov	r1, r3
 8048e78:	6878      	ldr	r0, [r7, #4]
 8048e7a:	f002 f997 	bl	804b1ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8048e7e:	2180      	movs	r1, #128	@ 0x80
 8048e80:	6878      	ldr	r0, [r7, #4]
 8048e82:	f002 f993 	bl	804b1ac <USBD_LL_StallEP>
 8048e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8048e88:	e020      	b.n	8048ecc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8048e8a:	6839      	ldr	r1, [r7, #0]
 8048e8c:	6878      	ldr	r0, [r7, #4]
 8048e8e:	f000 fcca 	bl	8049826 <USBD_CtlError>
              break;
 8048e92:	e01b      	b.n	8048ecc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8048e94:	683b      	ldr	r3, [r7, #0]
 8048e96:	885b      	ldrh	r3, [r3, #2]
 8048e98:	2b00      	cmp	r3, #0
 8048e9a:	d10e      	bne.n	8048eba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8048e9c:	7bbb      	ldrb	r3, [r7, #14]
 8048e9e:	2b00      	cmp	r3, #0
 8048ea0:	d00b      	beq.n	8048eba <USBD_StdEPReq+0xfe>
 8048ea2:	7bbb      	ldrb	r3, [r7, #14]
 8048ea4:	2b80      	cmp	r3, #128	@ 0x80
 8048ea6:	d008      	beq.n	8048eba <USBD_StdEPReq+0xfe>
 8048ea8:	683b      	ldr	r3, [r7, #0]
 8048eaa:	88db      	ldrh	r3, [r3, #6]
 8048eac:	2b00      	cmp	r3, #0
 8048eae:	d104      	bne.n	8048eba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8048eb0:	7bbb      	ldrb	r3, [r7, #14]
 8048eb2:	4619      	mov	r1, r3
 8048eb4:	6878      	ldr	r0, [r7, #4]
 8048eb6:	f002 f979 	bl	804b1ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8048eba:	6878      	ldr	r0, [r7, #4]
 8048ebc:	f001 fd02 	bl	804a8c4 <USBD_CtlSendStatus>

              break;
 8048ec0:	e004      	b.n	8048ecc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8048ec2:	6839      	ldr	r1, [r7, #0]
 8048ec4:	6878      	ldr	r0, [r7, #4]
 8048ec6:	f000 fcae 	bl	8049826 <USBD_CtlError>
              break;
 8048eca:	bf00      	nop
          }
          break;
 8048ecc:	e107      	b.n	80490de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8048ece:	687b      	ldr	r3, [r7, #4]
 8048ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048ed4:	b2db      	uxtb	r3, r3
 8048ed6:	2b02      	cmp	r3, #2
 8048ed8:	d002      	beq.n	8048ee0 <USBD_StdEPReq+0x124>
 8048eda:	2b03      	cmp	r3, #3
 8048edc:	d016      	beq.n	8048f0c <USBD_StdEPReq+0x150>
 8048ede:	e04b      	b.n	8048f78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8048ee0:	7bbb      	ldrb	r3, [r7, #14]
 8048ee2:	2b00      	cmp	r3, #0
 8048ee4:	d00d      	beq.n	8048f02 <USBD_StdEPReq+0x146>
 8048ee6:	7bbb      	ldrb	r3, [r7, #14]
 8048ee8:	2b80      	cmp	r3, #128	@ 0x80
 8048eea:	d00a      	beq.n	8048f02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8048eec:	7bbb      	ldrb	r3, [r7, #14]
 8048eee:	4619      	mov	r1, r3
 8048ef0:	6878      	ldr	r0, [r7, #4]
 8048ef2:	f002 f95b 	bl	804b1ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8048ef6:	2180      	movs	r1, #128	@ 0x80
 8048ef8:	6878      	ldr	r0, [r7, #4]
 8048efa:	f002 f957 	bl	804b1ac <USBD_LL_StallEP>
 8048efe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8048f00:	e040      	b.n	8048f84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8048f02:	6839      	ldr	r1, [r7, #0]
 8048f04:	6878      	ldr	r0, [r7, #4]
 8048f06:	f000 fc8e 	bl	8049826 <USBD_CtlError>
              break;
 8048f0a:	e03b      	b.n	8048f84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8048f0c:	683b      	ldr	r3, [r7, #0]
 8048f0e:	885b      	ldrh	r3, [r3, #2]
 8048f10:	2b00      	cmp	r3, #0
 8048f12:	d136      	bne.n	8048f82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8048f14:	7bbb      	ldrb	r3, [r7, #14]
 8048f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8048f1a:	2b00      	cmp	r3, #0
 8048f1c:	d004      	beq.n	8048f28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8048f1e:	7bbb      	ldrb	r3, [r7, #14]
 8048f20:	4619      	mov	r1, r3
 8048f22:	6878      	ldr	r0, [r7, #4]
 8048f24:	f002 f961 	bl	804b1ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8048f28:	6878      	ldr	r0, [r7, #4]
 8048f2a:	f001 fccb 	bl	804a8c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8048f2e:	7bbb      	ldrb	r3, [r7, #14]
 8048f30:	4619      	mov	r1, r3
 8048f32:	6878      	ldr	r0, [r7, #4]
 8048f34:	f7ff fe1c 	bl	8048b70 <USBD_CoreFindEP>
 8048f38:	4603      	mov	r3, r0
 8048f3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8048f3c:	7b7b      	ldrb	r3, [r7, #13]
 8048f3e:	2bff      	cmp	r3, #255	@ 0xff
 8048f40:	d01f      	beq.n	8048f82 <USBD_StdEPReq+0x1c6>
 8048f42:	7b7b      	ldrb	r3, [r7, #13]
 8048f44:	2b00      	cmp	r3, #0
 8048f46:	d11c      	bne.n	8048f82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8048f48:	7b7a      	ldrb	r2, [r7, #13]
 8048f4a:	687b      	ldr	r3, [r7, #4]
 8048f4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8048f50:	7b7a      	ldrb	r2, [r7, #13]
 8048f52:	687b      	ldr	r3, [r7, #4]
 8048f54:	32ae      	adds	r2, #174	@ 0xae
 8048f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f5a:	689b      	ldr	r3, [r3, #8]
 8048f5c:	2b00      	cmp	r3, #0
 8048f5e:	d010      	beq.n	8048f82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8048f60:	7b7a      	ldrb	r2, [r7, #13]
 8048f62:	687b      	ldr	r3, [r7, #4]
 8048f64:	32ae      	adds	r2, #174	@ 0xae
 8048f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048f6a:	689b      	ldr	r3, [r3, #8]
 8048f6c:	6839      	ldr	r1, [r7, #0]
 8048f6e:	6878      	ldr	r0, [r7, #4]
 8048f70:	4798      	blx	r3
 8048f72:	4603      	mov	r3, r0
 8048f74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8048f76:	e004      	b.n	8048f82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8048f78:	6839      	ldr	r1, [r7, #0]
 8048f7a:	6878      	ldr	r0, [r7, #4]
 8048f7c:	f000 fc53 	bl	8049826 <USBD_CtlError>
              break;
 8048f80:	e000      	b.n	8048f84 <USBD_StdEPReq+0x1c8>
              break;
 8048f82:	bf00      	nop
          }
          break;
 8048f84:	e0ab      	b.n	80490de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8048f86:	687b      	ldr	r3, [r7, #4]
 8048f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8048f8c:	b2db      	uxtb	r3, r3
 8048f8e:	2b02      	cmp	r3, #2
 8048f90:	d002      	beq.n	8048f98 <USBD_StdEPReq+0x1dc>
 8048f92:	2b03      	cmp	r3, #3
 8048f94:	d032      	beq.n	8048ffc <USBD_StdEPReq+0x240>
 8048f96:	e097      	b.n	80490c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8048f98:	7bbb      	ldrb	r3, [r7, #14]
 8048f9a:	2b00      	cmp	r3, #0
 8048f9c:	d007      	beq.n	8048fae <USBD_StdEPReq+0x1f2>
 8048f9e:	7bbb      	ldrb	r3, [r7, #14]
 8048fa0:	2b80      	cmp	r3, #128	@ 0x80
 8048fa2:	d004      	beq.n	8048fae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8048fa4:	6839      	ldr	r1, [r7, #0]
 8048fa6:	6878      	ldr	r0, [r7, #4]
 8048fa8:	f000 fc3d 	bl	8049826 <USBD_CtlError>
                break;
 8048fac:	e091      	b.n	80490d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8048fae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8048fb2:	2b00      	cmp	r3, #0
 8048fb4:	da0b      	bge.n	8048fce <USBD_StdEPReq+0x212>
 8048fb6:	7bbb      	ldrb	r3, [r7, #14]
 8048fb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8048fbc:	4613      	mov	r3, r2
 8048fbe:	009b      	lsls	r3, r3, #2
 8048fc0:	4413      	add	r3, r2
 8048fc2:	009b      	lsls	r3, r3, #2
 8048fc4:	3310      	adds	r3, #16
 8048fc6:	687a      	ldr	r2, [r7, #4]
 8048fc8:	4413      	add	r3, r2
 8048fca:	3304      	adds	r3, #4
 8048fcc:	e00b      	b.n	8048fe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8048fce:	7bbb      	ldrb	r3, [r7, #14]
 8048fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8048fd4:	4613      	mov	r3, r2
 8048fd6:	009b      	lsls	r3, r3, #2
 8048fd8:	4413      	add	r3, r2
 8048fda:	009b      	lsls	r3, r3, #2
 8048fdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8048fe0:	687a      	ldr	r2, [r7, #4]
 8048fe2:	4413      	add	r3, r2
 8048fe4:	3304      	adds	r3, #4
 8048fe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8048fe8:	68bb      	ldr	r3, [r7, #8]
 8048fea:	2200      	movs	r2, #0
 8048fec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8048fee:	68bb      	ldr	r3, [r7, #8]
 8048ff0:	2202      	movs	r2, #2
 8048ff2:	4619      	mov	r1, r3
 8048ff4:	6878      	ldr	r0, [r7, #4]
 8048ff6:	f001 fc0b 	bl	804a810 <USBD_CtlSendData>
              break;
 8048ffa:	e06a      	b.n	80490d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8048ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049000:	2b00      	cmp	r3, #0
 8049002:	da11      	bge.n	8049028 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8049004:	7bbb      	ldrb	r3, [r7, #14]
 8049006:	f003 020f 	and.w	r2, r3, #15
 804900a:	6879      	ldr	r1, [r7, #4]
 804900c:	4613      	mov	r3, r2
 804900e:	009b      	lsls	r3, r3, #2
 8049010:	4413      	add	r3, r2
 8049012:	009b      	lsls	r3, r3, #2
 8049014:	440b      	add	r3, r1
 8049016:	3324      	adds	r3, #36	@ 0x24
 8049018:	881b      	ldrh	r3, [r3, #0]
 804901a:	2b00      	cmp	r3, #0
 804901c:	d117      	bne.n	804904e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 804901e:	6839      	ldr	r1, [r7, #0]
 8049020:	6878      	ldr	r0, [r7, #4]
 8049022:	f000 fc00 	bl	8049826 <USBD_CtlError>
                  break;
 8049026:	e054      	b.n	80490d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8049028:	7bbb      	ldrb	r3, [r7, #14]
 804902a:	f003 020f 	and.w	r2, r3, #15
 804902e:	6879      	ldr	r1, [r7, #4]
 8049030:	4613      	mov	r3, r2
 8049032:	009b      	lsls	r3, r3, #2
 8049034:	4413      	add	r3, r2
 8049036:	009b      	lsls	r3, r3, #2
 8049038:	440b      	add	r3, r1
 804903a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 804903e:	881b      	ldrh	r3, [r3, #0]
 8049040:	2b00      	cmp	r3, #0
 8049042:	d104      	bne.n	804904e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8049044:	6839      	ldr	r1, [r7, #0]
 8049046:	6878      	ldr	r0, [r7, #4]
 8049048:	f000 fbed 	bl	8049826 <USBD_CtlError>
                  break;
 804904c:	e041      	b.n	80490d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 804904e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049052:	2b00      	cmp	r3, #0
 8049054:	da0b      	bge.n	804906e <USBD_StdEPReq+0x2b2>
 8049056:	7bbb      	ldrb	r3, [r7, #14]
 8049058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804905c:	4613      	mov	r3, r2
 804905e:	009b      	lsls	r3, r3, #2
 8049060:	4413      	add	r3, r2
 8049062:	009b      	lsls	r3, r3, #2
 8049064:	3310      	adds	r3, #16
 8049066:	687a      	ldr	r2, [r7, #4]
 8049068:	4413      	add	r3, r2
 804906a:	3304      	adds	r3, #4
 804906c:	e00b      	b.n	8049086 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 804906e:	7bbb      	ldrb	r3, [r7, #14]
 8049070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8049074:	4613      	mov	r3, r2
 8049076:	009b      	lsls	r3, r3, #2
 8049078:	4413      	add	r3, r2
 804907a:	009b      	lsls	r3, r3, #2
 804907c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8049080:	687a      	ldr	r2, [r7, #4]
 8049082:	4413      	add	r3, r2
 8049084:	3304      	adds	r3, #4
 8049086:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8049088:	7bbb      	ldrb	r3, [r7, #14]
 804908a:	2b00      	cmp	r3, #0
 804908c:	d002      	beq.n	8049094 <USBD_StdEPReq+0x2d8>
 804908e:	7bbb      	ldrb	r3, [r7, #14]
 8049090:	2b80      	cmp	r3, #128	@ 0x80
 8049092:	d103      	bne.n	804909c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8049094:	68bb      	ldr	r3, [r7, #8]
 8049096:	2200      	movs	r2, #0
 8049098:	601a      	str	r2, [r3, #0]
 804909a:	e00e      	b.n	80490ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 804909c:	7bbb      	ldrb	r3, [r7, #14]
 804909e:	4619      	mov	r1, r3
 80490a0:	6878      	ldr	r0, [r7, #4]
 80490a2:	f002 f8c1 	bl	804b228 <USBD_LL_IsStallEP>
 80490a6:	4603      	mov	r3, r0
 80490a8:	2b00      	cmp	r3, #0
 80490aa:	d003      	beq.n	80490b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80490ac:	68bb      	ldr	r3, [r7, #8]
 80490ae:	2201      	movs	r2, #1
 80490b0:	601a      	str	r2, [r3, #0]
 80490b2:	e002      	b.n	80490ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80490b4:	68bb      	ldr	r3, [r7, #8]
 80490b6:	2200      	movs	r2, #0
 80490b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80490ba:	68bb      	ldr	r3, [r7, #8]
 80490bc:	2202      	movs	r2, #2
 80490be:	4619      	mov	r1, r3
 80490c0:	6878      	ldr	r0, [r7, #4]
 80490c2:	f001 fba5 	bl	804a810 <USBD_CtlSendData>
              break;
 80490c6:	e004      	b.n	80490d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80490c8:	6839      	ldr	r1, [r7, #0]
 80490ca:	6878      	ldr	r0, [r7, #4]
 80490cc:	f000 fbab 	bl	8049826 <USBD_CtlError>
              break;
 80490d0:	bf00      	nop
          }
          break;
 80490d2:	e004      	b.n	80490de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80490d4:	6839      	ldr	r1, [r7, #0]
 80490d6:	6878      	ldr	r0, [r7, #4]
 80490d8:	f000 fba5 	bl	8049826 <USBD_CtlError>
          break;
 80490dc:	bf00      	nop
      }
      break;
 80490de:	e005      	b.n	80490ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80490e0:	6839      	ldr	r1, [r7, #0]
 80490e2:	6878      	ldr	r0, [r7, #4]
 80490e4:	f000 fb9f 	bl	8049826 <USBD_CtlError>
      break;
 80490e8:	e000      	b.n	80490ec <USBD_StdEPReq+0x330>
      break;
 80490ea:	bf00      	nop
  }

  return ret;
 80490ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80490ee:	4618      	mov	r0, r3
 80490f0:	3710      	adds	r7, #16
 80490f2:	46bd      	mov	sp, r7
 80490f4:	bd80      	pop	{r7, pc}
	...

080490f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80490f8:	b580      	push	{r7, lr}
 80490fa:	b086      	sub	sp, #24
 80490fc:	af00      	add	r7, sp, #0
 80490fe:	6078      	str	r0, [r7, #4]
 8049100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8049102:	2300      	movs	r3, #0
 8049104:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 8049106:	2300      	movs	r3, #0
 8049108:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 804910a:	2300      	movs	r3, #0
 804910c:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 804910e:	683b      	ldr	r3, [r7, #0]
 8049110:	885b      	ldrh	r3, [r3, #2]
 8049112:	0a1b      	lsrs	r3, r3, #8
 8049114:	b29b      	uxth	r3, r3
 8049116:	3b01      	subs	r3, #1
 8049118:	2b0e      	cmp	r3, #14
 804911a:	f200 8179 	bhi.w	8049410 <USBD_GetDescriptor+0x318>
 804911e:	a201      	add	r2, pc, #4	@ (adr r2, 8049124 <USBD_GetDescriptor+0x2c>)
 8049120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049124:	08049195 	.word	0x08049195
 8049128:	080491ad 	.word	0x080491ad
 804912c:	080491ed 	.word	0x080491ed
 8049130:	08049411 	.word	0x08049411
 8049134:	08049411 	.word	0x08049411
 8049138:	080493b1 	.word	0x080493b1
 804913c:	080493dd 	.word	0x080493dd
 8049140:	08049411 	.word	0x08049411
 8049144:	08049411 	.word	0x08049411
 8049148:	08049411 	.word	0x08049411
 804914c:	08049411 	.word	0x08049411
 8049150:	08049411 	.word	0x08049411
 8049154:	08049411 	.word	0x08049411
 8049158:	08049411 	.word	0x08049411
 804915c:	08049161 	.word	0x08049161
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8049160:	687b      	ldr	r3, [r7, #4]
 8049162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049166:	69db      	ldr	r3, [r3, #28]
 8049168:	2b00      	cmp	r3, #0
 804916a:	d00b      	beq.n	8049184 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 804916c:	687b      	ldr	r3, [r7, #4]
 804916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049172:	69db      	ldr	r3, [r3, #28]
 8049174:	687a      	ldr	r2, [r7, #4]
 8049176:	7c12      	ldrb	r2, [r2, #16]
 8049178:	f107 010a 	add.w	r1, r7, #10
 804917c:	4610      	mov	r0, r2
 804917e:	4798      	blx	r3
 8049180:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8049182:	e14d      	b.n	8049420 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8049184:	6839      	ldr	r1, [r7, #0]
 8049186:	6878      	ldr	r0, [r7, #4]
 8049188:	f000 fb4d 	bl	8049826 <USBD_CtlError>
        err++;
 804918c:	7cfb      	ldrb	r3, [r7, #19]
 804918e:	3301      	adds	r3, #1
 8049190:	74fb      	strb	r3, [r7, #19]
      break;
 8049192:	e145      	b.n	8049420 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8049194:	687b      	ldr	r3, [r7, #4]
 8049196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804919a:	681b      	ldr	r3, [r3, #0]
 804919c:	687a      	ldr	r2, [r7, #4]
 804919e:	7c12      	ldrb	r2, [r2, #16]
 80491a0:	f107 010a 	add.w	r1, r7, #10
 80491a4:	4610      	mov	r0, r2
 80491a6:	4798      	blx	r3
 80491a8:	6178      	str	r0, [r7, #20]
      break;
 80491aa:	e139      	b.n	8049420 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80491ac:	687b      	ldr	r3, [r7, #4]
 80491ae:	7c1b      	ldrb	r3, [r3, #16]
 80491b0:	2b00      	cmp	r3, #0
 80491b2:	d10d      	bne.n	80491d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80491b4:	687b      	ldr	r3, [r7, #4]
 80491b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80491ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80491bc:	f107 020a 	add.w	r2, r7, #10
 80491c0:	4610      	mov	r0, r2
 80491c2:	4798      	blx	r3
 80491c4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80491c6:	697b      	ldr	r3, [r7, #20]
 80491c8:	3301      	adds	r3, #1
 80491ca:	2202      	movs	r2, #2
 80491cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80491ce:	e127      	b.n	8049420 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80491d0:	687b      	ldr	r3, [r7, #4]
 80491d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80491d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80491d8:	f107 020a 	add.w	r2, r7, #10
 80491dc:	4610      	mov	r0, r2
 80491de:	4798      	blx	r3
 80491e0:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80491e2:	697b      	ldr	r3, [r7, #20]
 80491e4:	3301      	adds	r3, #1
 80491e6:	2202      	movs	r2, #2
 80491e8:	701a      	strb	r2, [r3, #0]
      break;
 80491ea:	e119      	b.n	8049420 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80491ec:	683b      	ldr	r3, [r7, #0]
 80491ee:	885b      	ldrh	r3, [r3, #2]
 80491f0:	b2db      	uxtb	r3, r3
 80491f2:	2b05      	cmp	r3, #5
 80491f4:	f200 80ac 	bhi.w	8049350 <USBD_GetDescriptor+0x258>
 80491f8:	a201      	add	r2, pc, #4	@ (adr r2, 8049200 <USBD_GetDescriptor+0x108>)
 80491fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80491fe:	bf00      	nop
 8049200:	08049219 	.word	0x08049219
 8049204:	0804924d 	.word	0x0804924d
 8049208:	08049281 	.word	0x08049281
 804920c:	080492b5 	.word	0x080492b5
 8049210:	080492e9 	.word	0x080492e9
 8049214:	0804931d 	.word	0x0804931d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8049218:	687b      	ldr	r3, [r7, #4]
 804921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804921e:	685b      	ldr	r3, [r3, #4]
 8049220:	2b00      	cmp	r3, #0
 8049222:	d00b      	beq.n	804923c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8049224:	687b      	ldr	r3, [r7, #4]
 8049226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804922a:	685b      	ldr	r3, [r3, #4]
 804922c:	687a      	ldr	r2, [r7, #4]
 804922e:	7c12      	ldrb	r2, [r2, #16]
 8049230:	f107 010a 	add.w	r1, r7, #10
 8049234:	4610      	mov	r0, r2
 8049236:	4798      	blx	r3
 8049238:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804923a:	e0b8      	b.n	80493ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 804923c:	6839      	ldr	r1, [r7, #0]
 804923e:	6878      	ldr	r0, [r7, #4]
 8049240:	f000 faf1 	bl	8049826 <USBD_CtlError>
            err++;
 8049244:	7cfb      	ldrb	r3, [r7, #19]
 8049246:	3301      	adds	r3, #1
 8049248:	74fb      	strb	r3, [r7, #19]
          break;
 804924a:	e0b0      	b.n	80493ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 804924c:	687b      	ldr	r3, [r7, #4]
 804924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049252:	689b      	ldr	r3, [r3, #8]
 8049254:	2b00      	cmp	r3, #0
 8049256:	d00b      	beq.n	8049270 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8049258:	687b      	ldr	r3, [r7, #4]
 804925a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804925e:	689b      	ldr	r3, [r3, #8]
 8049260:	687a      	ldr	r2, [r7, #4]
 8049262:	7c12      	ldrb	r2, [r2, #16]
 8049264:	f107 010a 	add.w	r1, r7, #10
 8049268:	4610      	mov	r0, r2
 804926a:	4798      	blx	r3
 804926c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804926e:	e09e      	b.n	80493ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8049270:	6839      	ldr	r1, [r7, #0]
 8049272:	6878      	ldr	r0, [r7, #4]
 8049274:	f000 fad7 	bl	8049826 <USBD_CtlError>
            err++;
 8049278:	7cfb      	ldrb	r3, [r7, #19]
 804927a:	3301      	adds	r3, #1
 804927c:	74fb      	strb	r3, [r7, #19]
          break;
 804927e:	e096      	b.n	80493ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8049280:	687b      	ldr	r3, [r7, #4]
 8049282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049286:	68db      	ldr	r3, [r3, #12]
 8049288:	2b00      	cmp	r3, #0
 804928a:	d00b      	beq.n	80492a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 804928c:	687b      	ldr	r3, [r7, #4]
 804928e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049292:	68db      	ldr	r3, [r3, #12]
 8049294:	687a      	ldr	r2, [r7, #4]
 8049296:	7c12      	ldrb	r2, [r2, #16]
 8049298:	f107 010a 	add.w	r1, r7, #10
 804929c:	4610      	mov	r0, r2
 804929e:	4798      	blx	r3
 80492a0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80492a2:	e084      	b.n	80493ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80492a4:	6839      	ldr	r1, [r7, #0]
 80492a6:	6878      	ldr	r0, [r7, #4]
 80492a8:	f000 fabd 	bl	8049826 <USBD_CtlError>
            err++;
 80492ac:	7cfb      	ldrb	r3, [r7, #19]
 80492ae:	3301      	adds	r3, #1
 80492b0:	74fb      	strb	r3, [r7, #19]
          break;
 80492b2:	e07c      	b.n	80493ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80492b4:	687b      	ldr	r3, [r7, #4]
 80492b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492ba:	691b      	ldr	r3, [r3, #16]
 80492bc:	2b00      	cmp	r3, #0
 80492be:	d00b      	beq.n	80492d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80492c0:	687b      	ldr	r3, [r7, #4]
 80492c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492c6:	691b      	ldr	r3, [r3, #16]
 80492c8:	687a      	ldr	r2, [r7, #4]
 80492ca:	7c12      	ldrb	r2, [r2, #16]
 80492cc:	f107 010a 	add.w	r1, r7, #10
 80492d0:	4610      	mov	r0, r2
 80492d2:	4798      	blx	r3
 80492d4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80492d6:	e06a      	b.n	80493ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80492d8:	6839      	ldr	r1, [r7, #0]
 80492da:	6878      	ldr	r0, [r7, #4]
 80492dc:	f000 faa3 	bl	8049826 <USBD_CtlError>
            err++;
 80492e0:	7cfb      	ldrb	r3, [r7, #19]
 80492e2:	3301      	adds	r3, #1
 80492e4:	74fb      	strb	r3, [r7, #19]
          break;
 80492e6:	e062      	b.n	80493ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80492e8:	687b      	ldr	r3, [r7, #4]
 80492ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492ee:	695b      	ldr	r3, [r3, #20]
 80492f0:	2b00      	cmp	r3, #0
 80492f2:	d00b      	beq.n	804930c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80492f4:	687b      	ldr	r3, [r7, #4]
 80492f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80492fa:	695b      	ldr	r3, [r3, #20]
 80492fc:	687a      	ldr	r2, [r7, #4]
 80492fe:	7c12      	ldrb	r2, [r2, #16]
 8049300:	f107 010a 	add.w	r1, r7, #10
 8049304:	4610      	mov	r0, r2
 8049306:	4798      	blx	r3
 8049308:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804930a:	e050      	b.n	80493ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 804930c:	6839      	ldr	r1, [r7, #0]
 804930e:	6878      	ldr	r0, [r7, #4]
 8049310:	f000 fa89 	bl	8049826 <USBD_CtlError>
            err++;
 8049314:	7cfb      	ldrb	r3, [r7, #19]
 8049316:	3301      	adds	r3, #1
 8049318:	74fb      	strb	r3, [r7, #19]
          break;
 804931a:	e048      	b.n	80493ae <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 804931c:	687b      	ldr	r3, [r7, #4]
 804931e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8049322:	699b      	ldr	r3, [r3, #24]
 8049324:	2b00      	cmp	r3, #0
 8049326:	d00b      	beq.n	8049340 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8049328:	687b      	ldr	r3, [r7, #4]
 804932a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 804932e:	699b      	ldr	r3, [r3, #24]
 8049330:	687a      	ldr	r2, [r7, #4]
 8049332:	7c12      	ldrb	r2, [r2, #16]
 8049334:	f107 010a 	add.w	r1, r7, #10
 8049338:	4610      	mov	r0, r2
 804933a:	4798      	blx	r3
 804933c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 804933e:	e036      	b.n	80493ae <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8049340:	6839      	ldr	r1, [r7, #0]
 8049342:	6878      	ldr	r0, [r7, #4]
 8049344:	f000 fa6f 	bl	8049826 <USBD_CtlError>
            err++;
 8049348:	7cfb      	ldrb	r3, [r7, #19]
 804934a:	3301      	adds	r3, #1
 804934c:	74fb      	strb	r3, [r7, #19]
          break;
 804934e:	e02e      	b.n	80493ae <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8049350:	2300      	movs	r3, #0
 8049352:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8049354:	2300      	movs	r3, #0
 8049356:	60fb      	str	r3, [r7, #12]
 8049358:	e020      	b.n	804939c <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 804935a:	687b      	ldr	r3, [r7, #4]
 804935c:	68fa      	ldr	r2, [r7, #12]
 804935e:	32ae      	adds	r2, #174	@ 0xae
 8049360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8049366:	2b00      	cmp	r3, #0
 8049368:	d015      	beq.n	8049396 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 804936a:	687b      	ldr	r3, [r7, #4]
 804936c:	68fa      	ldr	r2, [r7, #12]
 804936e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 8049372:	687b      	ldr	r3, [r7, #4]
 8049374:	68fa      	ldr	r2, [r7, #12]
 8049376:	32ae      	adds	r2, #174	@ 0xae
 8049378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804937c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804937e:	683a      	ldr	r2, [r7, #0]
 8049380:	8852      	ldrh	r2, [r2, #2]
 8049382:	b2d1      	uxtb	r1, r2
 8049384:	f107 020a 	add.w	r2, r7, #10
 8049388:	6878      	ldr	r0, [r7, #4]
 804938a:	4798      	blx	r3
 804938c:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 804938e:	697b      	ldr	r3, [r7, #20]
 8049390:	2b00      	cmp	r3, #0
 8049392:	d10a      	bne.n	80493aa <USBD_GetDescriptor+0x2b2>
              {
                continue;
 8049394:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8049396:	68fb      	ldr	r3, [r7, #12]
 8049398:	3301      	adds	r3, #1
 804939a:	60fb      	str	r3, [r7, #12]
 804939c:	687b      	ldr	r3, [r7, #4]
 804939e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80493a2:	68fa      	ldr	r2, [r7, #12]
 80493a4:	429a      	cmp	r2, r3
 80493a6:	d3d8      	bcc.n	804935a <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80493a8:	e000      	b.n	80493ac <USBD_GetDescriptor+0x2b4>
                break;
 80493aa:	bf00      	nop
          break;
 80493ac:	bf00      	nop
      }
      break;
 80493ae:	e037      	b.n	8049420 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80493b0:	687b      	ldr	r3, [r7, #4]
 80493b2:	7c1b      	ldrb	r3, [r3, #16]
 80493b4:	2b00      	cmp	r3, #0
 80493b6:	d109      	bne.n	80493cc <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80493b8:	687b      	ldr	r3, [r7, #4]
 80493ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80493be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80493c0:	f107 020a 	add.w	r2, r7, #10
 80493c4:	4610      	mov	r0, r2
 80493c6:	4798      	blx	r3
 80493c8:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80493ca:	e029      	b.n	8049420 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80493cc:	6839      	ldr	r1, [r7, #0]
 80493ce:	6878      	ldr	r0, [r7, #4]
 80493d0:	f000 fa29 	bl	8049826 <USBD_CtlError>
        err++;
 80493d4:	7cfb      	ldrb	r3, [r7, #19]
 80493d6:	3301      	adds	r3, #1
 80493d8:	74fb      	strb	r3, [r7, #19]
      break;
 80493da:	e021      	b.n	8049420 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80493dc:	687b      	ldr	r3, [r7, #4]
 80493de:	7c1b      	ldrb	r3, [r3, #16]
 80493e0:	2b00      	cmp	r3, #0
 80493e2:	d10d      	bne.n	8049400 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80493e4:	687b      	ldr	r3, [r7, #4]
 80493e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80493ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80493ec:	f107 020a 	add.w	r2, r7, #10
 80493f0:	4610      	mov	r0, r2
 80493f2:	4798      	blx	r3
 80493f4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80493f6:	697b      	ldr	r3, [r7, #20]
 80493f8:	3301      	adds	r3, #1
 80493fa:	2207      	movs	r2, #7
 80493fc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80493fe:	e00f      	b.n	8049420 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8049400:	6839      	ldr	r1, [r7, #0]
 8049402:	6878      	ldr	r0, [r7, #4]
 8049404:	f000 fa0f 	bl	8049826 <USBD_CtlError>
        err++;
 8049408:	7cfb      	ldrb	r3, [r7, #19]
 804940a:	3301      	adds	r3, #1
 804940c:	74fb      	strb	r3, [r7, #19]
      break;
 804940e:	e007      	b.n	8049420 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 8049410:	6839      	ldr	r1, [r7, #0]
 8049412:	6878      	ldr	r0, [r7, #4]
 8049414:	f000 fa07 	bl	8049826 <USBD_CtlError>
      err++;
 8049418:	7cfb      	ldrb	r3, [r7, #19]
 804941a:	3301      	adds	r3, #1
 804941c:	74fb      	strb	r3, [r7, #19]
      break;
 804941e:	bf00      	nop
  }

  if (err != 0U)
 8049420:	7cfb      	ldrb	r3, [r7, #19]
 8049422:	2b00      	cmp	r3, #0
 8049424:	d11e      	bne.n	8049464 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 8049426:	683b      	ldr	r3, [r7, #0]
 8049428:	88db      	ldrh	r3, [r3, #6]
 804942a:	2b00      	cmp	r3, #0
 804942c:	d016      	beq.n	804945c <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 804942e:	897b      	ldrh	r3, [r7, #10]
 8049430:	2b00      	cmp	r3, #0
 8049432:	d00e      	beq.n	8049452 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 8049434:	683b      	ldr	r3, [r7, #0]
 8049436:	88da      	ldrh	r2, [r3, #6]
 8049438:	897b      	ldrh	r3, [r7, #10]
 804943a:	4293      	cmp	r3, r2
 804943c:	bf28      	it	cs
 804943e:	4613      	movcs	r3, r2
 8049440:	b29b      	uxth	r3, r3
 8049442:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8049444:	897b      	ldrh	r3, [r7, #10]
 8049446:	461a      	mov	r2, r3
 8049448:	6979      	ldr	r1, [r7, #20]
 804944a:	6878      	ldr	r0, [r7, #4]
 804944c:	f001 f9e0 	bl	804a810 <USBD_CtlSendData>
 8049450:	e009      	b.n	8049466 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8049452:	6839      	ldr	r1, [r7, #0]
 8049454:	6878      	ldr	r0, [r7, #4]
 8049456:	f000 f9e6 	bl	8049826 <USBD_CtlError>
 804945a:	e004      	b.n	8049466 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 804945c:	6878      	ldr	r0, [r7, #4]
 804945e:	f001 fa31 	bl	804a8c4 <USBD_CtlSendStatus>
 8049462:	e000      	b.n	8049466 <USBD_GetDescriptor+0x36e>
    return;
 8049464:	bf00      	nop
  }
}
 8049466:	3718      	adds	r7, #24
 8049468:	46bd      	mov	sp, r7
 804946a:	bd80      	pop	{r7, pc}

0804946c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804946c:	b580      	push	{r7, lr}
 804946e:	b084      	sub	sp, #16
 8049470:	af00      	add	r7, sp, #0
 8049472:	6078      	str	r0, [r7, #4]
 8049474:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8049476:	683b      	ldr	r3, [r7, #0]
 8049478:	889b      	ldrh	r3, [r3, #4]
 804947a:	2b00      	cmp	r3, #0
 804947c:	d131      	bne.n	80494e2 <USBD_SetAddress+0x76>
 804947e:	683b      	ldr	r3, [r7, #0]
 8049480:	88db      	ldrh	r3, [r3, #6]
 8049482:	2b00      	cmp	r3, #0
 8049484:	d12d      	bne.n	80494e2 <USBD_SetAddress+0x76>
 8049486:	683b      	ldr	r3, [r7, #0]
 8049488:	885b      	ldrh	r3, [r3, #2]
 804948a:	2b7f      	cmp	r3, #127	@ 0x7f
 804948c:	d829      	bhi.n	80494e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 804948e:	683b      	ldr	r3, [r7, #0]
 8049490:	885b      	ldrh	r3, [r3, #2]
 8049492:	b2db      	uxtb	r3, r3
 8049494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8049498:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 804949a:	687b      	ldr	r3, [r7, #4]
 804949c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80494a0:	b2db      	uxtb	r3, r3
 80494a2:	2b03      	cmp	r3, #3
 80494a4:	d104      	bne.n	80494b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80494a6:	6839      	ldr	r1, [r7, #0]
 80494a8:	6878      	ldr	r0, [r7, #4]
 80494aa:	f000 f9bc 	bl	8049826 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80494ae:	e01d      	b.n	80494ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80494b0:	687b      	ldr	r3, [r7, #4]
 80494b2:	7bfa      	ldrb	r2, [r7, #15]
 80494b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80494b8:	7bfb      	ldrb	r3, [r7, #15]
 80494ba:	4619      	mov	r1, r3
 80494bc:	6878      	ldr	r0, [r7, #4]
 80494be:	f001 fedf 	bl	804b280 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80494c2:	6878      	ldr	r0, [r7, #4]
 80494c4:	f001 f9fe 	bl	804a8c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80494c8:	7bfb      	ldrb	r3, [r7, #15]
 80494ca:	2b00      	cmp	r3, #0
 80494cc:	d004      	beq.n	80494d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80494ce:	687b      	ldr	r3, [r7, #4]
 80494d0:	2202      	movs	r2, #2
 80494d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80494d6:	e009      	b.n	80494ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80494d8:	687b      	ldr	r3, [r7, #4]
 80494da:	2201      	movs	r2, #1
 80494dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80494e0:	e004      	b.n	80494ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80494e2:	6839      	ldr	r1, [r7, #0]
 80494e4:	6878      	ldr	r0, [r7, #4]
 80494e6:	f000 f99e 	bl	8049826 <USBD_CtlError>
  }
}
 80494ea:	bf00      	nop
 80494ec:	bf00      	nop
 80494ee:	3710      	adds	r7, #16
 80494f0:	46bd      	mov	sp, r7
 80494f2:	bd80      	pop	{r7, pc}

080494f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80494f4:	b580      	push	{r7, lr}
 80494f6:	b084      	sub	sp, #16
 80494f8:	af00      	add	r7, sp, #0
 80494fa:	6078      	str	r0, [r7, #4]
 80494fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80494fe:	2300      	movs	r3, #0
 8049500:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8049502:	683b      	ldr	r3, [r7, #0]
 8049504:	885b      	ldrh	r3, [r3, #2]
 8049506:	b2da      	uxtb	r2, r3
 8049508:	4b4e      	ldr	r3, [pc, #312]	@ (8049644 <USBD_SetConfig+0x150>)
 804950a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 804950c:	4b4d      	ldr	r3, [pc, #308]	@ (8049644 <USBD_SetConfig+0x150>)
 804950e:	781b      	ldrb	r3, [r3, #0]
 8049510:	2b01      	cmp	r3, #1
 8049512:	d905      	bls.n	8049520 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8049514:	6839      	ldr	r1, [r7, #0]
 8049516:	6878      	ldr	r0, [r7, #4]
 8049518:	f000 f985 	bl	8049826 <USBD_CtlError>
    return USBD_FAIL;
 804951c:	2303      	movs	r3, #3
 804951e:	e08c      	b.n	804963a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8049520:	687b      	ldr	r3, [r7, #4]
 8049522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049526:	b2db      	uxtb	r3, r3
 8049528:	2b02      	cmp	r3, #2
 804952a:	d002      	beq.n	8049532 <USBD_SetConfig+0x3e>
 804952c:	2b03      	cmp	r3, #3
 804952e:	d029      	beq.n	8049584 <USBD_SetConfig+0x90>
 8049530:	e075      	b.n	804961e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8049532:	4b44      	ldr	r3, [pc, #272]	@ (8049644 <USBD_SetConfig+0x150>)
 8049534:	781b      	ldrb	r3, [r3, #0]
 8049536:	2b00      	cmp	r3, #0
 8049538:	d020      	beq.n	804957c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 804953a:	4b42      	ldr	r3, [pc, #264]	@ (8049644 <USBD_SetConfig+0x150>)
 804953c:	781b      	ldrb	r3, [r3, #0]
 804953e:	461a      	mov	r2, r3
 8049540:	687b      	ldr	r3, [r7, #4]
 8049542:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8049544:	4b3f      	ldr	r3, [pc, #252]	@ (8049644 <USBD_SetConfig+0x150>)
 8049546:	781b      	ldrb	r3, [r3, #0]
 8049548:	4619      	mov	r1, r3
 804954a:	6878      	ldr	r0, [r7, #4]
 804954c:	f7fe ffcb 	bl	80484e6 <USBD_SetClassConfig>
 8049550:	4603      	mov	r3, r0
 8049552:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8049554:	7bfb      	ldrb	r3, [r7, #15]
 8049556:	2b00      	cmp	r3, #0
 8049558:	d008      	beq.n	804956c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 804955a:	6839      	ldr	r1, [r7, #0]
 804955c:	6878      	ldr	r0, [r7, #4]
 804955e:	f000 f962 	bl	8049826 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8049562:	687b      	ldr	r3, [r7, #4]
 8049564:	2202      	movs	r2, #2
 8049566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 804956a:	e065      	b.n	8049638 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 804956c:	6878      	ldr	r0, [r7, #4]
 804956e:	f001 f9a9 	bl	804a8c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8049572:	687b      	ldr	r3, [r7, #4]
 8049574:	2203      	movs	r2, #3
 8049576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 804957a:	e05d      	b.n	8049638 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 804957c:	6878      	ldr	r0, [r7, #4]
 804957e:	f001 f9a1 	bl	804a8c4 <USBD_CtlSendStatus>
      break;
 8049582:	e059      	b.n	8049638 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8049584:	4b2f      	ldr	r3, [pc, #188]	@ (8049644 <USBD_SetConfig+0x150>)
 8049586:	781b      	ldrb	r3, [r3, #0]
 8049588:	2b00      	cmp	r3, #0
 804958a:	d112      	bne.n	80495b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 804958c:	687b      	ldr	r3, [r7, #4]
 804958e:	2202      	movs	r2, #2
 8049590:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8049594:	4b2b      	ldr	r3, [pc, #172]	@ (8049644 <USBD_SetConfig+0x150>)
 8049596:	781b      	ldrb	r3, [r3, #0]
 8049598:	461a      	mov	r2, r3
 804959a:	687b      	ldr	r3, [r7, #4]
 804959c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 804959e:	4b29      	ldr	r3, [pc, #164]	@ (8049644 <USBD_SetConfig+0x150>)
 80495a0:	781b      	ldrb	r3, [r3, #0]
 80495a2:	4619      	mov	r1, r3
 80495a4:	6878      	ldr	r0, [r7, #4]
 80495a6:	f7fe ffba 	bl	804851e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80495aa:	6878      	ldr	r0, [r7, #4]
 80495ac:	f001 f98a 	bl	804a8c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80495b0:	e042      	b.n	8049638 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80495b2:	4b24      	ldr	r3, [pc, #144]	@ (8049644 <USBD_SetConfig+0x150>)
 80495b4:	781b      	ldrb	r3, [r3, #0]
 80495b6:	461a      	mov	r2, r3
 80495b8:	687b      	ldr	r3, [r7, #4]
 80495ba:	685b      	ldr	r3, [r3, #4]
 80495bc:	429a      	cmp	r2, r3
 80495be:	d02a      	beq.n	8049616 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80495c0:	687b      	ldr	r3, [r7, #4]
 80495c2:	685b      	ldr	r3, [r3, #4]
 80495c4:	b2db      	uxtb	r3, r3
 80495c6:	4619      	mov	r1, r3
 80495c8:	6878      	ldr	r0, [r7, #4]
 80495ca:	f7fe ffa8 	bl	804851e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80495ce:	4b1d      	ldr	r3, [pc, #116]	@ (8049644 <USBD_SetConfig+0x150>)
 80495d0:	781b      	ldrb	r3, [r3, #0]
 80495d2:	461a      	mov	r2, r3
 80495d4:	687b      	ldr	r3, [r7, #4]
 80495d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80495d8:	4b1a      	ldr	r3, [pc, #104]	@ (8049644 <USBD_SetConfig+0x150>)
 80495da:	781b      	ldrb	r3, [r3, #0]
 80495dc:	4619      	mov	r1, r3
 80495de:	6878      	ldr	r0, [r7, #4]
 80495e0:	f7fe ff81 	bl	80484e6 <USBD_SetClassConfig>
 80495e4:	4603      	mov	r3, r0
 80495e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80495e8:	7bfb      	ldrb	r3, [r7, #15]
 80495ea:	2b00      	cmp	r3, #0
 80495ec:	d00f      	beq.n	804960e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80495ee:	6839      	ldr	r1, [r7, #0]
 80495f0:	6878      	ldr	r0, [r7, #4]
 80495f2:	f000 f918 	bl	8049826 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80495f6:	687b      	ldr	r3, [r7, #4]
 80495f8:	685b      	ldr	r3, [r3, #4]
 80495fa:	b2db      	uxtb	r3, r3
 80495fc:	4619      	mov	r1, r3
 80495fe:	6878      	ldr	r0, [r7, #4]
 8049600:	f7fe ff8d 	bl	804851e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8049604:	687b      	ldr	r3, [r7, #4]
 8049606:	2202      	movs	r2, #2
 8049608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 804960c:	e014      	b.n	8049638 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 804960e:	6878      	ldr	r0, [r7, #4]
 8049610:	f001 f958 	bl	804a8c4 <USBD_CtlSendStatus>
      break;
 8049614:	e010      	b.n	8049638 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8049616:	6878      	ldr	r0, [r7, #4]
 8049618:	f001 f954 	bl	804a8c4 <USBD_CtlSendStatus>
      break;
 804961c:	e00c      	b.n	8049638 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 804961e:	6839      	ldr	r1, [r7, #0]
 8049620:	6878      	ldr	r0, [r7, #4]
 8049622:	f000 f900 	bl	8049826 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8049626:	4b07      	ldr	r3, [pc, #28]	@ (8049644 <USBD_SetConfig+0x150>)
 8049628:	781b      	ldrb	r3, [r3, #0]
 804962a:	4619      	mov	r1, r3
 804962c:	6878      	ldr	r0, [r7, #4]
 804962e:	f7fe ff76 	bl	804851e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8049632:	2303      	movs	r3, #3
 8049634:	73fb      	strb	r3, [r7, #15]
      break;
 8049636:	bf00      	nop
  }

  return ret;
 8049638:	7bfb      	ldrb	r3, [r7, #15]
}
 804963a:	4618      	mov	r0, r3
 804963c:	3710      	adds	r7, #16
 804963e:	46bd      	mov	sp, r7
 8049640:	bd80      	pop	{r7, pc}
 8049642:	bf00      	nop
 8049644:	2400021c 	.word	0x2400021c

08049648 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049648:	b580      	push	{r7, lr}
 804964a:	b082      	sub	sp, #8
 804964c:	af00      	add	r7, sp, #0
 804964e:	6078      	str	r0, [r7, #4]
 8049650:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8049652:	683b      	ldr	r3, [r7, #0]
 8049654:	88db      	ldrh	r3, [r3, #6]
 8049656:	2b01      	cmp	r3, #1
 8049658:	d004      	beq.n	8049664 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 804965a:	6839      	ldr	r1, [r7, #0]
 804965c:	6878      	ldr	r0, [r7, #4]
 804965e:	f000 f8e2 	bl	8049826 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8049662:	e023      	b.n	80496ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8049664:	687b      	ldr	r3, [r7, #4]
 8049666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804966a:	b2db      	uxtb	r3, r3
 804966c:	2b02      	cmp	r3, #2
 804966e:	dc02      	bgt.n	8049676 <USBD_GetConfig+0x2e>
 8049670:	2b00      	cmp	r3, #0
 8049672:	dc03      	bgt.n	804967c <USBD_GetConfig+0x34>
 8049674:	e015      	b.n	80496a2 <USBD_GetConfig+0x5a>
 8049676:	2b03      	cmp	r3, #3
 8049678:	d00b      	beq.n	8049692 <USBD_GetConfig+0x4a>
 804967a:	e012      	b.n	80496a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 804967c:	687b      	ldr	r3, [r7, #4]
 804967e:	2200      	movs	r2, #0
 8049680:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8049682:	687b      	ldr	r3, [r7, #4]
 8049684:	3308      	adds	r3, #8
 8049686:	2201      	movs	r2, #1
 8049688:	4619      	mov	r1, r3
 804968a:	6878      	ldr	r0, [r7, #4]
 804968c:	f001 f8c0 	bl	804a810 <USBD_CtlSendData>
        break;
 8049690:	e00c      	b.n	80496ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8049692:	687b      	ldr	r3, [r7, #4]
 8049694:	3304      	adds	r3, #4
 8049696:	2201      	movs	r2, #1
 8049698:	4619      	mov	r1, r3
 804969a:	6878      	ldr	r0, [r7, #4]
 804969c:	f001 f8b8 	bl	804a810 <USBD_CtlSendData>
        break;
 80496a0:	e004      	b.n	80496ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80496a2:	6839      	ldr	r1, [r7, #0]
 80496a4:	6878      	ldr	r0, [r7, #4]
 80496a6:	f000 f8be 	bl	8049826 <USBD_CtlError>
        break;
 80496aa:	bf00      	nop
}
 80496ac:	bf00      	nop
 80496ae:	3708      	adds	r7, #8
 80496b0:	46bd      	mov	sp, r7
 80496b2:	bd80      	pop	{r7, pc}

080496b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80496b4:	b580      	push	{r7, lr}
 80496b6:	b082      	sub	sp, #8
 80496b8:	af00      	add	r7, sp, #0
 80496ba:	6078      	str	r0, [r7, #4]
 80496bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80496be:	687b      	ldr	r3, [r7, #4]
 80496c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80496c4:	b2db      	uxtb	r3, r3
 80496c6:	3b01      	subs	r3, #1
 80496c8:	2b02      	cmp	r3, #2
 80496ca:	d81e      	bhi.n	804970a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80496cc:	683b      	ldr	r3, [r7, #0]
 80496ce:	88db      	ldrh	r3, [r3, #6]
 80496d0:	2b02      	cmp	r3, #2
 80496d2:	d004      	beq.n	80496de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80496d4:	6839      	ldr	r1, [r7, #0]
 80496d6:	6878      	ldr	r0, [r7, #4]
 80496d8:	f000 f8a5 	bl	8049826 <USBD_CtlError>
        break;
 80496dc:	e01a      	b.n	8049714 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80496de:	687b      	ldr	r3, [r7, #4]
 80496e0:	2201      	movs	r2, #1
 80496e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80496e4:	687b      	ldr	r3, [r7, #4]
 80496e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80496ea:	2b00      	cmp	r3, #0
 80496ec:	d005      	beq.n	80496fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80496ee:	687b      	ldr	r3, [r7, #4]
 80496f0:	68db      	ldr	r3, [r3, #12]
 80496f2:	f043 0202 	orr.w	r2, r3, #2
 80496f6:	687b      	ldr	r3, [r7, #4]
 80496f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80496fa:	687b      	ldr	r3, [r7, #4]
 80496fc:	330c      	adds	r3, #12
 80496fe:	2202      	movs	r2, #2
 8049700:	4619      	mov	r1, r3
 8049702:	6878      	ldr	r0, [r7, #4]
 8049704:	f001 f884 	bl	804a810 <USBD_CtlSendData>
      break;
 8049708:	e004      	b.n	8049714 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 804970a:	6839      	ldr	r1, [r7, #0]
 804970c:	6878      	ldr	r0, [r7, #4]
 804970e:	f000 f88a 	bl	8049826 <USBD_CtlError>
      break;
 8049712:	bf00      	nop
  }
}
 8049714:	bf00      	nop
 8049716:	3708      	adds	r7, #8
 8049718:	46bd      	mov	sp, r7
 804971a:	bd80      	pop	{r7, pc}

0804971c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804971c:	b580      	push	{r7, lr}
 804971e:	b082      	sub	sp, #8
 8049720:	af00      	add	r7, sp, #0
 8049722:	6078      	str	r0, [r7, #4]
 8049724:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8049726:	683b      	ldr	r3, [r7, #0]
 8049728:	885b      	ldrh	r3, [r3, #2]
 804972a:	2b01      	cmp	r3, #1
 804972c:	d107      	bne.n	804973e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 804972e:	687b      	ldr	r3, [r7, #4]
 8049730:	2201      	movs	r2, #1
 8049732:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8049736:	6878      	ldr	r0, [r7, #4]
 8049738:	f001 f8c4 	bl	804a8c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 804973c:	e013      	b.n	8049766 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 804973e:	683b      	ldr	r3, [r7, #0]
 8049740:	885b      	ldrh	r3, [r3, #2]
 8049742:	2b02      	cmp	r3, #2
 8049744:	d10b      	bne.n	804975e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8049746:	683b      	ldr	r3, [r7, #0]
 8049748:	889b      	ldrh	r3, [r3, #4]
 804974a:	0a1b      	lsrs	r3, r3, #8
 804974c:	b29b      	uxth	r3, r3
 804974e:	b2da      	uxtb	r2, r3
 8049750:	687b      	ldr	r3, [r7, #4]
 8049752:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8049756:	6878      	ldr	r0, [r7, #4]
 8049758:	f001 f8b4 	bl	804a8c4 <USBD_CtlSendStatus>
}
 804975c:	e003      	b.n	8049766 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 804975e:	6839      	ldr	r1, [r7, #0]
 8049760:	6878      	ldr	r0, [r7, #4]
 8049762:	f000 f860 	bl	8049826 <USBD_CtlError>
}
 8049766:	bf00      	nop
 8049768:	3708      	adds	r7, #8
 804976a:	46bd      	mov	sp, r7
 804976c:	bd80      	pop	{r7, pc}

0804976e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804976e:	b580      	push	{r7, lr}
 8049770:	b082      	sub	sp, #8
 8049772:	af00      	add	r7, sp, #0
 8049774:	6078      	str	r0, [r7, #4]
 8049776:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8049778:	687b      	ldr	r3, [r7, #4]
 804977a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 804977e:	b2db      	uxtb	r3, r3
 8049780:	3b01      	subs	r3, #1
 8049782:	2b02      	cmp	r3, #2
 8049784:	d80b      	bhi.n	804979e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8049786:	683b      	ldr	r3, [r7, #0]
 8049788:	885b      	ldrh	r3, [r3, #2]
 804978a:	2b01      	cmp	r3, #1
 804978c:	d10c      	bne.n	80497a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 804978e:	687b      	ldr	r3, [r7, #4]
 8049790:	2200      	movs	r2, #0
 8049792:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8049796:	6878      	ldr	r0, [r7, #4]
 8049798:	f001 f894 	bl	804a8c4 <USBD_CtlSendStatus>
      }
      break;
 804979c:	e004      	b.n	80497a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 804979e:	6839      	ldr	r1, [r7, #0]
 80497a0:	6878      	ldr	r0, [r7, #4]
 80497a2:	f000 f840 	bl	8049826 <USBD_CtlError>
      break;
 80497a6:	e000      	b.n	80497aa <USBD_ClrFeature+0x3c>
      break;
 80497a8:	bf00      	nop
  }
}
 80497aa:	bf00      	nop
 80497ac:	3708      	adds	r7, #8
 80497ae:	46bd      	mov	sp, r7
 80497b0:	bd80      	pop	{r7, pc}

080497b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80497b2:	b580      	push	{r7, lr}
 80497b4:	b084      	sub	sp, #16
 80497b6:	af00      	add	r7, sp, #0
 80497b8:	6078      	str	r0, [r7, #4]
 80497ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80497bc:	683b      	ldr	r3, [r7, #0]
 80497be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80497c0:	68fb      	ldr	r3, [r7, #12]
 80497c2:	781a      	ldrb	r2, [r3, #0]
 80497c4:	687b      	ldr	r3, [r7, #4]
 80497c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80497c8:	68fb      	ldr	r3, [r7, #12]
 80497ca:	3301      	adds	r3, #1
 80497cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80497ce:	68fb      	ldr	r3, [r7, #12]
 80497d0:	781a      	ldrb	r2, [r3, #0]
 80497d2:	687b      	ldr	r3, [r7, #4]
 80497d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80497d6:	68fb      	ldr	r3, [r7, #12]
 80497d8:	3301      	adds	r3, #1
 80497da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80497dc:	68f8      	ldr	r0, [r7, #12]
 80497de:	f7ff f9f0 	bl	8048bc2 <SWAPBYTE>
 80497e2:	4603      	mov	r3, r0
 80497e4:	461a      	mov	r2, r3
 80497e6:	687b      	ldr	r3, [r7, #4]
 80497e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80497ea:	68fb      	ldr	r3, [r7, #12]
 80497ec:	3301      	adds	r3, #1
 80497ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80497f0:	68fb      	ldr	r3, [r7, #12]
 80497f2:	3301      	adds	r3, #1
 80497f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80497f6:	68f8      	ldr	r0, [r7, #12]
 80497f8:	f7ff f9e3 	bl	8048bc2 <SWAPBYTE>
 80497fc:	4603      	mov	r3, r0
 80497fe:	461a      	mov	r2, r3
 8049800:	687b      	ldr	r3, [r7, #4]
 8049802:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8049804:	68fb      	ldr	r3, [r7, #12]
 8049806:	3301      	adds	r3, #1
 8049808:	60fb      	str	r3, [r7, #12]
  pbuff++;
 804980a:	68fb      	ldr	r3, [r7, #12]
 804980c:	3301      	adds	r3, #1
 804980e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8049810:	68f8      	ldr	r0, [r7, #12]
 8049812:	f7ff f9d6 	bl	8048bc2 <SWAPBYTE>
 8049816:	4603      	mov	r3, r0
 8049818:	461a      	mov	r2, r3
 804981a:	687b      	ldr	r3, [r7, #4]
 804981c:	80da      	strh	r2, [r3, #6]
}
 804981e:	bf00      	nop
 8049820:	3710      	adds	r7, #16
 8049822:	46bd      	mov	sp, r7
 8049824:	bd80      	pop	{r7, pc}

08049826 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049826:	b580      	push	{r7, lr}
 8049828:	b082      	sub	sp, #8
 804982a:	af00      	add	r7, sp, #0
 804982c:	6078      	str	r0, [r7, #4]
 804982e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8049830:	2180      	movs	r1, #128	@ 0x80
 8049832:	6878      	ldr	r0, [r7, #4]
 8049834:	f001 fcba 	bl	804b1ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8049838:	2100      	movs	r1, #0
 804983a:	6878      	ldr	r0, [r7, #4]
 804983c:	f001 fcb6 	bl	804b1ac <USBD_LL_StallEP>
}
 8049840:	bf00      	nop
 8049842:	3708      	adds	r7, #8
 8049844:	46bd      	mov	sp, r7
 8049846:	bd80      	pop	{r7, pc}

08049848 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8049848:	b580      	push	{r7, lr}
 804984a:	b086      	sub	sp, #24
 804984c:	af00      	add	r7, sp, #0
 804984e:	60f8      	str	r0, [r7, #12]
 8049850:	60b9      	str	r1, [r7, #8]
 8049852:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8049854:	2300      	movs	r3, #0
 8049856:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8049858:	68fb      	ldr	r3, [r7, #12]
 804985a:	2b00      	cmp	r3, #0
 804985c:	d042      	beq.n	80498e4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 804985e:	68fb      	ldr	r3, [r7, #12]
 8049860:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8049862:	6938      	ldr	r0, [r7, #16]
 8049864:	f000 f842 	bl	80498ec <USBD_GetLen>
 8049868:	4603      	mov	r3, r0
 804986a:	3301      	adds	r3, #1
 804986c:	005b      	lsls	r3, r3, #1
 804986e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8049872:	d808      	bhi.n	8049886 <USBD_GetString+0x3e>
 8049874:	6938      	ldr	r0, [r7, #16]
 8049876:	f000 f839 	bl	80498ec <USBD_GetLen>
 804987a:	4603      	mov	r3, r0
 804987c:	3301      	adds	r3, #1
 804987e:	b29b      	uxth	r3, r3
 8049880:	005b      	lsls	r3, r3, #1
 8049882:	b29a      	uxth	r2, r3
 8049884:	e001      	b.n	804988a <USBD_GetString+0x42>
 8049886:	f44f 7200 	mov.w	r2, #512	@ 0x200
 804988a:	687b      	ldr	r3, [r7, #4]
 804988c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 804988e:	7dfb      	ldrb	r3, [r7, #23]
 8049890:	68ba      	ldr	r2, [r7, #8]
 8049892:	4413      	add	r3, r2
 8049894:	687a      	ldr	r2, [r7, #4]
 8049896:	7812      	ldrb	r2, [r2, #0]
 8049898:	701a      	strb	r2, [r3, #0]
  idx++;
 804989a:	7dfb      	ldrb	r3, [r7, #23]
 804989c:	3301      	adds	r3, #1
 804989e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80498a0:	7dfb      	ldrb	r3, [r7, #23]
 80498a2:	68ba      	ldr	r2, [r7, #8]
 80498a4:	4413      	add	r3, r2
 80498a6:	2203      	movs	r2, #3
 80498a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80498aa:	7dfb      	ldrb	r3, [r7, #23]
 80498ac:	3301      	adds	r3, #1
 80498ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80498b0:	e013      	b.n	80498da <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80498b2:	7dfb      	ldrb	r3, [r7, #23]
 80498b4:	68ba      	ldr	r2, [r7, #8]
 80498b6:	4413      	add	r3, r2
 80498b8:	693a      	ldr	r2, [r7, #16]
 80498ba:	7812      	ldrb	r2, [r2, #0]
 80498bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80498be:	693b      	ldr	r3, [r7, #16]
 80498c0:	3301      	adds	r3, #1
 80498c2:	613b      	str	r3, [r7, #16]
    idx++;
 80498c4:	7dfb      	ldrb	r3, [r7, #23]
 80498c6:	3301      	adds	r3, #1
 80498c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80498ca:	7dfb      	ldrb	r3, [r7, #23]
 80498cc:	68ba      	ldr	r2, [r7, #8]
 80498ce:	4413      	add	r3, r2
 80498d0:	2200      	movs	r2, #0
 80498d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80498d4:	7dfb      	ldrb	r3, [r7, #23]
 80498d6:	3301      	adds	r3, #1
 80498d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80498da:	693b      	ldr	r3, [r7, #16]
 80498dc:	781b      	ldrb	r3, [r3, #0]
 80498de:	2b00      	cmp	r3, #0
 80498e0:	d1e7      	bne.n	80498b2 <USBD_GetString+0x6a>
 80498e2:	e000      	b.n	80498e6 <USBD_GetString+0x9e>
    return;
 80498e4:	bf00      	nop
  }
}
 80498e6:	3718      	adds	r7, #24
 80498e8:	46bd      	mov	sp, r7
 80498ea:	bd80      	pop	{r7, pc}

080498ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80498ec:	b480      	push	{r7}
 80498ee:	b085      	sub	sp, #20
 80498f0:	af00      	add	r7, sp, #0
 80498f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80498f4:	2300      	movs	r3, #0
 80498f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80498f8:	687b      	ldr	r3, [r7, #4]
 80498fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80498fc:	e005      	b.n	804990a <USBD_GetLen+0x1e>
  {
    len++;
 80498fe:	7bfb      	ldrb	r3, [r7, #15]
 8049900:	3301      	adds	r3, #1
 8049902:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8049904:	68bb      	ldr	r3, [r7, #8]
 8049906:	3301      	adds	r3, #1
 8049908:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 804990a:	68bb      	ldr	r3, [r7, #8]
 804990c:	781b      	ldrb	r3, [r3, #0]
 804990e:	2b00      	cmp	r3, #0
 8049910:	d1f5      	bne.n	80498fe <USBD_GetLen+0x12>
  }

  return len;
 8049912:	7bfb      	ldrb	r3, [r7, #15]
}
 8049914:	4618      	mov	r0, r3
 8049916:	3714      	adds	r7, #20
 8049918:	46bd      	mov	sp, r7
 804991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804991e:	4770      	bx	lr

08049920 <__NVIC_SystemReset>:
{
 8049920:	b480      	push	{r7}
 8049922:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8049924:	f3bf 8f4f 	dsb	sy
}
 8049928:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 804992a:	4b06      	ldr	r3, [pc, #24]	@ (8049944 <__NVIC_SystemReset+0x24>)
 804992c:	68db      	ldr	r3, [r3, #12]
 804992e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8049932:	4904      	ldr	r1, [pc, #16]	@ (8049944 <__NVIC_SystemReset+0x24>)
 8049934:	4b04      	ldr	r3, [pc, #16]	@ (8049948 <__NVIC_SystemReset+0x28>)
 8049936:	4313      	orrs	r3, r2
 8049938:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 804993a:	f3bf 8f4f 	dsb	sy
}
 804993e:	bf00      	nop
    __NOP();
 8049940:	bf00      	nop
 8049942:	e7fd      	b.n	8049940 <__NVIC_SystemReset+0x20>
 8049944:	e000ed00 	.word	0xe000ed00
 8049948:	05fa0004 	.word	0x05fa0004

0804994c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 804994c:	b580      	push	{r7, lr}
 804994e:	b084      	sub	sp, #16
 8049950:	af00      	add	r7, sp, #0
 8049952:	6078      	str	r0, [r7, #4]
 8049954:	460b      	mov	r3, r1
 8049956:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8049958:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 804995c:	f001 fcf2 	bl	804b344 <USBD_static_malloc>
 8049960:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8049962:	68fb      	ldr	r3, [r7, #12]
 8049964:	2b00      	cmp	r3, #0
 8049966:	d109      	bne.n	804997c <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049968:	687b      	ldr	r3, [r7, #4]
 804996a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804996e:	687b      	ldr	r3, [r7, #4]
 8049970:	32b0      	adds	r2, #176	@ 0xb0
 8049972:	2100      	movs	r1, #0
 8049974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8049978:	2302      	movs	r3, #2
 804997a:	e052      	b.n	8049a22 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 804997c:	687b      	ldr	r3, [r7, #4]
 804997e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049982:	687b      	ldr	r3, [r7, #4]
 8049984:	32b0      	adds	r2, #176	@ 0xb0
 8049986:	68f9      	ldr	r1, [r7, #12]
 8049988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 804998c:	687b      	ldr	r3, [r7, #4]
 804998e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049992:	687b      	ldr	r3, [r7, #4]
 8049994:	32b0      	adds	r2, #176	@ 0xb0
 8049996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804999a:	687b      	ldr	r3, [r7, #4]
 804999c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80499a0:	68fb      	ldr	r3, [r7, #12]
 80499a2:	2200      	movs	r2, #0
 80499a4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80499a8:	68fb      	ldr	r3, [r7, #12]
 80499aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80499ae:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80499b2:	68fb      	ldr	r3, [r7, #12]
 80499b4:	2200      	movs	r2, #0
 80499b6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80499ba:	68fb      	ldr	r3, [r7, #12]
 80499bc:	2200      	movs	r2, #0
 80499be:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80499c2:	68fb      	ldr	r3, [r7, #12]
 80499c4:	2200      	movs	r2, #0
 80499c6:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 80499ca:	68fb      	ldr	r3, [r7, #12]
 80499cc:	2202      	movs	r2, #2
 80499ce:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80499d2:	68fb      	ldr	r3, [r7, #12]
 80499d4:	2200      	movs	r2, #0
 80499d6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 80499da:	68fb      	ldr	r3, [r7, #12]
 80499dc:	2200      	movs	r2, #0
 80499de:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 80499e2:	68fb      	ldr	r3, [r7, #12]
 80499e4:	2200      	movs	r2, #0
 80499e6:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 80499ea:	68fb      	ldr	r3, [r7, #12]
 80499ec:	2200      	movs	r2, #0
 80499ee:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80499f2:	68fb      	ldr	r3, [r7, #12]
 80499f4:	2202      	movs	r2, #2
 80499f6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 80499fa:	68fb      	ldr	r3, [r7, #12]
 80499fc:	2200      	movs	r2, #0
 80499fe:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8049a02:	687b      	ldr	r3, [r7, #4]
 8049a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049a08:	687a      	ldr	r2, [r7, #4]
 8049a0a:	33b0      	adds	r3, #176	@ 0xb0
 8049a0c:	009b      	lsls	r3, r3, #2
 8049a0e:	4413      	add	r3, r2
 8049a10:	685b      	ldr	r3, [r3, #4]
 8049a12:	685b      	ldr	r3, [r3, #4]
 8049a14:	4798      	blx	r3
 8049a16:	4603      	mov	r3, r0
 8049a18:	2b00      	cmp	r3, #0
 8049a1a:	d001      	beq.n	8049a20 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8049a1c:	2303      	movs	r3, #3
 8049a1e:	e000      	b.n	8049a22 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8049a20:	2300      	movs	r3, #0
}
 8049a22:	4618      	mov	r0, r3
 8049a24:	3710      	adds	r7, #16
 8049a26:	46bd      	mov	sp, r7
 8049a28:	bd80      	pop	{r7, pc}

08049a2a <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8049a2a:	b580      	push	{r7, lr}
 8049a2c:	b084      	sub	sp, #16
 8049a2e:	af00      	add	r7, sp, #0
 8049a30:	6078      	str	r0, [r7, #4]
 8049a32:	460b      	mov	r3, r1
 8049a34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8049a36:	687b      	ldr	r3, [r7, #4]
 8049a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a3c:	687b      	ldr	r3, [r7, #4]
 8049a3e:	32b0      	adds	r2, #176	@ 0xb0
 8049a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049a44:	2b00      	cmp	r3, #0
 8049a46:	d101      	bne.n	8049a4c <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 8049a48:	2302      	movs	r3, #2
 8049a4a:	e03c      	b.n	8049ac6 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049a4c:	687b      	ldr	r3, [r7, #4]
 8049a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a52:	687b      	ldr	r3, [r7, #4]
 8049a54:	32b0      	adds	r2, #176	@ 0xb0
 8049a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049a5a:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8049a5c:	68fb      	ldr	r3, [r7, #12]
 8049a5e:	2200      	movs	r2, #0
 8049a60:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8049a64:	68fb      	ldr	r3, [r7, #12]
 8049a66:	2200      	movs	r2, #0
 8049a68:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8049a6c:	68fb      	ldr	r3, [r7, #12]
 8049a6e:	2202      	movs	r2, #2
 8049a70:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8049a74:	68fb      	ldr	r3, [r7, #12]
 8049a76:	2200      	movs	r2, #0
 8049a78:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8049a7c:	68fb      	ldr	r3, [r7, #12]
 8049a7e:	2202      	movs	r2, #2
 8049a80:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8049a84:	687b      	ldr	r3, [r7, #4]
 8049a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049a8a:	687a      	ldr	r2, [r7, #4]
 8049a8c:	33b0      	adds	r3, #176	@ 0xb0
 8049a8e:	009b      	lsls	r3, r3, #2
 8049a90:	4413      	add	r3, r2
 8049a92:	685b      	ldr	r3, [r3, #4]
 8049a94:	689b      	ldr	r3, [r3, #8]
 8049a96:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8049a98:	687b      	ldr	r3, [r7, #4]
 8049a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049a9e:	687b      	ldr	r3, [r7, #4]
 8049aa0:	32b0      	adds	r2, #176	@ 0xb0
 8049aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049aa6:	4618      	mov	r0, r3
 8049aa8:	f001 fc5a 	bl	804b360 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8049aac:	687b      	ldr	r3, [r7, #4]
 8049aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ab2:	687b      	ldr	r3, [r7, #4]
 8049ab4:	32b0      	adds	r2, #176	@ 0xb0
 8049ab6:	2100      	movs	r1, #0
 8049ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8049abc:	687b      	ldr	r3, [r7, #4]
 8049abe:	2200      	movs	r2, #0
 8049ac0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8049ac4:	2300      	movs	r3, #0
}
 8049ac6:	4618      	mov	r0, r3
 8049ac8:	3710      	adds	r7, #16
 8049aca:	46bd      	mov	sp, r7
 8049acc:	bd80      	pop	{r7, pc}
	...

08049ad0 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049ad0:	b580      	push	{r7, lr}
 8049ad2:	b086      	sub	sp, #24
 8049ad4:	af00      	add	r7, sp, #0
 8049ad6:	6078      	str	r0, [r7, #4]
 8049ad8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049ada:	687b      	ldr	r3, [r7, #4]
 8049adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ae0:	687b      	ldr	r3, [r7, #4]
 8049ae2:	32b0      	adds	r2, #176	@ 0xb0
 8049ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049ae8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8049aea:	2300      	movs	r3, #0
 8049aec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8049aee:	2300      	movs	r3, #0
 8049af0:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8049af2:	693b      	ldr	r3, [r7, #16]
 8049af4:	2b00      	cmp	r3, #0
 8049af6:	d101      	bne.n	8049afc <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8049af8:	2303      	movs	r3, #3
 8049afa:	e0e8      	b.n	8049cce <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8049afc:	683b      	ldr	r3, [r7, #0]
 8049afe:	781b      	ldrb	r3, [r3, #0]
 8049b00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8049b04:	2b00      	cmp	r3, #0
 8049b06:	d03e      	beq.n	8049b86 <USBD_DFU_Setup+0xb6>
 8049b08:	2b20      	cmp	r3, #32
 8049b0a:	f040 80d8 	bne.w	8049cbe <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8049b0e:	683b      	ldr	r3, [r7, #0]
 8049b10:	785b      	ldrb	r3, [r3, #1]
 8049b12:	2b06      	cmp	r3, #6
 8049b14:	d82f      	bhi.n	8049b76 <USBD_DFU_Setup+0xa6>
 8049b16:	a201      	add	r2, pc, #4	@ (adr r2, 8049b1c <USBD_DFU_Setup+0x4c>)
 8049b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049b1c:	08049b6d 	.word	0x08049b6d
 8049b20:	08049b39 	.word	0x08049b39
 8049b24:	08049b43 	.word	0x08049b43
 8049b28:	08049b4d 	.word	0x08049b4d
 8049b2c:	08049b55 	.word	0x08049b55
 8049b30:	08049b5d 	.word	0x08049b5d
 8049b34:	08049b65 	.word	0x08049b65
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8049b38:	6839      	ldr	r1, [r7, #0]
 8049b3a:	6878      	ldr	r0, [r7, #4]
 8049b3c:	f000 fac2 	bl	804a0c4 <DFU_Download>
          break;
 8049b40:	e020      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8049b42:	6839      	ldr	r1, [r7, #0]
 8049b44:	6878      	ldr	r0, [r7, #4]
 8049b46:	f000 fb33 	bl	804a1b0 <DFU_Upload>
          break;
 8049b4a:	e01b      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8049b4c:	6878      	ldr	r0, [r7, #4]
 8049b4e:	f000 fc37 	bl	804a3c0 <DFU_GetStatus>
          break;
 8049b52:	e017      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8049b54:	6878      	ldr	r0, [r7, #4]
 8049b56:	f000 fcff 	bl	804a558 <DFU_ClearStatus>
          break;
 8049b5a:	e013      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8049b5c:	6878      	ldr	r0, [r7, #4]
 8049b5e:	f000 fd53 	bl	804a608 <DFU_GetState>
          break;
 8049b62:	e00f      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8049b64:	6878      	ldr	r0, [r7, #4]
 8049b66:	f000 fd6b 	bl	804a640 <DFU_Abort>
          break;
 8049b6a:	e00b      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8049b6c:	6839      	ldr	r1, [r7, #0]
 8049b6e:	6878      	ldr	r0, [r7, #4]
 8049b70:	f000 fa38 	bl	8049fe4 <DFU_Detach>
          break;
 8049b74:	e006      	b.n	8049b84 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8049b76:	6839      	ldr	r1, [r7, #0]
 8049b78:	6878      	ldr	r0, [r7, #4]
 8049b7a:	f7ff fe54 	bl	8049826 <USBD_CtlError>
          ret = USBD_FAIL;
 8049b7e:	2303      	movs	r3, #3
 8049b80:	75fb      	strb	r3, [r7, #23]
          break;
 8049b82:	bf00      	nop
      }
      break;
 8049b84:	e0a2      	b.n	8049ccc <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8049b86:	683b      	ldr	r3, [r7, #0]
 8049b88:	785b      	ldrb	r3, [r3, #1]
 8049b8a:	2b0b      	cmp	r3, #11
 8049b8c:	f200 808c 	bhi.w	8049ca8 <USBD_DFU_Setup+0x1d8>
 8049b90:	a201      	add	r2, pc, #4	@ (adr r2, 8049b98 <USBD_DFU_Setup+0xc8>)
 8049b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049b96:	bf00      	nop
 8049b98:	08049bc9 	.word	0x08049bc9
 8049b9c:	08049cb7 	.word	0x08049cb7
 8049ba0:	08049ca9 	.word	0x08049ca9
 8049ba4:	08049ca9 	.word	0x08049ca9
 8049ba8:	08049ca9 	.word	0x08049ca9
 8049bac:	08049ca9 	.word	0x08049ca9
 8049bb0:	08049bf3 	.word	0x08049bf3
 8049bb4:	08049ca9 	.word	0x08049ca9
 8049bb8:	08049ca9 	.word	0x08049ca9
 8049bbc:	08049ca9 	.word	0x08049ca9
 8049bc0:	08049c3b 	.word	0x08049c3b
 8049bc4:	08049c67 	.word	0x08049c67
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049bc8:	687b      	ldr	r3, [r7, #4]
 8049bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049bce:	b2db      	uxtb	r3, r3
 8049bd0:	2b03      	cmp	r3, #3
 8049bd2:	d107      	bne.n	8049be4 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8049bd4:	f107 0308 	add.w	r3, r7, #8
 8049bd8:	2202      	movs	r2, #2
 8049bda:	4619      	mov	r1, r3
 8049bdc:	6878      	ldr	r0, [r7, #4]
 8049bde:	f000 fe17 	bl	804a810 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049be2:	e06b      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049be4:	6839      	ldr	r1, [r7, #0]
 8049be6:	6878      	ldr	r0, [r7, #4]
 8049be8:	f7ff fe1d 	bl	8049826 <USBD_CtlError>
            ret = USBD_FAIL;
 8049bec:	2303      	movs	r3, #3
 8049bee:	75fb      	strb	r3, [r7, #23]
          break;
 8049bf0:	e064      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8049bf2:	683b      	ldr	r3, [r7, #0]
 8049bf4:	885b      	ldrh	r3, [r3, #2]
 8049bf6:	0a1b      	lsrs	r3, r3, #8
 8049bf8:	b29b      	uxth	r3, r3
 8049bfa:	2b21      	cmp	r3, #33	@ 0x21
 8049bfc:	d15d      	bne.n	8049cba <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8049bfe:	687b      	ldr	r3, [r7, #4]
 8049c00:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8049c04:	4618      	mov	r0, r3
 8049c06:	f000 fdd5 	bl	804a7b4 <USBD_DFU_GetDfuFuncDesc>
 8049c0a:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8049c0c:	68fb      	ldr	r3, [r7, #12]
 8049c0e:	2b00      	cmp	r3, #0
 8049c10:	d00c      	beq.n	8049c2c <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8049c12:	683b      	ldr	r3, [r7, #0]
 8049c14:	88db      	ldrh	r3, [r3, #6]
 8049c16:	2b09      	cmp	r3, #9
 8049c18:	bf28      	it	cs
 8049c1a:	2309      	movcs	r3, #9
 8049c1c:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8049c1e:	897b      	ldrh	r3, [r7, #10]
 8049c20:	461a      	mov	r2, r3
 8049c22:	68f9      	ldr	r1, [r7, #12]
 8049c24:	6878      	ldr	r0, [r7, #4]
 8049c26:	f000 fdf3 	bl	804a810 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8049c2a:	e046      	b.n	8049cba <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8049c2c:	6839      	ldr	r1, [r7, #0]
 8049c2e:	6878      	ldr	r0, [r7, #4]
 8049c30:	f7ff fdf9 	bl	8049826 <USBD_CtlError>
              ret = USBD_FAIL;
 8049c34:	2303      	movs	r3, #3
 8049c36:	75fb      	strb	r3, [r7, #23]
          break;
 8049c38:	e03f      	b.n	8049cba <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049c3a:	687b      	ldr	r3, [r7, #4]
 8049c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049c40:	b2db      	uxtb	r3, r3
 8049c42:	2b03      	cmp	r3, #3
 8049c44:	d108      	bne.n	8049c58 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8049c46:	693b      	ldr	r3, [r7, #16]
 8049c48:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8049c4c:	2201      	movs	r2, #1
 8049c4e:	4619      	mov	r1, r3
 8049c50:	6878      	ldr	r0, [r7, #4]
 8049c52:	f000 fddd 	bl	804a810 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049c56:	e031      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049c58:	6839      	ldr	r1, [r7, #0]
 8049c5a:	6878      	ldr	r0, [r7, #4]
 8049c5c:	f7ff fde3 	bl	8049826 <USBD_CtlError>
            ret = USBD_FAIL;
 8049c60:	2303      	movs	r3, #3
 8049c62:	75fb      	strb	r3, [r7, #23]
          break;
 8049c64:	e02a      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8049c66:	683b      	ldr	r3, [r7, #0]
 8049c68:	885b      	ldrh	r3, [r3, #2]
 8049c6a:	b2db      	uxtb	r3, r3
 8049c6c:	2b00      	cmp	r3, #0
 8049c6e:	d114      	bne.n	8049c9a <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8049c70:	687b      	ldr	r3, [r7, #4]
 8049c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8049c76:	b2db      	uxtb	r3, r3
 8049c78:	2b03      	cmp	r3, #3
 8049c7a:	d107      	bne.n	8049c8c <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8049c7c:	683b      	ldr	r3, [r7, #0]
 8049c7e:	885b      	ldrh	r3, [r3, #2]
 8049c80:	b2db      	uxtb	r3, r3
 8049c82:	461a      	mov	r2, r3
 8049c84:	693b      	ldr	r3, [r7, #16]
 8049c86:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8049c8a:	e017      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8049c8c:	6839      	ldr	r1, [r7, #0]
 8049c8e:	6878      	ldr	r0, [r7, #4]
 8049c90:	f7ff fdc9 	bl	8049826 <USBD_CtlError>
              ret = USBD_FAIL;
 8049c94:	2303      	movs	r3, #3
 8049c96:	75fb      	strb	r3, [r7, #23]
          break;
 8049c98:	e010      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8049c9a:	6839      	ldr	r1, [r7, #0]
 8049c9c:	6878      	ldr	r0, [r7, #4]
 8049c9e:	f7ff fdc2 	bl	8049826 <USBD_CtlError>
            ret = USBD_FAIL;
 8049ca2:	2303      	movs	r3, #3
 8049ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8049ca6:	e009      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8049ca8:	6839      	ldr	r1, [r7, #0]
 8049caa:	6878      	ldr	r0, [r7, #4]
 8049cac:	f7ff fdbb 	bl	8049826 <USBD_CtlError>
          ret = USBD_FAIL;
 8049cb0:	2303      	movs	r3, #3
 8049cb2:	75fb      	strb	r3, [r7, #23]
          break;
 8049cb4:	e002      	b.n	8049cbc <USBD_DFU_Setup+0x1ec>
          break;
 8049cb6:	bf00      	nop
 8049cb8:	e008      	b.n	8049ccc <USBD_DFU_Setup+0x1fc>
          break;
 8049cba:	bf00      	nop
      }
      break;
 8049cbc:	e006      	b.n	8049ccc <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8049cbe:	6839      	ldr	r1, [r7, #0]
 8049cc0:	6878      	ldr	r0, [r7, #4]
 8049cc2:	f7ff fdb0 	bl	8049826 <USBD_CtlError>
      ret = USBD_FAIL;
 8049cc6:	2303      	movs	r3, #3
 8049cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8049cca:	bf00      	nop
  }

  return (uint8_t)ret;
 8049ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8049cce:	4618      	mov	r0, r3
 8049cd0:	3718      	adds	r7, #24
 8049cd2:	46bd      	mov	sp, r7
 8049cd4:	bd80      	pop	{r7, pc}
 8049cd6:	bf00      	nop

08049cd8 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8049cd8:	b480      	push	{r7}
 8049cda:	b083      	sub	sp, #12
 8049cdc:	af00      	add	r7, sp, #0
 8049cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8049ce0:	687b      	ldr	r3, [r7, #4]
 8049ce2:	221b      	movs	r2, #27
 8049ce4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8049ce6:	4b03      	ldr	r3, [pc, #12]	@ (8049cf4 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8049ce8:	4618      	mov	r0, r3
 8049cea:	370c      	adds	r7, #12
 8049cec:	46bd      	mov	sp, r7
 8049cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049cf2:	4770      	bx	lr
 8049cf4:	2400004c 	.word	0x2400004c

08049cf8 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8049cf8:	b480      	push	{r7}
 8049cfa:	b083      	sub	sp, #12
 8049cfc:	af00      	add	r7, sp, #0
 8049cfe:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8049d00:	2300      	movs	r3, #0
}
 8049d02:	4618      	mov	r0, r3
 8049d04:	370c      	adds	r7, #12
 8049d06:	46bd      	mov	sp, r7
 8049d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049d0c:	4770      	bx	lr

08049d0e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8049d0e:	b580      	push	{r7, lr}
 8049d10:	b088      	sub	sp, #32
 8049d12:	af00      	add	r7, sp, #0
 8049d14:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049d16:	687b      	ldr	r3, [r7, #4]
 8049d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049d1c:	687b      	ldr	r3, [r7, #4]
 8049d1e:	32b0      	adds	r2, #176	@ 0xb0
 8049d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049d24:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8049d26:	687b      	ldr	r3, [r7, #4]
 8049d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049d2c:	687a      	ldr	r2, [r7, #4]
 8049d2e:	33b0      	adds	r3, #176	@ 0xb0
 8049d30:	009b      	lsls	r3, r3, #2
 8049d32:	4413      	add	r3, r2
 8049d34:	685b      	ldr	r3, [r3, #4]
 8049d36:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8049d38:	69fb      	ldr	r3, [r7, #28]
 8049d3a:	2b00      	cmp	r3, #0
 8049d3c:	d101      	bne.n	8049d42 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8049d3e:	2303      	movs	r3, #3
 8049d40:	e0f1      	b.n	8049f26 <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8049d42:	69fb      	ldr	r3, [r7, #28]
 8049d44:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8049d48:	2b04      	cmp	r3, #4
 8049d4a:	f040 80e0 	bne.w	8049f0e <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8049d4e:	69fb      	ldr	r3, [r7, #28]
 8049d50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8049d54:	2b00      	cmp	r3, #0
 8049d56:	f040 8085 	bne.w	8049e64 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 8049d5a:	69fb      	ldr	r3, [r7, #28]
 8049d5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8049d60:	2b01      	cmp	r3, #1
 8049d62:	f000 80b5 	beq.w	8049ed0 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 8049d66:	69fb      	ldr	r3, [r7, #28]
 8049d68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8049d6c:	2b05      	cmp	r3, #5
 8049d6e:	d166      	bne.n	8049e3e <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8049d70:	69fb      	ldr	r3, [r7, #28]
 8049d72:	781b      	ldrb	r3, [r3, #0]
 8049d74:	2b21      	cmp	r3, #33	@ 0x21
 8049d76:	d124      	bne.n	8049dc2 <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 8049d78:	69fb      	ldr	r3, [r7, #28]
 8049d7a:	785b      	ldrb	r3, [r3, #1]
 8049d7c:	461a      	mov	r2, r3
 8049d7e:	69fb      	ldr	r3, [r7, #28]
 8049d80:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8049d84:	69fb      	ldr	r3, [r7, #28]
 8049d86:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8049d8a:	69fb      	ldr	r3, [r7, #28]
 8049d8c:	789b      	ldrb	r3, [r3, #2]
 8049d8e:	021b      	lsls	r3, r3, #8
 8049d90:	441a      	add	r2, r3
 8049d92:	69fb      	ldr	r3, [r7, #28]
 8049d94:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8049d98:	69fb      	ldr	r3, [r7, #28]
 8049d9a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8049d9e:	69fb      	ldr	r3, [r7, #28]
 8049da0:	78db      	ldrb	r3, [r3, #3]
 8049da2:	041b      	lsls	r3, r3, #16
 8049da4:	441a      	add	r2, r3
 8049da6:	69fb      	ldr	r3, [r7, #28]
 8049da8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8049dac:	69fb      	ldr	r3, [r7, #28]
 8049dae:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8049db2:	69fb      	ldr	r3, [r7, #28]
 8049db4:	791b      	ldrb	r3, [r3, #4]
 8049db6:	061b      	lsls	r3, r3, #24
 8049db8:	441a      	add	r2, r3
 8049dba:	69fb      	ldr	r3, [r7, #28]
 8049dbc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8049dc0:	e086      	b.n	8049ed0 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8049dc2:	69fb      	ldr	r3, [r7, #28]
 8049dc4:	781b      	ldrb	r3, [r3, #0]
 8049dc6:	2b41      	cmp	r3, #65	@ 0x41
 8049dc8:	d137      	bne.n	8049e3a <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 8049dca:	69fb      	ldr	r3, [r7, #28]
 8049dcc:	785b      	ldrb	r3, [r3, #1]
 8049dce:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8049dd0:	69fb      	ldr	r3, [r7, #28]
 8049dd2:	789b      	ldrb	r3, [r3, #2]
 8049dd4:	021b      	lsls	r3, r3, #8
 8049dd6:	693a      	ldr	r2, [r7, #16]
 8049dd8:	4413      	add	r3, r2
 8049dda:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8049ddc:	69fb      	ldr	r3, [r7, #28]
 8049dde:	78db      	ldrb	r3, [r3, #3]
 8049de0:	041b      	lsls	r3, r3, #16
 8049de2:	693a      	ldr	r2, [r7, #16]
 8049de4:	4413      	add	r3, r2
 8049de6:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8049de8:	69fb      	ldr	r3, [r7, #28]
 8049dea:	791b      	ldrb	r3, [r3, #4]
 8049dec:	061b      	lsls	r3, r3, #24
 8049dee:	693a      	ldr	r2, [r7, #16]
 8049df0:	4413      	add	r3, r2
 8049df2:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8049df4:	69bb      	ldr	r3, [r7, #24]
 8049df6:	68db      	ldr	r3, [r3, #12]
 8049df8:	6938      	ldr	r0, [r7, #16]
 8049dfa:	4798      	blx	r3
 8049dfc:	4603      	mov	r3, r0
 8049dfe:	2b00      	cmp	r3, #0
 8049e00:	d066      	beq.n	8049ed0 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8049e02:	69fb      	ldr	r3, [r7, #28]
 8049e04:	220a      	movs	r2, #10
 8049e06:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8049e0a:	69fb      	ldr	r3, [r7, #28]
 8049e0c:	220b      	movs	r2, #11
 8049e0e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8049e12:	69fb      	ldr	r3, [r7, #28]
 8049e14:	2200      	movs	r2, #0
 8049e16:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8049e1a:	69fb      	ldr	r3, [r7, #28]
 8049e1c:	2200      	movs	r2, #0
 8049e1e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8049e22:	69fb      	ldr	r3, [r7, #28]
 8049e24:	2200      	movs	r2, #0
 8049e26:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8049e2a:	69fb      	ldr	r3, [r7, #28]
 8049e2c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8049e30:	69fb      	ldr	r3, [r7, #28]
 8049e32:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8049e36:	2303      	movs	r3, #3
 8049e38:	e075      	b.n	8049f26 <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 8049e3a:	2303      	movs	r3, #3
 8049e3c:	e073      	b.n	8049f26 <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8049e3e:	69fb      	ldr	r3, [r7, #28]
 8049e40:	2200      	movs	r2, #0
 8049e42:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8049e46:	69fb      	ldr	r3, [r7, #28]
 8049e48:	2200      	movs	r2, #0
 8049e4a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8049e4e:	2300      	movs	r3, #0
 8049e50:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8049e52:	2301      	movs	r3, #1
 8049e54:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8049e56:	f107 0308 	add.w	r3, r7, #8
 8049e5a:	4619      	mov	r1, r3
 8049e5c:	6878      	ldr	r0, [r7, #4]
 8049e5e:	f7ff fce2 	bl	8049826 <USBD_CtlError>
 8049e62:	e035      	b.n	8049ed0 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8049e64:	69fb      	ldr	r3, [r7, #28]
 8049e66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8049e6a:	2b01      	cmp	r3, #1
 8049e6c:	d930      	bls.n	8049ed0 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8049e6e:	69fb      	ldr	r3, [r7, #28]
 8049e70:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8049e74:	3b02      	subs	r3, #2
 8049e76:	029a      	lsls	r2, r3, #10
 8049e78:	69fb      	ldr	r3, [r7, #28]
 8049e7a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8049e7e:	4413      	add	r3, r2
 8049e80:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8049e82:	69bb      	ldr	r3, [r7, #24]
 8049e84:	691b      	ldr	r3, [r3, #16]
 8049e86:	69f8      	ldr	r0, [r7, #28]
 8049e88:	6979      	ldr	r1, [r7, #20]
 8049e8a:	69fa      	ldr	r2, [r7, #28]
 8049e8c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8049e90:	4798      	blx	r3
 8049e92:	4603      	mov	r3, r0
 8049e94:	2b00      	cmp	r3, #0
 8049e96:	d01b      	beq.n	8049ed0 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 8049e98:	69fb      	ldr	r3, [r7, #28]
 8049e9a:	220a      	movs	r2, #10
 8049e9c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8049ea0:	69fb      	ldr	r3, [r7, #28]
 8049ea2:	220b      	movs	r2, #11
 8049ea4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 8049ea8:	69fb      	ldr	r3, [r7, #28]
 8049eaa:	2200      	movs	r2, #0
 8049eac:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8049eb0:	69fb      	ldr	r3, [r7, #28]
 8049eb2:	2200      	movs	r2, #0
 8049eb4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8049eb8:	69fb      	ldr	r3, [r7, #28]
 8049eba:	2200      	movs	r2, #0
 8049ebc:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8049ec0:	69fb      	ldr	r3, [r7, #28]
 8049ec2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8049ec6:	69fb      	ldr	r3, [r7, #28]
 8049ec8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8049ecc:	2303      	movs	r3, #3
 8049ece:	e02a      	b.n	8049f26 <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8049ed0:	69fb      	ldr	r3, [r7, #28]
 8049ed2:	2200      	movs	r2, #0
 8049ed4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8049ed8:	69fb      	ldr	r3, [r7, #28]
 8049eda:	2200      	movs	r2, #0
 8049edc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8049ee0:	69fb      	ldr	r3, [r7, #28]
 8049ee2:	2203      	movs	r2, #3
 8049ee4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8049ee8:	69fb      	ldr	r3, [r7, #28]
 8049eea:	2200      	movs	r2, #0
 8049eec:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8049ef0:	69fb      	ldr	r3, [r7, #28]
 8049ef2:	2200      	movs	r2, #0
 8049ef4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8049ef8:	69fb      	ldr	r3, [r7, #28]
 8049efa:	2200      	movs	r2, #0
 8049efc:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8049f00:	69fb      	ldr	r3, [r7, #28]
 8049f02:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8049f06:	69fb      	ldr	r3, [r7, #28]
 8049f08:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8049f0c:	e00a      	b.n	8049f24 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8049f0e:	69fb      	ldr	r3, [r7, #28]
 8049f10:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8049f14:	2b07      	cmp	r3, #7
 8049f16:	d103      	bne.n	8049f20 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8049f18:	6878      	ldr	r0, [r7, #4]
 8049f1a:	f000 fbe6 	bl	804a6ea <DFU_Leave>
 8049f1e:	e001      	b.n	8049f24 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8049f20:	2303      	movs	r3, #3
 8049f22:	e000      	b.n	8049f26 <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 8049f24:	2300      	movs	r3, #0
}
 8049f26:	4618      	mov	r0, r3
 8049f28:	3720      	adds	r7, #32
 8049f2a:	46bd      	mov	sp, r7
 8049f2c:	bd80      	pop	{r7, pc}

08049f2e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8049f2e:	b480      	push	{r7}
 8049f30:	b083      	sub	sp, #12
 8049f32:	af00      	add	r7, sp, #0
 8049f34:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8049f36:	2300      	movs	r3, #0
}
 8049f38:	4618      	mov	r0, r3
 8049f3a:	370c      	adds	r7, #12
 8049f3c:	46bd      	mov	sp, r7
 8049f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f42:	4770      	bx	lr

08049f44 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8049f44:	b480      	push	{r7}
 8049f46:	b083      	sub	sp, #12
 8049f48:	af00      	add	r7, sp, #0
 8049f4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8049f4c:	687b      	ldr	r3, [r7, #4]
 8049f4e:	220a      	movs	r2, #10
 8049f50:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8049f52:	4b03      	ldr	r3, [pc, #12]	@ (8049f60 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8049f54:	4618      	mov	r0, r3
 8049f56:	370c      	adds	r7, #12
 8049f58:	46bd      	mov	sp, r7
 8049f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049f5e:	4770      	bx	lr
 8049f60:	24000068 	.word	0x24000068

08049f64 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8049f64:	b580      	push	{r7, lr}
 8049f66:	b086      	sub	sp, #24
 8049f68:	af00      	add	r7, sp, #0
 8049f6a:	60f8      	str	r0, [r7, #12]
 8049f6c:	460b      	mov	r3, r1
 8049f6e:	607a      	str	r2, [r7, #4]
 8049f70:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8049f72:	68fb      	ldr	r3, [r7, #12]
 8049f74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049f78:	68fa      	ldr	r2, [r7, #12]
 8049f7a:	33b0      	adds	r3, #176	@ 0xb0
 8049f7c:	009b      	lsls	r3, r3, #2
 8049f7e:	4413      	add	r3, r2
 8049f80:	685b      	ldr	r3, [r3, #4]
 8049f82:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8049f84:	7afb      	ldrb	r3, [r7, #11]
 8049f86:	2b06      	cmp	r3, #6
 8049f88:	d808      	bhi.n	8049f9c <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8049f8a:	697b      	ldr	r3, [r7, #20]
 8049f8c:	681b      	ldr	r3, [r3, #0]
 8049f8e:	687a      	ldr	r2, [r7, #4]
 8049f90:	4906      	ldr	r1, [pc, #24]	@ (8049fac <USBD_DFU_GetUsrStringDesc+0x48>)
 8049f92:	4618      	mov	r0, r3
 8049f94:	f7ff fc58 	bl	8049848 <USBD_GetString>
    return USBD_StrDesc;
 8049f98:	4b04      	ldr	r3, [pc, #16]	@ (8049fac <USBD_DFU_GetUsrStringDesc+0x48>)
 8049f9a:	e003      	b.n	8049fa4 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 8049f9c:	687b      	ldr	r3, [r7, #4]
 8049f9e:	2200      	movs	r2, #0
 8049fa0:	801a      	strh	r2, [r3, #0]
    return NULL;
 8049fa2:	2300      	movs	r3, #0
  }
}
 8049fa4:	4618      	mov	r0, r3
 8049fa6:	3718      	adds	r7, #24
 8049fa8:	46bd      	mov	sp, r7
 8049faa:	bd80      	pop	{r7, pc}
 8049fac:	24000220 	.word	0x24000220

08049fb0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8049fb0:	b480      	push	{r7}
 8049fb2:	b083      	sub	sp, #12
 8049fb4:	af00      	add	r7, sp, #0
 8049fb6:	6078      	str	r0, [r7, #4]
 8049fb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8049fba:	683b      	ldr	r3, [r7, #0]
 8049fbc:	2b00      	cmp	r3, #0
 8049fbe:	d101      	bne.n	8049fc4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8049fc0:	2303      	movs	r3, #3
 8049fc2:	e009      	b.n	8049fd8 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8049fc4:	687b      	ldr	r3, [r7, #4]
 8049fc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8049fca:	687a      	ldr	r2, [r7, #4]
 8049fcc:	33b0      	adds	r3, #176	@ 0xb0
 8049fce:	009b      	lsls	r3, r3, #2
 8049fd0:	4413      	add	r3, r2
 8049fd2:	683a      	ldr	r2, [r7, #0]
 8049fd4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8049fd6:	2300      	movs	r3, #0
}
 8049fd8:	4618      	mov	r0, r3
 8049fda:	370c      	adds	r7, #12
 8049fdc:	46bd      	mov	sp, r7
 8049fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049fe2:	4770      	bx	lr

08049fe4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8049fe4:	b580      	push	{r7, lr}
 8049fe6:	b084      	sub	sp, #16
 8049fe8:	af00      	add	r7, sp, #0
 8049fea:	6078      	str	r0, [r7, #4]
 8049fec:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8049fee:	687b      	ldr	r3, [r7, #4]
 8049ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8049ff4:	687b      	ldr	r3, [r7, #4]
 8049ff6:	32b0      	adds	r2, #176	@ 0xb0
 8049ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8049ffc:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8049ffe:	687b      	ldr	r3, [r7, #4]
 804a000:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 804a004:	4618      	mov	r0, r3
 804a006:	f000 fbd5 	bl	804a7b4 <USBD_DFU_GetDfuFuncDesc>
 804a00a:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 804a00c:	68fb      	ldr	r3, [r7, #12]
 804a00e:	2b00      	cmp	r3, #0
 804a010:	d054      	beq.n	804a0bc <DFU_Detach+0xd8>
 804a012:	68bb      	ldr	r3, [r7, #8]
 804a014:	2b00      	cmp	r3, #0
 804a016:	d051      	beq.n	804a0bc <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 804a018:	68fb      	ldr	r3, [r7, #12]
 804a01a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a01e:	2b02      	cmp	r3, #2
 804a020:	d013      	beq.n	804a04a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 804a022:	68fb      	ldr	r3, [r7, #12]
 804a024:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 804a028:	2b03      	cmp	r3, #3
 804a02a:	d00e      	beq.n	804a04a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 804a02c:	68fb      	ldr	r3, [r7, #12]
 804a02e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 804a032:	2b05      	cmp	r3, #5
 804a034:	d009      	beq.n	804a04a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 804a036:	68fb      	ldr	r3, [r7, #12]
 804a038:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 804a03c:	2b06      	cmp	r3, #6
 804a03e:	d004      	beq.n	804a04a <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 804a040:	68fb      	ldr	r3, [r7, #12]
 804a042:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 804a046:	2b09      	cmp	r3, #9
 804a048:	d125      	bne.n	804a096 <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 804a04a:	68fb      	ldr	r3, [r7, #12]
 804a04c:	2202      	movs	r2, #2
 804a04e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 804a052:	68fb      	ldr	r3, [r7, #12]
 804a054:	2200      	movs	r2, #0
 804a056:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a05a:	68fb      	ldr	r3, [r7, #12]
 804a05c:	2200      	movs	r2, #0
 804a05e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a062:	68fb      	ldr	r3, [r7, #12]
 804a064:	2200      	movs	r2, #0
 804a066:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 804a06a:	68fb      	ldr	r3, [r7, #12]
 804a06c:	2200      	movs	r2, #0
 804a06e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a072:	68fb      	ldr	r3, [r7, #12]
 804a074:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a078:	68fb      	ldr	r3, [r7, #12]
 804a07a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 804a07e:	68fb      	ldr	r3, [r7, #12]
 804a080:	2200      	movs	r2, #0
 804a082:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 804a086:	68fb      	ldr	r3, [r7, #12]
 804a088:	2200      	movs	r2, #0
 804a08a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 804a08e:	68fb      	ldr	r3, [r7, #12]
 804a090:	2200      	movs	r2, #0
 804a092:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 804a096:	68bb      	ldr	r3, [r7, #8]
 804a098:	789b      	ldrb	r3, [r3, #2]
 804a09a:	f003 0308 	and.w	r3, r3, #8
 804a09e:	2b00      	cmp	r3, #0
 804a0a0:	d006      	beq.n	804a0b0 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 804a0a2:	6878      	ldr	r0, [r7, #4]
 804a0a4:	f7fe f9f9 	bl	804849a <USBD_Stop>
    (void)USBD_Start(pdev);
 804a0a8:	6878      	ldr	r0, [r7, #4]
 804a0aa:	f7fe f9ea 	bl	8048482 <USBD_Start>
 804a0ae:	e006      	b.n	804a0be <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 804a0b0:	683b      	ldr	r3, [r7, #0]
 804a0b2:	885b      	ldrh	r3, [r3, #2]
 804a0b4:	4618      	mov	r0, r3
 804a0b6:	f7f7 f843 	bl	8041140 <HAL_Delay>
 804a0ba:	e000      	b.n	804a0be <DFU_Detach+0xda>
    return;
 804a0bc:	bf00      	nop
  }
}
 804a0be:	3710      	adds	r7, #16
 804a0c0:	46bd      	mov	sp, r7
 804a0c2:	bd80      	pop	{r7, pc}

0804a0c4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804a0c4:	b580      	push	{r7, lr}
 804a0c6:	b084      	sub	sp, #16
 804a0c8:	af00      	add	r7, sp, #0
 804a0ca:	6078      	str	r0, [r7, #4]
 804a0cc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a0ce:	687b      	ldr	r3, [r7, #4]
 804a0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a0d4:	687b      	ldr	r3, [r7, #4]
 804a0d6:	32b0      	adds	r2, #176	@ 0xb0
 804a0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a0dc:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 804a0de:	68fb      	ldr	r3, [r7, #12]
 804a0e0:	2b00      	cmp	r3, #0
 804a0e2:	d061      	beq.n	804a1a8 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 804a0e4:	683b      	ldr	r3, [r7, #0]
 804a0e6:	88db      	ldrh	r3, [r3, #6]
 804a0e8:	2b00      	cmp	r3, #0
 804a0ea:	d033      	beq.n	804a154 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 804a0ec:	68fb      	ldr	r3, [r7, #12]
 804a0ee:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a0f2:	2b02      	cmp	r3, #2
 804a0f4:	d004      	beq.n	804a100 <DFU_Download+0x3c>
 804a0f6:	68fb      	ldr	r3, [r7, #12]
 804a0f8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a0fc:	2b05      	cmp	r3, #5
 804a0fe:	d124      	bne.n	804a14a <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 804a100:	683b      	ldr	r3, [r7, #0]
 804a102:	885b      	ldrh	r3, [r3, #2]
 804a104:	461a      	mov	r2, r3
 804a106:	68fb      	ldr	r3, [r7, #12]
 804a108:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 804a10c:	683b      	ldr	r3, [r7, #0]
 804a10e:	88db      	ldrh	r3, [r3, #6]
 804a110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 804a114:	bf28      	it	cs
 804a116:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 804a11a:	b29b      	uxth	r3, r3
 804a11c:	461a      	mov	r2, r3
 804a11e:	68fb      	ldr	r3, [r7, #12]
 804a120:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 804a124:	68fb      	ldr	r3, [r7, #12]
 804a126:	2203      	movs	r2, #3
 804a128:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 804a12c:	68fb      	ldr	r3, [r7, #12]
 804a12e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a132:	68fb      	ldr	r3, [r7, #12]
 804a134:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 804a138:	68f9      	ldr	r1, [r7, #12]
 804a13a:	68fb      	ldr	r3, [r7, #12]
 804a13c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a140:	461a      	mov	r2, r3
 804a142:	6878      	ldr	r0, [r7, #4]
 804a144:	f000 fb90 	bl	804a868 <USBD_CtlPrepareRx>
 804a148:	e02f      	b.n	804a1aa <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 804a14a:	6839      	ldr	r1, [r7, #0]
 804a14c:	6878      	ldr	r0, [r7, #4]
 804a14e:	f7ff fb6a 	bl	8049826 <USBD_CtlError>
 804a152:	e02a      	b.n	804a1aa <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 804a154:	68fb      	ldr	r3, [r7, #12]
 804a156:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a15a:	2b05      	cmp	r3, #5
 804a15c:	d004      	beq.n	804a168 <DFU_Download+0xa4>
 804a15e:	68fb      	ldr	r3, [r7, #12]
 804a160:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a164:	2b02      	cmp	r3, #2
 804a166:	d11a      	bne.n	804a19e <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 804a168:	68fb      	ldr	r3, [r7, #12]
 804a16a:	2201      	movs	r2, #1
 804a16c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 804a170:	68fb      	ldr	r3, [r7, #12]
 804a172:	2206      	movs	r2, #6
 804a174:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 804a178:	68fb      	ldr	r3, [r7, #12]
 804a17a:	2200      	movs	r2, #0
 804a17c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a180:	68fb      	ldr	r3, [r7, #12]
 804a182:	2200      	movs	r2, #0
 804a184:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a188:	68fb      	ldr	r3, [r7, #12]
 804a18a:	2200      	movs	r2, #0
 804a18c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a190:	68fb      	ldr	r3, [r7, #12]
 804a192:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a196:	68fb      	ldr	r3, [r7, #12]
 804a198:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 804a19c:	e005      	b.n	804a1aa <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 804a19e:	6839      	ldr	r1, [r7, #0]
 804a1a0:	6878      	ldr	r0, [r7, #4]
 804a1a2:	f7ff fb40 	bl	8049826 <USBD_CtlError>
 804a1a6:	e000      	b.n	804a1aa <DFU_Download+0xe6>
    return;
 804a1a8:	bf00      	nop
    }
  }
}
 804a1aa:	3710      	adds	r7, #16
 804a1ac:	46bd      	mov	sp, r7
 804a1ae:	bd80      	pop	{r7, pc}

0804a1b0 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 804a1b0:	b580      	push	{r7, lr}
 804a1b2:	b088      	sub	sp, #32
 804a1b4:	af00      	add	r7, sp, #0
 804a1b6:	6078      	str	r0, [r7, #4]
 804a1b8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a1ba:	687b      	ldr	r3, [r7, #4]
 804a1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a1c0:	687b      	ldr	r3, [r7, #4]
 804a1c2:	32b0      	adds	r2, #176	@ 0xb0
 804a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a1c8:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 804a1ca:	687b      	ldr	r3, [r7, #4]
 804a1cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804a1d0:	687a      	ldr	r2, [r7, #4]
 804a1d2:	33b0      	adds	r3, #176	@ 0xb0
 804a1d4:	009b      	lsls	r3, r3, #2
 804a1d6:	4413      	add	r3, r2
 804a1d8:	685b      	ldr	r3, [r3, #4]
 804a1da:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 804a1dc:	69fb      	ldr	r3, [r7, #28]
 804a1de:	2b00      	cmp	r3, #0
 804a1e0:	f000 80ea 	beq.w	804a3b8 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 804a1e4:	683b      	ldr	r3, [r7, #0]
 804a1e6:	88db      	ldrh	r3, [r3, #6]
 804a1e8:	2b00      	cmp	r3, #0
 804a1ea:	f000 80ce 	beq.w	804a38a <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 804a1ee:	69fb      	ldr	r3, [r7, #28]
 804a1f0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a1f4:	2b02      	cmp	r3, #2
 804a1f6:	d005      	beq.n	804a204 <DFU_Upload+0x54>
 804a1f8:	69fb      	ldr	r3, [r7, #28]
 804a1fa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a1fe:	2b09      	cmp	r3, #9
 804a200:	f040 80b6 	bne.w	804a370 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 804a204:	683b      	ldr	r3, [r7, #0]
 804a206:	885b      	ldrh	r3, [r3, #2]
 804a208:	461a      	mov	r2, r3
 804a20a:	69fb      	ldr	r3, [r7, #28]
 804a20c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 804a210:	683b      	ldr	r3, [r7, #0]
 804a212:	88db      	ldrh	r3, [r3, #6]
 804a214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 804a218:	bf28      	it	cs
 804a21a:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 804a21e:	b29b      	uxth	r3, r3
 804a220:	461a      	mov	r2, r3
 804a222:	69fb      	ldr	r3, [r7, #28]
 804a224:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 804a228:	69fb      	ldr	r3, [r7, #28]
 804a22a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a22e:	2b00      	cmp	r3, #0
 804a230:	d12e      	bne.n	804a290 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 804a232:	69fb      	ldr	r3, [r7, #28]
 804a234:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a238:	2b03      	cmp	r3, #3
 804a23a:	d901      	bls.n	804a240 <DFU_Upload+0x90>
 804a23c:	2202      	movs	r2, #2
 804a23e:	e000      	b.n	804a242 <DFU_Upload+0x92>
 804a240:	2209      	movs	r2, #9
 804a242:	69fb      	ldr	r3, [r7, #28]
 804a244:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 804a248:	69fb      	ldr	r3, [r7, #28]
 804a24a:	2200      	movs	r2, #0
 804a24c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a250:	69fb      	ldr	r3, [r7, #28]
 804a252:	2200      	movs	r2, #0
 804a254:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a258:	69fb      	ldr	r3, [r7, #28]
 804a25a:	2200      	movs	r2, #0
 804a25c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a260:	69fb      	ldr	r3, [r7, #28]
 804a262:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a266:	69fb      	ldr	r3, [r7, #28]
 804a268:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 804a26c:	69fb      	ldr	r3, [r7, #28]
 804a26e:	2200      	movs	r2, #0
 804a270:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 804a272:	69fb      	ldr	r3, [r7, #28]
 804a274:	2221      	movs	r2, #33	@ 0x21
 804a276:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 804a278:	69fb      	ldr	r3, [r7, #28]
 804a27a:	2241      	movs	r2, #65	@ 0x41
 804a27c:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 804a27e:	2303      	movs	r3, #3
 804a280:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 804a282:	69fb      	ldr	r3, [r7, #28]
 804a284:	68fa      	ldr	r2, [r7, #12]
 804a286:	4619      	mov	r1, r3
 804a288:	6878      	ldr	r0, [r7, #4]
 804a28a:	f000 fac1 	bl	804a810 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 804a28e:	e094      	b.n	804a3ba <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 804a290:	69fb      	ldr	r3, [r7, #28]
 804a292:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a296:	2b01      	cmp	r3, #1
 804a298:	d94f      	bls.n	804a33a <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 804a29a:	69fb      	ldr	r3, [r7, #28]
 804a29c:	2209      	movs	r2, #9
 804a29e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 804a2a2:	69fb      	ldr	r3, [r7, #28]
 804a2a4:	2200      	movs	r2, #0
 804a2a6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a2aa:	69fb      	ldr	r3, [r7, #28]
 804a2ac:	2200      	movs	r2, #0
 804a2ae:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a2b2:	69fb      	ldr	r3, [r7, #28]
 804a2b4:	2200      	movs	r2, #0
 804a2b6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a2ba:	69fb      	ldr	r3, [r7, #28]
 804a2bc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a2c0:	69fb      	ldr	r3, [r7, #28]
 804a2c2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 804a2c6:	69fb      	ldr	r3, [r7, #28]
 804a2c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a2cc:	3b02      	subs	r3, #2
 804a2ce:	029a      	lsls	r2, r3, #10
 804a2d0:	69fb      	ldr	r3, [r7, #28]
 804a2d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 804a2d6:	4413      	add	r3, r2
 804a2d8:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 804a2da:	69bb      	ldr	r3, [r7, #24]
 804a2dc:	695b      	ldr	r3, [r3, #20]
 804a2de:	6978      	ldr	r0, [r7, #20]
 804a2e0:	69f9      	ldr	r1, [r7, #28]
 804a2e2:	69fa      	ldr	r2, [r7, #28]
 804a2e4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 804a2e8:	4798      	blx	r3
 804a2ea:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 804a2ec:	693b      	ldr	r3, [r7, #16]
 804a2ee:	2b00      	cmp	r3, #0
 804a2f0:	d11a      	bne.n	804a328 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 804a2f2:	69fb      	ldr	r3, [r7, #28]
 804a2f4:	220f      	movs	r2, #15
 804a2f6:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

            hdfu->dev_status[1] = 0U;
 804a2fa:	69fb      	ldr	r3, [r7, #28]
 804a2fc:	2200      	movs	r2, #0
 804a2fe:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 804a302:	69fb      	ldr	r3, [r7, #28]
 804a304:	2200      	movs	r2, #0
 804a306:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 804a30a:	69fb      	ldr	r3, [r7, #28]
 804a30c:	2200      	movs	r2, #0
 804a30e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 804a312:	69fb      	ldr	r3, [r7, #28]
 804a314:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a318:	69fb      	ldr	r3, [r7, #28]
 804a31a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 804a31e:	6839      	ldr	r1, [r7, #0]
 804a320:	6878      	ldr	r0, [r7, #4]
 804a322:	f7ff fa80 	bl	8049826 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 804a326:	e048      	b.n	804a3ba <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 804a328:	69fb      	ldr	r3, [r7, #28]
 804a32a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a32e:	461a      	mov	r2, r3
 804a330:	6939      	ldr	r1, [r7, #16]
 804a332:	6878      	ldr	r0, [r7, #4]
 804a334:	f000 fa6c 	bl	804a810 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 804a338:	e03f      	b.n	804a3ba <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 804a33a:	69fb      	ldr	r3, [r7, #28]
 804a33c:	220f      	movs	r2, #15
 804a33e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 804a342:	69fb      	ldr	r3, [r7, #28]
 804a344:	2200      	movs	r2, #0
 804a346:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a34a:	69fb      	ldr	r3, [r7, #28]
 804a34c:	2200      	movs	r2, #0
 804a34e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a352:	69fb      	ldr	r3, [r7, #28]
 804a354:	2200      	movs	r2, #0
 804a356:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a35a:	69fb      	ldr	r3, [r7, #28]
 804a35c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a360:	69fb      	ldr	r3, [r7, #28]
 804a362:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 804a366:	6839      	ldr	r1, [r7, #0]
 804a368:	6878      	ldr	r0, [r7, #4]
 804a36a:	f7ff fa5c 	bl	8049826 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 804a36e:	e024      	b.n	804a3ba <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 804a370:	69fb      	ldr	r3, [r7, #28]
 804a372:	2200      	movs	r2, #0
 804a374:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 804a378:	69fb      	ldr	r3, [r7, #28]
 804a37a:	2200      	movs	r2, #0
 804a37c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 804a380:	6839      	ldr	r1, [r7, #0]
 804a382:	6878      	ldr	r0, [r7, #4]
 804a384:	f7ff fa4f 	bl	8049826 <USBD_CtlError>
 804a388:	e017      	b.n	804a3ba <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 804a38a:	69fb      	ldr	r3, [r7, #28]
 804a38c:	2202      	movs	r2, #2
 804a38e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 804a392:	69fb      	ldr	r3, [r7, #28]
 804a394:	2200      	movs	r2, #0
 804a396:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a39a:	69fb      	ldr	r3, [r7, #28]
 804a39c:	2200      	movs	r2, #0
 804a39e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 804a3a2:	69fb      	ldr	r3, [r7, #28]
 804a3a4:	2200      	movs	r2, #0
 804a3a6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a3aa:	69fb      	ldr	r3, [r7, #28]
 804a3ac:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a3b0:	69fb      	ldr	r3, [r7, #28]
 804a3b2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 804a3b6:	e000      	b.n	804a3ba <DFU_Upload+0x20a>
    return;
 804a3b8:	bf00      	nop
  }
}
 804a3ba:	3720      	adds	r7, #32
 804a3bc:	46bd      	mov	sp, r7
 804a3be:	bd80      	pop	{r7, pc}

0804a3c0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 804a3c0:	b580      	push	{r7, lr}
 804a3c2:	b086      	sub	sp, #24
 804a3c4:	af00      	add	r7, sp, #0
 804a3c6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a3c8:	687b      	ldr	r3, [r7, #4]
 804a3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a3ce:	687b      	ldr	r3, [r7, #4]
 804a3d0:	32b0      	adds	r2, #176	@ 0xb0
 804a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a3d6:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 804a3d8:	687b      	ldr	r3, [r7, #4]
 804a3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804a3de:	687a      	ldr	r2, [r7, #4]
 804a3e0:	33b0      	adds	r3, #176	@ 0xb0
 804a3e2:	009b      	lsls	r3, r3, #2
 804a3e4:	4413      	add	r3, r2
 804a3e6:	685b      	ldr	r3, [r3, #4]
 804a3e8:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 804a3ea:	687b      	ldr	r3, [r7, #4]
 804a3ec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 804a3f0:	4618      	mov	r0, r3
 804a3f2:	f000 f9df 	bl	804a7b4 <USBD_DFU_GetDfuFuncDesc>
 804a3f6:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 804a3f8:	697b      	ldr	r3, [r7, #20]
 804a3fa:	2b00      	cmp	r3, #0
 804a3fc:	f000 80a8 	beq.w	804a550 <DFU_GetStatus+0x190>
 804a400:	693b      	ldr	r3, [r7, #16]
 804a402:	2b00      	cmp	r3, #0
 804a404:	f000 80a4 	beq.w	804a550 <DFU_GetStatus+0x190>
 804a408:	68fb      	ldr	r3, [r7, #12]
 804a40a:	2b00      	cmp	r3, #0
 804a40c:	f000 80a0 	beq.w	804a550 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 804a410:	697b      	ldr	r3, [r7, #20]
 804a412:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a416:	2b03      	cmp	r3, #3
 804a418:	d002      	beq.n	804a420 <DFU_GetStatus+0x60>
 804a41a:	2b06      	cmp	r3, #6
 804a41c:	d051      	beq.n	804a4c2 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 804a41e:	e08e      	b.n	804a53e <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 804a420:	697b      	ldr	r3, [r7, #20]
 804a422:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 804a426:	2b00      	cmp	r3, #0
 804a428:	d034      	beq.n	804a494 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 804a42a:	697b      	ldr	r3, [r7, #20]
 804a42c:	2204      	movs	r2, #4
 804a42e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 804a432:	697b      	ldr	r3, [r7, #20]
 804a434:	2200      	movs	r2, #0
 804a436:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a43a:	697b      	ldr	r3, [r7, #20]
 804a43c:	2200      	movs	r2, #0
 804a43e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a442:	697b      	ldr	r3, [r7, #20]
 804a444:	2200      	movs	r2, #0
 804a446:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a44a:	697b      	ldr	r3, [r7, #20]
 804a44c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a450:	697b      	ldr	r3, [r7, #20]
 804a452:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 804a456:	697b      	ldr	r3, [r7, #20]
 804a458:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 804a45c:	2b00      	cmp	r3, #0
 804a45e:	d10e      	bne.n	804a47e <DFU_GetStatus+0xbe>
 804a460:	697b      	ldr	r3, [r7, #20]
 804a462:	781b      	ldrb	r3, [r3, #0]
 804a464:	2b41      	cmp	r3, #65	@ 0x41
 804a466:	d10a      	bne.n	804a47e <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 804a468:	693b      	ldr	r3, [r7, #16]
 804a46a:	699b      	ldr	r3, [r3, #24]
 804a46c:	697a      	ldr	r2, [r7, #20]
 804a46e:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 804a472:	697a      	ldr	r2, [r7, #20]
 804a474:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 804a478:	2100      	movs	r1, #0
 804a47a:	4798      	blx	r3
      break;
 804a47c:	e05f      	b.n	804a53e <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 804a47e:	693b      	ldr	r3, [r7, #16]
 804a480:	699b      	ldr	r3, [r3, #24]
 804a482:	697a      	ldr	r2, [r7, #20]
 804a484:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 804a488:	697a      	ldr	r2, [r7, #20]
 804a48a:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 804a48e:	2101      	movs	r1, #1
 804a490:	4798      	blx	r3
      break;
 804a492:	e054      	b.n	804a53e <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 804a494:	697b      	ldr	r3, [r7, #20]
 804a496:	2205      	movs	r2, #5
 804a498:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 804a49c:	697b      	ldr	r3, [r7, #20]
 804a49e:	2200      	movs	r2, #0
 804a4a0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a4a4:	697b      	ldr	r3, [r7, #20]
 804a4a6:	2200      	movs	r2, #0
 804a4a8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a4ac:	697b      	ldr	r3, [r7, #20]
 804a4ae:	2200      	movs	r2, #0
 804a4b0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a4b4:	697b      	ldr	r3, [r7, #20]
 804a4b6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a4ba:	697b      	ldr	r3, [r7, #20]
 804a4bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 804a4c0:	e03d      	b.n	804a53e <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 804a4c2:	697b      	ldr	r3, [r7, #20]
 804a4c4:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 804a4c8:	2b01      	cmp	r3, #1
 804a4ca:	d116      	bne.n	804a4fa <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 804a4cc:	697b      	ldr	r3, [r7, #20]
 804a4ce:	2207      	movs	r2, #7
 804a4d0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 804a4d4:	697b      	ldr	r3, [r7, #20]
 804a4d6:	2201      	movs	r2, #1
 804a4d8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 804a4dc:	697b      	ldr	r3, [r7, #20]
 804a4de:	2200      	movs	r2, #0
 804a4e0:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 804a4e4:	697b      	ldr	r3, [r7, #20]
 804a4e6:	2200      	movs	r2, #0
 804a4e8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 804a4ec:	697b      	ldr	r3, [r7, #20]
 804a4ee:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a4f2:	697b      	ldr	r3, [r7, #20]
 804a4f4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 804a4f8:	e020      	b.n	804a53c <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 804a4fa:	697b      	ldr	r3, [r7, #20]
 804a4fc:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 804a500:	2b00      	cmp	r3, #0
 804a502:	d11b      	bne.n	804a53c <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 804a504:	68fb      	ldr	r3, [r7, #12]
 804a506:	789b      	ldrb	r3, [r3, #2]
 804a508:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 804a50c:	2b00      	cmp	r3, #0
 804a50e:	d015      	beq.n	804a53c <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 804a510:	697b      	ldr	r3, [r7, #20]
 804a512:	2202      	movs	r2, #2
 804a514:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 804a518:	697b      	ldr	r3, [r7, #20]
 804a51a:	2200      	movs	r2, #0
 804a51c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 804a520:	697b      	ldr	r3, [r7, #20]
 804a522:	2200      	movs	r2, #0
 804a524:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 804a528:	697b      	ldr	r3, [r7, #20]
 804a52a:	2200      	movs	r2, #0
 804a52c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 804a530:	697b      	ldr	r3, [r7, #20]
 804a532:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a536:	697b      	ldr	r3, [r7, #20]
 804a538:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 804a53c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 804a53e:	697b      	ldr	r3, [r7, #20]
 804a540:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 804a544:	2206      	movs	r2, #6
 804a546:	4619      	mov	r1, r3
 804a548:	6878      	ldr	r0, [r7, #4]
 804a54a:	f000 f961 	bl	804a810 <USBD_CtlSendData>
 804a54e:	e000      	b.n	804a552 <DFU_GetStatus+0x192>
    return;
 804a550:	bf00      	nop
}
 804a552:	3718      	adds	r7, #24
 804a554:	46bd      	mov	sp, r7
 804a556:	bd80      	pop	{r7, pc}

0804a558 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 804a558:	b480      	push	{r7}
 804a55a:	b085      	sub	sp, #20
 804a55c:	af00      	add	r7, sp, #0
 804a55e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a560:	687b      	ldr	r3, [r7, #4]
 804a562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a566:	687b      	ldr	r3, [r7, #4]
 804a568:	32b0      	adds	r2, #176	@ 0xb0
 804a56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a56e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 804a570:	68fb      	ldr	r3, [r7, #12]
 804a572:	2b00      	cmp	r3, #0
 804a574:	d042      	beq.n	804a5fc <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 804a576:	68fb      	ldr	r3, [r7, #12]
 804a578:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a57c:	2b0a      	cmp	r3, #10
 804a57e:	d11e      	bne.n	804a5be <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 804a580:	68fb      	ldr	r3, [r7, #12]
 804a582:	2202      	movs	r2, #2
 804a584:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 804a588:	68fb      	ldr	r3, [r7, #12]
 804a58a:	2200      	movs	r2, #0
 804a58c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a590:	68fb      	ldr	r3, [r7, #12]
 804a592:	2200      	movs	r2, #0
 804a594:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a598:	68fb      	ldr	r3, [r7, #12]
 804a59a:	2200      	movs	r2, #0
 804a59c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 804a5a0:	68fb      	ldr	r3, [r7, #12]
 804a5a2:	2200      	movs	r2, #0
 804a5a4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 804a5a8:	68fb      	ldr	r3, [r7, #12]
 804a5aa:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a5ae:	68fb      	ldr	r3, [r7, #12]
 804a5b0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 804a5b4:	68fb      	ldr	r3, [r7, #12]
 804a5b6:	2200      	movs	r2, #0
 804a5b8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 804a5bc:	e01f      	b.n	804a5fe <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 804a5be:	68fb      	ldr	r3, [r7, #12]
 804a5c0:	220a      	movs	r2, #10
 804a5c2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 804a5c6:	68fb      	ldr	r3, [r7, #12]
 804a5c8:	220e      	movs	r2, #14
 804a5ca:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a5ce:	68fb      	ldr	r3, [r7, #12]
 804a5d0:	2200      	movs	r2, #0
 804a5d2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a5d6:	68fb      	ldr	r3, [r7, #12]
 804a5d8:	2200      	movs	r2, #0
 804a5da:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 804a5de:	68fb      	ldr	r3, [r7, #12]
 804a5e0:	2200      	movs	r2, #0
 804a5e2:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 804a5e6:	68fb      	ldr	r3, [r7, #12]
 804a5e8:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a5ec:	68fb      	ldr	r3, [r7, #12]
 804a5ee:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 804a5f2:	68fb      	ldr	r3, [r7, #12]
 804a5f4:	2200      	movs	r2, #0
 804a5f6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 804a5fa:	e000      	b.n	804a5fe <DFU_ClearStatus+0xa6>
    return;
 804a5fc:	bf00      	nop
  }
}
 804a5fe:	3714      	adds	r7, #20
 804a600:	46bd      	mov	sp, r7
 804a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a606:	4770      	bx	lr

0804a608 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 804a608:	b580      	push	{r7, lr}
 804a60a:	b084      	sub	sp, #16
 804a60c:	af00      	add	r7, sp, #0
 804a60e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a610:	687b      	ldr	r3, [r7, #4]
 804a612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a616:	687b      	ldr	r3, [r7, #4]
 804a618:	32b0      	adds	r2, #176	@ 0xb0
 804a61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a61e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 804a620:	68fb      	ldr	r3, [r7, #12]
 804a622:	2b00      	cmp	r3, #0
 804a624:	d008      	beq.n	804a638 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 804a626:	68fb      	ldr	r3, [r7, #12]
 804a628:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 804a62c:	2201      	movs	r2, #1
 804a62e:	4619      	mov	r1, r3
 804a630:	6878      	ldr	r0, [r7, #4]
 804a632:	f000 f8ed 	bl	804a810 <USBD_CtlSendData>
 804a636:	e000      	b.n	804a63a <DFU_GetState+0x32>
    return;
 804a638:	bf00      	nop
}
 804a63a:	3710      	adds	r7, #16
 804a63c:	46bd      	mov	sp, r7
 804a63e:	bd80      	pop	{r7, pc}

0804a640 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 804a640:	b480      	push	{r7}
 804a642:	b085      	sub	sp, #20
 804a644:	af00      	add	r7, sp, #0
 804a646:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a648:	687b      	ldr	r3, [r7, #4]
 804a64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a64e:	687b      	ldr	r3, [r7, #4]
 804a650:	32b0      	adds	r2, #176	@ 0xb0
 804a652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a656:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 804a658:	68fb      	ldr	r3, [r7, #12]
 804a65a:	2b00      	cmp	r3, #0
 804a65c:	d03f      	beq.n	804a6de <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 804a65e:	68fb      	ldr	r3, [r7, #12]
 804a660:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 804a664:	2b02      	cmp	r3, #2
 804a666:	d013      	beq.n	804a690 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 804a668:	68fb      	ldr	r3, [r7, #12]
 804a66a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 804a66e:	2b03      	cmp	r3, #3
 804a670:	d00e      	beq.n	804a690 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 804a672:	68fb      	ldr	r3, [r7, #12]
 804a674:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 804a678:	2b05      	cmp	r3, #5
 804a67a:	d009      	beq.n	804a690 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 804a67c:	68fb      	ldr	r3, [r7, #12]
 804a67e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 804a682:	2b06      	cmp	r3, #6
 804a684:	d004      	beq.n	804a690 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 804a686:	68fb      	ldr	r3, [r7, #12]
 804a688:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 804a68c:	2b09      	cmp	r3, #9
 804a68e:	d127      	bne.n	804a6e0 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 804a690:	68fb      	ldr	r3, [r7, #12]
 804a692:	2202      	movs	r2, #2
 804a694:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 804a698:	68fb      	ldr	r3, [r7, #12]
 804a69a:	2200      	movs	r2, #0
 804a69c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 804a6a0:	68fb      	ldr	r3, [r7, #12]
 804a6a2:	2200      	movs	r2, #0
 804a6a4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a6a8:	68fb      	ldr	r3, [r7, #12]
 804a6aa:	2200      	movs	r2, #0
 804a6ac:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 804a6b0:	68fb      	ldr	r3, [r7, #12]
 804a6b2:	2200      	movs	r2, #0
 804a6b4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a6b8:	68fb      	ldr	r3, [r7, #12]
 804a6ba:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a6be:	68fb      	ldr	r3, [r7, #12]
 804a6c0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 804a6c4:	68fb      	ldr	r3, [r7, #12]
 804a6c6:	2200      	movs	r2, #0
 804a6c8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 804a6cc:	68fb      	ldr	r3, [r7, #12]
 804a6ce:	2200      	movs	r2, #0
 804a6d0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 804a6d4:	68fb      	ldr	r3, [r7, #12]
 804a6d6:	2200      	movs	r2, #0
 804a6d8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 804a6dc:	e000      	b.n	804a6e0 <DFU_Abort+0xa0>
    return;
 804a6de:	bf00      	nop
  }
}
 804a6e0:	3714      	adds	r7, #20
 804a6e2:	46bd      	mov	sp, r7
 804a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a6e8:	4770      	bx	lr

0804a6ea <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 804a6ea:	b580      	push	{r7, lr}
 804a6ec:	b086      	sub	sp, #24
 804a6ee:	af00      	add	r7, sp, #0
 804a6f0:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 804a6f2:	687b      	ldr	r3, [r7, #4]
 804a6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 804a6f8:	687b      	ldr	r3, [r7, #4]
 804a6fa:	32b0      	adds	r2, #176	@ 0xb0
 804a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804a700:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 804a702:	687b      	ldr	r3, [r7, #4]
 804a704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 804a708:	687a      	ldr	r2, [r7, #4]
 804a70a:	33b0      	adds	r3, #176	@ 0xb0
 804a70c:	009b      	lsls	r3, r3, #2
 804a70e:	4413      	add	r3, r2
 804a710:	685b      	ldr	r3, [r3, #4]
 804a712:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 804a714:	687b      	ldr	r3, [r7, #4]
 804a716:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 804a71a:	4618      	mov	r0, r3
 804a71c:	f000 f84a 	bl	804a7b4 <USBD_DFU_GetDfuFuncDesc>
 804a720:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 804a722:	697b      	ldr	r3, [r7, #20]
 804a724:	2b00      	cmp	r3, #0
 804a726:	d041      	beq.n	804a7ac <DFU_Leave+0xc2>
 804a728:	693b      	ldr	r3, [r7, #16]
 804a72a:	2b00      	cmp	r3, #0
 804a72c:	d03e      	beq.n	804a7ac <DFU_Leave+0xc2>
 804a72e:	68fb      	ldr	r3, [r7, #12]
 804a730:	2b00      	cmp	r3, #0
 804a732:	d03b      	beq.n	804a7ac <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 804a734:	697b      	ldr	r3, [r7, #20]
 804a736:	2200      	movs	r2, #0
 804a738:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 804a73c:	68fb      	ldr	r3, [r7, #12]
 804a73e:	789b      	ldrb	r3, [r3, #2]
 804a740:	f003 0304 	and.w	r3, r3, #4
 804a744:	2b00      	cmp	r3, #0
 804a746:	d016      	beq.n	804a776 <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 804a748:	697b      	ldr	r3, [r7, #20]
 804a74a:	2206      	movs	r2, #6
 804a74c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 804a750:	697b      	ldr	r3, [r7, #20]
 804a752:	2200      	movs	r2, #0
 804a754:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a758:	697b      	ldr	r3, [r7, #20]
 804a75a:	2200      	movs	r2, #0
 804a75c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 804a760:	697b      	ldr	r3, [r7, #20]
 804a762:	2200      	movs	r2, #0
 804a764:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a768:	697b      	ldr	r3, [r7, #20]
 804a76a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a76e:	697b      	ldr	r3, [r7, #20]
 804a770:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    return;
 804a774:	e01b      	b.n	804a7ae <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 804a776:	697b      	ldr	r3, [r7, #20]
 804a778:	2208      	movs	r2, #8
 804a77a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 804a77e:	697b      	ldr	r3, [r7, #20]
 804a780:	2200      	movs	r2, #0
 804a782:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 804a786:	697b      	ldr	r3, [r7, #20]
 804a788:	2200      	movs	r2, #0
 804a78a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 804a78e:	697b      	ldr	r3, [r7, #20]
 804a790:	2200      	movs	r2, #0
 804a792:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 804a796:	697b      	ldr	r3, [r7, #20]
 804a798:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 804a79c:	697b      	ldr	r3, [r7, #20]
 804a79e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 804a7a2:	6878      	ldr	r0, [r7, #4]
 804a7a4:	f7fd fe79 	bl	804849a <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 804a7a8:	f7ff f8ba 	bl	8049920 <__NVIC_SystemReset>
    return;
 804a7ac:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 804a7ae:	3718      	adds	r7, #24
 804a7b0:	46bd      	mov	sp, r7
 804a7b2:	bd80      	pop	{r7, pc}

0804a7b4 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 804a7b4:	b580      	push	{r7, lr}
 804a7b6:	b086      	sub	sp, #24
 804a7b8:	af00      	add	r7, sp, #0
 804a7ba:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 804a7bc:	687b      	ldr	r3, [r7, #4]
 804a7be:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 804a7c0:	687b      	ldr	r3, [r7, #4]
 804a7c2:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 804a7c4:	2300      	movs	r3, #0
 804a7c6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 804a7c8:	68fb      	ldr	r3, [r7, #12]
 804a7ca:	885b      	ldrh	r3, [r3, #2]
 804a7cc:	b29b      	uxth	r3, r3
 804a7ce:	68fa      	ldr	r2, [r7, #12]
 804a7d0:	7812      	ldrb	r2, [r2, #0]
 804a7d2:	4293      	cmp	r3, r2
 804a7d4:	d917      	bls.n	804a806 <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 804a7d6:	68fb      	ldr	r3, [r7, #12]
 804a7d8:	781b      	ldrb	r3, [r3, #0]
 804a7da:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 804a7dc:	e00d      	b.n	804a7fa <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 804a7de:	f107 030a 	add.w	r3, r7, #10
 804a7e2:	4619      	mov	r1, r3
 804a7e4:	6978      	ldr	r0, [r7, #20]
 804a7e6:	f7fe f9d0 	bl	8048b8a <USBD_GetNextDesc>
 804a7ea:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 804a7ec:	697b      	ldr	r3, [r7, #20]
 804a7ee:	785b      	ldrb	r3, [r3, #1]
 804a7f0:	2b21      	cmp	r3, #33	@ 0x21
 804a7f2:	d102      	bne.n	804a7fa <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 804a7f4:	697b      	ldr	r3, [r7, #20]
 804a7f6:	613b      	str	r3, [r7, #16]
        break;
 804a7f8:	e005      	b.n	804a806 <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 804a7fa:	68fb      	ldr	r3, [r7, #12]
 804a7fc:	885b      	ldrh	r3, [r3, #2]
 804a7fe:	b29a      	uxth	r2, r3
 804a800:	897b      	ldrh	r3, [r7, #10]
 804a802:	429a      	cmp	r2, r3
 804a804:	d8eb      	bhi.n	804a7de <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 804a806:	693b      	ldr	r3, [r7, #16]
}
 804a808:	4618      	mov	r0, r3
 804a80a:	3718      	adds	r7, #24
 804a80c:	46bd      	mov	sp, r7
 804a80e:	bd80      	pop	{r7, pc}

0804a810 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 804a810:	b580      	push	{r7, lr}
 804a812:	b084      	sub	sp, #16
 804a814:	af00      	add	r7, sp, #0
 804a816:	60f8      	str	r0, [r7, #12]
 804a818:	60b9      	str	r1, [r7, #8]
 804a81a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 804a81c:	68fb      	ldr	r3, [r7, #12]
 804a81e:	2202      	movs	r2, #2
 804a820:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 804a824:	68fb      	ldr	r3, [r7, #12]
 804a826:	687a      	ldr	r2, [r7, #4]
 804a828:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 804a82a:	68fb      	ldr	r3, [r7, #12]
 804a82c:	687a      	ldr	r2, [r7, #4]
 804a82e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804a830:	687b      	ldr	r3, [r7, #4]
 804a832:	68ba      	ldr	r2, [r7, #8]
 804a834:	2100      	movs	r1, #0
 804a836:	68f8      	ldr	r0, [r7, #12]
 804a838:	f000 fd41 	bl	804b2be <USBD_LL_Transmit>

  return USBD_OK;
 804a83c:	2300      	movs	r3, #0
}
 804a83e:	4618      	mov	r0, r3
 804a840:	3710      	adds	r7, #16
 804a842:	46bd      	mov	sp, r7
 804a844:	bd80      	pop	{r7, pc}

0804a846 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 804a846:	b580      	push	{r7, lr}
 804a848:	b084      	sub	sp, #16
 804a84a:	af00      	add	r7, sp, #0
 804a84c:	60f8      	str	r0, [r7, #12]
 804a84e:	60b9      	str	r1, [r7, #8]
 804a850:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 804a852:	687b      	ldr	r3, [r7, #4]
 804a854:	68ba      	ldr	r2, [r7, #8]
 804a856:	2100      	movs	r1, #0
 804a858:	68f8      	ldr	r0, [r7, #12]
 804a85a:	f000 fd30 	bl	804b2be <USBD_LL_Transmit>

  return USBD_OK;
 804a85e:	2300      	movs	r3, #0
}
 804a860:	4618      	mov	r0, r3
 804a862:	3710      	adds	r7, #16
 804a864:	46bd      	mov	sp, r7
 804a866:	bd80      	pop	{r7, pc}

0804a868 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 804a868:	b580      	push	{r7, lr}
 804a86a:	b084      	sub	sp, #16
 804a86c:	af00      	add	r7, sp, #0
 804a86e:	60f8      	str	r0, [r7, #12]
 804a870:	60b9      	str	r1, [r7, #8]
 804a872:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 804a874:	68fb      	ldr	r3, [r7, #12]
 804a876:	2203      	movs	r2, #3
 804a878:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 804a87c:	68fb      	ldr	r3, [r7, #12]
 804a87e:	687a      	ldr	r2, [r7, #4]
 804a880:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 804a884:	68fb      	ldr	r3, [r7, #12]
 804a886:	687a      	ldr	r2, [r7, #4]
 804a888:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 804a88c:	687b      	ldr	r3, [r7, #4]
 804a88e:	68ba      	ldr	r2, [r7, #8]
 804a890:	2100      	movs	r1, #0
 804a892:	68f8      	ldr	r0, [r7, #12]
 804a894:	f000 fd34 	bl	804b300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a898:	2300      	movs	r3, #0
}
 804a89a:	4618      	mov	r0, r3
 804a89c:	3710      	adds	r7, #16
 804a89e:	46bd      	mov	sp, r7
 804a8a0:	bd80      	pop	{r7, pc}

0804a8a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 804a8a2:	b580      	push	{r7, lr}
 804a8a4:	b084      	sub	sp, #16
 804a8a6:	af00      	add	r7, sp, #0
 804a8a8:	60f8      	str	r0, [r7, #12]
 804a8aa:	60b9      	str	r1, [r7, #8]
 804a8ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 804a8ae:	687b      	ldr	r3, [r7, #4]
 804a8b0:	68ba      	ldr	r2, [r7, #8]
 804a8b2:	2100      	movs	r1, #0
 804a8b4:	68f8      	ldr	r0, [r7, #12]
 804a8b6:	f000 fd23 	bl	804b300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a8ba:	2300      	movs	r3, #0
}
 804a8bc:	4618      	mov	r0, r3
 804a8be:	3710      	adds	r7, #16
 804a8c0:	46bd      	mov	sp, r7
 804a8c2:	bd80      	pop	{r7, pc}

0804a8c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 804a8c4:	b580      	push	{r7, lr}
 804a8c6:	b082      	sub	sp, #8
 804a8c8:	af00      	add	r7, sp, #0
 804a8ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 804a8cc:	687b      	ldr	r3, [r7, #4]
 804a8ce:	2204      	movs	r2, #4
 804a8d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 804a8d4:	2300      	movs	r3, #0
 804a8d6:	2200      	movs	r2, #0
 804a8d8:	2100      	movs	r1, #0
 804a8da:	6878      	ldr	r0, [r7, #4]
 804a8dc:	f000 fcef 	bl	804b2be <USBD_LL_Transmit>

  return USBD_OK;
 804a8e0:	2300      	movs	r3, #0
}
 804a8e2:	4618      	mov	r0, r3
 804a8e4:	3708      	adds	r7, #8
 804a8e6:	46bd      	mov	sp, r7
 804a8e8:	bd80      	pop	{r7, pc}

0804a8ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 804a8ea:	b580      	push	{r7, lr}
 804a8ec:	b082      	sub	sp, #8
 804a8ee:	af00      	add	r7, sp, #0
 804a8f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 804a8f2:	687b      	ldr	r3, [r7, #4]
 804a8f4:	2205      	movs	r2, #5
 804a8f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 804a8fa:	2300      	movs	r3, #0
 804a8fc:	2200      	movs	r2, #0
 804a8fe:	2100      	movs	r1, #0
 804a900:	6878      	ldr	r0, [r7, #4]
 804a902:	f000 fcfd 	bl	804b300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 804a906:	2300      	movs	r3, #0
}
 804a908:	4618      	mov	r0, r3
 804a90a:	3708      	adds	r7, #8
 804a90c:	46bd      	mov	sp, r7
 804a90e:	bd80      	pop	{r7, pc}

0804a910 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 804a910:	b580      	push	{r7, lr}
 804a912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 804a914:	2201      	movs	r2, #1
 804a916:	4913      	ldr	r1, [pc, #76]	@ (804a964 <MX_USB_DEVICE_Init+0x54>)
 804a918:	4813      	ldr	r0, [pc, #76]	@ (804a968 <MX_USB_DEVICE_Init+0x58>)
 804a91a:	f7fd fd4c 	bl	80483b6 <USBD_Init>
 804a91e:	4603      	mov	r3, r0
 804a920:	2b00      	cmp	r3, #0
 804a922:	d001      	beq.n	804a928 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 804a924:	f7f6 f99c 	bl	8040c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 804a928:	4910      	ldr	r1, [pc, #64]	@ (804a96c <MX_USB_DEVICE_Init+0x5c>)
 804a92a:	480f      	ldr	r0, [pc, #60]	@ (804a968 <MX_USB_DEVICE_Init+0x58>)
 804a92c:	f7fd fd73 	bl	8048416 <USBD_RegisterClass>
 804a930:	4603      	mov	r3, r0
 804a932:	2b00      	cmp	r3, #0
 804a934:	d001      	beq.n	804a93a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 804a936:	f7f6 f993 	bl	8040c60 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 804a93a:	490d      	ldr	r1, [pc, #52]	@ (804a970 <MX_USB_DEVICE_Init+0x60>)
 804a93c:	480a      	ldr	r0, [pc, #40]	@ (804a968 <MX_USB_DEVICE_Init+0x58>)
 804a93e:	f7ff fb37 	bl	8049fb0 <USBD_DFU_RegisterMedia>
 804a942:	4603      	mov	r3, r0
 804a944:	2b00      	cmp	r3, #0
 804a946:	d001      	beq.n	804a94c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 804a948:	f7f6 f98a 	bl	8040c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 804a94c:	4806      	ldr	r0, [pc, #24]	@ (804a968 <MX_USB_DEVICE_Init+0x58>)
 804a94e:	f7fd fd98 	bl	8048482 <USBD_Start>
 804a952:	4603      	mov	r3, r0
 804a954:	2b00      	cmp	r3, #0
 804a956:	d001      	beq.n	804a95c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 804a958:	f7f6 f982 	bl	8040c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 804a95c:	f7f8 fb08 	bl	8042f70 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 804a960:	bf00      	nop
 804a962:	bd80      	pop	{r7, pc}
 804a964:	24000074 	.word	0x24000074
 804a968:	24000320 	.word	0x24000320
 804a96c:	24000010 	.word	0x24000010
 804a970:	240000c8 	.word	0x240000c8

0804a974 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a974:	b480      	push	{r7}
 804a976:	b083      	sub	sp, #12
 804a978:	af00      	add	r7, sp, #0
 804a97a:	4603      	mov	r3, r0
 804a97c:	6039      	str	r1, [r7, #0]
 804a97e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 804a980:	683b      	ldr	r3, [r7, #0]
 804a982:	2212      	movs	r2, #18
 804a984:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 804a986:	4b03      	ldr	r3, [pc, #12]	@ (804a994 <USBD_HS_DeviceDescriptor+0x20>)
}
 804a988:	4618      	mov	r0, r3
 804a98a:	370c      	adds	r7, #12
 804a98c:	46bd      	mov	sp, r7
 804a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a992:	4770      	bx	lr
 804a994:	24000094 	.word	0x24000094

0804a998 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a998:	b480      	push	{r7}
 804a99a:	b083      	sub	sp, #12
 804a99c:	af00      	add	r7, sp, #0
 804a99e:	4603      	mov	r3, r0
 804a9a0:	6039      	str	r1, [r7, #0]
 804a9a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 804a9a4:	683b      	ldr	r3, [r7, #0]
 804a9a6:	2204      	movs	r2, #4
 804a9a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 804a9aa:	4b03      	ldr	r3, [pc, #12]	@ (804a9b8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 804a9ac:	4618      	mov	r0, r3
 804a9ae:	370c      	adds	r7, #12
 804a9b0:	46bd      	mov	sp, r7
 804a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9b6:	4770      	bx	lr
 804a9b8:	240000a8 	.word	0x240000a8

0804a9bc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a9bc:	b580      	push	{r7, lr}
 804a9be:	b082      	sub	sp, #8
 804a9c0:	af00      	add	r7, sp, #0
 804a9c2:	4603      	mov	r3, r0
 804a9c4:	6039      	str	r1, [r7, #0]
 804a9c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804a9c8:	79fb      	ldrb	r3, [r7, #7]
 804a9ca:	2b00      	cmp	r3, #0
 804a9cc:	d105      	bne.n	804a9da <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a9ce:	683a      	ldr	r2, [r7, #0]
 804a9d0:	4907      	ldr	r1, [pc, #28]	@ (804a9f0 <USBD_HS_ProductStrDescriptor+0x34>)
 804a9d2:	4808      	ldr	r0, [pc, #32]	@ (804a9f4 <USBD_HS_ProductStrDescriptor+0x38>)
 804a9d4:	f7fe ff38 	bl	8049848 <USBD_GetString>
 804a9d8:	e004      	b.n	804a9e4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 804a9da:	683a      	ldr	r2, [r7, #0]
 804a9dc:	4904      	ldr	r1, [pc, #16]	@ (804a9f0 <USBD_HS_ProductStrDescriptor+0x34>)
 804a9de:	4805      	ldr	r0, [pc, #20]	@ (804a9f4 <USBD_HS_ProductStrDescriptor+0x38>)
 804a9e0:	f7fe ff32 	bl	8049848 <USBD_GetString>
  }
  return USBD_StrDesc;
 804a9e4:	4b02      	ldr	r3, [pc, #8]	@ (804a9f0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 804a9e6:	4618      	mov	r0, r3
 804a9e8:	3708      	adds	r7, #8
 804a9ea:	46bd      	mov	sp, r7
 804a9ec:	bd80      	pop	{r7, pc}
 804a9ee:	bf00      	nop
 804a9f0:	240005fc 	.word	0x240005fc
 804a9f4:	0804c278 	.word	0x0804c278

0804a9f8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804a9f8:	b580      	push	{r7, lr}
 804a9fa:	b082      	sub	sp, #8
 804a9fc:	af00      	add	r7, sp, #0
 804a9fe:	4603      	mov	r3, r0
 804aa00:	6039      	str	r1, [r7, #0]
 804aa02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 804aa04:	683a      	ldr	r2, [r7, #0]
 804aa06:	4904      	ldr	r1, [pc, #16]	@ (804aa18 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 804aa08:	4804      	ldr	r0, [pc, #16]	@ (804aa1c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 804aa0a:	f7fe ff1d 	bl	8049848 <USBD_GetString>
  return USBD_StrDesc;
 804aa0e:	4b02      	ldr	r3, [pc, #8]	@ (804aa18 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 804aa10:	4618      	mov	r0, r3
 804aa12:	3708      	adds	r7, #8
 804aa14:	46bd      	mov	sp, r7
 804aa16:	bd80      	pop	{r7, pc}
 804aa18:	240005fc 	.word	0x240005fc
 804aa1c:	0804c298 	.word	0x0804c298

0804aa20 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804aa20:	b580      	push	{r7, lr}
 804aa22:	b082      	sub	sp, #8
 804aa24:	af00      	add	r7, sp, #0
 804aa26:	4603      	mov	r3, r0
 804aa28:	6039      	str	r1, [r7, #0]
 804aa2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 804aa2c:	683b      	ldr	r3, [r7, #0]
 804aa2e:	221a      	movs	r2, #26
 804aa30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 804aa32:	f000 f843 	bl	804aabc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 804aa36:	4b02      	ldr	r3, [pc, #8]	@ (804aa40 <USBD_HS_SerialStrDescriptor+0x20>)
}
 804aa38:	4618      	mov	r0, r3
 804aa3a:	3708      	adds	r7, #8
 804aa3c:	46bd      	mov	sp, r7
 804aa3e:	bd80      	pop	{r7, pc}
 804aa40:	240000ac 	.word	0x240000ac

0804aa44 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804aa44:	b580      	push	{r7, lr}
 804aa46:	b082      	sub	sp, #8
 804aa48:	af00      	add	r7, sp, #0
 804aa4a:	4603      	mov	r3, r0
 804aa4c:	6039      	str	r1, [r7, #0]
 804aa4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 804aa50:	79fb      	ldrb	r3, [r7, #7]
 804aa52:	2b00      	cmp	r3, #0
 804aa54:	d105      	bne.n	804aa62 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804aa56:	683a      	ldr	r2, [r7, #0]
 804aa58:	4907      	ldr	r1, [pc, #28]	@ (804aa78 <USBD_HS_ConfigStrDescriptor+0x34>)
 804aa5a:	4808      	ldr	r0, [pc, #32]	@ (804aa7c <USBD_HS_ConfigStrDescriptor+0x38>)
 804aa5c:	f7fe fef4 	bl	8049848 <USBD_GetString>
 804aa60:	e004      	b.n	804aa6c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 804aa62:	683a      	ldr	r2, [r7, #0]
 804aa64:	4904      	ldr	r1, [pc, #16]	@ (804aa78 <USBD_HS_ConfigStrDescriptor+0x34>)
 804aa66:	4805      	ldr	r0, [pc, #20]	@ (804aa7c <USBD_HS_ConfigStrDescriptor+0x38>)
 804aa68:	f7fe feee 	bl	8049848 <USBD_GetString>
  }
  return USBD_StrDesc;
 804aa6c:	4b02      	ldr	r3, [pc, #8]	@ (804aa78 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 804aa6e:	4618      	mov	r0, r3
 804aa70:	3708      	adds	r7, #8
 804aa72:	46bd      	mov	sp, r7
 804aa74:	bd80      	pop	{r7, pc}
 804aa76:	bf00      	nop
 804aa78:	240005fc 	.word	0x240005fc
 804aa7c:	0804c2ac 	.word	0x0804c2ac

0804aa80 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 804aa80:	b580      	push	{r7, lr}
 804aa82:	b082      	sub	sp, #8
 804aa84:	af00      	add	r7, sp, #0
 804aa86:	4603      	mov	r3, r0
 804aa88:	6039      	str	r1, [r7, #0]
 804aa8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 804aa8c:	79fb      	ldrb	r3, [r7, #7]
 804aa8e:	2b00      	cmp	r3, #0
 804aa90:	d105      	bne.n	804aa9e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804aa92:	683a      	ldr	r2, [r7, #0]
 804aa94:	4907      	ldr	r1, [pc, #28]	@ (804aab4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804aa96:	4808      	ldr	r0, [pc, #32]	@ (804aab8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804aa98:	f7fe fed6 	bl	8049848 <USBD_GetString>
 804aa9c:	e004      	b.n	804aaa8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 804aa9e:	683a      	ldr	r2, [r7, #0]
 804aaa0:	4904      	ldr	r1, [pc, #16]	@ (804aab4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 804aaa2:	4805      	ldr	r0, [pc, #20]	@ (804aab8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 804aaa4:	f7fe fed0 	bl	8049848 <USBD_GetString>
  }
  return USBD_StrDesc;
 804aaa8:	4b02      	ldr	r3, [pc, #8]	@ (804aab4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 804aaaa:	4618      	mov	r0, r3
 804aaac:	3708      	adds	r7, #8
 804aaae:	46bd      	mov	sp, r7
 804aab0:	bd80      	pop	{r7, pc}
 804aab2:	bf00      	nop
 804aab4:	240005fc 	.word	0x240005fc
 804aab8:	0804c2b8 	.word	0x0804c2b8

0804aabc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 804aabc:	b580      	push	{r7, lr}
 804aabe:	b084      	sub	sp, #16
 804aac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 804aac2:	4b0f      	ldr	r3, [pc, #60]	@ (804ab00 <Get_SerialNum+0x44>)
 804aac4:	681b      	ldr	r3, [r3, #0]
 804aac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 804aac8:	4b0e      	ldr	r3, [pc, #56]	@ (804ab04 <Get_SerialNum+0x48>)
 804aaca:	681b      	ldr	r3, [r3, #0]
 804aacc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 804aace:	4b0e      	ldr	r3, [pc, #56]	@ (804ab08 <Get_SerialNum+0x4c>)
 804aad0:	681b      	ldr	r3, [r3, #0]
 804aad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 804aad4:	68fa      	ldr	r2, [r7, #12]
 804aad6:	687b      	ldr	r3, [r7, #4]
 804aad8:	4413      	add	r3, r2
 804aada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 804aadc:	68fb      	ldr	r3, [r7, #12]
 804aade:	2b00      	cmp	r3, #0
 804aae0:	d009      	beq.n	804aaf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 804aae2:	2208      	movs	r2, #8
 804aae4:	4909      	ldr	r1, [pc, #36]	@ (804ab0c <Get_SerialNum+0x50>)
 804aae6:	68f8      	ldr	r0, [r7, #12]
 804aae8:	f000 f814 	bl	804ab14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 804aaec:	2204      	movs	r2, #4
 804aaee:	4908      	ldr	r1, [pc, #32]	@ (804ab10 <Get_SerialNum+0x54>)
 804aaf0:	68b8      	ldr	r0, [r7, #8]
 804aaf2:	f000 f80f 	bl	804ab14 <IntToUnicode>
  }
}
 804aaf6:	bf00      	nop
 804aaf8:	3710      	adds	r7, #16
 804aafa:	46bd      	mov	sp, r7
 804aafc:	bd80      	pop	{r7, pc}
 804aafe:	bf00      	nop
 804ab00:	1ff1e800 	.word	0x1ff1e800
 804ab04:	1ff1e804 	.word	0x1ff1e804
 804ab08:	1ff1e808 	.word	0x1ff1e808
 804ab0c:	240000ae 	.word	0x240000ae
 804ab10:	240000be 	.word	0x240000be

0804ab14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 804ab14:	b480      	push	{r7}
 804ab16:	b087      	sub	sp, #28
 804ab18:	af00      	add	r7, sp, #0
 804ab1a:	60f8      	str	r0, [r7, #12]
 804ab1c:	60b9      	str	r1, [r7, #8]
 804ab1e:	4613      	mov	r3, r2
 804ab20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 804ab22:	2300      	movs	r3, #0
 804ab24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 804ab26:	2300      	movs	r3, #0
 804ab28:	75fb      	strb	r3, [r7, #23]
 804ab2a:	e027      	b.n	804ab7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 804ab2c:	68fb      	ldr	r3, [r7, #12]
 804ab2e:	0f1b      	lsrs	r3, r3, #28
 804ab30:	2b09      	cmp	r3, #9
 804ab32:	d80b      	bhi.n	804ab4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 804ab34:	68fb      	ldr	r3, [r7, #12]
 804ab36:	0f1b      	lsrs	r3, r3, #28
 804ab38:	b2da      	uxtb	r2, r3
 804ab3a:	7dfb      	ldrb	r3, [r7, #23]
 804ab3c:	005b      	lsls	r3, r3, #1
 804ab3e:	4619      	mov	r1, r3
 804ab40:	68bb      	ldr	r3, [r7, #8]
 804ab42:	440b      	add	r3, r1
 804ab44:	3230      	adds	r2, #48	@ 0x30
 804ab46:	b2d2      	uxtb	r2, r2
 804ab48:	701a      	strb	r2, [r3, #0]
 804ab4a:	e00a      	b.n	804ab62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 804ab4c:	68fb      	ldr	r3, [r7, #12]
 804ab4e:	0f1b      	lsrs	r3, r3, #28
 804ab50:	b2da      	uxtb	r2, r3
 804ab52:	7dfb      	ldrb	r3, [r7, #23]
 804ab54:	005b      	lsls	r3, r3, #1
 804ab56:	4619      	mov	r1, r3
 804ab58:	68bb      	ldr	r3, [r7, #8]
 804ab5a:	440b      	add	r3, r1
 804ab5c:	3237      	adds	r2, #55	@ 0x37
 804ab5e:	b2d2      	uxtb	r2, r2
 804ab60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 804ab62:	68fb      	ldr	r3, [r7, #12]
 804ab64:	011b      	lsls	r3, r3, #4
 804ab66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 804ab68:	7dfb      	ldrb	r3, [r7, #23]
 804ab6a:	005b      	lsls	r3, r3, #1
 804ab6c:	3301      	adds	r3, #1
 804ab6e:	68ba      	ldr	r2, [r7, #8]
 804ab70:	4413      	add	r3, r2
 804ab72:	2200      	movs	r2, #0
 804ab74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 804ab76:	7dfb      	ldrb	r3, [r7, #23]
 804ab78:	3301      	adds	r3, #1
 804ab7a:	75fb      	strb	r3, [r7, #23]
 804ab7c:	7dfa      	ldrb	r2, [r7, #23]
 804ab7e:	79fb      	ldrb	r3, [r7, #7]
 804ab80:	429a      	cmp	r2, r3
 804ab82:	d3d3      	bcc.n	804ab2c <IntToUnicode+0x18>
  }
}
 804ab84:	bf00      	nop
 804ab86:	bf00      	nop
 804ab88:	371c      	adds	r7, #28
 804ab8a:	46bd      	mov	sp, r7
 804ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ab90:	4770      	bx	lr

0804ab92 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 804ab92:	b480      	push	{r7}
 804ab94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 804ab96:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 804ab98:	4618      	mov	r0, r3
 804ab9a:	46bd      	mov	sp, r7
 804ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aba0:	4770      	bx	lr

0804aba2 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 804aba2:	b480      	push	{r7}
 804aba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 804aba6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 804aba8:	4618      	mov	r0, r3
 804abaa:	46bd      	mov	sp, r7
 804abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abb0:	4770      	bx	lr

0804abb2 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 804abb2:	b480      	push	{r7}
 804abb4:	b083      	sub	sp, #12
 804abb6:	af00      	add	r7, sp, #0
 804abb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 804abba:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 804abbc:	4618      	mov	r0, r3
 804abbe:	370c      	adds	r7, #12
 804abc0:	46bd      	mov	sp, r7
 804abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abc6:	4770      	bx	lr

0804abc8 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 804abc8:	b480      	push	{r7}
 804abca:	b085      	sub	sp, #20
 804abcc:	af00      	add	r7, sp, #0
 804abce:	60f8      	str	r0, [r7, #12]
 804abd0:	60b9      	str	r1, [r7, #8]
 804abd2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 804abd4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 804abd6:	4618      	mov	r0, r3
 804abd8:	3714      	adds	r7, #20
 804abda:	46bd      	mov	sp, r7
 804abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abe0:	4770      	bx	lr

0804abe2 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 804abe2:	b480      	push	{r7}
 804abe4:	b085      	sub	sp, #20
 804abe6:	af00      	add	r7, sp, #0
 804abe8:	60f8      	str	r0, [r7, #12]
 804abea:	60b9      	str	r1, [r7, #8]
 804abec:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 804abee:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 804abf0:	4618      	mov	r0, r3
 804abf2:	3714      	adds	r7, #20
 804abf4:	46bd      	mov	sp, r7
 804abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804abfa:	4770      	bx	lr

0804abfc <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 804abfc:	b480      	push	{r7}
 804abfe:	b085      	sub	sp, #20
 804ac00:	af00      	add	r7, sp, #0
 804ac02:	60f8      	str	r0, [r7, #12]
 804ac04:	460b      	mov	r3, r1
 804ac06:	607a      	str	r2, [r7, #4]
 804ac08:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 804ac0a:	7afb      	ldrb	r3, [r7, #11]
 804ac0c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 804ac0e:	bf00      	nop
  }
  return  (USBD_OK);
 804ac10:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 804ac12:	4618      	mov	r0, r3
 804ac14:	3714      	adds	r7, #20
 804ac16:	46bd      	mov	sp, r7
 804ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ac1c:	4770      	bx	lr
	...

0804ac20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 804ac20:	b580      	push	{r7, lr}
 804ac22:	b0c2      	sub	sp, #264	@ 0x108
 804ac24:	af00      	add	r7, sp, #0
 804ac26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804ac2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804ac2e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804ac30:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ac34:	2200      	movs	r2, #0
 804ac36:	601a      	str	r2, [r3, #0]
 804ac38:	605a      	str	r2, [r3, #4]
 804ac3a:	609a      	str	r2, [r3, #8]
 804ac3c:	60da      	str	r2, [r3, #12]
 804ac3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 804ac40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804ac44:	22c8      	movs	r2, #200	@ 0xc8
 804ac46:	2100      	movs	r1, #0
 804ac48:	4618      	mov	r0, r3
 804ac4a:	f000 fcd6 	bl	804b5fa <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 804ac4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 804ac52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 804ac56:	681b      	ldr	r3, [r3, #0]
 804ac58:	681b      	ldr	r3, [r3, #0]
 804ac5a:	4a7d      	ldr	r2, [pc, #500]	@ (804ae50 <HAL_PCD_MspInit+0x230>)
 804ac5c:	4293      	cmp	r3, r2
 804ac5e:	f040 80f2 	bne.w	804ae46 <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 804ac62:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 804ac66:	f04f 0300 	mov.w	r3, #0
 804ac6a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 804ac6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 804ac72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804ac76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 804ac7a:	4618      	mov	r0, r3
 804ac7c:	f7f9 f9d8 	bl	8044030 <HAL_RCCEx_PeriphCLKConfig>
 804ac80:	4603      	mov	r3, r0
 804ac82:	2b00      	cmp	r3, #0
 804ac84:	d001      	beq.n	804ac8a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 804ac86:	f7f5 ffeb 	bl	8040c60 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 804ac8a:	f7f8 f971 	bl	8042f70 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804ac8e:	4b71      	ldr	r3, [pc, #452]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ac90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ac94:	4a6f      	ldr	r2, [pc, #444]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ac96:	f043 0302 	orr.w	r3, r3, #2
 804ac9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804ac9e:	4b6d      	ldr	r3, [pc, #436]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804aca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804aca4:	f003 0302 	and.w	r3, r3, #2
 804aca8:	627b      	str	r3, [r7, #36]	@ 0x24
 804acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 804acac:	4b69      	ldr	r3, [pc, #420]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acb2:	4a68      	ldr	r2, [pc, #416]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 804acb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804acbc:	4b65      	ldr	r3, [pc, #404]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 804acc6:	623b      	str	r3, [r7, #32]
 804acc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804acca:	4b62      	ldr	r3, [pc, #392]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804accc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acd0:	4a60      	ldr	r2, [pc, #384]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acd2:	f043 0304 	orr.w	r3, r3, #4
 804acd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804acda:	4b5e      	ldr	r3, [pc, #376]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ace0:	f003 0304 	and.w	r3, r3, #4
 804ace4:	61fb      	str	r3, [r7, #28]
 804ace6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 804ace8:	4b5a      	ldr	r3, [pc, #360]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acee:	4a59      	ldr	r2, [pc, #356]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804acf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804acf8:	4b56      	ldr	r3, [pc, #344]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804acfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804acfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804ad02:	61bb      	str	r3, [r7, #24]
 804ad04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804ad06:	4b53      	ldr	r3, [pc, #332]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ad08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ad0c:	4a51      	ldr	r2, [pc, #324]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ad0e:	f043 0301 	orr.w	r3, r3, #1
 804ad12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 804ad16:	4b4f      	ldr	r3, [pc, #316]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ad18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 804ad1c:	f003 0301 	and.w	r3, r3, #1
 804ad20:	617b      	str	r3, [r7, #20]
 804ad22:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 804ad24:	f643 4323 	movw	r3, #15395	@ 0x3c23
 804ad28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad2c:	2302      	movs	r3, #2
 804ad2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad32:	2300      	movs	r3, #0
 804ad34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad38:	2302      	movs	r3, #2
 804ad3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad3e:	230a      	movs	r3, #10
 804ad40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804ad44:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ad48:	4619      	mov	r1, r3
 804ad4a:	4843      	ldr	r0, [pc, #268]	@ (804ae58 <HAL_PCD_MspInit+0x238>)
 804ad4c:	f7f6 fc2a 	bl	80415a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 804ad50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 804ad54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad58:	2302      	movs	r3, #2
 804ad5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad5e:	2300      	movs	r3, #0
 804ad60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad64:	2302      	movs	r3, #2
 804ad66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad6a:	230a      	movs	r3, #10
 804ad6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 804ad70:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ad74:	4619      	mov	r1, r3
 804ad76:	4839      	ldr	r0, [pc, #228]	@ (804ae5c <HAL_PCD_MspInit+0x23c>)
 804ad78:	f7f6 fc14 	bl	80415a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 804ad7c:	2301      	movs	r3, #1
 804ad7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804ad82:	2302      	movs	r3, #2
 804ad84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804ad88:	2300      	movs	r3, #0
 804ad8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ad8e:	2302      	movs	r3, #2
 804ad90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ad94:	230a      	movs	r3, #10
 804ad96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 804ad9a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804ad9e:	4619      	mov	r1, r3
 804ada0:	482f      	ldr	r0, [pc, #188]	@ (804ae60 <HAL_PCD_MspInit+0x240>)
 804ada2:	f7f6 fbff 	bl	80415a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 804ada6:	2310      	movs	r3, #16
 804ada8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804adac:	2302      	movs	r3, #2
 804adae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804adb2:	2300      	movs	r3, #0
 804adb4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804adb8:	2302      	movs	r3, #2
 804adba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804adbe:	230a      	movs	r3, #10
 804adc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 804adc4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804adc8:	4619      	mov	r1, r3
 804adca:	4826      	ldr	r0, [pc, #152]	@ (804ae64 <HAL_PCD_MspInit+0x244>)
 804adcc:	f7f6 fbea 	bl	80415a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 804add0:	2328      	movs	r3, #40	@ 0x28
 804add2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804add6:	2302      	movs	r3, #2
 804add8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804addc:	2300      	movs	r3, #0
 804adde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 804ade2:	2302      	movs	r3, #2
 804ade4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 804ade8:	230a      	movs	r3, #10
 804adea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804adee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 804adf2:	4619      	mov	r1, r3
 804adf4:	481c      	ldr	r0, [pc, #112]	@ (804ae68 <HAL_PCD_MspInit+0x248>)
 804adf6:	f7f6 fbd5 	bl	80415a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804adfa:	4b16      	ldr	r3, [pc, #88]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804adfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804ae00:	4a14      	ldr	r2, [pc, #80]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ae02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 804ae06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804ae0a:	4b12      	ldr	r3, [pc, #72]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ae0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804ae10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 804ae14:	613b      	str	r3, [r7, #16]
 804ae16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 804ae18:	4b0e      	ldr	r3, [pc, #56]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ae1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804ae1e:	4a0d      	ldr	r2, [pc, #52]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ae20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 804ae24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 804ae28:	4b0a      	ldr	r3, [pc, #40]	@ (804ae54 <HAL_PCD_MspInit+0x234>)
 804ae2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 804ae2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 804ae32:	60fb      	str	r3, [r7, #12]
 804ae34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804ae36:	2200      	movs	r2, #0
 804ae38:	2100      	movs	r1, #0
 804ae3a:	204d      	movs	r0, #77	@ 0x4d
 804ae3c:	f7f6 fa8b 	bl	8041356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804ae40:	204d      	movs	r0, #77	@ 0x4d
 804ae42:	f7f6 faa2 	bl	804138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804ae46:	bf00      	nop
 804ae48:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 804ae4c:	46bd      	mov	sp, r7
 804ae4e:	bd80      	pop	{r7, pc}
 804ae50:	40040000 	.word	0x40040000
 804ae54:	58024400 	.word	0x58024400
 804ae58:	58020400 	.word	0x58020400
 804ae5c:	58022000 	.word	0x58022000
 804ae60:	58020800 	.word	0x58020800
 804ae64:	58021c00 	.word	0x58021c00
 804ae68:	58020000 	.word	0x58020000

0804ae6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804ae6c:	b580      	push	{r7, lr}
 804ae6e:	b082      	sub	sp, #8
 804ae70:	af00      	add	r7, sp, #0
 804ae72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 804ae74:	687b      	ldr	r3, [r7, #4]
 804ae76:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 804ae7a:	687b      	ldr	r3, [r7, #4]
 804ae7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 804ae80:	4619      	mov	r1, r3
 804ae82:	4610      	mov	r0, r2
 804ae84:	f7fd fb65 	bl	8048552 <USBD_LL_SetupStage>
}
 804ae88:	bf00      	nop
 804ae8a:	3708      	adds	r7, #8
 804ae8c:	46bd      	mov	sp, r7
 804ae8e:	bd80      	pop	{r7, pc}

0804ae90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804ae90:	b580      	push	{r7, lr}
 804ae92:	b082      	sub	sp, #8
 804ae94:	af00      	add	r7, sp, #0
 804ae96:	6078      	str	r0, [r7, #4]
 804ae98:	460b      	mov	r3, r1
 804ae9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 804ae9c:	687b      	ldr	r3, [r7, #4]
 804ae9e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804aea2:	78fa      	ldrb	r2, [r7, #3]
 804aea4:	6879      	ldr	r1, [r7, #4]
 804aea6:	4613      	mov	r3, r2
 804aea8:	00db      	lsls	r3, r3, #3
 804aeaa:	4413      	add	r3, r2
 804aeac:	009b      	lsls	r3, r3, #2
 804aeae:	440b      	add	r3, r1
 804aeb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 804aeb4:	681a      	ldr	r2, [r3, #0]
 804aeb6:	78fb      	ldrb	r3, [r7, #3]
 804aeb8:	4619      	mov	r1, r3
 804aeba:	f7fd fb9f 	bl	80485fc <USBD_LL_DataOutStage>
}
 804aebe:	bf00      	nop
 804aec0:	3708      	adds	r7, #8
 804aec2:	46bd      	mov	sp, r7
 804aec4:	bd80      	pop	{r7, pc}

0804aec6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804aec6:	b580      	push	{r7, lr}
 804aec8:	b082      	sub	sp, #8
 804aeca:	af00      	add	r7, sp, #0
 804aecc:	6078      	str	r0, [r7, #4]
 804aece:	460b      	mov	r3, r1
 804aed0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 804aed2:	687b      	ldr	r3, [r7, #4]
 804aed4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 804aed8:	78fa      	ldrb	r2, [r7, #3]
 804aeda:	6879      	ldr	r1, [r7, #4]
 804aedc:	4613      	mov	r3, r2
 804aede:	00db      	lsls	r3, r3, #3
 804aee0:	4413      	add	r3, r2
 804aee2:	009b      	lsls	r3, r3, #2
 804aee4:	440b      	add	r3, r1
 804aee6:	3320      	adds	r3, #32
 804aee8:	681a      	ldr	r2, [r3, #0]
 804aeea:	78fb      	ldrb	r3, [r7, #3]
 804aeec:	4619      	mov	r1, r3
 804aeee:	f7fd fc38 	bl	8048762 <USBD_LL_DataInStage>
}
 804aef2:	bf00      	nop
 804aef4:	3708      	adds	r7, #8
 804aef6:	46bd      	mov	sp, r7
 804aef8:	bd80      	pop	{r7, pc}

0804aefa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804aefa:	b580      	push	{r7, lr}
 804aefc:	b082      	sub	sp, #8
 804aefe:	af00      	add	r7, sp, #0
 804af00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 804af02:	687b      	ldr	r3, [r7, #4]
 804af04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af08:	4618      	mov	r0, r3
 804af0a:	f7fd fd72 	bl	80489f2 <USBD_LL_SOF>
}
 804af0e:	bf00      	nop
 804af10:	3708      	adds	r7, #8
 804af12:	46bd      	mov	sp, r7
 804af14:	bd80      	pop	{r7, pc}

0804af16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804af16:	b580      	push	{r7, lr}
 804af18:	b084      	sub	sp, #16
 804af1a:	af00      	add	r7, sp, #0
 804af1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 804af1e:	2301      	movs	r3, #1
 804af20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 804af22:	687b      	ldr	r3, [r7, #4]
 804af24:	79db      	ldrb	r3, [r3, #7]
 804af26:	2b00      	cmp	r3, #0
 804af28:	d102      	bne.n	804af30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 804af2a:	2300      	movs	r3, #0
 804af2c:	73fb      	strb	r3, [r7, #15]
 804af2e:	e008      	b.n	804af42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 804af30:	687b      	ldr	r3, [r7, #4]
 804af32:	79db      	ldrb	r3, [r3, #7]
 804af34:	2b02      	cmp	r3, #2
 804af36:	d102      	bne.n	804af3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 804af38:	2301      	movs	r3, #1
 804af3a:	73fb      	strb	r3, [r7, #15]
 804af3c:	e001      	b.n	804af42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 804af3e:	f7f5 fe8f 	bl	8040c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 804af42:	687b      	ldr	r3, [r7, #4]
 804af44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af48:	7bfa      	ldrb	r2, [r7, #15]
 804af4a:	4611      	mov	r1, r2
 804af4c:	4618      	mov	r0, r3
 804af4e:	f7fd fd0c 	bl	804896a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 804af52:	687b      	ldr	r3, [r7, #4]
 804af54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af58:	4618      	mov	r0, r3
 804af5a:	f7fd fcb4 	bl	80488c6 <USBD_LL_Reset>
}
 804af5e:	bf00      	nop
 804af60:	3710      	adds	r7, #16
 804af62:	46bd      	mov	sp, r7
 804af64:	bd80      	pop	{r7, pc}
	...

0804af68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804af68:	b580      	push	{r7, lr}
 804af6a:	b082      	sub	sp, #8
 804af6c:	af00      	add	r7, sp, #0
 804af6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 804af70:	687b      	ldr	r3, [r7, #4]
 804af72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804af76:	4618      	mov	r0, r3
 804af78:	f7fd fd07 	bl	804898a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 804af7c:	687b      	ldr	r3, [r7, #4]
 804af7e:	681b      	ldr	r3, [r3, #0]
 804af80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 804af84:	681b      	ldr	r3, [r3, #0]
 804af86:	687a      	ldr	r2, [r7, #4]
 804af88:	6812      	ldr	r2, [r2, #0]
 804af8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 804af8e:	f043 0301 	orr.w	r3, r3, #1
 804af92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 804af94:	687b      	ldr	r3, [r7, #4]
 804af96:	7adb      	ldrb	r3, [r3, #11]
 804af98:	2b00      	cmp	r3, #0
 804af9a:	d005      	beq.n	804afa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 804af9c:	4b04      	ldr	r3, [pc, #16]	@ (804afb0 <HAL_PCD_SuspendCallback+0x48>)
 804af9e:	691b      	ldr	r3, [r3, #16]
 804afa0:	4a03      	ldr	r2, [pc, #12]	@ (804afb0 <HAL_PCD_SuspendCallback+0x48>)
 804afa2:	f043 0306 	orr.w	r3, r3, #6
 804afa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 804afa8:	bf00      	nop
 804afaa:	3708      	adds	r7, #8
 804afac:	46bd      	mov	sp, r7
 804afae:	bd80      	pop	{r7, pc}
 804afb0:	e000ed00 	.word	0xe000ed00

0804afb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804afb4:	b580      	push	{r7, lr}
 804afb6:	b082      	sub	sp, #8
 804afb8:	af00      	add	r7, sp, #0
 804afba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 804afbc:	687b      	ldr	r3, [r7, #4]
 804afbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804afc2:	4618      	mov	r0, r3
 804afc4:	f7fd fcfd 	bl	80489c2 <USBD_LL_Resume>
}
 804afc8:	bf00      	nop
 804afca:	3708      	adds	r7, #8
 804afcc:	46bd      	mov	sp, r7
 804afce:	bd80      	pop	{r7, pc}

0804afd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804afd0:	b580      	push	{r7, lr}
 804afd2:	b082      	sub	sp, #8
 804afd4:	af00      	add	r7, sp, #0
 804afd6:	6078      	str	r0, [r7, #4]
 804afd8:	460b      	mov	r3, r1
 804afda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804afdc:	687b      	ldr	r3, [r7, #4]
 804afde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804afe2:	78fa      	ldrb	r2, [r7, #3]
 804afe4:	4611      	mov	r1, r2
 804afe6:	4618      	mov	r0, r3
 804afe8:	f7fd fd55 	bl	8048a96 <USBD_LL_IsoOUTIncomplete>
}
 804afec:	bf00      	nop
 804afee:	3708      	adds	r7, #8
 804aff0:	46bd      	mov	sp, r7
 804aff2:	bd80      	pop	{r7, pc}

0804aff4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804aff4:	b580      	push	{r7, lr}
 804aff6:	b082      	sub	sp, #8
 804aff8:	af00      	add	r7, sp, #0
 804affa:	6078      	str	r0, [r7, #4]
 804affc:	460b      	mov	r3, r1
 804affe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 804b000:	687b      	ldr	r3, [r7, #4]
 804b002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804b006:	78fa      	ldrb	r2, [r7, #3]
 804b008:	4611      	mov	r1, r2
 804b00a:	4618      	mov	r0, r3
 804b00c:	f7fd fd11 	bl	8048a32 <USBD_LL_IsoINIncomplete>
}
 804b010:	bf00      	nop
 804b012:	3708      	adds	r7, #8
 804b014:	46bd      	mov	sp, r7
 804b016:	bd80      	pop	{r7, pc}

0804b018 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804b018:	b580      	push	{r7, lr}
 804b01a:	b082      	sub	sp, #8
 804b01c:	af00      	add	r7, sp, #0
 804b01e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 804b020:	687b      	ldr	r3, [r7, #4]
 804b022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804b026:	4618      	mov	r0, r3
 804b028:	f7fd fd67 	bl	8048afa <USBD_LL_DevConnected>
}
 804b02c:	bf00      	nop
 804b02e:	3708      	adds	r7, #8
 804b030:	46bd      	mov	sp, r7
 804b032:	bd80      	pop	{r7, pc}

0804b034 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 804b034:	b580      	push	{r7, lr}
 804b036:	b082      	sub	sp, #8
 804b038:	af00      	add	r7, sp, #0
 804b03a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 804b03c:	687b      	ldr	r3, [r7, #4]
 804b03e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 804b042:	4618      	mov	r0, r3
 804b044:	f7fd fd64 	bl	8048b10 <USBD_LL_DevDisconnected>
}
 804b048:	bf00      	nop
 804b04a:	3708      	adds	r7, #8
 804b04c:	46bd      	mov	sp, r7
 804b04e:	bd80      	pop	{r7, pc}

0804b050 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 804b050:	b580      	push	{r7, lr}
 804b052:	b082      	sub	sp, #8
 804b054:	af00      	add	r7, sp, #0
 804b056:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 804b058:	687b      	ldr	r3, [r7, #4]
 804b05a:	781b      	ldrb	r3, [r3, #0]
 804b05c:	2b01      	cmp	r3, #1
 804b05e:	d140      	bne.n	804b0e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 804b060:	4a22      	ldr	r2, [pc, #136]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b062:	687b      	ldr	r3, [r7, #4]
 804b064:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 804b068:	687b      	ldr	r3, [r7, #4]
 804b06a:	4a20      	ldr	r2, [pc, #128]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b06c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804b070:	4b1e      	ldr	r3, [pc, #120]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b072:	4a1f      	ldr	r2, [pc, #124]	@ (804b0f0 <USBD_LL_Init+0xa0>)
 804b074:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 804b076:	4b1d      	ldr	r3, [pc, #116]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b078:	2209      	movs	r2, #9
 804b07a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 804b07c:	4b1b      	ldr	r3, [pc, #108]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b07e:	2200      	movs	r2, #0
 804b080:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804b082:	4b1a      	ldr	r3, [pc, #104]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b084:	2200      	movs	r2, #0
 804b086:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 804b088:	4b18      	ldr	r3, [pc, #96]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b08a:	2201      	movs	r2, #1
 804b08c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804b08e:	4b17      	ldr	r3, [pc, #92]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b090:	2200      	movs	r2, #0
 804b092:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804b094:	4b15      	ldr	r3, [pc, #84]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b096:	2200      	movs	r2, #0
 804b098:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 804b09a:	4b14      	ldr	r3, [pc, #80]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b09c:	2200      	movs	r2, #0
 804b09e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804b0a0:	4b12      	ldr	r3, [pc, #72]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0a2:	2200      	movs	r2, #0
 804b0a4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 804b0a6:	4b11      	ldr	r3, [pc, #68]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0a8:	2200      	movs	r2, #0
 804b0aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804b0ac:	4b0f      	ldr	r3, [pc, #60]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0ae:	2200      	movs	r2, #0
 804b0b0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 804b0b2:	480e      	ldr	r0, [pc, #56]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0b4:	f7f6 fc88 	bl	80419c8 <HAL_PCD_Init>
 804b0b8:	4603      	mov	r3, r0
 804b0ba:	2b00      	cmp	r3, #0
 804b0bc:	d001      	beq.n	804b0c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 804b0be:	f7f5 fdcf 	bl	8040c60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 804b0c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 804b0c6:	4809      	ldr	r0, [pc, #36]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0c8:	f7f7 feb7 	bl	8042e3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 804b0cc:	2280      	movs	r2, #128	@ 0x80
 804b0ce:	2100      	movs	r1, #0
 804b0d0:	4806      	ldr	r0, [pc, #24]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0d2:	f7f7 fe6b 	bl	8042dac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 804b0d6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 804b0da:	2101      	movs	r1, #1
 804b0dc:	4803      	ldr	r0, [pc, #12]	@ (804b0ec <USBD_LL_Init+0x9c>)
 804b0de:	f7f7 fe65 	bl	8042dac <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 804b0e2:	2300      	movs	r3, #0
}
 804b0e4:	4618      	mov	r0, r3
 804b0e6:	3708      	adds	r7, #8
 804b0e8:	46bd      	mov	sp, r7
 804b0ea:	bd80      	pop	{r7, pc}
 804b0ec:	240007fc 	.word	0x240007fc
 804b0f0:	40040000 	.word	0x40040000

0804b0f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 804b0f4:	b580      	push	{r7, lr}
 804b0f6:	b084      	sub	sp, #16
 804b0f8:	af00      	add	r7, sp, #0
 804b0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b0fc:	2300      	movs	r3, #0
 804b0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b100:	2300      	movs	r3, #0
 804b102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 804b104:	687b      	ldr	r3, [r7, #4]
 804b106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b10a:	4618      	mov	r0, r3
 804b10c:	f7f6 fd68 	bl	8041be0 <HAL_PCD_Start>
 804b110:	4603      	mov	r3, r0
 804b112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b114:	7bfb      	ldrb	r3, [r7, #15]
 804b116:	4618      	mov	r0, r3
 804b118:	f000 f92c 	bl	804b374 <USBD_Get_USB_Status>
 804b11c:	4603      	mov	r3, r0
 804b11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b120:	7bbb      	ldrb	r3, [r7, #14]
}
 804b122:	4618      	mov	r0, r3
 804b124:	3710      	adds	r7, #16
 804b126:	46bd      	mov	sp, r7
 804b128:	bd80      	pop	{r7, pc}

0804b12a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 804b12a:	b580      	push	{r7, lr}
 804b12c:	b084      	sub	sp, #16
 804b12e:	af00      	add	r7, sp, #0
 804b130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b132:	2300      	movs	r3, #0
 804b134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b136:	2300      	movs	r3, #0
 804b138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 804b13a:	687b      	ldr	r3, [r7, #4]
 804b13c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b140:	4618      	mov	r0, r3
 804b142:	f7f6 fd82 	bl	8041c4a <HAL_PCD_Stop>
 804b146:	4603      	mov	r3, r0
 804b148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b14a:	7bfb      	ldrb	r3, [r7, #15]
 804b14c:	4618      	mov	r0, r3
 804b14e:	f000 f911 	bl	804b374 <USBD_Get_USB_Status>
 804b152:	4603      	mov	r3, r0
 804b154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b156:	7bbb      	ldrb	r3, [r7, #14]
}
 804b158:	4618      	mov	r0, r3
 804b15a:	3710      	adds	r7, #16
 804b15c:	46bd      	mov	sp, r7
 804b15e:	bd80      	pop	{r7, pc}

0804b160 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 804b160:	b580      	push	{r7, lr}
 804b162:	b084      	sub	sp, #16
 804b164:	af00      	add	r7, sp, #0
 804b166:	6078      	str	r0, [r7, #4]
 804b168:	4608      	mov	r0, r1
 804b16a:	4611      	mov	r1, r2
 804b16c:	461a      	mov	r2, r3
 804b16e:	4603      	mov	r3, r0
 804b170:	70fb      	strb	r3, [r7, #3]
 804b172:	460b      	mov	r3, r1
 804b174:	70bb      	strb	r3, [r7, #2]
 804b176:	4613      	mov	r3, r2
 804b178:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b17a:	2300      	movs	r3, #0
 804b17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b17e:	2300      	movs	r3, #0
 804b180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 804b182:	687b      	ldr	r3, [r7, #4]
 804b184:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804b188:	78bb      	ldrb	r3, [r7, #2]
 804b18a:	883a      	ldrh	r2, [r7, #0]
 804b18c:	78f9      	ldrb	r1, [r7, #3]
 804b18e:	f7f7 fa89 	bl	80426a4 <HAL_PCD_EP_Open>
 804b192:	4603      	mov	r3, r0
 804b194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b196:	7bfb      	ldrb	r3, [r7, #15]
 804b198:	4618      	mov	r0, r3
 804b19a:	f000 f8eb 	bl	804b374 <USBD_Get_USB_Status>
 804b19e:	4603      	mov	r3, r0
 804b1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 804b1a4:	4618      	mov	r0, r3
 804b1a6:	3710      	adds	r7, #16
 804b1a8:	46bd      	mov	sp, r7
 804b1aa:	bd80      	pop	{r7, pc}

0804b1ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804b1ac:	b580      	push	{r7, lr}
 804b1ae:	b084      	sub	sp, #16
 804b1b0:	af00      	add	r7, sp, #0
 804b1b2:	6078      	str	r0, [r7, #4]
 804b1b4:	460b      	mov	r3, r1
 804b1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b1b8:	2300      	movs	r3, #0
 804b1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b1bc:	2300      	movs	r3, #0
 804b1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 804b1c0:	687b      	ldr	r3, [r7, #4]
 804b1c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b1c6:	78fa      	ldrb	r2, [r7, #3]
 804b1c8:	4611      	mov	r1, r2
 804b1ca:	4618      	mov	r0, r3
 804b1cc:	f7f7 fb49 	bl	8042862 <HAL_PCD_EP_SetStall>
 804b1d0:	4603      	mov	r3, r0
 804b1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b1d4:	7bfb      	ldrb	r3, [r7, #15]
 804b1d6:	4618      	mov	r0, r3
 804b1d8:	f000 f8cc 	bl	804b374 <USBD_Get_USB_Status>
 804b1dc:	4603      	mov	r3, r0
 804b1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 804b1e2:	4618      	mov	r0, r3
 804b1e4:	3710      	adds	r7, #16
 804b1e6:	46bd      	mov	sp, r7
 804b1e8:	bd80      	pop	{r7, pc}

0804b1ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804b1ea:	b580      	push	{r7, lr}
 804b1ec:	b084      	sub	sp, #16
 804b1ee:	af00      	add	r7, sp, #0
 804b1f0:	6078      	str	r0, [r7, #4]
 804b1f2:	460b      	mov	r3, r1
 804b1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b1f6:	2300      	movs	r3, #0
 804b1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b1fa:	2300      	movs	r3, #0
 804b1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 804b1fe:	687b      	ldr	r3, [r7, #4]
 804b200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b204:	78fa      	ldrb	r2, [r7, #3]
 804b206:	4611      	mov	r1, r2
 804b208:	4618      	mov	r0, r3
 804b20a:	f7f7 fb8d 	bl	8042928 <HAL_PCD_EP_ClrStall>
 804b20e:	4603      	mov	r3, r0
 804b210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b212:	7bfb      	ldrb	r3, [r7, #15]
 804b214:	4618      	mov	r0, r3
 804b216:	f000 f8ad 	bl	804b374 <USBD_Get_USB_Status>
 804b21a:	4603      	mov	r3, r0
 804b21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b21e:	7bbb      	ldrb	r3, [r7, #14]
}
 804b220:	4618      	mov	r0, r3
 804b222:	3710      	adds	r7, #16
 804b224:	46bd      	mov	sp, r7
 804b226:	bd80      	pop	{r7, pc}

0804b228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 804b228:	b480      	push	{r7}
 804b22a:	b085      	sub	sp, #20
 804b22c:	af00      	add	r7, sp, #0
 804b22e:	6078      	str	r0, [r7, #4]
 804b230:	460b      	mov	r3, r1
 804b232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 804b234:	687b      	ldr	r3, [r7, #4]
 804b236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b23a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 804b23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804b240:	2b00      	cmp	r3, #0
 804b242:	da0b      	bge.n	804b25c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 804b244:	78fb      	ldrb	r3, [r7, #3]
 804b246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804b24a:	68f9      	ldr	r1, [r7, #12]
 804b24c:	4613      	mov	r3, r2
 804b24e:	00db      	lsls	r3, r3, #3
 804b250:	4413      	add	r3, r2
 804b252:	009b      	lsls	r3, r3, #2
 804b254:	440b      	add	r3, r1
 804b256:	3316      	adds	r3, #22
 804b258:	781b      	ldrb	r3, [r3, #0]
 804b25a:	e00b      	b.n	804b274 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 804b25c:	78fb      	ldrb	r3, [r7, #3]
 804b25e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 804b262:	68f9      	ldr	r1, [r7, #12]
 804b264:	4613      	mov	r3, r2
 804b266:	00db      	lsls	r3, r3, #3
 804b268:	4413      	add	r3, r2
 804b26a:	009b      	lsls	r3, r3, #2
 804b26c:	440b      	add	r3, r1
 804b26e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 804b272:	781b      	ldrb	r3, [r3, #0]
  }
}
 804b274:	4618      	mov	r0, r3
 804b276:	3714      	adds	r7, #20
 804b278:	46bd      	mov	sp, r7
 804b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b27e:	4770      	bx	lr

0804b280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 804b280:	b580      	push	{r7, lr}
 804b282:	b084      	sub	sp, #16
 804b284:	af00      	add	r7, sp, #0
 804b286:	6078      	str	r0, [r7, #4]
 804b288:	460b      	mov	r3, r1
 804b28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b28c:	2300      	movs	r3, #0
 804b28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b290:	2300      	movs	r3, #0
 804b292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 804b294:	687b      	ldr	r3, [r7, #4]
 804b296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 804b29a:	78fa      	ldrb	r2, [r7, #3]
 804b29c:	4611      	mov	r1, r2
 804b29e:	4618      	mov	r0, r3
 804b2a0:	f7f7 f9dc 	bl	804265c <HAL_PCD_SetAddress>
 804b2a4:	4603      	mov	r3, r0
 804b2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b2a8:	7bfb      	ldrb	r3, [r7, #15]
 804b2aa:	4618      	mov	r0, r3
 804b2ac:	f000 f862 	bl	804b374 <USBD_Get_USB_Status>
 804b2b0:	4603      	mov	r3, r0
 804b2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804b2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 804b2b6:	4618      	mov	r0, r3
 804b2b8:	3710      	adds	r7, #16
 804b2ba:	46bd      	mov	sp, r7
 804b2bc:	bd80      	pop	{r7, pc}

0804b2be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804b2be:	b580      	push	{r7, lr}
 804b2c0:	b086      	sub	sp, #24
 804b2c2:	af00      	add	r7, sp, #0
 804b2c4:	60f8      	str	r0, [r7, #12]
 804b2c6:	607a      	str	r2, [r7, #4]
 804b2c8:	603b      	str	r3, [r7, #0]
 804b2ca:	460b      	mov	r3, r1
 804b2cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b2ce:	2300      	movs	r3, #0
 804b2d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b2d2:	2300      	movs	r3, #0
 804b2d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 804b2d6:	68fb      	ldr	r3, [r7, #12]
 804b2d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804b2dc:	7af9      	ldrb	r1, [r7, #11]
 804b2de:	683b      	ldr	r3, [r7, #0]
 804b2e0:	687a      	ldr	r2, [r7, #4]
 804b2e2:	f7f7 fa84 	bl	80427ee <HAL_PCD_EP_Transmit>
 804b2e6:	4603      	mov	r3, r0
 804b2e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b2ea:	7dfb      	ldrb	r3, [r7, #23]
 804b2ec:	4618      	mov	r0, r3
 804b2ee:	f000 f841 	bl	804b374 <USBD_Get_USB_Status>
 804b2f2:	4603      	mov	r3, r0
 804b2f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804b2f6:	7dbb      	ldrb	r3, [r7, #22]
}
 804b2f8:	4618      	mov	r0, r3
 804b2fa:	3718      	adds	r7, #24
 804b2fc:	46bd      	mov	sp, r7
 804b2fe:	bd80      	pop	{r7, pc}

0804b300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804b300:	b580      	push	{r7, lr}
 804b302:	b086      	sub	sp, #24
 804b304:	af00      	add	r7, sp, #0
 804b306:	60f8      	str	r0, [r7, #12]
 804b308:	607a      	str	r2, [r7, #4]
 804b30a:	603b      	str	r3, [r7, #0]
 804b30c:	460b      	mov	r3, r1
 804b30e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804b310:	2300      	movs	r3, #0
 804b312:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b314:	2300      	movs	r3, #0
 804b316:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 804b318:	68fb      	ldr	r3, [r7, #12]
 804b31a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 804b31e:	7af9      	ldrb	r1, [r7, #11]
 804b320:	683b      	ldr	r3, [r7, #0]
 804b322:	687a      	ldr	r2, [r7, #4]
 804b324:	f7f7 fa28 	bl	8042778 <HAL_PCD_EP_Receive>
 804b328:	4603      	mov	r3, r0
 804b32a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804b32c:	7dfb      	ldrb	r3, [r7, #23]
 804b32e:	4618      	mov	r0, r3
 804b330:	f000 f820 	bl	804b374 <USBD_Get_USB_Status>
 804b334:	4603      	mov	r3, r0
 804b336:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 804b338:	7dbb      	ldrb	r3, [r7, #22]
}
 804b33a:	4618      	mov	r0, r3
 804b33c:	3718      	adds	r7, #24
 804b33e:	46bd      	mov	sp, r7
 804b340:	bd80      	pop	{r7, pc}
	...

0804b344 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 804b344:	b480      	push	{r7}
 804b346:	b083      	sub	sp, #12
 804b348:	af00      	add	r7, sp, #0
 804b34a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 804b34c:	4b03      	ldr	r3, [pc, #12]	@ (804b35c <USBD_static_malloc+0x18>)
}
 804b34e:	4618      	mov	r0, r3
 804b350:	370c      	adds	r7, #12
 804b352:	46bd      	mov	sp, r7
 804b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b358:	4770      	bx	lr
 804b35a:	bf00      	nop
 804b35c:	24000ce0 	.word	0x24000ce0

0804b360 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 804b360:	b480      	push	{r7}
 804b362:	b083      	sub	sp, #12
 804b364:	af00      	add	r7, sp, #0
 804b366:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 804b368:	bf00      	nop
 804b36a:	370c      	adds	r7, #12
 804b36c:	46bd      	mov	sp, r7
 804b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b372:	4770      	bx	lr

0804b374 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804b374:	b480      	push	{r7}
 804b376:	b085      	sub	sp, #20
 804b378:	af00      	add	r7, sp, #0
 804b37a:	4603      	mov	r3, r0
 804b37c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 804b37e:	2300      	movs	r3, #0
 804b380:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804b382:	79fb      	ldrb	r3, [r7, #7]
 804b384:	2b03      	cmp	r3, #3
 804b386:	d817      	bhi.n	804b3b8 <USBD_Get_USB_Status+0x44>
 804b388:	a201      	add	r2, pc, #4	@ (adr r2, 804b390 <USBD_Get_USB_Status+0x1c>)
 804b38a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b38e:	bf00      	nop
 804b390:	0804b3a1 	.word	0x0804b3a1
 804b394:	0804b3a7 	.word	0x0804b3a7
 804b398:	0804b3ad 	.word	0x0804b3ad
 804b39c:	0804b3b3 	.word	0x0804b3b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 804b3a0:	2300      	movs	r3, #0
 804b3a2:	73fb      	strb	r3, [r7, #15]
    break;
 804b3a4:	e00b      	b.n	804b3be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 804b3a6:	2303      	movs	r3, #3
 804b3a8:	73fb      	strb	r3, [r7, #15]
    break;
 804b3aa:	e008      	b.n	804b3be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 804b3ac:	2301      	movs	r3, #1
 804b3ae:	73fb      	strb	r3, [r7, #15]
    break;
 804b3b0:	e005      	b.n	804b3be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 804b3b2:	2303      	movs	r3, #3
 804b3b4:	73fb      	strb	r3, [r7, #15]
    break;
 804b3b6:	e002      	b.n	804b3be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 804b3b8:	2303      	movs	r3, #3
 804b3ba:	73fb      	strb	r3, [r7, #15]
    break;
 804b3bc:	bf00      	nop
  }
  return usb_status;
 804b3be:	7bfb      	ldrb	r3, [r7, #15]
}
 804b3c0:	4618      	mov	r0, r3
 804b3c2:	3714      	adds	r7, #20
 804b3c4:	46bd      	mov	sp, r7
 804b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b3ca:	4770      	bx	lr

0804b3cc <std>:
 804b3cc:	2300      	movs	r3, #0
 804b3ce:	b510      	push	{r4, lr}
 804b3d0:	4604      	mov	r4, r0
 804b3d2:	e9c0 3300 	strd	r3, r3, [r0]
 804b3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804b3da:	6083      	str	r3, [r0, #8]
 804b3dc:	8181      	strh	r1, [r0, #12]
 804b3de:	6643      	str	r3, [r0, #100]	@ 0x64
 804b3e0:	81c2      	strh	r2, [r0, #14]
 804b3e2:	6183      	str	r3, [r0, #24]
 804b3e4:	4619      	mov	r1, r3
 804b3e6:	2208      	movs	r2, #8
 804b3e8:	305c      	adds	r0, #92	@ 0x5c
 804b3ea:	f000 f906 	bl	804b5fa <memset>
 804b3ee:	4b0d      	ldr	r3, [pc, #52]	@ (804b424 <std+0x58>)
 804b3f0:	6263      	str	r3, [r4, #36]	@ 0x24
 804b3f2:	4b0d      	ldr	r3, [pc, #52]	@ (804b428 <std+0x5c>)
 804b3f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 804b3f6:	4b0d      	ldr	r3, [pc, #52]	@ (804b42c <std+0x60>)
 804b3f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 804b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (804b430 <std+0x64>)
 804b3fc:	6323      	str	r3, [r4, #48]	@ 0x30
 804b3fe:	4b0d      	ldr	r3, [pc, #52]	@ (804b434 <std+0x68>)
 804b400:	6224      	str	r4, [r4, #32]
 804b402:	429c      	cmp	r4, r3
 804b404:	d006      	beq.n	804b414 <std+0x48>
 804b406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 804b40a:	4294      	cmp	r4, r2
 804b40c:	d002      	beq.n	804b414 <std+0x48>
 804b40e:	33d0      	adds	r3, #208	@ 0xd0
 804b410:	429c      	cmp	r4, r3
 804b412:	d105      	bne.n	804b420 <std+0x54>
 804b414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 804b418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b41c:	f000 b966 	b.w	804b6ec <__retarget_lock_init_recursive>
 804b420:	bd10      	pop	{r4, pc}
 804b422:	bf00      	nop
 804b424:	0804b575 	.word	0x0804b575
 804b428:	0804b597 	.word	0x0804b597
 804b42c:	0804b5cf 	.word	0x0804b5cf
 804b430:	0804b5f3 	.word	0x0804b5f3
 804b434:	24001104 	.word	0x24001104

0804b438 <stdio_exit_handler>:
 804b438:	4a02      	ldr	r2, [pc, #8]	@ (804b444 <stdio_exit_handler+0xc>)
 804b43a:	4903      	ldr	r1, [pc, #12]	@ (804b448 <stdio_exit_handler+0x10>)
 804b43c:	4803      	ldr	r0, [pc, #12]	@ (804b44c <stdio_exit_handler+0x14>)
 804b43e:	f000 b869 	b.w	804b514 <_fwalk_sglue>
 804b442:	bf00      	nop
 804b444:	240000e4 	.word	0x240000e4
 804b448:	0804bf89 	.word	0x0804bf89
 804b44c:	240000f4 	.word	0x240000f4

0804b450 <cleanup_stdio>:
 804b450:	6841      	ldr	r1, [r0, #4]
 804b452:	4b0c      	ldr	r3, [pc, #48]	@ (804b484 <cleanup_stdio+0x34>)
 804b454:	4299      	cmp	r1, r3
 804b456:	b510      	push	{r4, lr}
 804b458:	4604      	mov	r4, r0
 804b45a:	d001      	beq.n	804b460 <cleanup_stdio+0x10>
 804b45c:	f000 fd94 	bl	804bf88 <_fflush_r>
 804b460:	68a1      	ldr	r1, [r4, #8]
 804b462:	4b09      	ldr	r3, [pc, #36]	@ (804b488 <cleanup_stdio+0x38>)
 804b464:	4299      	cmp	r1, r3
 804b466:	d002      	beq.n	804b46e <cleanup_stdio+0x1e>
 804b468:	4620      	mov	r0, r4
 804b46a:	f000 fd8d 	bl	804bf88 <_fflush_r>
 804b46e:	68e1      	ldr	r1, [r4, #12]
 804b470:	4b06      	ldr	r3, [pc, #24]	@ (804b48c <cleanup_stdio+0x3c>)
 804b472:	4299      	cmp	r1, r3
 804b474:	d004      	beq.n	804b480 <cleanup_stdio+0x30>
 804b476:	4620      	mov	r0, r4
 804b478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b47c:	f000 bd84 	b.w	804bf88 <_fflush_r>
 804b480:	bd10      	pop	{r4, pc}
 804b482:	bf00      	nop
 804b484:	24001104 	.word	0x24001104
 804b488:	2400116c 	.word	0x2400116c
 804b48c:	240011d4 	.word	0x240011d4

0804b490 <global_stdio_init.part.0>:
 804b490:	b510      	push	{r4, lr}
 804b492:	4b0b      	ldr	r3, [pc, #44]	@ (804b4c0 <global_stdio_init.part.0+0x30>)
 804b494:	4c0b      	ldr	r4, [pc, #44]	@ (804b4c4 <global_stdio_init.part.0+0x34>)
 804b496:	4a0c      	ldr	r2, [pc, #48]	@ (804b4c8 <global_stdio_init.part.0+0x38>)
 804b498:	601a      	str	r2, [r3, #0]
 804b49a:	4620      	mov	r0, r4
 804b49c:	2200      	movs	r2, #0
 804b49e:	2104      	movs	r1, #4
 804b4a0:	f7ff ff94 	bl	804b3cc <std>
 804b4a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 804b4a8:	2201      	movs	r2, #1
 804b4aa:	2109      	movs	r1, #9
 804b4ac:	f7ff ff8e 	bl	804b3cc <std>
 804b4b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 804b4b4:	2202      	movs	r2, #2
 804b4b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b4ba:	2112      	movs	r1, #18
 804b4bc:	f7ff bf86 	b.w	804b3cc <std>
 804b4c0:	2400123c 	.word	0x2400123c
 804b4c4:	24001104 	.word	0x24001104
 804b4c8:	0804b439 	.word	0x0804b439

0804b4cc <__sfp_lock_acquire>:
 804b4cc:	4801      	ldr	r0, [pc, #4]	@ (804b4d4 <__sfp_lock_acquire+0x8>)
 804b4ce:	f000 b90e 	b.w	804b6ee <__retarget_lock_acquire_recursive>
 804b4d2:	bf00      	nop
 804b4d4:	24001245 	.word	0x24001245

0804b4d8 <__sfp_lock_release>:
 804b4d8:	4801      	ldr	r0, [pc, #4]	@ (804b4e0 <__sfp_lock_release+0x8>)
 804b4da:	f000 b909 	b.w	804b6f0 <__retarget_lock_release_recursive>
 804b4de:	bf00      	nop
 804b4e0:	24001245 	.word	0x24001245

0804b4e4 <__sinit>:
 804b4e4:	b510      	push	{r4, lr}
 804b4e6:	4604      	mov	r4, r0
 804b4e8:	f7ff fff0 	bl	804b4cc <__sfp_lock_acquire>
 804b4ec:	6a23      	ldr	r3, [r4, #32]
 804b4ee:	b11b      	cbz	r3, 804b4f8 <__sinit+0x14>
 804b4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804b4f4:	f7ff bff0 	b.w	804b4d8 <__sfp_lock_release>
 804b4f8:	4b04      	ldr	r3, [pc, #16]	@ (804b50c <__sinit+0x28>)
 804b4fa:	6223      	str	r3, [r4, #32]
 804b4fc:	4b04      	ldr	r3, [pc, #16]	@ (804b510 <__sinit+0x2c>)
 804b4fe:	681b      	ldr	r3, [r3, #0]
 804b500:	2b00      	cmp	r3, #0
 804b502:	d1f5      	bne.n	804b4f0 <__sinit+0xc>
 804b504:	f7ff ffc4 	bl	804b490 <global_stdio_init.part.0>
 804b508:	e7f2      	b.n	804b4f0 <__sinit+0xc>
 804b50a:	bf00      	nop
 804b50c:	0804b451 	.word	0x0804b451
 804b510:	2400123c 	.word	0x2400123c

0804b514 <_fwalk_sglue>:
 804b514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b518:	4607      	mov	r7, r0
 804b51a:	4688      	mov	r8, r1
 804b51c:	4614      	mov	r4, r2
 804b51e:	2600      	movs	r6, #0
 804b520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804b524:	f1b9 0901 	subs.w	r9, r9, #1
 804b528:	d505      	bpl.n	804b536 <_fwalk_sglue+0x22>
 804b52a:	6824      	ldr	r4, [r4, #0]
 804b52c:	2c00      	cmp	r4, #0
 804b52e:	d1f7      	bne.n	804b520 <_fwalk_sglue+0xc>
 804b530:	4630      	mov	r0, r6
 804b532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804b536:	89ab      	ldrh	r3, [r5, #12]
 804b538:	2b01      	cmp	r3, #1
 804b53a:	d907      	bls.n	804b54c <_fwalk_sglue+0x38>
 804b53c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804b540:	3301      	adds	r3, #1
 804b542:	d003      	beq.n	804b54c <_fwalk_sglue+0x38>
 804b544:	4629      	mov	r1, r5
 804b546:	4638      	mov	r0, r7
 804b548:	47c0      	blx	r8
 804b54a:	4306      	orrs	r6, r0
 804b54c:	3568      	adds	r5, #104	@ 0x68
 804b54e:	e7e9      	b.n	804b524 <_fwalk_sglue+0x10>

0804b550 <iprintf>:
 804b550:	b40f      	push	{r0, r1, r2, r3}
 804b552:	b507      	push	{r0, r1, r2, lr}
 804b554:	4906      	ldr	r1, [pc, #24]	@ (804b570 <iprintf+0x20>)
 804b556:	ab04      	add	r3, sp, #16
 804b558:	6808      	ldr	r0, [r1, #0]
 804b55a:	f853 2b04 	ldr.w	r2, [r3], #4
 804b55e:	6881      	ldr	r1, [r0, #8]
 804b560:	9301      	str	r3, [sp, #4]
 804b562:	f000 f9e9 	bl	804b938 <_vfiprintf_r>
 804b566:	b003      	add	sp, #12
 804b568:	f85d eb04 	ldr.w	lr, [sp], #4
 804b56c:	b004      	add	sp, #16
 804b56e:	4770      	bx	lr
 804b570:	240000f0 	.word	0x240000f0

0804b574 <__sread>:
 804b574:	b510      	push	{r4, lr}
 804b576:	460c      	mov	r4, r1
 804b578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b57c:	f000 f868 	bl	804b650 <_read_r>
 804b580:	2800      	cmp	r0, #0
 804b582:	bfab      	itete	ge
 804b584:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 804b586:	89a3      	ldrhlt	r3, [r4, #12]
 804b588:	181b      	addge	r3, r3, r0
 804b58a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 804b58e:	bfac      	ite	ge
 804b590:	6563      	strge	r3, [r4, #84]	@ 0x54
 804b592:	81a3      	strhlt	r3, [r4, #12]
 804b594:	bd10      	pop	{r4, pc}

0804b596 <__swrite>:
 804b596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b59a:	461f      	mov	r7, r3
 804b59c:	898b      	ldrh	r3, [r1, #12]
 804b59e:	05db      	lsls	r3, r3, #23
 804b5a0:	4605      	mov	r5, r0
 804b5a2:	460c      	mov	r4, r1
 804b5a4:	4616      	mov	r6, r2
 804b5a6:	d505      	bpl.n	804b5b4 <__swrite+0x1e>
 804b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b5ac:	2302      	movs	r3, #2
 804b5ae:	2200      	movs	r2, #0
 804b5b0:	f000 f83c 	bl	804b62c <_lseek_r>
 804b5b4:	89a3      	ldrh	r3, [r4, #12]
 804b5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804b5ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 804b5be:	81a3      	strh	r3, [r4, #12]
 804b5c0:	4632      	mov	r2, r6
 804b5c2:	463b      	mov	r3, r7
 804b5c4:	4628      	mov	r0, r5
 804b5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804b5ca:	f000 b853 	b.w	804b674 <_write_r>

0804b5ce <__sseek>:
 804b5ce:	b510      	push	{r4, lr}
 804b5d0:	460c      	mov	r4, r1
 804b5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b5d6:	f000 f829 	bl	804b62c <_lseek_r>
 804b5da:	1c43      	adds	r3, r0, #1
 804b5dc:	89a3      	ldrh	r3, [r4, #12]
 804b5de:	bf15      	itete	ne
 804b5e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 804b5e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 804b5e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 804b5ea:	81a3      	strheq	r3, [r4, #12]
 804b5ec:	bf18      	it	ne
 804b5ee:	81a3      	strhne	r3, [r4, #12]
 804b5f0:	bd10      	pop	{r4, pc}

0804b5f2 <__sclose>:
 804b5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804b5f6:	f000 b809 	b.w	804b60c <_close_r>

0804b5fa <memset>:
 804b5fa:	4402      	add	r2, r0
 804b5fc:	4603      	mov	r3, r0
 804b5fe:	4293      	cmp	r3, r2
 804b600:	d100      	bne.n	804b604 <memset+0xa>
 804b602:	4770      	bx	lr
 804b604:	f803 1b01 	strb.w	r1, [r3], #1
 804b608:	e7f9      	b.n	804b5fe <memset+0x4>
	...

0804b60c <_close_r>:
 804b60c:	b538      	push	{r3, r4, r5, lr}
 804b60e:	4d06      	ldr	r5, [pc, #24]	@ (804b628 <_close_r+0x1c>)
 804b610:	2300      	movs	r3, #0
 804b612:	4604      	mov	r4, r0
 804b614:	4608      	mov	r0, r1
 804b616:	602b      	str	r3, [r5, #0]
 804b618:	f7f5 fc69 	bl	8040eee <_close>
 804b61c:	1c43      	adds	r3, r0, #1
 804b61e:	d102      	bne.n	804b626 <_close_r+0x1a>
 804b620:	682b      	ldr	r3, [r5, #0]
 804b622:	b103      	cbz	r3, 804b626 <_close_r+0x1a>
 804b624:	6023      	str	r3, [r4, #0]
 804b626:	bd38      	pop	{r3, r4, r5, pc}
 804b628:	24001240 	.word	0x24001240

0804b62c <_lseek_r>:
 804b62c:	b538      	push	{r3, r4, r5, lr}
 804b62e:	4d07      	ldr	r5, [pc, #28]	@ (804b64c <_lseek_r+0x20>)
 804b630:	4604      	mov	r4, r0
 804b632:	4608      	mov	r0, r1
 804b634:	4611      	mov	r1, r2
 804b636:	2200      	movs	r2, #0
 804b638:	602a      	str	r2, [r5, #0]
 804b63a:	461a      	mov	r2, r3
 804b63c:	f7f5 fc7e 	bl	8040f3c <_lseek>
 804b640:	1c43      	adds	r3, r0, #1
 804b642:	d102      	bne.n	804b64a <_lseek_r+0x1e>
 804b644:	682b      	ldr	r3, [r5, #0]
 804b646:	b103      	cbz	r3, 804b64a <_lseek_r+0x1e>
 804b648:	6023      	str	r3, [r4, #0]
 804b64a:	bd38      	pop	{r3, r4, r5, pc}
 804b64c:	24001240 	.word	0x24001240

0804b650 <_read_r>:
 804b650:	b538      	push	{r3, r4, r5, lr}
 804b652:	4d07      	ldr	r5, [pc, #28]	@ (804b670 <_read_r+0x20>)
 804b654:	4604      	mov	r4, r0
 804b656:	4608      	mov	r0, r1
 804b658:	4611      	mov	r1, r2
 804b65a:	2200      	movs	r2, #0
 804b65c:	602a      	str	r2, [r5, #0]
 804b65e:	461a      	mov	r2, r3
 804b660:	f7f5 fc0c 	bl	8040e7c <_read>
 804b664:	1c43      	adds	r3, r0, #1
 804b666:	d102      	bne.n	804b66e <_read_r+0x1e>
 804b668:	682b      	ldr	r3, [r5, #0]
 804b66a:	b103      	cbz	r3, 804b66e <_read_r+0x1e>
 804b66c:	6023      	str	r3, [r4, #0]
 804b66e:	bd38      	pop	{r3, r4, r5, pc}
 804b670:	24001240 	.word	0x24001240

0804b674 <_write_r>:
 804b674:	b538      	push	{r3, r4, r5, lr}
 804b676:	4d07      	ldr	r5, [pc, #28]	@ (804b694 <_write_r+0x20>)
 804b678:	4604      	mov	r4, r0
 804b67a:	4608      	mov	r0, r1
 804b67c:	4611      	mov	r1, r2
 804b67e:	2200      	movs	r2, #0
 804b680:	602a      	str	r2, [r5, #0]
 804b682:	461a      	mov	r2, r3
 804b684:	f7f5 fc17 	bl	8040eb6 <_write>
 804b688:	1c43      	adds	r3, r0, #1
 804b68a:	d102      	bne.n	804b692 <_write_r+0x1e>
 804b68c:	682b      	ldr	r3, [r5, #0]
 804b68e:	b103      	cbz	r3, 804b692 <_write_r+0x1e>
 804b690:	6023      	str	r3, [r4, #0]
 804b692:	bd38      	pop	{r3, r4, r5, pc}
 804b694:	24001240 	.word	0x24001240

0804b698 <__errno>:
 804b698:	4b01      	ldr	r3, [pc, #4]	@ (804b6a0 <__errno+0x8>)
 804b69a:	6818      	ldr	r0, [r3, #0]
 804b69c:	4770      	bx	lr
 804b69e:	bf00      	nop
 804b6a0:	240000f0 	.word	0x240000f0

0804b6a4 <__libc_init_array>:
 804b6a4:	b570      	push	{r4, r5, r6, lr}
 804b6a6:	4d0d      	ldr	r5, [pc, #52]	@ (804b6dc <__libc_init_array+0x38>)
 804b6a8:	4c0d      	ldr	r4, [pc, #52]	@ (804b6e0 <__libc_init_array+0x3c>)
 804b6aa:	1b64      	subs	r4, r4, r5
 804b6ac:	10a4      	asrs	r4, r4, #2
 804b6ae:	2600      	movs	r6, #0
 804b6b0:	42a6      	cmp	r6, r4
 804b6b2:	d109      	bne.n	804b6c8 <__libc_init_array+0x24>
 804b6b4:	4d0b      	ldr	r5, [pc, #44]	@ (804b6e4 <__libc_init_array+0x40>)
 804b6b6:	4c0c      	ldr	r4, [pc, #48]	@ (804b6e8 <__libc_init_array+0x44>)
 804b6b8:	f000 fdb6 	bl	804c228 <_init>
 804b6bc:	1b64      	subs	r4, r4, r5
 804b6be:	10a4      	asrs	r4, r4, #2
 804b6c0:	2600      	movs	r6, #0
 804b6c2:	42a6      	cmp	r6, r4
 804b6c4:	d105      	bne.n	804b6d2 <__libc_init_array+0x2e>
 804b6c6:	bd70      	pop	{r4, r5, r6, pc}
 804b6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 804b6cc:	4798      	blx	r3
 804b6ce:	3601      	adds	r6, #1
 804b6d0:	e7ee      	b.n	804b6b0 <__libc_init_array+0xc>
 804b6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 804b6d6:	4798      	blx	r3
 804b6d8:	3601      	adds	r6, #1
 804b6da:	e7f2      	b.n	804b6c2 <__libc_init_array+0x1e>
 804b6dc:	0804c39c 	.word	0x0804c39c
 804b6e0:	0804c39c 	.word	0x0804c39c
 804b6e4:	0804c39c 	.word	0x0804c39c
 804b6e8:	0804c3a0 	.word	0x0804c3a0

0804b6ec <__retarget_lock_init_recursive>:
 804b6ec:	4770      	bx	lr

0804b6ee <__retarget_lock_acquire_recursive>:
 804b6ee:	4770      	bx	lr

0804b6f0 <__retarget_lock_release_recursive>:
 804b6f0:	4770      	bx	lr
	...

0804b6f4 <_free_r>:
 804b6f4:	b538      	push	{r3, r4, r5, lr}
 804b6f6:	4605      	mov	r5, r0
 804b6f8:	2900      	cmp	r1, #0
 804b6fa:	d041      	beq.n	804b780 <_free_r+0x8c>
 804b6fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804b700:	1f0c      	subs	r4, r1, #4
 804b702:	2b00      	cmp	r3, #0
 804b704:	bfb8      	it	lt
 804b706:	18e4      	addlt	r4, r4, r3
 804b708:	f000 f8e0 	bl	804b8cc <__malloc_lock>
 804b70c:	4a1d      	ldr	r2, [pc, #116]	@ (804b784 <_free_r+0x90>)
 804b70e:	6813      	ldr	r3, [r2, #0]
 804b710:	b933      	cbnz	r3, 804b720 <_free_r+0x2c>
 804b712:	6063      	str	r3, [r4, #4]
 804b714:	6014      	str	r4, [r2, #0]
 804b716:	4628      	mov	r0, r5
 804b718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804b71c:	f000 b8dc 	b.w	804b8d8 <__malloc_unlock>
 804b720:	42a3      	cmp	r3, r4
 804b722:	d908      	bls.n	804b736 <_free_r+0x42>
 804b724:	6820      	ldr	r0, [r4, #0]
 804b726:	1821      	adds	r1, r4, r0
 804b728:	428b      	cmp	r3, r1
 804b72a:	bf01      	itttt	eq
 804b72c:	6819      	ldreq	r1, [r3, #0]
 804b72e:	685b      	ldreq	r3, [r3, #4]
 804b730:	1809      	addeq	r1, r1, r0
 804b732:	6021      	streq	r1, [r4, #0]
 804b734:	e7ed      	b.n	804b712 <_free_r+0x1e>
 804b736:	461a      	mov	r2, r3
 804b738:	685b      	ldr	r3, [r3, #4]
 804b73a:	b10b      	cbz	r3, 804b740 <_free_r+0x4c>
 804b73c:	42a3      	cmp	r3, r4
 804b73e:	d9fa      	bls.n	804b736 <_free_r+0x42>
 804b740:	6811      	ldr	r1, [r2, #0]
 804b742:	1850      	adds	r0, r2, r1
 804b744:	42a0      	cmp	r0, r4
 804b746:	d10b      	bne.n	804b760 <_free_r+0x6c>
 804b748:	6820      	ldr	r0, [r4, #0]
 804b74a:	4401      	add	r1, r0
 804b74c:	1850      	adds	r0, r2, r1
 804b74e:	4283      	cmp	r3, r0
 804b750:	6011      	str	r1, [r2, #0]
 804b752:	d1e0      	bne.n	804b716 <_free_r+0x22>
 804b754:	6818      	ldr	r0, [r3, #0]
 804b756:	685b      	ldr	r3, [r3, #4]
 804b758:	6053      	str	r3, [r2, #4]
 804b75a:	4408      	add	r0, r1
 804b75c:	6010      	str	r0, [r2, #0]
 804b75e:	e7da      	b.n	804b716 <_free_r+0x22>
 804b760:	d902      	bls.n	804b768 <_free_r+0x74>
 804b762:	230c      	movs	r3, #12
 804b764:	602b      	str	r3, [r5, #0]
 804b766:	e7d6      	b.n	804b716 <_free_r+0x22>
 804b768:	6820      	ldr	r0, [r4, #0]
 804b76a:	1821      	adds	r1, r4, r0
 804b76c:	428b      	cmp	r3, r1
 804b76e:	bf04      	itt	eq
 804b770:	6819      	ldreq	r1, [r3, #0]
 804b772:	685b      	ldreq	r3, [r3, #4]
 804b774:	6063      	str	r3, [r4, #4]
 804b776:	bf04      	itt	eq
 804b778:	1809      	addeq	r1, r1, r0
 804b77a:	6021      	streq	r1, [r4, #0]
 804b77c:	6054      	str	r4, [r2, #4]
 804b77e:	e7ca      	b.n	804b716 <_free_r+0x22>
 804b780:	bd38      	pop	{r3, r4, r5, pc}
 804b782:	bf00      	nop
 804b784:	2400124c 	.word	0x2400124c

0804b788 <sbrk_aligned>:
 804b788:	b570      	push	{r4, r5, r6, lr}
 804b78a:	4e0f      	ldr	r6, [pc, #60]	@ (804b7c8 <sbrk_aligned+0x40>)
 804b78c:	460c      	mov	r4, r1
 804b78e:	6831      	ldr	r1, [r6, #0]
 804b790:	4605      	mov	r5, r0
 804b792:	b911      	cbnz	r1, 804b79a <sbrk_aligned+0x12>
 804b794:	f000 fcb4 	bl	804c100 <_sbrk_r>
 804b798:	6030      	str	r0, [r6, #0]
 804b79a:	4621      	mov	r1, r4
 804b79c:	4628      	mov	r0, r5
 804b79e:	f000 fcaf 	bl	804c100 <_sbrk_r>
 804b7a2:	1c43      	adds	r3, r0, #1
 804b7a4:	d103      	bne.n	804b7ae <sbrk_aligned+0x26>
 804b7a6:	f04f 34ff 	mov.w	r4, #4294967295
 804b7aa:	4620      	mov	r0, r4
 804b7ac:	bd70      	pop	{r4, r5, r6, pc}
 804b7ae:	1cc4      	adds	r4, r0, #3
 804b7b0:	f024 0403 	bic.w	r4, r4, #3
 804b7b4:	42a0      	cmp	r0, r4
 804b7b6:	d0f8      	beq.n	804b7aa <sbrk_aligned+0x22>
 804b7b8:	1a21      	subs	r1, r4, r0
 804b7ba:	4628      	mov	r0, r5
 804b7bc:	f000 fca0 	bl	804c100 <_sbrk_r>
 804b7c0:	3001      	adds	r0, #1
 804b7c2:	d1f2      	bne.n	804b7aa <sbrk_aligned+0x22>
 804b7c4:	e7ef      	b.n	804b7a6 <sbrk_aligned+0x1e>
 804b7c6:	bf00      	nop
 804b7c8:	24001248 	.word	0x24001248

0804b7cc <_malloc_r>:
 804b7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b7d0:	1ccd      	adds	r5, r1, #3
 804b7d2:	f025 0503 	bic.w	r5, r5, #3
 804b7d6:	3508      	adds	r5, #8
 804b7d8:	2d0c      	cmp	r5, #12
 804b7da:	bf38      	it	cc
 804b7dc:	250c      	movcc	r5, #12
 804b7de:	2d00      	cmp	r5, #0
 804b7e0:	4606      	mov	r6, r0
 804b7e2:	db01      	blt.n	804b7e8 <_malloc_r+0x1c>
 804b7e4:	42a9      	cmp	r1, r5
 804b7e6:	d904      	bls.n	804b7f2 <_malloc_r+0x26>
 804b7e8:	230c      	movs	r3, #12
 804b7ea:	6033      	str	r3, [r6, #0]
 804b7ec:	2000      	movs	r0, #0
 804b7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804b7f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 804b8c8 <_malloc_r+0xfc>
 804b7f6:	f000 f869 	bl	804b8cc <__malloc_lock>
 804b7fa:	f8d8 3000 	ldr.w	r3, [r8]
 804b7fe:	461c      	mov	r4, r3
 804b800:	bb44      	cbnz	r4, 804b854 <_malloc_r+0x88>
 804b802:	4629      	mov	r1, r5
 804b804:	4630      	mov	r0, r6
 804b806:	f7ff ffbf 	bl	804b788 <sbrk_aligned>
 804b80a:	1c43      	adds	r3, r0, #1
 804b80c:	4604      	mov	r4, r0
 804b80e:	d158      	bne.n	804b8c2 <_malloc_r+0xf6>
 804b810:	f8d8 4000 	ldr.w	r4, [r8]
 804b814:	4627      	mov	r7, r4
 804b816:	2f00      	cmp	r7, #0
 804b818:	d143      	bne.n	804b8a2 <_malloc_r+0xd6>
 804b81a:	2c00      	cmp	r4, #0
 804b81c:	d04b      	beq.n	804b8b6 <_malloc_r+0xea>
 804b81e:	6823      	ldr	r3, [r4, #0]
 804b820:	4639      	mov	r1, r7
 804b822:	4630      	mov	r0, r6
 804b824:	eb04 0903 	add.w	r9, r4, r3
 804b828:	f000 fc6a 	bl	804c100 <_sbrk_r>
 804b82c:	4581      	cmp	r9, r0
 804b82e:	d142      	bne.n	804b8b6 <_malloc_r+0xea>
 804b830:	6821      	ldr	r1, [r4, #0]
 804b832:	1a6d      	subs	r5, r5, r1
 804b834:	4629      	mov	r1, r5
 804b836:	4630      	mov	r0, r6
 804b838:	f7ff ffa6 	bl	804b788 <sbrk_aligned>
 804b83c:	3001      	adds	r0, #1
 804b83e:	d03a      	beq.n	804b8b6 <_malloc_r+0xea>
 804b840:	6823      	ldr	r3, [r4, #0]
 804b842:	442b      	add	r3, r5
 804b844:	6023      	str	r3, [r4, #0]
 804b846:	f8d8 3000 	ldr.w	r3, [r8]
 804b84a:	685a      	ldr	r2, [r3, #4]
 804b84c:	bb62      	cbnz	r2, 804b8a8 <_malloc_r+0xdc>
 804b84e:	f8c8 7000 	str.w	r7, [r8]
 804b852:	e00f      	b.n	804b874 <_malloc_r+0xa8>
 804b854:	6822      	ldr	r2, [r4, #0]
 804b856:	1b52      	subs	r2, r2, r5
 804b858:	d420      	bmi.n	804b89c <_malloc_r+0xd0>
 804b85a:	2a0b      	cmp	r2, #11
 804b85c:	d917      	bls.n	804b88e <_malloc_r+0xc2>
 804b85e:	1961      	adds	r1, r4, r5
 804b860:	42a3      	cmp	r3, r4
 804b862:	6025      	str	r5, [r4, #0]
 804b864:	bf18      	it	ne
 804b866:	6059      	strne	r1, [r3, #4]
 804b868:	6863      	ldr	r3, [r4, #4]
 804b86a:	bf08      	it	eq
 804b86c:	f8c8 1000 	streq.w	r1, [r8]
 804b870:	5162      	str	r2, [r4, r5]
 804b872:	604b      	str	r3, [r1, #4]
 804b874:	4630      	mov	r0, r6
 804b876:	f000 f82f 	bl	804b8d8 <__malloc_unlock>
 804b87a:	f104 000b 	add.w	r0, r4, #11
 804b87e:	1d23      	adds	r3, r4, #4
 804b880:	f020 0007 	bic.w	r0, r0, #7
 804b884:	1ac2      	subs	r2, r0, r3
 804b886:	bf1c      	itt	ne
 804b888:	1a1b      	subne	r3, r3, r0
 804b88a:	50a3      	strne	r3, [r4, r2]
 804b88c:	e7af      	b.n	804b7ee <_malloc_r+0x22>
 804b88e:	6862      	ldr	r2, [r4, #4]
 804b890:	42a3      	cmp	r3, r4
 804b892:	bf0c      	ite	eq
 804b894:	f8c8 2000 	streq.w	r2, [r8]
 804b898:	605a      	strne	r2, [r3, #4]
 804b89a:	e7eb      	b.n	804b874 <_malloc_r+0xa8>
 804b89c:	4623      	mov	r3, r4
 804b89e:	6864      	ldr	r4, [r4, #4]
 804b8a0:	e7ae      	b.n	804b800 <_malloc_r+0x34>
 804b8a2:	463c      	mov	r4, r7
 804b8a4:	687f      	ldr	r7, [r7, #4]
 804b8a6:	e7b6      	b.n	804b816 <_malloc_r+0x4a>
 804b8a8:	461a      	mov	r2, r3
 804b8aa:	685b      	ldr	r3, [r3, #4]
 804b8ac:	42a3      	cmp	r3, r4
 804b8ae:	d1fb      	bne.n	804b8a8 <_malloc_r+0xdc>
 804b8b0:	2300      	movs	r3, #0
 804b8b2:	6053      	str	r3, [r2, #4]
 804b8b4:	e7de      	b.n	804b874 <_malloc_r+0xa8>
 804b8b6:	230c      	movs	r3, #12
 804b8b8:	6033      	str	r3, [r6, #0]
 804b8ba:	4630      	mov	r0, r6
 804b8bc:	f000 f80c 	bl	804b8d8 <__malloc_unlock>
 804b8c0:	e794      	b.n	804b7ec <_malloc_r+0x20>
 804b8c2:	6005      	str	r5, [r0, #0]
 804b8c4:	e7d6      	b.n	804b874 <_malloc_r+0xa8>
 804b8c6:	bf00      	nop
 804b8c8:	2400124c 	.word	0x2400124c

0804b8cc <__malloc_lock>:
 804b8cc:	4801      	ldr	r0, [pc, #4]	@ (804b8d4 <__malloc_lock+0x8>)
 804b8ce:	f7ff bf0e 	b.w	804b6ee <__retarget_lock_acquire_recursive>
 804b8d2:	bf00      	nop
 804b8d4:	24001244 	.word	0x24001244

0804b8d8 <__malloc_unlock>:
 804b8d8:	4801      	ldr	r0, [pc, #4]	@ (804b8e0 <__malloc_unlock+0x8>)
 804b8da:	f7ff bf09 	b.w	804b6f0 <__retarget_lock_release_recursive>
 804b8de:	bf00      	nop
 804b8e0:	24001244 	.word	0x24001244

0804b8e4 <__sfputc_r>:
 804b8e4:	6893      	ldr	r3, [r2, #8]
 804b8e6:	3b01      	subs	r3, #1
 804b8e8:	2b00      	cmp	r3, #0
 804b8ea:	b410      	push	{r4}
 804b8ec:	6093      	str	r3, [r2, #8]
 804b8ee:	da08      	bge.n	804b902 <__sfputc_r+0x1e>
 804b8f0:	6994      	ldr	r4, [r2, #24]
 804b8f2:	42a3      	cmp	r3, r4
 804b8f4:	db01      	blt.n	804b8fa <__sfputc_r+0x16>
 804b8f6:	290a      	cmp	r1, #10
 804b8f8:	d103      	bne.n	804b902 <__sfputc_r+0x1e>
 804b8fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b8fe:	f000 bb6b 	b.w	804bfd8 <__swbuf_r>
 804b902:	6813      	ldr	r3, [r2, #0]
 804b904:	1c58      	adds	r0, r3, #1
 804b906:	6010      	str	r0, [r2, #0]
 804b908:	7019      	strb	r1, [r3, #0]
 804b90a:	4608      	mov	r0, r1
 804b90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 804b910:	4770      	bx	lr

0804b912 <__sfputs_r>:
 804b912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804b914:	4606      	mov	r6, r0
 804b916:	460f      	mov	r7, r1
 804b918:	4614      	mov	r4, r2
 804b91a:	18d5      	adds	r5, r2, r3
 804b91c:	42ac      	cmp	r4, r5
 804b91e:	d101      	bne.n	804b924 <__sfputs_r+0x12>
 804b920:	2000      	movs	r0, #0
 804b922:	e007      	b.n	804b934 <__sfputs_r+0x22>
 804b924:	f814 1b01 	ldrb.w	r1, [r4], #1
 804b928:	463a      	mov	r2, r7
 804b92a:	4630      	mov	r0, r6
 804b92c:	f7ff ffda 	bl	804b8e4 <__sfputc_r>
 804b930:	1c43      	adds	r3, r0, #1
 804b932:	d1f3      	bne.n	804b91c <__sfputs_r+0xa>
 804b934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804b938 <_vfiprintf_r>:
 804b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b93c:	460d      	mov	r5, r1
 804b93e:	b09d      	sub	sp, #116	@ 0x74
 804b940:	4614      	mov	r4, r2
 804b942:	4698      	mov	r8, r3
 804b944:	4606      	mov	r6, r0
 804b946:	b118      	cbz	r0, 804b950 <_vfiprintf_r+0x18>
 804b948:	6a03      	ldr	r3, [r0, #32]
 804b94a:	b90b      	cbnz	r3, 804b950 <_vfiprintf_r+0x18>
 804b94c:	f7ff fdca 	bl	804b4e4 <__sinit>
 804b950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b952:	07d9      	lsls	r1, r3, #31
 804b954:	d405      	bmi.n	804b962 <_vfiprintf_r+0x2a>
 804b956:	89ab      	ldrh	r3, [r5, #12]
 804b958:	059a      	lsls	r2, r3, #22
 804b95a:	d402      	bmi.n	804b962 <_vfiprintf_r+0x2a>
 804b95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b95e:	f7ff fec6 	bl	804b6ee <__retarget_lock_acquire_recursive>
 804b962:	89ab      	ldrh	r3, [r5, #12]
 804b964:	071b      	lsls	r3, r3, #28
 804b966:	d501      	bpl.n	804b96c <_vfiprintf_r+0x34>
 804b968:	692b      	ldr	r3, [r5, #16]
 804b96a:	b99b      	cbnz	r3, 804b994 <_vfiprintf_r+0x5c>
 804b96c:	4629      	mov	r1, r5
 804b96e:	4630      	mov	r0, r6
 804b970:	f000 fb70 	bl	804c054 <__swsetup_r>
 804b974:	b170      	cbz	r0, 804b994 <_vfiprintf_r+0x5c>
 804b976:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804b978:	07dc      	lsls	r4, r3, #31
 804b97a:	d504      	bpl.n	804b986 <_vfiprintf_r+0x4e>
 804b97c:	f04f 30ff 	mov.w	r0, #4294967295
 804b980:	b01d      	add	sp, #116	@ 0x74
 804b982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804b986:	89ab      	ldrh	r3, [r5, #12]
 804b988:	0598      	lsls	r0, r3, #22
 804b98a:	d4f7      	bmi.n	804b97c <_vfiprintf_r+0x44>
 804b98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804b98e:	f7ff feaf 	bl	804b6f0 <__retarget_lock_release_recursive>
 804b992:	e7f3      	b.n	804b97c <_vfiprintf_r+0x44>
 804b994:	2300      	movs	r3, #0
 804b996:	9309      	str	r3, [sp, #36]	@ 0x24
 804b998:	2320      	movs	r3, #32
 804b99a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 804b99e:	f8cd 800c 	str.w	r8, [sp, #12]
 804b9a2:	2330      	movs	r3, #48	@ 0x30
 804b9a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 804bb54 <_vfiprintf_r+0x21c>
 804b9a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 804b9ac:	f04f 0901 	mov.w	r9, #1
 804b9b0:	4623      	mov	r3, r4
 804b9b2:	469a      	mov	sl, r3
 804b9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 804b9b8:	b10a      	cbz	r2, 804b9be <_vfiprintf_r+0x86>
 804b9ba:	2a25      	cmp	r2, #37	@ 0x25
 804b9bc:	d1f9      	bne.n	804b9b2 <_vfiprintf_r+0x7a>
 804b9be:	ebba 0b04 	subs.w	fp, sl, r4
 804b9c2:	d00b      	beq.n	804b9dc <_vfiprintf_r+0xa4>
 804b9c4:	465b      	mov	r3, fp
 804b9c6:	4622      	mov	r2, r4
 804b9c8:	4629      	mov	r1, r5
 804b9ca:	4630      	mov	r0, r6
 804b9cc:	f7ff ffa1 	bl	804b912 <__sfputs_r>
 804b9d0:	3001      	adds	r0, #1
 804b9d2:	f000 80a7 	beq.w	804bb24 <_vfiprintf_r+0x1ec>
 804b9d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 804b9d8:	445a      	add	r2, fp
 804b9da:	9209      	str	r2, [sp, #36]	@ 0x24
 804b9dc:	f89a 3000 	ldrb.w	r3, [sl]
 804b9e0:	2b00      	cmp	r3, #0
 804b9e2:	f000 809f 	beq.w	804bb24 <_vfiprintf_r+0x1ec>
 804b9e6:	2300      	movs	r3, #0
 804b9e8:	f04f 32ff 	mov.w	r2, #4294967295
 804b9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804b9f0:	f10a 0a01 	add.w	sl, sl, #1
 804b9f4:	9304      	str	r3, [sp, #16]
 804b9f6:	9307      	str	r3, [sp, #28]
 804b9f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 804b9fc:	931a      	str	r3, [sp, #104]	@ 0x68
 804b9fe:	4654      	mov	r4, sl
 804ba00:	2205      	movs	r2, #5
 804ba02:	f814 1b01 	ldrb.w	r1, [r4], #1
 804ba06:	4853      	ldr	r0, [pc, #332]	@ (804bb54 <_vfiprintf_r+0x21c>)
 804ba08:	f7f4 fc6a 	bl	80402e0 <memchr>
 804ba0c:	9a04      	ldr	r2, [sp, #16]
 804ba0e:	b9d8      	cbnz	r0, 804ba48 <_vfiprintf_r+0x110>
 804ba10:	06d1      	lsls	r1, r2, #27
 804ba12:	bf44      	itt	mi
 804ba14:	2320      	movmi	r3, #32
 804ba16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804ba1a:	0713      	lsls	r3, r2, #28
 804ba1c:	bf44      	itt	mi
 804ba1e:	232b      	movmi	r3, #43	@ 0x2b
 804ba20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 804ba24:	f89a 3000 	ldrb.w	r3, [sl]
 804ba28:	2b2a      	cmp	r3, #42	@ 0x2a
 804ba2a:	d015      	beq.n	804ba58 <_vfiprintf_r+0x120>
 804ba2c:	9a07      	ldr	r2, [sp, #28]
 804ba2e:	4654      	mov	r4, sl
 804ba30:	2000      	movs	r0, #0
 804ba32:	f04f 0c0a 	mov.w	ip, #10
 804ba36:	4621      	mov	r1, r4
 804ba38:	f811 3b01 	ldrb.w	r3, [r1], #1
 804ba3c:	3b30      	subs	r3, #48	@ 0x30
 804ba3e:	2b09      	cmp	r3, #9
 804ba40:	d94b      	bls.n	804bada <_vfiprintf_r+0x1a2>
 804ba42:	b1b0      	cbz	r0, 804ba72 <_vfiprintf_r+0x13a>
 804ba44:	9207      	str	r2, [sp, #28]
 804ba46:	e014      	b.n	804ba72 <_vfiprintf_r+0x13a>
 804ba48:	eba0 0308 	sub.w	r3, r0, r8
 804ba4c:	fa09 f303 	lsl.w	r3, r9, r3
 804ba50:	4313      	orrs	r3, r2
 804ba52:	9304      	str	r3, [sp, #16]
 804ba54:	46a2      	mov	sl, r4
 804ba56:	e7d2      	b.n	804b9fe <_vfiprintf_r+0xc6>
 804ba58:	9b03      	ldr	r3, [sp, #12]
 804ba5a:	1d19      	adds	r1, r3, #4
 804ba5c:	681b      	ldr	r3, [r3, #0]
 804ba5e:	9103      	str	r1, [sp, #12]
 804ba60:	2b00      	cmp	r3, #0
 804ba62:	bfbb      	ittet	lt
 804ba64:	425b      	neglt	r3, r3
 804ba66:	f042 0202 	orrlt.w	r2, r2, #2
 804ba6a:	9307      	strge	r3, [sp, #28]
 804ba6c:	9307      	strlt	r3, [sp, #28]
 804ba6e:	bfb8      	it	lt
 804ba70:	9204      	strlt	r2, [sp, #16]
 804ba72:	7823      	ldrb	r3, [r4, #0]
 804ba74:	2b2e      	cmp	r3, #46	@ 0x2e
 804ba76:	d10a      	bne.n	804ba8e <_vfiprintf_r+0x156>
 804ba78:	7863      	ldrb	r3, [r4, #1]
 804ba7a:	2b2a      	cmp	r3, #42	@ 0x2a
 804ba7c:	d132      	bne.n	804bae4 <_vfiprintf_r+0x1ac>
 804ba7e:	9b03      	ldr	r3, [sp, #12]
 804ba80:	1d1a      	adds	r2, r3, #4
 804ba82:	681b      	ldr	r3, [r3, #0]
 804ba84:	9203      	str	r2, [sp, #12]
 804ba86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 804ba8a:	3402      	adds	r4, #2
 804ba8c:	9305      	str	r3, [sp, #20]
 804ba8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 804bb64 <_vfiprintf_r+0x22c>
 804ba92:	7821      	ldrb	r1, [r4, #0]
 804ba94:	2203      	movs	r2, #3
 804ba96:	4650      	mov	r0, sl
 804ba98:	f7f4 fc22 	bl	80402e0 <memchr>
 804ba9c:	b138      	cbz	r0, 804baae <_vfiprintf_r+0x176>
 804ba9e:	9b04      	ldr	r3, [sp, #16]
 804baa0:	eba0 000a 	sub.w	r0, r0, sl
 804baa4:	2240      	movs	r2, #64	@ 0x40
 804baa6:	4082      	lsls	r2, r0
 804baa8:	4313      	orrs	r3, r2
 804baaa:	3401      	adds	r4, #1
 804baac:	9304      	str	r3, [sp, #16]
 804baae:	f814 1b01 	ldrb.w	r1, [r4], #1
 804bab2:	4829      	ldr	r0, [pc, #164]	@ (804bb58 <_vfiprintf_r+0x220>)
 804bab4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 804bab8:	2206      	movs	r2, #6
 804baba:	f7f4 fc11 	bl	80402e0 <memchr>
 804babe:	2800      	cmp	r0, #0
 804bac0:	d03f      	beq.n	804bb42 <_vfiprintf_r+0x20a>
 804bac2:	4b26      	ldr	r3, [pc, #152]	@ (804bb5c <_vfiprintf_r+0x224>)
 804bac4:	bb1b      	cbnz	r3, 804bb0e <_vfiprintf_r+0x1d6>
 804bac6:	9b03      	ldr	r3, [sp, #12]
 804bac8:	3307      	adds	r3, #7
 804baca:	f023 0307 	bic.w	r3, r3, #7
 804bace:	3308      	adds	r3, #8
 804bad0:	9303      	str	r3, [sp, #12]
 804bad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 804bad4:	443b      	add	r3, r7
 804bad6:	9309      	str	r3, [sp, #36]	@ 0x24
 804bad8:	e76a      	b.n	804b9b0 <_vfiprintf_r+0x78>
 804bada:	fb0c 3202 	mla	r2, ip, r2, r3
 804bade:	460c      	mov	r4, r1
 804bae0:	2001      	movs	r0, #1
 804bae2:	e7a8      	b.n	804ba36 <_vfiprintf_r+0xfe>
 804bae4:	2300      	movs	r3, #0
 804bae6:	3401      	adds	r4, #1
 804bae8:	9305      	str	r3, [sp, #20]
 804baea:	4619      	mov	r1, r3
 804baec:	f04f 0c0a 	mov.w	ip, #10
 804baf0:	4620      	mov	r0, r4
 804baf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 804baf6:	3a30      	subs	r2, #48	@ 0x30
 804baf8:	2a09      	cmp	r2, #9
 804bafa:	d903      	bls.n	804bb04 <_vfiprintf_r+0x1cc>
 804bafc:	2b00      	cmp	r3, #0
 804bafe:	d0c6      	beq.n	804ba8e <_vfiprintf_r+0x156>
 804bb00:	9105      	str	r1, [sp, #20]
 804bb02:	e7c4      	b.n	804ba8e <_vfiprintf_r+0x156>
 804bb04:	fb0c 2101 	mla	r1, ip, r1, r2
 804bb08:	4604      	mov	r4, r0
 804bb0a:	2301      	movs	r3, #1
 804bb0c:	e7f0      	b.n	804baf0 <_vfiprintf_r+0x1b8>
 804bb0e:	ab03      	add	r3, sp, #12
 804bb10:	9300      	str	r3, [sp, #0]
 804bb12:	462a      	mov	r2, r5
 804bb14:	4b12      	ldr	r3, [pc, #72]	@ (804bb60 <_vfiprintf_r+0x228>)
 804bb16:	a904      	add	r1, sp, #16
 804bb18:	4630      	mov	r0, r6
 804bb1a:	f3af 8000 	nop.w
 804bb1e:	4607      	mov	r7, r0
 804bb20:	1c78      	adds	r0, r7, #1
 804bb22:	d1d6      	bne.n	804bad2 <_vfiprintf_r+0x19a>
 804bb24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 804bb26:	07d9      	lsls	r1, r3, #31
 804bb28:	d405      	bmi.n	804bb36 <_vfiprintf_r+0x1fe>
 804bb2a:	89ab      	ldrh	r3, [r5, #12]
 804bb2c:	059a      	lsls	r2, r3, #22
 804bb2e:	d402      	bmi.n	804bb36 <_vfiprintf_r+0x1fe>
 804bb30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 804bb32:	f7ff fddd 	bl	804b6f0 <__retarget_lock_release_recursive>
 804bb36:	89ab      	ldrh	r3, [r5, #12]
 804bb38:	065b      	lsls	r3, r3, #25
 804bb3a:	f53f af1f 	bmi.w	804b97c <_vfiprintf_r+0x44>
 804bb3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 804bb40:	e71e      	b.n	804b980 <_vfiprintf_r+0x48>
 804bb42:	ab03      	add	r3, sp, #12
 804bb44:	9300      	str	r3, [sp, #0]
 804bb46:	462a      	mov	r2, r5
 804bb48:	4b05      	ldr	r3, [pc, #20]	@ (804bb60 <_vfiprintf_r+0x228>)
 804bb4a:	a904      	add	r1, sp, #16
 804bb4c:	4630      	mov	r0, r6
 804bb4e:	f000 f879 	bl	804bc44 <_printf_i>
 804bb52:	e7e4      	b.n	804bb1e <_vfiprintf_r+0x1e6>
 804bb54:	0804c360 	.word	0x0804c360
 804bb58:	0804c36a 	.word	0x0804c36a
 804bb5c:	00000000 	.word	0x00000000
 804bb60:	0804b913 	.word	0x0804b913
 804bb64:	0804c366 	.word	0x0804c366

0804bb68 <_printf_common>:
 804bb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804bb6c:	4616      	mov	r6, r2
 804bb6e:	4698      	mov	r8, r3
 804bb70:	688a      	ldr	r2, [r1, #8]
 804bb72:	690b      	ldr	r3, [r1, #16]
 804bb74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 804bb78:	4293      	cmp	r3, r2
 804bb7a:	bfb8      	it	lt
 804bb7c:	4613      	movlt	r3, r2
 804bb7e:	6033      	str	r3, [r6, #0]
 804bb80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 804bb84:	4607      	mov	r7, r0
 804bb86:	460c      	mov	r4, r1
 804bb88:	b10a      	cbz	r2, 804bb8e <_printf_common+0x26>
 804bb8a:	3301      	adds	r3, #1
 804bb8c:	6033      	str	r3, [r6, #0]
 804bb8e:	6823      	ldr	r3, [r4, #0]
 804bb90:	0699      	lsls	r1, r3, #26
 804bb92:	bf42      	ittt	mi
 804bb94:	6833      	ldrmi	r3, [r6, #0]
 804bb96:	3302      	addmi	r3, #2
 804bb98:	6033      	strmi	r3, [r6, #0]
 804bb9a:	6825      	ldr	r5, [r4, #0]
 804bb9c:	f015 0506 	ands.w	r5, r5, #6
 804bba0:	d106      	bne.n	804bbb0 <_printf_common+0x48>
 804bba2:	f104 0a19 	add.w	sl, r4, #25
 804bba6:	68e3      	ldr	r3, [r4, #12]
 804bba8:	6832      	ldr	r2, [r6, #0]
 804bbaa:	1a9b      	subs	r3, r3, r2
 804bbac:	42ab      	cmp	r3, r5
 804bbae:	dc26      	bgt.n	804bbfe <_printf_common+0x96>
 804bbb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 804bbb4:	6822      	ldr	r2, [r4, #0]
 804bbb6:	3b00      	subs	r3, #0
 804bbb8:	bf18      	it	ne
 804bbba:	2301      	movne	r3, #1
 804bbbc:	0692      	lsls	r2, r2, #26
 804bbbe:	d42b      	bmi.n	804bc18 <_printf_common+0xb0>
 804bbc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 804bbc4:	4641      	mov	r1, r8
 804bbc6:	4638      	mov	r0, r7
 804bbc8:	47c8      	blx	r9
 804bbca:	3001      	adds	r0, #1
 804bbcc:	d01e      	beq.n	804bc0c <_printf_common+0xa4>
 804bbce:	6823      	ldr	r3, [r4, #0]
 804bbd0:	6922      	ldr	r2, [r4, #16]
 804bbd2:	f003 0306 	and.w	r3, r3, #6
 804bbd6:	2b04      	cmp	r3, #4
 804bbd8:	bf02      	ittt	eq
 804bbda:	68e5      	ldreq	r5, [r4, #12]
 804bbdc:	6833      	ldreq	r3, [r6, #0]
 804bbde:	1aed      	subeq	r5, r5, r3
 804bbe0:	68a3      	ldr	r3, [r4, #8]
 804bbe2:	bf0c      	ite	eq
 804bbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804bbe8:	2500      	movne	r5, #0
 804bbea:	4293      	cmp	r3, r2
 804bbec:	bfc4      	itt	gt
 804bbee:	1a9b      	subgt	r3, r3, r2
 804bbf0:	18ed      	addgt	r5, r5, r3
 804bbf2:	2600      	movs	r6, #0
 804bbf4:	341a      	adds	r4, #26
 804bbf6:	42b5      	cmp	r5, r6
 804bbf8:	d11a      	bne.n	804bc30 <_printf_common+0xc8>
 804bbfa:	2000      	movs	r0, #0
 804bbfc:	e008      	b.n	804bc10 <_printf_common+0xa8>
 804bbfe:	2301      	movs	r3, #1
 804bc00:	4652      	mov	r2, sl
 804bc02:	4641      	mov	r1, r8
 804bc04:	4638      	mov	r0, r7
 804bc06:	47c8      	blx	r9
 804bc08:	3001      	adds	r0, #1
 804bc0a:	d103      	bne.n	804bc14 <_printf_common+0xac>
 804bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 804bc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804bc14:	3501      	adds	r5, #1
 804bc16:	e7c6      	b.n	804bba6 <_printf_common+0x3e>
 804bc18:	18e1      	adds	r1, r4, r3
 804bc1a:	1c5a      	adds	r2, r3, #1
 804bc1c:	2030      	movs	r0, #48	@ 0x30
 804bc1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 804bc22:	4422      	add	r2, r4
 804bc24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 804bc28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 804bc2c:	3302      	adds	r3, #2
 804bc2e:	e7c7      	b.n	804bbc0 <_printf_common+0x58>
 804bc30:	2301      	movs	r3, #1
 804bc32:	4622      	mov	r2, r4
 804bc34:	4641      	mov	r1, r8
 804bc36:	4638      	mov	r0, r7
 804bc38:	47c8      	blx	r9
 804bc3a:	3001      	adds	r0, #1
 804bc3c:	d0e6      	beq.n	804bc0c <_printf_common+0xa4>
 804bc3e:	3601      	adds	r6, #1
 804bc40:	e7d9      	b.n	804bbf6 <_printf_common+0x8e>
	...

0804bc44 <_printf_i>:
 804bc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804bc48:	7e0f      	ldrb	r7, [r1, #24]
 804bc4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 804bc4c:	2f78      	cmp	r7, #120	@ 0x78
 804bc4e:	4691      	mov	r9, r2
 804bc50:	4680      	mov	r8, r0
 804bc52:	460c      	mov	r4, r1
 804bc54:	469a      	mov	sl, r3
 804bc56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 804bc5a:	d807      	bhi.n	804bc6c <_printf_i+0x28>
 804bc5c:	2f62      	cmp	r7, #98	@ 0x62
 804bc5e:	d80a      	bhi.n	804bc76 <_printf_i+0x32>
 804bc60:	2f00      	cmp	r7, #0
 804bc62:	f000 80d1 	beq.w	804be08 <_printf_i+0x1c4>
 804bc66:	2f58      	cmp	r7, #88	@ 0x58
 804bc68:	f000 80b8 	beq.w	804bddc <_printf_i+0x198>
 804bc6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804bc70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 804bc74:	e03a      	b.n	804bcec <_printf_i+0xa8>
 804bc76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 804bc7a:	2b15      	cmp	r3, #21
 804bc7c:	d8f6      	bhi.n	804bc6c <_printf_i+0x28>
 804bc7e:	a101      	add	r1, pc, #4	@ (adr r1, 804bc84 <_printf_i+0x40>)
 804bc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804bc84:	0804bcdd 	.word	0x0804bcdd
 804bc88:	0804bcf1 	.word	0x0804bcf1
 804bc8c:	0804bc6d 	.word	0x0804bc6d
 804bc90:	0804bc6d 	.word	0x0804bc6d
 804bc94:	0804bc6d 	.word	0x0804bc6d
 804bc98:	0804bc6d 	.word	0x0804bc6d
 804bc9c:	0804bcf1 	.word	0x0804bcf1
 804bca0:	0804bc6d 	.word	0x0804bc6d
 804bca4:	0804bc6d 	.word	0x0804bc6d
 804bca8:	0804bc6d 	.word	0x0804bc6d
 804bcac:	0804bc6d 	.word	0x0804bc6d
 804bcb0:	0804bdef 	.word	0x0804bdef
 804bcb4:	0804bd1b 	.word	0x0804bd1b
 804bcb8:	0804bda9 	.word	0x0804bda9
 804bcbc:	0804bc6d 	.word	0x0804bc6d
 804bcc0:	0804bc6d 	.word	0x0804bc6d
 804bcc4:	0804be11 	.word	0x0804be11
 804bcc8:	0804bc6d 	.word	0x0804bc6d
 804bccc:	0804bd1b 	.word	0x0804bd1b
 804bcd0:	0804bc6d 	.word	0x0804bc6d
 804bcd4:	0804bc6d 	.word	0x0804bc6d
 804bcd8:	0804bdb1 	.word	0x0804bdb1
 804bcdc:	6833      	ldr	r3, [r6, #0]
 804bcde:	1d1a      	adds	r2, r3, #4
 804bce0:	681b      	ldr	r3, [r3, #0]
 804bce2:	6032      	str	r2, [r6, #0]
 804bce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 804bce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 804bcec:	2301      	movs	r3, #1
 804bcee:	e09c      	b.n	804be2a <_printf_i+0x1e6>
 804bcf0:	6833      	ldr	r3, [r6, #0]
 804bcf2:	6820      	ldr	r0, [r4, #0]
 804bcf4:	1d19      	adds	r1, r3, #4
 804bcf6:	6031      	str	r1, [r6, #0]
 804bcf8:	0606      	lsls	r6, r0, #24
 804bcfa:	d501      	bpl.n	804bd00 <_printf_i+0xbc>
 804bcfc:	681d      	ldr	r5, [r3, #0]
 804bcfe:	e003      	b.n	804bd08 <_printf_i+0xc4>
 804bd00:	0645      	lsls	r5, r0, #25
 804bd02:	d5fb      	bpl.n	804bcfc <_printf_i+0xb8>
 804bd04:	f9b3 5000 	ldrsh.w	r5, [r3]
 804bd08:	2d00      	cmp	r5, #0
 804bd0a:	da03      	bge.n	804bd14 <_printf_i+0xd0>
 804bd0c:	232d      	movs	r3, #45	@ 0x2d
 804bd0e:	426d      	negs	r5, r5
 804bd10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804bd14:	4858      	ldr	r0, [pc, #352]	@ (804be78 <_printf_i+0x234>)
 804bd16:	230a      	movs	r3, #10
 804bd18:	e011      	b.n	804bd3e <_printf_i+0xfa>
 804bd1a:	6821      	ldr	r1, [r4, #0]
 804bd1c:	6833      	ldr	r3, [r6, #0]
 804bd1e:	0608      	lsls	r0, r1, #24
 804bd20:	f853 5b04 	ldr.w	r5, [r3], #4
 804bd24:	d402      	bmi.n	804bd2c <_printf_i+0xe8>
 804bd26:	0649      	lsls	r1, r1, #25
 804bd28:	bf48      	it	mi
 804bd2a:	b2ad      	uxthmi	r5, r5
 804bd2c:	2f6f      	cmp	r7, #111	@ 0x6f
 804bd2e:	4852      	ldr	r0, [pc, #328]	@ (804be78 <_printf_i+0x234>)
 804bd30:	6033      	str	r3, [r6, #0]
 804bd32:	bf14      	ite	ne
 804bd34:	230a      	movne	r3, #10
 804bd36:	2308      	moveq	r3, #8
 804bd38:	2100      	movs	r1, #0
 804bd3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 804bd3e:	6866      	ldr	r6, [r4, #4]
 804bd40:	60a6      	str	r6, [r4, #8]
 804bd42:	2e00      	cmp	r6, #0
 804bd44:	db05      	blt.n	804bd52 <_printf_i+0x10e>
 804bd46:	6821      	ldr	r1, [r4, #0]
 804bd48:	432e      	orrs	r6, r5
 804bd4a:	f021 0104 	bic.w	r1, r1, #4
 804bd4e:	6021      	str	r1, [r4, #0]
 804bd50:	d04b      	beq.n	804bdea <_printf_i+0x1a6>
 804bd52:	4616      	mov	r6, r2
 804bd54:	fbb5 f1f3 	udiv	r1, r5, r3
 804bd58:	fb03 5711 	mls	r7, r3, r1, r5
 804bd5c:	5dc7      	ldrb	r7, [r0, r7]
 804bd5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 804bd62:	462f      	mov	r7, r5
 804bd64:	42bb      	cmp	r3, r7
 804bd66:	460d      	mov	r5, r1
 804bd68:	d9f4      	bls.n	804bd54 <_printf_i+0x110>
 804bd6a:	2b08      	cmp	r3, #8
 804bd6c:	d10b      	bne.n	804bd86 <_printf_i+0x142>
 804bd6e:	6823      	ldr	r3, [r4, #0]
 804bd70:	07df      	lsls	r7, r3, #31
 804bd72:	d508      	bpl.n	804bd86 <_printf_i+0x142>
 804bd74:	6923      	ldr	r3, [r4, #16]
 804bd76:	6861      	ldr	r1, [r4, #4]
 804bd78:	4299      	cmp	r1, r3
 804bd7a:	bfde      	ittt	le
 804bd7c:	2330      	movle	r3, #48	@ 0x30
 804bd7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 804bd82:	f106 36ff 	addle.w	r6, r6, #4294967295
 804bd86:	1b92      	subs	r2, r2, r6
 804bd88:	6122      	str	r2, [r4, #16]
 804bd8a:	f8cd a000 	str.w	sl, [sp]
 804bd8e:	464b      	mov	r3, r9
 804bd90:	aa03      	add	r2, sp, #12
 804bd92:	4621      	mov	r1, r4
 804bd94:	4640      	mov	r0, r8
 804bd96:	f7ff fee7 	bl	804bb68 <_printf_common>
 804bd9a:	3001      	adds	r0, #1
 804bd9c:	d14a      	bne.n	804be34 <_printf_i+0x1f0>
 804bd9e:	f04f 30ff 	mov.w	r0, #4294967295
 804bda2:	b004      	add	sp, #16
 804bda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804bda8:	6823      	ldr	r3, [r4, #0]
 804bdaa:	f043 0320 	orr.w	r3, r3, #32
 804bdae:	6023      	str	r3, [r4, #0]
 804bdb0:	4832      	ldr	r0, [pc, #200]	@ (804be7c <_printf_i+0x238>)
 804bdb2:	2778      	movs	r7, #120	@ 0x78
 804bdb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 804bdb8:	6823      	ldr	r3, [r4, #0]
 804bdba:	6831      	ldr	r1, [r6, #0]
 804bdbc:	061f      	lsls	r7, r3, #24
 804bdbe:	f851 5b04 	ldr.w	r5, [r1], #4
 804bdc2:	d402      	bmi.n	804bdca <_printf_i+0x186>
 804bdc4:	065f      	lsls	r7, r3, #25
 804bdc6:	bf48      	it	mi
 804bdc8:	b2ad      	uxthmi	r5, r5
 804bdca:	6031      	str	r1, [r6, #0]
 804bdcc:	07d9      	lsls	r1, r3, #31
 804bdce:	bf44      	itt	mi
 804bdd0:	f043 0320 	orrmi.w	r3, r3, #32
 804bdd4:	6023      	strmi	r3, [r4, #0]
 804bdd6:	b11d      	cbz	r5, 804bde0 <_printf_i+0x19c>
 804bdd8:	2310      	movs	r3, #16
 804bdda:	e7ad      	b.n	804bd38 <_printf_i+0xf4>
 804bddc:	4826      	ldr	r0, [pc, #152]	@ (804be78 <_printf_i+0x234>)
 804bdde:	e7e9      	b.n	804bdb4 <_printf_i+0x170>
 804bde0:	6823      	ldr	r3, [r4, #0]
 804bde2:	f023 0320 	bic.w	r3, r3, #32
 804bde6:	6023      	str	r3, [r4, #0]
 804bde8:	e7f6      	b.n	804bdd8 <_printf_i+0x194>
 804bdea:	4616      	mov	r6, r2
 804bdec:	e7bd      	b.n	804bd6a <_printf_i+0x126>
 804bdee:	6833      	ldr	r3, [r6, #0]
 804bdf0:	6825      	ldr	r5, [r4, #0]
 804bdf2:	6961      	ldr	r1, [r4, #20]
 804bdf4:	1d18      	adds	r0, r3, #4
 804bdf6:	6030      	str	r0, [r6, #0]
 804bdf8:	062e      	lsls	r6, r5, #24
 804bdfa:	681b      	ldr	r3, [r3, #0]
 804bdfc:	d501      	bpl.n	804be02 <_printf_i+0x1be>
 804bdfe:	6019      	str	r1, [r3, #0]
 804be00:	e002      	b.n	804be08 <_printf_i+0x1c4>
 804be02:	0668      	lsls	r0, r5, #25
 804be04:	d5fb      	bpl.n	804bdfe <_printf_i+0x1ba>
 804be06:	8019      	strh	r1, [r3, #0]
 804be08:	2300      	movs	r3, #0
 804be0a:	6123      	str	r3, [r4, #16]
 804be0c:	4616      	mov	r6, r2
 804be0e:	e7bc      	b.n	804bd8a <_printf_i+0x146>
 804be10:	6833      	ldr	r3, [r6, #0]
 804be12:	1d1a      	adds	r2, r3, #4
 804be14:	6032      	str	r2, [r6, #0]
 804be16:	681e      	ldr	r6, [r3, #0]
 804be18:	6862      	ldr	r2, [r4, #4]
 804be1a:	2100      	movs	r1, #0
 804be1c:	4630      	mov	r0, r6
 804be1e:	f7f4 fa5f 	bl	80402e0 <memchr>
 804be22:	b108      	cbz	r0, 804be28 <_printf_i+0x1e4>
 804be24:	1b80      	subs	r0, r0, r6
 804be26:	6060      	str	r0, [r4, #4]
 804be28:	6863      	ldr	r3, [r4, #4]
 804be2a:	6123      	str	r3, [r4, #16]
 804be2c:	2300      	movs	r3, #0
 804be2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 804be32:	e7aa      	b.n	804bd8a <_printf_i+0x146>
 804be34:	6923      	ldr	r3, [r4, #16]
 804be36:	4632      	mov	r2, r6
 804be38:	4649      	mov	r1, r9
 804be3a:	4640      	mov	r0, r8
 804be3c:	47d0      	blx	sl
 804be3e:	3001      	adds	r0, #1
 804be40:	d0ad      	beq.n	804bd9e <_printf_i+0x15a>
 804be42:	6823      	ldr	r3, [r4, #0]
 804be44:	079b      	lsls	r3, r3, #30
 804be46:	d413      	bmi.n	804be70 <_printf_i+0x22c>
 804be48:	68e0      	ldr	r0, [r4, #12]
 804be4a:	9b03      	ldr	r3, [sp, #12]
 804be4c:	4298      	cmp	r0, r3
 804be4e:	bfb8      	it	lt
 804be50:	4618      	movlt	r0, r3
 804be52:	e7a6      	b.n	804bda2 <_printf_i+0x15e>
 804be54:	2301      	movs	r3, #1
 804be56:	4632      	mov	r2, r6
 804be58:	4649      	mov	r1, r9
 804be5a:	4640      	mov	r0, r8
 804be5c:	47d0      	blx	sl
 804be5e:	3001      	adds	r0, #1
 804be60:	d09d      	beq.n	804bd9e <_printf_i+0x15a>
 804be62:	3501      	adds	r5, #1
 804be64:	68e3      	ldr	r3, [r4, #12]
 804be66:	9903      	ldr	r1, [sp, #12]
 804be68:	1a5b      	subs	r3, r3, r1
 804be6a:	42ab      	cmp	r3, r5
 804be6c:	dcf2      	bgt.n	804be54 <_printf_i+0x210>
 804be6e:	e7eb      	b.n	804be48 <_printf_i+0x204>
 804be70:	2500      	movs	r5, #0
 804be72:	f104 0619 	add.w	r6, r4, #25
 804be76:	e7f5      	b.n	804be64 <_printf_i+0x220>
 804be78:	0804c371 	.word	0x0804c371
 804be7c:	0804c382 	.word	0x0804c382

0804be80 <__sflush_r>:
 804be80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 804be84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804be88:	0716      	lsls	r6, r2, #28
 804be8a:	4605      	mov	r5, r0
 804be8c:	460c      	mov	r4, r1
 804be8e:	d454      	bmi.n	804bf3a <__sflush_r+0xba>
 804be90:	684b      	ldr	r3, [r1, #4]
 804be92:	2b00      	cmp	r3, #0
 804be94:	dc02      	bgt.n	804be9c <__sflush_r+0x1c>
 804be96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 804be98:	2b00      	cmp	r3, #0
 804be9a:	dd48      	ble.n	804bf2e <__sflush_r+0xae>
 804be9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804be9e:	2e00      	cmp	r6, #0
 804bea0:	d045      	beq.n	804bf2e <__sflush_r+0xae>
 804bea2:	2300      	movs	r3, #0
 804bea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 804bea8:	682f      	ldr	r7, [r5, #0]
 804beaa:	6a21      	ldr	r1, [r4, #32]
 804beac:	602b      	str	r3, [r5, #0]
 804beae:	d030      	beq.n	804bf12 <__sflush_r+0x92>
 804beb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 804beb2:	89a3      	ldrh	r3, [r4, #12]
 804beb4:	0759      	lsls	r1, r3, #29
 804beb6:	d505      	bpl.n	804bec4 <__sflush_r+0x44>
 804beb8:	6863      	ldr	r3, [r4, #4]
 804beba:	1ad2      	subs	r2, r2, r3
 804bebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 804bebe:	b10b      	cbz	r3, 804bec4 <__sflush_r+0x44>
 804bec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 804bec2:	1ad2      	subs	r2, r2, r3
 804bec4:	2300      	movs	r3, #0
 804bec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 804bec8:	6a21      	ldr	r1, [r4, #32]
 804beca:	4628      	mov	r0, r5
 804becc:	47b0      	blx	r6
 804bece:	1c43      	adds	r3, r0, #1
 804bed0:	89a3      	ldrh	r3, [r4, #12]
 804bed2:	d106      	bne.n	804bee2 <__sflush_r+0x62>
 804bed4:	6829      	ldr	r1, [r5, #0]
 804bed6:	291d      	cmp	r1, #29
 804bed8:	d82b      	bhi.n	804bf32 <__sflush_r+0xb2>
 804beda:	4a2a      	ldr	r2, [pc, #168]	@ (804bf84 <__sflush_r+0x104>)
 804bedc:	40ca      	lsrs	r2, r1
 804bede:	07d6      	lsls	r6, r2, #31
 804bee0:	d527      	bpl.n	804bf32 <__sflush_r+0xb2>
 804bee2:	2200      	movs	r2, #0
 804bee4:	6062      	str	r2, [r4, #4]
 804bee6:	04d9      	lsls	r1, r3, #19
 804bee8:	6922      	ldr	r2, [r4, #16]
 804beea:	6022      	str	r2, [r4, #0]
 804beec:	d504      	bpl.n	804bef8 <__sflush_r+0x78>
 804beee:	1c42      	adds	r2, r0, #1
 804bef0:	d101      	bne.n	804bef6 <__sflush_r+0x76>
 804bef2:	682b      	ldr	r3, [r5, #0]
 804bef4:	b903      	cbnz	r3, 804bef8 <__sflush_r+0x78>
 804bef6:	6560      	str	r0, [r4, #84]	@ 0x54
 804bef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804befa:	602f      	str	r7, [r5, #0]
 804befc:	b1b9      	cbz	r1, 804bf2e <__sflush_r+0xae>
 804befe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804bf02:	4299      	cmp	r1, r3
 804bf04:	d002      	beq.n	804bf0c <__sflush_r+0x8c>
 804bf06:	4628      	mov	r0, r5
 804bf08:	f7ff fbf4 	bl	804b6f4 <_free_r>
 804bf0c:	2300      	movs	r3, #0
 804bf0e:	6363      	str	r3, [r4, #52]	@ 0x34
 804bf10:	e00d      	b.n	804bf2e <__sflush_r+0xae>
 804bf12:	2301      	movs	r3, #1
 804bf14:	4628      	mov	r0, r5
 804bf16:	47b0      	blx	r6
 804bf18:	4602      	mov	r2, r0
 804bf1a:	1c50      	adds	r0, r2, #1
 804bf1c:	d1c9      	bne.n	804beb2 <__sflush_r+0x32>
 804bf1e:	682b      	ldr	r3, [r5, #0]
 804bf20:	2b00      	cmp	r3, #0
 804bf22:	d0c6      	beq.n	804beb2 <__sflush_r+0x32>
 804bf24:	2b1d      	cmp	r3, #29
 804bf26:	d001      	beq.n	804bf2c <__sflush_r+0xac>
 804bf28:	2b16      	cmp	r3, #22
 804bf2a:	d11e      	bne.n	804bf6a <__sflush_r+0xea>
 804bf2c:	602f      	str	r7, [r5, #0]
 804bf2e:	2000      	movs	r0, #0
 804bf30:	e022      	b.n	804bf78 <__sflush_r+0xf8>
 804bf32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804bf36:	b21b      	sxth	r3, r3
 804bf38:	e01b      	b.n	804bf72 <__sflush_r+0xf2>
 804bf3a:	690f      	ldr	r7, [r1, #16]
 804bf3c:	2f00      	cmp	r7, #0
 804bf3e:	d0f6      	beq.n	804bf2e <__sflush_r+0xae>
 804bf40:	0793      	lsls	r3, r2, #30
 804bf42:	680e      	ldr	r6, [r1, #0]
 804bf44:	bf08      	it	eq
 804bf46:	694b      	ldreq	r3, [r1, #20]
 804bf48:	600f      	str	r7, [r1, #0]
 804bf4a:	bf18      	it	ne
 804bf4c:	2300      	movne	r3, #0
 804bf4e:	eba6 0807 	sub.w	r8, r6, r7
 804bf52:	608b      	str	r3, [r1, #8]
 804bf54:	f1b8 0f00 	cmp.w	r8, #0
 804bf58:	dde9      	ble.n	804bf2e <__sflush_r+0xae>
 804bf5a:	6a21      	ldr	r1, [r4, #32]
 804bf5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 804bf5e:	4643      	mov	r3, r8
 804bf60:	463a      	mov	r2, r7
 804bf62:	4628      	mov	r0, r5
 804bf64:	47b0      	blx	r6
 804bf66:	2800      	cmp	r0, #0
 804bf68:	dc08      	bgt.n	804bf7c <__sflush_r+0xfc>
 804bf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bf6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804bf72:	81a3      	strh	r3, [r4, #12]
 804bf74:	f04f 30ff 	mov.w	r0, #4294967295
 804bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804bf7c:	4407      	add	r7, r0
 804bf7e:	eba8 0800 	sub.w	r8, r8, r0
 804bf82:	e7e7      	b.n	804bf54 <__sflush_r+0xd4>
 804bf84:	20400001 	.word	0x20400001

0804bf88 <_fflush_r>:
 804bf88:	b538      	push	{r3, r4, r5, lr}
 804bf8a:	690b      	ldr	r3, [r1, #16]
 804bf8c:	4605      	mov	r5, r0
 804bf8e:	460c      	mov	r4, r1
 804bf90:	b913      	cbnz	r3, 804bf98 <_fflush_r+0x10>
 804bf92:	2500      	movs	r5, #0
 804bf94:	4628      	mov	r0, r5
 804bf96:	bd38      	pop	{r3, r4, r5, pc}
 804bf98:	b118      	cbz	r0, 804bfa2 <_fflush_r+0x1a>
 804bf9a:	6a03      	ldr	r3, [r0, #32]
 804bf9c:	b90b      	cbnz	r3, 804bfa2 <_fflush_r+0x1a>
 804bf9e:	f7ff faa1 	bl	804b4e4 <__sinit>
 804bfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804bfa6:	2b00      	cmp	r3, #0
 804bfa8:	d0f3      	beq.n	804bf92 <_fflush_r+0xa>
 804bfaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 804bfac:	07d0      	lsls	r0, r2, #31
 804bfae:	d404      	bmi.n	804bfba <_fflush_r+0x32>
 804bfb0:	0599      	lsls	r1, r3, #22
 804bfb2:	d402      	bmi.n	804bfba <_fflush_r+0x32>
 804bfb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804bfb6:	f7ff fb9a 	bl	804b6ee <__retarget_lock_acquire_recursive>
 804bfba:	4628      	mov	r0, r5
 804bfbc:	4621      	mov	r1, r4
 804bfbe:	f7ff ff5f 	bl	804be80 <__sflush_r>
 804bfc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 804bfc4:	07da      	lsls	r2, r3, #31
 804bfc6:	4605      	mov	r5, r0
 804bfc8:	d4e4      	bmi.n	804bf94 <_fflush_r+0xc>
 804bfca:	89a3      	ldrh	r3, [r4, #12]
 804bfcc:	059b      	lsls	r3, r3, #22
 804bfce:	d4e1      	bmi.n	804bf94 <_fflush_r+0xc>
 804bfd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 804bfd2:	f7ff fb8d 	bl	804b6f0 <__retarget_lock_release_recursive>
 804bfd6:	e7dd      	b.n	804bf94 <_fflush_r+0xc>

0804bfd8 <__swbuf_r>:
 804bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bfda:	460e      	mov	r6, r1
 804bfdc:	4614      	mov	r4, r2
 804bfde:	4605      	mov	r5, r0
 804bfe0:	b118      	cbz	r0, 804bfea <__swbuf_r+0x12>
 804bfe2:	6a03      	ldr	r3, [r0, #32]
 804bfe4:	b90b      	cbnz	r3, 804bfea <__swbuf_r+0x12>
 804bfe6:	f7ff fa7d 	bl	804b4e4 <__sinit>
 804bfea:	69a3      	ldr	r3, [r4, #24]
 804bfec:	60a3      	str	r3, [r4, #8]
 804bfee:	89a3      	ldrh	r3, [r4, #12]
 804bff0:	071a      	lsls	r2, r3, #28
 804bff2:	d501      	bpl.n	804bff8 <__swbuf_r+0x20>
 804bff4:	6923      	ldr	r3, [r4, #16]
 804bff6:	b943      	cbnz	r3, 804c00a <__swbuf_r+0x32>
 804bff8:	4621      	mov	r1, r4
 804bffa:	4628      	mov	r0, r5
 804bffc:	f000 f82a 	bl	804c054 <__swsetup_r>
 804c000:	b118      	cbz	r0, 804c00a <__swbuf_r+0x32>
 804c002:	f04f 37ff 	mov.w	r7, #4294967295
 804c006:	4638      	mov	r0, r7
 804c008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804c00a:	6823      	ldr	r3, [r4, #0]
 804c00c:	6922      	ldr	r2, [r4, #16]
 804c00e:	1a98      	subs	r0, r3, r2
 804c010:	6963      	ldr	r3, [r4, #20]
 804c012:	b2f6      	uxtb	r6, r6
 804c014:	4283      	cmp	r3, r0
 804c016:	4637      	mov	r7, r6
 804c018:	dc05      	bgt.n	804c026 <__swbuf_r+0x4e>
 804c01a:	4621      	mov	r1, r4
 804c01c:	4628      	mov	r0, r5
 804c01e:	f7ff ffb3 	bl	804bf88 <_fflush_r>
 804c022:	2800      	cmp	r0, #0
 804c024:	d1ed      	bne.n	804c002 <__swbuf_r+0x2a>
 804c026:	68a3      	ldr	r3, [r4, #8]
 804c028:	3b01      	subs	r3, #1
 804c02a:	60a3      	str	r3, [r4, #8]
 804c02c:	6823      	ldr	r3, [r4, #0]
 804c02e:	1c5a      	adds	r2, r3, #1
 804c030:	6022      	str	r2, [r4, #0]
 804c032:	701e      	strb	r6, [r3, #0]
 804c034:	6962      	ldr	r2, [r4, #20]
 804c036:	1c43      	adds	r3, r0, #1
 804c038:	429a      	cmp	r2, r3
 804c03a:	d004      	beq.n	804c046 <__swbuf_r+0x6e>
 804c03c:	89a3      	ldrh	r3, [r4, #12]
 804c03e:	07db      	lsls	r3, r3, #31
 804c040:	d5e1      	bpl.n	804c006 <__swbuf_r+0x2e>
 804c042:	2e0a      	cmp	r6, #10
 804c044:	d1df      	bne.n	804c006 <__swbuf_r+0x2e>
 804c046:	4621      	mov	r1, r4
 804c048:	4628      	mov	r0, r5
 804c04a:	f7ff ff9d 	bl	804bf88 <_fflush_r>
 804c04e:	2800      	cmp	r0, #0
 804c050:	d0d9      	beq.n	804c006 <__swbuf_r+0x2e>
 804c052:	e7d6      	b.n	804c002 <__swbuf_r+0x2a>

0804c054 <__swsetup_r>:
 804c054:	b538      	push	{r3, r4, r5, lr}
 804c056:	4b29      	ldr	r3, [pc, #164]	@ (804c0fc <__swsetup_r+0xa8>)
 804c058:	4605      	mov	r5, r0
 804c05a:	6818      	ldr	r0, [r3, #0]
 804c05c:	460c      	mov	r4, r1
 804c05e:	b118      	cbz	r0, 804c068 <__swsetup_r+0x14>
 804c060:	6a03      	ldr	r3, [r0, #32]
 804c062:	b90b      	cbnz	r3, 804c068 <__swsetup_r+0x14>
 804c064:	f7ff fa3e 	bl	804b4e4 <__sinit>
 804c068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c06c:	0719      	lsls	r1, r3, #28
 804c06e:	d422      	bmi.n	804c0b6 <__swsetup_r+0x62>
 804c070:	06da      	lsls	r2, r3, #27
 804c072:	d407      	bmi.n	804c084 <__swsetup_r+0x30>
 804c074:	2209      	movs	r2, #9
 804c076:	602a      	str	r2, [r5, #0]
 804c078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 804c07c:	81a3      	strh	r3, [r4, #12]
 804c07e:	f04f 30ff 	mov.w	r0, #4294967295
 804c082:	e033      	b.n	804c0ec <__swsetup_r+0x98>
 804c084:	0758      	lsls	r0, r3, #29
 804c086:	d512      	bpl.n	804c0ae <__swsetup_r+0x5a>
 804c088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 804c08a:	b141      	cbz	r1, 804c09e <__swsetup_r+0x4a>
 804c08c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 804c090:	4299      	cmp	r1, r3
 804c092:	d002      	beq.n	804c09a <__swsetup_r+0x46>
 804c094:	4628      	mov	r0, r5
 804c096:	f7ff fb2d 	bl	804b6f4 <_free_r>
 804c09a:	2300      	movs	r3, #0
 804c09c:	6363      	str	r3, [r4, #52]	@ 0x34
 804c09e:	89a3      	ldrh	r3, [r4, #12]
 804c0a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 804c0a4:	81a3      	strh	r3, [r4, #12]
 804c0a6:	2300      	movs	r3, #0
 804c0a8:	6063      	str	r3, [r4, #4]
 804c0aa:	6923      	ldr	r3, [r4, #16]
 804c0ac:	6023      	str	r3, [r4, #0]
 804c0ae:	89a3      	ldrh	r3, [r4, #12]
 804c0b0:	f043 0308 	orr.w	r3, r3, #8
 804c0b4:	81a3      	strh	r3, [r4, #12]
 804c0b6:	6923      	ldr	r3, [r4, #16]
 804c0b8:	b94b      	cbnz	r3, 804c0ce <__swsetup_r+0x7a>
 804c0ba:	89a3      	ldrh	r3, [r4, #12]
 804c0bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 804c0c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 804c0c4:	d003      	beq.n	804c0ce <__swsetup_r+0x7a>
 804c0c6:	4621      	mov	r1, r4
 804c0c8:	4628      	mov	r0, r5
 804c0ca:	f000 f84f 	bl	804c16c <__smakebuf_r>
 804c0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c0d2:	f013 0201 	ands.w	r2, r3, #1
 804c0d6:	d00a      	beq.n	804c0ee <__swsetup_r+0x9a>
 804c0d8:	2200      	movs	r2, #0
 804c0da:	60a2      	str	r2, [r4, #8]
 804c0dc:	6962      	ldr	r2, [r4, #20]
 804c0de:	4252      	negs	r2, r2
 804c0e0:	61a2      	str	r2, [r4, #24]
 804c0e2:	6922      	ldr	r2, [r4, #16]
 804c0e4:	b942      	cbnz	r2, 804c0f8 <__swsetup_r+0xa4>
 804c0e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 804c0ea:	d1c5      	bne.n	804c078 <__swsetup_r+0x24>
 804c0ec:	bd38      	pop	{r3, r4, r5, pc}
 804c0ee:	0799      	lsls	r1, r3, #30
 804c0f0:	bf58      	it	pl
 804c0f2:	6962      	ldrpl	r2, [r4, #20]
 804c0f4:	60a2      	str	r2, [r4, #8]
 804c0f6:	e7f4      	b.n	804c0e2 <__swsetup_r+0x8e>
 804c0f8:	2000      	movs	r0, #0
 804c0fa:	e7f7      	b.n	804c0ec <__swsetup_r+0x98>
 804c0fc:	240000f0 	.word	0x240000f0

0804c100 <_sbrk_r>:
 804c100:	b538      	push	{r3, r4, r5, lr}
 804c102:	4d06      	ldr	r5, [pc, #24]	@ (804c11c <_sbrk_r+0x1c>)
 804c104:	2300      	movs	r3, #0
 804c106:	4604      	mov	r4, r0
 804c108:	4608      	mov	r0, r1
 804c10a:	602b      	str	r3, [r5, #0]
 804c10c:	f7f4 ff24 	bl	8040f58 <_sbrk>
 804c110:	1c43      	adds	r3, r0, #1
 804c112:	d102      	bne.n	804c11a <_sbrk_r+0x1a>
 804c114:	682b      	ldr	r3, [r5, #0]
 804c116:	b103      	cbz	r3, 804c11a <_sbrk_r+0x1a>
 804c118:	6023      	str	r3, [r4, #0]
 804c11a:	bd38      	pop	{r3, r4, r5, pc}
 804c11c:	24001240 	.word	0x24001240

0804c120 <__swhatbuf_r>:
 804c120:	b570      	push	{r4, r5, r6, lr}
 804c122:	460c      	mov	r4, r1
 804c124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804c128:	2900      	cmp	r1, #0
 804c12a:	b096      	sub	sp, #88	@ 0x58
 804c12c:	4615      	mov	r5, r2
 804c12e:	461e      	mov	r6, r3
 804c130:	da0d      	bge.n	804c14e <__swhatbuf_r+0x2e>
 804c132:	89a3      	ldrh	r3, [r4, #12]
 804c134:	f013 0f80 	tst.w	r3, #128	@ 0x80
 804c138:	f04f 0100 	mov.w	r1, #0
 804c13c:	bf14      	ite	ne
 804c13e:	2340      	movne	r3, #64	@ 0x40
 804c140:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 804c144:	2000      	movs	r0, #0
 804c146:	6031      	str	r1, [r6, #0]
 804c148:	602b      	str	r3, [r5, #0]
 804c14a:	b016      	add	sp, #88	@ 0x58
 804c14c:	bd70      	pop	{r4, r5, r6, pc}
 804c14e:	466a      	mov	r2, sp
 804c150:	f000 f848 	bl	804c1e4 <_fstat_r>
 804c154:	2800      	cmp	r0, #0
 804c156:	dbec      	blt.n	804c132 <__swhatbuf_r+0x12>
 804c158:	9901      	ldr	r1, [sp, #4]
 804c15a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 804c15e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 804c162:	4259      	negs	r1, r3
 804c164:	4159      	adcs	r1, r3
 804c166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 804c16a:	e7eb      	b.n	804c144 <__swhatbuf_r+0x24>

0804c16c <__smakebuf_r>:
 804c16c:	898b      	ldrh	r3, [r1, #12]
 804c16e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 804c170:	079d      	lsls	r5, r3, #30
 804c172:	4606      	mov	r6, r0
 804c174:	460c      	mov	r4, r1
 804c176:	d507      	bpl.n	804c188 <__smakebuf_r+0x1c>
 804c178:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 804c17c:	6023      	str	r3, [r4, #0]
 804c17e:	6123      	str	r3, [r4, #16]
 804c180:	2301      	movs	r3, #1
 804c182:	6163      	str	r3, [r4, #20]
 804c184:	b003      	add	sp, #12
 804c186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804c188:	ab01      	add	r3, sp, #4
 804c18a:	466a      	mov	r2, sp
 804c18c:	f7ff ffc8 	bl	804c120 <__swhatbuf_r>
 804c190:	9f00      	ldr	r7, [sp, #0]
 804c192:	4605      	mov	r5, r0
 804c194:	4639      	mov	r1, r7
 804c196:	4630      	mov	r0, r6
 804c198:	f7ff fb18 	bl	804b7cc <_malloc_r>
 804c19c:	b948      	cbnz	r0, 804c1b2 <__smakebuf_r+0x46>
 804c19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804c1a2:	059a      	lsls	r2, r3, #22
 804c1a4:	d4ee      	bmi.n	804c184 <__smakebuf_r+0x18>
 804c1a6:	f023 0303 	bic.w	r3, r3, #3
 804c1aa:	f043 0302 	orr.w	r3, r3, #2
 804c1ae:	81a3      	strh	r3, [r4, #12]
 804c1b0:	e7e2      	b.n	804c178 <__smakebuf_r+0xc>
 804c1b2:	89a3      	ldrh	r3, [r4, #12]
 804c1b4:	6020      	str	r0, [r4, #0]
 804c1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 804c1ba:	81a3      	strh	r3, [r4, #12]
 804c1bc:	9b01      	ldr	r3, [sp, #4]
 804c1be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 804c1c2:	b15b      	cbz	r3, 804c1dc <__smakebuf_r+0x70>
 804c1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804c1c8:	4630      	mov	r0, r6
 804c1ca:	f000 f81d 	bl	804c208 <_isatty_r>
 804c1ce:	b128      	cbz	r0, 804c1dc <__smakebuf_r+0x70>
 804c1d0:	89a3      	ldrh	r3, [r4, #12]
 804c1d2:	f023 0303 	bic.w	r3, r3, #3
 804c1d6:	f043 0301 	orr.w	r3, r3, #1
 804c1da:	81a3      	strh	r3, [r4, #12]
 804c1dc:	89a3      	ldrh	r3, [r4, #12]
 804c1de:	431d      	orrs	r5, r3
 804c1e0:	81a5      	strh	r5, [r4, #12]
 804c1e2:	e7cf      	b.n	804c184 <__smakebuf_r+0x18>

0804c1e4 <_fstat_r>:
 804c1e4:	b538      	push	{r3, r4, r5, lr}
 804c1e6:	4d07      	ldr	r5, [pc, #28]	@ (804c204 <_fstat_r+0x20>)
 804c1e8:	2300      	movs	r3, #0
 804c1ea:	4604      	mov	r4, r0
 804c1ec:	4608      	mov	r0, r1
 804c1ee:	4611      	mov	r1, r2
 804c1f0:	602b      	str	r3, [r5, #0]
 804c1f2:	f7f4 fe88 	bl	8040f06 <_fstat>
 804c1f6:	1c43      	adds	r3, r0, #1
 804c1f8:	d102      	bne.n	804c200 <_fstat_r+0x1c>
 804c1fa:	682b      	ldr	r3, [r5, #0]
 804c1fc:	b103      	cbz	r3, 804c200 <_fstat_r+0x1c>
 804c1fe:	6023      	str	r3, [r4, #0]
 804c200:	bd38      	pop	{r3, r4, r5, pc}
 804c202:	bf00      	nop
 804c204:	24001240 	.word	0x24001240

0804c208 <_isatty_r>:
 804c208:	b538      	push	{r3, r4, r5, lr}
 804c20a:	4d06      	ldr	r5, [pc, #24]	@ (804c224 <_isatty_r+0x1c>)
 804c20c:	2300      	movs	r3, #0
 804c20e:	4604      	mov	r4, r0
 804c210:	4608      	mov	r0, r1
 804c212:	602b      	str	r3, [r5, #0]
 804c214:	f7f4 fe87 	bl	8040f26 <_isatty>
 804c218:	1c43      	adds	r3, r0, #1
 804c21a:	d102      	bne.n	804c222 <_isatty_r+0x1a>
 804c21c:	682b      	ldr	r3, [r5, #0]
 804c21e:	b103      	cbz	r3, 804c222 <_isatty_r+0x1a>
 804c220:	6023      	str	r3, [r4, #0]
 804c222:	bd38      	pop	{r3, r4, r5, pc}
 804c224:	24001240 	.word	0x24001240

0804c228 <_init>:
 804c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c22a:	bf00      	nop
 804c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804c22e:	bc08      	pop	{r3}
 804c230:	469e      	mov	lr, r3
 804c232:	4770      	bx	lr

0804c234 <_fini>:
 804c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c236:	bf00      	nop
 804c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804c23a:	bc08      	pop	{r3}
 804c23c:	469e      	mov	lr, r3
 804c23e:	4770      	bx	lr
