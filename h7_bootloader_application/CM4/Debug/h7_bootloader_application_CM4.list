
h7_bootloader_application_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ac  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0810c344  0810c344  0000d344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c37c  0810c37c  0000d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c384  0810c384  0000d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810c388  0810c388  0000d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  0810c38c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  10000010  0810c39c  0000e010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  10000070  0810c3fc  0000e070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  100000d0  0810c45c  0000e0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  100007e0  0810c45c  0000e7e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d2a0  00000000  00000000  0000e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000465d  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002490  00000000  00000000  0003fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c9a  00000000  00000000  00041e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000492e3  00000000  00000000  00043b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002debe  00000000  00000000  0008ce0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001dafe4  00000000  00000000  000baccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00295caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a110  00000000  00000000  00295cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0029fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810c32c 	.word	0x0810c32c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	0810c32c 	.word	0x0810c32c

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b0b      	ldr	r3, [pc, #44]	@ (8100638 <SystemInit+0x34>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a0a      	ldr	r2, [pc, #40]	@ (8100638 <SystemInit+0x34>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b07      	ldr	r3, [pc, #28]	@ (8100638 <SystemInit+0x34>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a06      	ldr	r2, [pc, #24]	@ (8100638 <SystemInit+0x34>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* CORE_CM7*/

#if defined(CORE_CM4)
  /* Configure the Vector Table location add offset address for cortex-M4 ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
 8100624:	4b04      	ldr	r3, [pc, #16]	@ (8100638 <SystemInit+0x34>)
 8100626:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810062a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810062c:	bf00      	nop
 810062e:	46bd      	mov	sp, r7
 8100630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100634:	4770      	bx	lr
 8100636:	bf00      	nop
 8100638:	e000ed00 	.word	0xe000ed00

0810063c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 810063c:	b480      	push	{r7}
 810063e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100640:	4b09      	ldr	r3, [pc, #36]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100642:	68db      	ldr	r3, [r3, #12]
 8100644:	4a08      	ldr	r2, [pc, #32]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100646:	f023 0302 	bic.w	r3, r3, #2
 810064a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810064c:	bf00      	nop
 810064e:	4b06      	ldr	r3, [pc, #24]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100650:	685b      	ldr	r3, [r3, #4]
 8100652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100656:	2b00      	cmp	r3, #0
 8100658:	d0f9      	beq.n	810064e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810065a:	bf00      	nop
 810065c:	bf00      	nop
 810065e:	46bd      	mov	sp, r7
 8100660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100664:	4770      	bx	lr
 8100666:	bf00      	nop
 8100668:	58024800 	.word	0x58024800

0810066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810066c:	b580      	push	{r7, lr}
 810066e:	b082      	sub	sp, #8
 8100670:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100672:	4b2a      	ldr	r3, [pc, #168]	@ (810071c <main+0xb0>)
 8100674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100678:	4a28      	ldr	r2, [pc, #160]	@ (810071c <main+0xb0>)
 810067a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810067e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100682:	4b26      	ldr	r3, [pc, #152]	@ (810071c <main+0xb0>)
 8100684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810068c:	607b      	str	r3, [r7, #4]
 810068e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100690:	2001      	movs	r0, #1
 8100692:	f004 f823 	bl	81046dc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100696:	f004 f8ad 	bl	81047f4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810069a:	2201      	movs	r2, #1
 810069c:	2102      	movs	r1, #2
 810069e:	2000      	movs	r0, #0
 81006a0:	f004 f82e 	bl	8104700 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8100720 <main+0xb4>)
 81006a6:	681b      	ldr	r3, [r3, #0]
 81006a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006ac:	2b70      	cmp	r3, #112	@ 0x70
 81006ae:	d108      	bne.n	81006c2 <main+0x56>
 81006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8100724 <main+0xb8>)
 81006b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006b6:	4a1b      	ldr	r2, [pc, #108]	@ (8100724 <main+0xb8>)
 81006b8:	f043 0301 	orr.w	r3, r3, #1
 81006bc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006c0:	e007      	b.n	81006d2 <main+0x66>
 81006c2:	4b18      	ldr	r3, [pc, #96]	@ (8100724 <main+0xb8>)
 81006c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c8:	4a16      	ldr	r2, [pc, #88]	@ (8100724 <main+0xb8>)
 81006ca:	f043 0301 	orr.w	r3, r3, #1
 81006ce:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006d2:	f001 fe2d 	bl	8102330 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006d6:	f000 fd17 	bl	8101108 <MX_GPIO_Init>
  MX_ADC1_Init();
 81006da:	f000 f825 	bl	8100728 <MX_ADC1_Init>
  MX_ADC3_Init();
 81006de:	f000 f89f 	bl	8100820 <MX_ADC3_Init>
  MX_ETH_Init();
 81006e2:	f000 f901 	bl	81008e8 <MX_ETH_Init>
  MX_FMC_Init();
 81006e6:	f000 fcc1 	bl	810106c <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 81006ea:	f000 f949 	bl	8100980 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 81006ee:	f000 f97b 	bl	81009e8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 81006f2:	f000 f9a1 	bl	8100a38 <MX_RTC_Init>
  MX_SAI1_Init();
 81006f6:	f000 f9ed 	bl	8100ad4 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 81006fa:	f000 fa8d 	bl	8100c18 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 81006fe:	f000 faaf 	bl	8100c60 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 8100702:	f000 fae5 	bl	8100cd0 <MX_SPI2_Init>
  MX_SPI5_Init();
 8100706:	f000 fb39 	bl	8100d7c <MX_SPI5_Init>
  MX_TIM8_Init();
 810070a:	f000 fb8b 	bl	8100e24 <MX_TIM8_Init>
  MX_TIM13_Init();
 810070e:	f000 fc19 	bl	8100f44 <MX_TIM13_Init>
  MX_UART8_Init();
 8100712:	f000 fc5f 	bl	8100fd4 <MX_UART8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100716:	bf00      	nop
 8100718:	e7fd      	b.n	8100716 <main+0xaa>
 810071a:	bf00      	nop
 810071c:	58024400 	.word	0x58024400
 8100720:	e000ed00 	.word	0xe000ed00
 8100724:	58026400 	.word	0x58026400

08100728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100728:	b580      	push	{r7, lr}
 810072a:	b08a      	sub	sp, #40	@ 0x28
 810072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810072e:	f107 031c 	add.w	r3, r7, #28
 8100732:	2200      	movs	r2, #0
 8100734:	601a      	str	r2, [r3, #0]
 8100736:	605a      	str	r2, [r3, #4]
 8100738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810073a:	463b      	mov	r3, r7
 810073c:	2200      	movs	r2, #0
 810073e:	601a      	str	r2, [r3, #0]
 8100740:	605a      	str	r2, [r3, #4]
 8100742:	609a      	str	r2, [r3, #8]
 8100744:	60da      	str	r2, [r3, #12]
 8100746:	611a      	str	r2, [r3, #16]
 8100748:	615a      	str	r2, [r3, #20]
 810074a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810074c:	4b31      	ldr	r3, [pc, #196]	@ (8100814 <MX_ADC1_Init+0xec>)
 810074e:	4a32      	ldr	r2, [pc, #200]	@ (8100818 <MX_ADC1_Init+0xf0>)
 8100750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8100752:	4b30      	ldr	r3, [pc, #192]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100754:	2200      	movs	r2, #0
 8100756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100758:	4b2e      	ldr	r3, [pc, #184]	@ (8100814 <MX_ADC1_Init+0xec>)
 810075a:	2200      	movs	r2, #0
 810075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810075e:	4b2d      	ldr	r3, [pc, #180]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100760:	2200      	movs	r2, #0
 8100762:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100764:	4b2b      	ldr	r3, [pc, #172]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100766:	2204      	movs	r2, #4
 8100768:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810076a:	4b2a      	ldr	r3, [pc, #168]	@ (8100814 <MX_ADC1_Init+0xec>)
 810076c:	2200      	movs	r2, #0
 810076e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100770:	4b28      	ldr	r3, [pc, #160]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100772:	2200      	movs	r2, #0
 8100774:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100776:	4b27      	ldr	r3, [pc, #156]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100778:	2201      	movs	r2, #1
 810077a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810077c:	4b25      	ldr	r3, [pc, #148]	@ (8100814 <MX_ADC1_Init+0xec>)
 810077e:	2200      	movs	r2, #0
 8100780:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100782:	4b24      	ldr	r3, [pc, #144]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100784:	2200      	movs	r2, #0
 8100786:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100788:	4b22      	ldr	r3, [pc, #136]	@ (8100814 <MX_ADC1_Init+0xec>)
 810078a:	2200      	movs	r2, #0
 810078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810078e:	4b21      	ldr	r3, [pc, #132]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100790:	2200      	movs	r2, #0
 8100792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100794:	4b1f      	ldr	r3, [pc, #124]	@ (8100814 <MX_ADC1_Init+0xec>)
 8100796:	2200      	movs	r2, #0
 8100798:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810079a:	4b1e      	ldr	r3, [pc, #120]	@ (8100814 <MX_ADC1_Init+0xec>)
 810079c:	2200      	movs	r2, #0
 810079e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8100814 <MX_ADC1_Init+0xec>)
 81007a2:	2200      	movs	r2, #0
 81007a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 81007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8100814 <MX_ADC1_Init+0xec>)
 81007aa:	2201      	movs	r2, #1
 81007ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81007ae:	4819      	ldr	r0, [pc, #100]	@ (8100814 <MX_ADC1_Init+0xec>)
 81007b0:	f002 f88a 	bl	81028c8 <HAL_ADC_Init>
 81007b4:	4603      	mov	r3, r0
 81007b6:	2b00      	cmp	r3, #0
 81007b8:	d001      	beq.n	81007be <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81007ba:	f000 fd55 	bl	8101268 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81007be:	2300      	movs	r3, #0
 81007c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81007c2:	f107 031c 	add.w	r3, r7, #28
 81007c6:	4619      	mov	r1, r3
 81007c8:	4812      	ldr	r0, [pc, #72]	@ (8100814 <MX_ADC1_Init+0xec>)
 81007ca:	f002 fe41 	bl	8103450 <HAL_ADCEx_MultiModeConfigChannel>
 81007ce:	4603      	mov	r3, r0
 81007d0:	2b00      	cmp	r3, #0
 81007d2:	d001      	beq.n	81007d8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81007d4:	f000 fd48 	bl	8101268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 81007d8:	4b10      	ldr	r3, [pc, #64]	@ (810081c <MX_ADC1_Init+0xf4>)
 81007da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81007dc:	2306      	movs	r3, #6
 81007de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81007e0:	2300      	movs	r3, #0
 81007e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81007e4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81007e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81007ea:	2304      	movs	r3, #4
 81007ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81007ee:	2300      	movs	r3, #0
 81007f0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81007f2:	2300      	movs	r3, #0
 81007f4:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81007f6:	463b      	mov	r3, r7
 81007f8:	4619      	mov	r1, r3
 81007fa:	4806      	ldr	r0, [pc, #24]	@ (8100814 <MX_ADC1_Init+0xec>)
 81007fc:	f002 fa06 	bl	8102c0c <HAL_ADC_ConfigChannel>
 8100800:	4603      	mov	r3, r0
 8100802:	2b00      	cmp	r3, #0
 8100804:	d001      	beq.n	810080a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8100806:	f000 fd2f 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810080a:	bf00      	nop
 810080c:	3728      	adds	r7, #40	@ 0x28
 810080e:	46bd      	mov	sp, r7
 8100810:	bd80      	pop	{r7, pc}
 8100812:	bf00      	nop
 8100814:	10000124 	.word	0x10000124
 8100818:	40022000 	.word	0x40022000
 810081c:	04300002 	.word	0x04300002

08100820 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8100820:	b580      	push	{r7, lr}
 8100822:	b088      	sub	sp, #32
 8100824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8100826:	1d3b      	adds	r3, r7, #4
 8100828:	2200      	movs	r2, #0
 810082a:	601a      	str	r2, [r3, #0]
 810082c:	605a      	str	r2, [r3, #4]
 810082e:	609a      	str	r2, [r3, #8]
 8100830:	60da      	str	r2, [r3, #12]
 8100832:	611a      	str	r2, [r3, #16]
 8100834:	615a      	str	r2, [r3, #20]
 8100836:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100838:	4b29      	ldr	r3, [pc, #164]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 810083a:	4a2a      	ldr	r2, [pc, #168]	@ (81008e4 <MX_ADC3_Init+0xc4>)
 810083c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810083e:	4b28      	ldr	r3, [pc, #160]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100840:	2200      	movs	r2, #0
 8100842:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100844:	4b26      	ldr	r3, [pc, #152]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100846:	2200      	movs	r2, #0
 8100848:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810084a:	4b25      	ldr	r3, [pc, #148]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 810084c:	2204      	movs	r2, #4
 810084e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100850:	4b23      	ldr	r3, [pc, #140]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100852:	2200      	movs	r2, #0
 8100854:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100856:	4b22      	ldr	r3, [pc, #136]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100858:	2200      	movs	r2, #0
 810085a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810085c:	4b20      	ldr	r3, [pc, #128]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 810085e:	2201      	movs	r2, #1
 8100860:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100862:	4b1f      	ldr	r3, [pc, #124]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100864:	2200      	movs	r2, #0
 8100866:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100868:	4b1d      	ldr	r3, [pc, #116]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 810086a:	2200      	movs	r2, #0
 810086c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810086e:	4b1c      	ldr	r3, [pc, #112]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100870:	2200      	movs	r2, #0
 8100872:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100874:	4b1a      	ldr	r3, [pc, #104]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100876:	2200      	movs	r2, #0
 8100878:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810087a:	4b19      	ldr	r3, [pc, #100]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 810087c:	2200      	movs	r2, #0
 810087e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100880:	4b17      	ldr	r3, [pc, #92]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100882:	2200      	movs	r2, #0
 8100884:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100886:	4b16      	ldr	r3, [pc, #88]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100888:	2200      	movs	r2, #0
 810088a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 810088e:	4b14      	ldr	r3, [pc, #80]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100890:	2201      	movs	r2, #1
 8100892:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100894:	4812      	ldr	r0, [pc, #72]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 8100896:	f002 f817 	bl	81028c8 <HAL_ADC_Init>
 810089a:	4603      	mov	r3, r0
 810089c:	2b00      	cmp	r3, #0
 810089e:	d001      	beq.n	81008a4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 81008a0:	f000 fce2 	bl	8101268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81008a4:	2301      	movs	r3, #1
 81008a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81008a8:	2306      	movs	r3, #6
 81008aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81008ac:	2300      	movs	r3, #0
 81008ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81008b0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81008b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81008b6:	2304      	movs	r3, #4
 81008b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81008ba:	2300      	movs	r3, #0
 81008bc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81008be:	2300      	movs	r3, #0
 81008c0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81008c2:	1d3b      	adds	r3, r7, #4
 81008c4:	4619      	mov	r1, r3
 81008c6:	4806      	ldr	r0, [pc, #24]	@ (81008e0 <MX_ADC3_Init+0xc0>)
 81008c8:	f002 f9a0 	bl	8102c0c <HAL_ADC_ConfigChannel>
 81008cc:	4603      	mov	r3, r0
 81008ce:	2b00      	cmp	r3, #0
 81008d0:	d001      	beq.n	81008d6 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 81008d2:	f000 fcc9 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81008d6:	bf00      	nop
 81008d8:	3720      	adds	r7, #32
 81008da:	46bd      	mov	sp, r7
 81008dc:	bd80      	pop	{r7, pc}
 81008de:	bf00      	nop
 81008e0:	10000188 	.word	0x10000188
 81008e4:	58026000 	.word	0x58026000

081008e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 81008e8:	b580      	push	{r7, lr}
 81008ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8100968 <MX_ETH_Init+0x80>)
 81008ee:	4a1f      	ldr	r2, [pc, #124]	@ (810096c <MX_ETH_Init+0x84>)
 81008f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8100970 <MX_ETH_Init+0x88>)
 81008f4:	2200      	movs	r2, #0
 81008f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 81008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8100970 <MX_ETH_Init+0x88>)
 81008fa:	2280      	movs	r2, #128	@ 0x80
 81008fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 81008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8100970 <MX_ETH_Init+0x88>)
 8100900:	22e1      	movs	r2, #225	@ 0xe1
 8100902:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100904:	4b1a      	ldr	r3, [pc, #104]	@ (8100970 <MX_ETH_Init+0x88>)
 8100906:	2200      	movs	r2, #0
 8100908:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810090a:	4b19      	ldr	r3, [pc, #100]	@ (8100970 <MX_ETH_Init+0x88>)
 810090c:	2200      	movs	r2, #0
 810090e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100910:	4b17      	ldr	r3, [pc, #92]	@ (8100970 <MX_ETH_Init+0x88>)
 8100912:	2200      	movs	r2, #0
 8100914:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8100916:	4b14      	ldr	r3, [pc, #80]	@ (8100968 <MX_ETH_Init+0x80>)
 8100918:	4a15      	ldr	r2, [pc, #84]	@ (8100970 <MX_ETH_Init+0x88>)
 810091a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 810091c:	4b12      	ldr	r3, [pc, #72]	@ (8100968 <MX_ETH_Init+0x80>)
 810091e:	2201      	movs	r2, #1
 8100920:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100922:	4b11      	ldr	r3, [pc, #68]	@ (8100968 <MX_ETH_Init+0x80>)
 8100924:	4a13      	ldr	r2, [pc, #76]	@ (8100974 <MX_ETH_Init+0x8c>)
 8100926:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100928:	4b0f      	ldr	r3, [pc, #60]	@ (8100968 <MX_ETH_Init+0x80>)
 810092a:	4a13      	ldr	r2, [pc, #76]	@ (8100978 <MX_ETH_Init+0x90>)
 810092c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 810092e:	4b0e      	ldr	r3, [pc, #56]	@ (8100968 <MX_ETH_Init+0x80>)
 8100930:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8100934:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100936:	480c      	ldr	r0, [pc, #48]	@ (8100968 <MX_ETH_Init+0x80>)
 8100938:	f003 f8ec 	bl	8103b14 <HAL_ETH_Init>
 810093c:	4603      	mov	r3, r0
 810093e:	2b00      	cmp	r3, #0
 8100940:	d001      	beq.n	8100946 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100942:	f000 fc91 	bl	8101268 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100946:	2238      	movs	r2, #56	@ 0x38
 8100948:	2100      	movs	r1, #0
 810094a:	480c      	ldr	r0, [pc, #48]	@ (810097c <MX_ETH_Init+0x94>)
 810094c:	f00b fcc2 	bl	810c2d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100950:	4b0a      	ldr	r3, [pc, #40]	@ (810097c <MX_ETH_Init+0x94>)
 8100952:	2221      	movs	r2, #33	@ 0x21
 8100954:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100956:	4b09      	ldr	r3, [pc, #36]	@ (810097c <MX_ETH_Init+0x94>)
 8100958:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 810095c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 810095e:	4b07      	ldr	r3, [pc, #28]	@ (810097c <MX_ETH_Init+0x94>)
 8100960:	2200      	movs	r2, #0
 8100962:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100964:	bf00      	nop
 8100966:	bd80      	pop	{r7, pc}
 8100968:	100001ec 	.word	0x100001ec
 810096c:	40028000 	.word	0x40028000
 8100970:	100007cc 	.word	0x100007cc
 8100974:	10000070 	.word	0x10000070
 8100978:	10000010 	.word	0x10000010
 810097c:	100000ec 	.word	0x100000ec

08100980 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100980:	b580      	push	{r7, lr}
 8100982:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100984:	4b15      	ldr	r3, [pc, #84]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 8100986:	4a16      	ldr	r2, [pc, #88]	@ (81009e0 <MX_HDMI_CEC_Init+0x60>)
 8100988:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 810098a:	4b14      	ldr	r3, [pc, #80]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 810098c:	2200      	movs	r2, #0
 810098e:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100990:	4b12      	ldr	r3, [pc, #72]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 8100992:	2200      	movs	r2, #0
 8100994:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100996:	4b11      	ldr	r3, [pc, #68]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 8100998:	2210      	movs	r2, #16
 810099a:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 810099c:	4b0f      	ldr	r3, [pc, #60]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 810099e:	2200      	movs	r2, #0
 81009a0:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 81009a2:	4b0e      	ldr	r3, [pc, #56]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009a4:	2200      	movs	r2, #0
 81009a6:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81009a8:	4b0c      	ldr	r3, [pc, #48]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009aa:	2200      	movs	r2, #0
 81009ac:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81009ae:	4b0b      	ldr	r3, [pc, #44]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009b0:	2200      	movs	r2, #0
 81009b2:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 81009b4:	4b09      	ldr	r3, [pc, #36]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81009ba:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 81009bc:	4b07      	ldr	r3, [pc, #28]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009be:	2200      	movs	r2, #0
 81009c0:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 81009c2:	4b06      	ldr	r3, [pc, #24]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009c4:	4a07      	ldr	r2, [pc, #28]	@ (81009e4 <MX_HDMI_CEC_Init+0x64>)
 81009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 81009c8:	4804      	ldr	r0, [pc, #16]	@ (81009dc <MX_HDMI_CEC_Init+0x5c>)
 81009ca:	f002 fe23 	bl	8103614 <HAL_CEC_Init>
 81009ce:	4603      	mov	r3, r0
 81009d0:	2b00      	cmp	r3, #0
 81009d2:	d001      	beq.n	81009d8 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 81009d4:	f000 fc48 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 81009d8:	bf00      	nop
 81009da:	bd80      	pop	{r7, pc}
 81009dc:	1000029c 	.word	0x1000029c
 81009e0:	40006c00 	.word	0x40006c00
 81009e4:	100007bc 	.word	0x100007bc

081009e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 81009e8:	b580      	push	{r7, lr}
 81009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 81009ec:	4b10      	ldr	r3, [pc, #64]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 81009ee:	4a11      	ldr	r2, [pc, #68]	@ (8100a34 <MX_QUADSPI_Init+0x4c>)
 81009f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 81009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 81009f4:	22ff      	movs	r2, #255	@ 0xff
 81009f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 81009f8:	4b0d      	ldr	r3, [pc, #52]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 81009fa:	2201      	movs	r2, #1
 81009fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 81009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 8100a00:	2200      	movs	r2, #0
 8100a02:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100a04:	4b0a      	ldr	r3, [pc, #40]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 8100a06:	2201      	movs	r2, #1
 8100a08:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100a0a:	4b09      	ldr	r3, [pc, #36]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 8100a0c:	2200      	movs	r2, #0
 8100a0e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100a10:	4b07      	ldr	r3, [pc, #28]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 8100a12:	2200      	movs	r2, #0
 8100a14:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8100a16:	4b06      	ldr	r3, [pc, #24]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 8100a18:	2240      	movs	r2, #64	@ 0x40
 8100a1a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100a1c:	4804      	ldr	r0, [pc, #16]	@ (8100a30 <MX_QUADSPI_Init+0x48>)
 8100a1e:	f003 fef7 	bl	8104810 <HAL_QSPI_Init>
 8100a22:	4603      	mov	r3, r0
 8100a24:	2b00      	cmp	r3, #0
 8100a26:	d001      	beq.n	8100a2c <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8100a28:	f000 fc1e 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100a2c:	bf00      	nop
 8100a2e:	bd80      	pop	{r7, pc}
 8100a30:	100002e0 	.word	0x100002e0
 8100a34:	52005000 	.word	0x52005000

08100a38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100a38:	b580      	push	{r7, lr}
 8100a3a:	b08a      	sub	sp, #40	@ 0x28
 8100a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100a3e:	463b      	mov	r3, r7
 8100a40:	2228      	movs	r2, #40	@ 0x28
 8100a42:	2100      	movs	r1, #0
 8100a44:	4618      	mov	r0, r3
 8100a46:	f00b fc45 	bl	810c2d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100a4a:	4b20      	ldr	r3, [pc, #128]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a4c:	4a20      	ldr	r2, [pc, #128]	@ (8100ad0 <MX_RTC_Init+0x98>)
 8100a4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100a50:	4b1e      	ldr	r3, [pc, #120]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a52:	2200      	movs	r2, #0
 8100a54:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100a56:	4b1d      	ldr	r3, [pc, #116]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a58:	227f      	movs	r2, #127	@ 0x7f
 8100a5a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a5e:	22ff      	movs	r2, #255	@ 0xff
 8100a60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100a62:	4b1a      	ldr	r3, [pc, #104]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a64:	2200      	movs	r2, #0
 8100a66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100a68:	4b18      	ldr	r3, [pc, #96]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a6a:	2200      	movs	r2, #0
 8100a6c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100a6e:	4b17      	ldr	r3, [pc, #92]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a70:	2200      	movs	r2, #0
 8100a72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100a74:	4b15      	ldr	r3, [pc, #84]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a76:	2200      	movs	r2, #0
 8100a78:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100a7a:	4814      	ldr	r0, [pc, #80]	@ (8100acc <MX_RTC_Init+0x94>)
 8100a7c:	f006 fe98 	bl	81077b0 <HAL_RTC_Init>
 8100a80:	4603      	mov	r3, r0
 8100a82:	2b00      	cmp	r3, #0
 8100a84:	d001      	beq.n	8100a8a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100a86:	f000 fbef 	bl	8101268 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100a8a:	2301      	movs	r3, #1
 8100a8c:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100a8e:	2301      	movs	r3, #1
 8100a90:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100a92:	2300      	movs	r3, #0
 8100a94:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100a96:	2300      	movs	r3, #0
 8100a98:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100a9a:	2300      	movs	r3, #0
 8100a9c:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100a9e:	2300      	movs	r3, #0
 8100aa0:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100aa2:	2300      	movs	r3, #0
 8100aa4:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100aa6:	2300      	movs	r3, #0
 8100aa8:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100aaa:	2380      	movs	r3, #128	@ 0x80
 8100aac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100aae:	463b      	mov	r3, r7
 8100ab0:	4619      	mov	r1, r3
 8100ab2:	4806      	ldr	r0, [pc, #24]	@ (8100acc <MX_RTC_Init+0x94>)
 8100ab4:	f006 ff94 	bl	81079e0 <HAL_RTCEx_SetTamper>
 8100ab8:	4603      	mov	r3, r0
 8100aba:	2b00      	cmp	r3, #0
 8100abc:	d001      	beq.n	8100ac2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100abe:	f000 fbd3 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100ac2:	bf00      	nop
 8100ac4:	3728      	adds	r7, #40	@ 0x28
 8100ac6:	46bd      	mov	sp, r7
 8100ac8:	bd80      	pop	{r7, pc}
 8100aca:	bf00      	nop
 8100acc:	1000032c 	.word	0x1000032c
 8100ad0:	58004000 	.word	0x58004000

08100ad4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100ad4:	b580      	push	{r7, lr}
 8100ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100ada:	4a4b      	ldr	r2, [pc, #300]	@ (8100c08 <MX_SAI1_Init+0x134>)
 8100adc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100ade:	4b49      	ldr	r3, [pc, #292]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100ae0:	2200      	movs	r2, #0
 8100ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100ae4:	4b47      	ldr	r3, [pc, #284]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100ae6:	2200      	movs	r2, #0
 8100ae8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100aea:	4b46      	ldr	r3, [pc, #280]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100aec:	2240      	movs	r2, #64	@ 0x40
 8100aee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100af0:	4b44      	ldr	r3, [pc, #272]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100af2:	2200      	movs	r2, #0
 8100af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100af6:	4b43      	ldr	r3, [pc, #268]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100af8:	2200      	movs	r2, #0
 8100afa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100afc:	4b41      	ldr	r3, [pc, #260]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100afe:	2200      	movs	r2, #0
 8100b00:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100b02:	4b40      	ldr	r3, [pc, #256]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b04:	2200      	movs	r2, #0
 8100b06:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100b08:	4b3e      	ldr	r3, [pc, #248]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b0a:	2200      	movs	r2, #0
 8100b0c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b10:	2200      	movs	r2, #0
 8100b12:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100b14:	4b3b      	ldr	r3, [pc, #236]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b16:	2200      	movs	r2, #0
 8100b18:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8100c0c <MX_SAI1_Init+0x138>)
 8100b1e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100b20:	4b38      	ldr	r3, [pc, #224]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b22:	2200      	movs	r2, #0
 8100b24:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100b26:	4b37      	ldr	r3, [pc, #220]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b28:	2200      	movs	r2, #0
 8100b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100b2c:	4b35      	ldr	r3, [pc, #212]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b2e:	2200      	movs	r2, #0
 8100b30:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100b32:	4b34      	ldr	r3, [pc, #208]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b34:	2200      	movs	r2, #0
 8100b36:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100b38:	4b32      	ldr	r3, [pc, #200]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b3a:	2200      	movs	r2, #0
 8100b3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100b40:	4b30      	ldr	r3, [pc, #192]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b42:	2201      	movs	r2, #1
 8100b44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100b46:	4b2f      	ldr	r3, [pc, #188]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b50:	2208      	movs	r2, #8
 8100b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100b54:	4b2b      	ldr	r3, [pc, #172]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b56:	2201      	movs	r2, #1
 8100b58:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b5c:	2200      	movs	r2, #0
 8100b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100b60:	4b28      	ldr	r3, [pc, #160]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b62:	2200      	movs	r2, #0
 8100b64:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100b66:	4b27      	ldr	r3, [pc, #156]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b68:	2200      	movs	r2, #0
 8100b6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100b6c:	4b25      	ldr	r3, [pc, #148]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b6e:	2200      	movs	r2, #0
 8100b70:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100b72:	4b24      	ldr	r3, [pc, #144]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100b78:	4b22      	ldr	r3, [pc, #136]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b7a:	2201      	movs	r2, #1
 8100b7c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100b7e:	4b21      	ldr	r3, [pc, #132]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b80:	2200      	movs	r2, #0
 8100b82:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100b84:	481f      	ldr	r0, [pc, #124]	@ (8100c04 <MX_SAI1_Init+0x130>)
 8100b86:	f007 f80b 	bl	8107ba0 <HAL_SAI_Init>
 8100b8a:	4603      	mov	r3, r0
 8100b8c:	2b00      	cmp	r3, #0
 8100b8e:	d001      	beq.n	8100b94 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100b90:	f000 fb6a 	bl	8101268 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100b94:	4b1e      	ldr	r3, [pc, #120]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100b96:	4a1f      	ldr	r2, [pc, #124]	@ (8100c14 <MX_SAI1_Init+0x140>)
 8100b98:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100b9c:	2204      	movs	r2, #4
 8100b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100ba2:	2200      	movs	r2, #0
 8100ba4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100ba8:	2200      	movs	r2, #0
 8100baa:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100bac:	4b18      	ldr	r3, [pc, #96]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bae:	2200      	movs	r2, #0
 8100bb0:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100bb2:	4b17      	ldr	r3, [pc, #92]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bb4:	2200      	movs	r2, #0
 8100bb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100bb8:	4b15      	ldr	r3, [pc, #84]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bba:	2200      	movs	r2, #0
 8100bbc:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100bbe:	4b14      	ldr	r3, [pc, #80]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bc0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100bc4:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100bc6:	4b12      	ldr	r3, [pc, #72]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bc8:	2200      	movs	r2, #0
 8100bca:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100bcc:	4b10      	ldr	r3, [pc, #64]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bce:	2200      	movs	r2, #0
 8100bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bd4:	2200      	movs	r2, #0
 8100bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bda:	2200      	movs	r2, #0
 8100bdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100be0:	4b0b      	ldr	r3, [pc, #44]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100be2:	2201      	movs	r2, #1
 8100be4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100be6:	4b0a      	ldr	r3, [pc, #40]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100bec:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100bee:	4808      	ldr	r0, [pc, #32]	@ (8100c10 <MX_SAI1_Init+0x13c>)
 8100bf0:	f006 ffd6 	bl	8107ba0 <HAL_SAI_Init>
 8100bf4:	4603      	mov	r3, r0
 8100bf6:	2b00      	cmp	r3, #0
 8100bf8:	d001      	beq.n	8100bfe <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100bfa:	f000 fb35 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100bfe:	bf00      	nop
 8100c00:	bd80      	pop	{r7, pc}
 8100c02:	bf00      	nop
 8100c04:	10000350 	.word	0x10000350
 8100c08:	40015804 	.word	0x40015804
 8100c0c:	0002ee00 	.word	0x0002ee00
 8100c10:	100003e8 	.word	0x100003e8
 8100c14:	40015824 	.word	0x40015824

08100c18 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100c18:	b580      	push	{r7, lr}
 8100c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8100c5c <MX_SDMMC1_SD_Init+0x44>)
 8100c20:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100c22:	4b0d      	ldr	r3, [pc, #52]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c24:	2200      	movs	r2, #0
 8100c26:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100c28:	4b0b      	ldr	r3, [pc, #44]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c2a:	2200      	movs	r2, #0
 8100c2c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c30:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100c34:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100c36:	4b08      	ldr	r3, [pc, #32]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c38:	2200      	movs	r2, #0
 8100c3a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100c3c:	4b06      	ldr	r3, [pc, #24]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c3e:	2200      	movs	r2, #0
 8100c40:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100c42:	4805      	ldr	r0, [pc, #20]	@ (8100c58 <MX_SDMMC1_SD_Init+0x40>)
 8100c44:	f007 fa90 	bl	8108168 <HAL_SD_Init>
 8100c48:	4603      	mov	r3, r0
 8100c4a:	2b00      	cmp	r3, #0
 8100c4c:	d001      	beq.n	8100c52 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8100c4e:	f000 fb0b 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100c52:	bf00      	nop
 8100c54:	bd80      	pop	{r7, pc}
 8100c56:	bf00      	nop
 8100c58:	10000480 	.word	0x10000480
 8100c5c:	52007000 	.word	0x52007000

08100c60 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100c60:	b580      	push	{r7, lr}
 8100c62:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100c64:	4b19      	ldr	r3, [pc, #100]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c66:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100c6a:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100c6c:	4b17      	ldr	r3, [pc, #92]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c6e:	2200      	movs	r2, #0
 8100c70:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100c72:	4b16      	ldr	r3, [pc, #88]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c74:	2200      	movs	r2, #0
 8100c76:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100c78:	4b14      	ldr	r3, [pc, #80]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c7a:	2200      	movs	r2, #0
 8100c7c:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100c7e:	4b13      	ldr	r3, [pc, #76]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c80:	2200      	movs	r2, #0
 8100c82:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100c84:	4b11      	ldr	r3, [pc, #68]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c86:	2200      	movs	r2, #0
 8100c88:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100c8a:	4b10      	ldr	r3, [pc, #64]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c8c:	2200      	movs	r2, #0
 8100c8e:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100c90:	4b0e      	ldr	r3, [pc, #56]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c92:	2200      	movs	r2, #0
 8100c94:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100c96:	4b0d      	ldr	r3, [pc, #52]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c98:	2200      	movs	r2, #0
 8100c9a:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100c9e:	2200      	movs	r2, #0
 8100ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100ca4:	2200      	movs	r2, #0
 8100ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100ca8:	4b08      	ldr	r3, [pc, #32]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100caa:	2200      	movs	r2, #0
 8100cac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100cb0:	4b06      	ldr	r3, [pc, #24]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100cb2:	2200      	movs	r2, #0
 8100cb4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100cb8:	4804      	ldr	r0, [pc, #16]	@ (8100ccc <MX_SPDIFRX1_Init+0x6c>)
 8100cba:	f008 faff 	bl	81092bc <HAL_SPDIFRX_Init>
 8100cbe:	4603      	mov	r3, r0
 8100cc0:	2b00      	cmp	r3, #0
 8100cc2:	d001      	beq.n	8100cc8 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100cc4:	f000 fad0 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100cc8:	bf00      	nop
 8100cca:	bd80      	pop	{r7, pc}
 8100ccc:	100004fc 	.word	0x100004fc

08100cd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100cd0:	b580      	push	{r7, lr}
 8100cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100cd4:	4b27      	ldr	r3, [pc, #156]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100cd6:	4a28      	ldr	r2, [pc, #160]	@ (8100d78 <MX_SPI2_Init+0xa8>)
 8100cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100cda:	4b26      	ldr	r3, [pc, #152]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100cdc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100ce0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100ce2:	4b24      	ldr	r3, [pc, #144]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100ce4:	2200      	movs	r2, #0
 8100ce6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100ce8:	4b22      	ldr	r3, [pc, #136]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100cea:	2203      	movs	r2, #3
 8100cec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100cee:	4b21      	ldr	r3, [pc, #132]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100cf0:	2200      	movs	r2, #0
 8100cf2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100cf6:	2200      	movs	r2, #0
 8100cf8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8100cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100cfc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100d00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100d02:	4b1c      	ldr	r3, [pc, #112]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d04:	2200      	movs	r2, #0
 8100d06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100d08:	4b1a      	ldr	r3, [pc, #104]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d0a:	2200      	movs	r2, #0
 8100d0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100d0e:	4b19      	ldr	r3, [pc, #100]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d10:	2200      	movs	r2, #0
 8100d12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100d14:	4b17      	ldr	r3, [pc, #92]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d16:	2200      	movs	r2, #0
 8100d18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100d1a:	4b16      	ldr	r3, [pc, #88]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d1c:	2200      	movs	r2, #0
 8100d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100d20:	4b14      	ldr	r3, [pc, #80]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100d26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100d28:	4b12      	ldr	r3, [pc, #72]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d2a:	2200      	movs	r2, #0
 8100d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100d2e:	4b11      	ldr	r3, [pc, #68]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d30:	2200      	movs	r2, #0
 8100d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d34:	4b0f      	ldr	r3, [pc, #60]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d36:	2200      	movs	r2, #0
 8100d38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d3c:	2200      	movs	r2, #0
 8100d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100d40:	4b0c      	ldr	r3, [pc, #48]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d42:	2200      	movs	r2, #0
 8100d44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100d46:	4b0b      	ldr	r3, [pc, #44]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d48:	2200      	movs	r2, #0
 8100d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100d4c:	4b09      	ldr	r3, [pc, #36]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d4e:	2200      	movs	r2, #0
 8100d50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100d52:	4b08      	ldr	r3, [pc, #32]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d54:	2200      	movs	r2, #0
 8100d56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100d58:	4b06      	ldr	r3, [pc, #24]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d5a:	2200      	movs	r2, #0
 8100d5c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100d5e:	4805      	ldr	r0, [pc, #20]	@ (8100d74 <MX_SPI2_Init+0xa4>)
 8100d60:	f008 fb1a 	bl	8109398 <HAL_SPI_Init>
 8100d64:	4603      	mov	r3, r0
 8100d66:	2b00      	cmp	r3, #0
 8100d68:	d001      	beq.n	8100d6e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8100d6a:	f000 fa7d 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100d6e:	bf00      	nop
 8100d70:	bd80      	pop	{r7, pc}
 8100d72:	bf00      	nop
 8100d74:	1000054c 	.word	0x1000054c
 8100d78:	40003800 	.word	0x40003800

08100d7c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100d7c:	b580      	push	{r7, lr}
 8100d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100d80:	4b26      	ldr	r3, [pc, #152]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100d82:	4a27      	ldr	r2, [pc, #156]	@ (8100e20 <MX_SPI5_Init+0xa4>)
 8100d84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100d86:	4b25      	ldr	r3, [pc, #148]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100d88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100d8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100d8e:	4b23      	ldr	r3, [pc, #140]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100d90:	2200      	movs	r2, #0
 8100d92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100d94:	4b21      	ldr	r3, [pc, #132]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100d96:	2203      	movs	r2, #3
 8100d98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100d9a:	4b20      	ldr	r3, [pc, #128]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100da0:	4b1e      	ldr	r3, [pc, #120]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100da2:	2200      	movs	r2, #0
 8100da4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100da6:	4b1d      	ldr	r3, [pc, #116]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100da8:	2200      	movs	r2, #0
 8100daa:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100dac:	4b1b      	ldr	r3, [pc, #108]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dae:	2200      	movs	r2, #0
 8100db0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100db2:	4b1a      	ldr	r3, [pc, #104]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100db4:	2200      	movs	r2, #0
 8100db6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100db8:	4b18      	ldr	r3, [pc, #96]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dba:	2200      	movs	r2, #0
 8100dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100dbe:	4b17      	ldr	r3, [pc, #92]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dc0:	2200      	movs	r2, #0
 8100dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100dc4:	4b15      	ldr	r3, [pc, #84]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dc6:	2200      	movs	r2, #0
 8100dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100dca:	4b14      	ldr	r3, [pc, #80]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dcc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100dd2:	4b12      	ldr	r3, [pc, #72]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dd4:	2200      	movs	r2, #0
 8100dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100dd8:	4b10      	ldr	r3, [pc, #64]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dda:	2200      	movs	r2, #0
 8100ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100dde:	4b0f      	ldr	r3, [pc, #60]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100de0:	2200      	movs	r2, #0
 8100de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100de4:	4b0d      	ldr	r3, [pc, #52]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100de6:	2200      	movs	r2, #0
 8100de8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100dea:	4b0c      	ldr	r3, [pc, #48]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100df0:	4b0a      	ldr	r3, [pc, #40]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100df2:	2200      	movs	r2, #0
 8100df4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100df6:	4b09      	ldr	r3, [pc, #36]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100df8:	2200      	movs	r2, #0
 8100dfa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100dfc:	4b07      	ldr	r3, [pc, #28]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100dfe:	2200      	movs	r2, #0
 8100e00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e02:	4b06      	ldr	r3, [pc, #24]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100e04:	2200      	movs	r2, #0
 8100e06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100e08:	4804      	ldr	r0, [pc, #16]	@ (8100e1c <MX_SPI5_Init+0xa0>)
 8100e0a:	f008 fac5 	bl	8109398 <HAL_SPI_Init>
 8100e0e:	4603      	mov	r3, r0
 8100e10:	2b00      	cmp	r3, #0
 8100e12:	d001      	beq.n	8100e18 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100e14:	f000 fa28 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100e18:	bf00      	nop
 8100e1a:	bd80      	pop	{r7, pc}
 8100e1c:	100005d4 	.word	0x100005d4
 8100e20:	40015000 	.word	0x40015000

08100e24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b096      	sub	sp, #88	@ 0x58
 8100e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100e2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100e2e:	2200      	movs	r2, #0
 8100e30:	601a      	str	r2, [r3, #0]
 8100e32:	605a      	str	r2, [r3, #4]
 8100e34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100e36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100e3a:	2200      	movs	r2, #0
 8100e3c:	601a      	str	r2, [r3, #0]
 8100e3e:	605a      	str	r2, [r3, #4]
 8100e40:	609a      	str	r2, [r3, #8]
 8100e42:	60da      	str	r2, [r3, #12]
 8100e44:	611a      	str	r2, [r3, #16]
 8100e46:	615a      	str	r2, [r3, #20]
 8100e48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100e4a:	1d3b      	adds	r3, r7, #4
 8100e4c:	222c      	movs	r2, #44	@ 0x2c
 8100e4e:	2100      	movs	r1, #0
 8100e50:	4618      	mov	r0, r3
 8100e52:	f00b fa3f 	bl	810c2d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100e56:	4b39      	ldr	r3, [pc, #228]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e58:	4a39      	ldr	r2, [pc, #228]	@ (8100f40 <MX_TIM8_Init+0x11c>)
 8100e5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100e5c:	4b37      	ldr	r3, [pc, #220]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e5e:	2200      	movs	r2, #0
 8100e60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100e62:	4b36      	ldr	r3, [pc, #216]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e64:	2200      	movs	r2, #0
 8100e66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100e68:	4b34      	ldr	r3, [pc, #208]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100e6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100e70:	4b32      	ldr	r3, [pc, #200]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e72:	2200      	movs	r2, #0
 8100e74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100e76:	4b31      	ldr	r3, [pc, #196]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e78:	2200      	movs	r2, #0
 8100e7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e7e:	2200      	movs	r2, #0
 8100e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100e82:	482e      	ldr	r0, [pc, #184]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100e84:	f008 fc1e 	bl	81096c4 <HAL_TIM_OC_Init>
 8100e88:	4603      	mov	r3, r0
 8100e8a:	2b00      	cmp	r3, #0
 8100e8c:	d001      	beq.n	8100e92 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100e8e:	f000 f9eb 	bl	8101268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100e92:	2300      	movs	r3, #0
 8100e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100e96:	2300      	movs	r3, #0
 8100e98:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100e9a:	2300      	movs	r3, #0
 8100e9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100e9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100ea2:	4619      	mov	r1, r3
 8100ea4:	4825      	ldr	r0, [pc, #148]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100ea6:	f009 fa7b 	bl	810a3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8100eaa:	4603      	mov	r3, r0
 8100eac:	2b00      	cmp	r3, #0
 8100eae:	d001      	beq.n	8100eb4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100eb0:	f000 f9da 	bl	8101268 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100eb4:	2300      	movs	r3, #0
 8100eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8100eb8:	2300      	movs	r3, #0
 8100eba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100ebc:	2300      	movs	r3, #0
 8100ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100ec0:	2300      	movs	r3, #0
 8100ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100ec4:	2300      	movs	r3, #0
 8100ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100ec8:	2300      	movs	r3, #0
 8100eca:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100ecc:	2300      	movs	r3, #0
 8100ece:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100ed0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100ed4:	2204      	movs	r2, #4
 8100ed6:	4619      	mov	r1, r3
 8100ed8:	4818      	ldr	r0, [pc, #96]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100eda:	f008 fcab 	bl	8109834 <HAL_TIM_OC_ConfigChannel>
 8100ede:	4603      	mov	r3, r0
 8100ee0:	2b00      	cmp	r3, #0
 8100ee2:	d001      	beq.n	8100ee8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100ee4:	f000 f9c0 	bl	8101268 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100ee8:	2300      	movs	r3, #0
 8100eea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100eec:	2300      	movs	r3, #0
 8100eee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100ef0:	2300      	movs	r3, #0
 8100ef2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100ef4:	2300      	movs	r3, #0
 8100ef6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100ef8:	2300      	movs	r3, #0
 8100efa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100f00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100f02:	2300      	movs	r3, #0
 8100f04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100f06:	2300      	movs	r3, #0
 8100f08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100f0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8100f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100f10:	2300      	movs	r3, #0
 8100f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100f14:	2300      	movs	r3, #0
 8100f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100f18:	1d3b      	adds	r3, r7, #4
 8100f1a:	4619      	mov	r1, r3
 8100f1c:	4807      	ldr	r0, [pc, #28]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100f1e:	f009 facd 	bl	810a4bc <HAL_TIMEx_ConfigBreakDeadTime>
 8100f22:	4603      	mov	r3, r0
 8100f24:	2b00      	cmp	r3, #0
 8100f26:	d001      	beq.n	8100f2c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100f28:	f000 f99e 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100f2c:	4803      	ldr	r0, [pc, #12]	@ (8100f3c <MX_TIM8_Init+0x118>)
 8100f2e:	f000 ff35 	bl	8101d9c <HAL_TIM_MspPostInit>

}
 8100f32:	bf00      	nop
 8100f34:	3758      	adds	r7, #88	@ 0x58
 8100f36:	46bd      	mov	sp, r7
 8100f38:	bd80      	pop	{r7, pc}
 8100f3a:	bf00      	nop
 8100f3c:	1000065c 	.word	0x1000065c
 8100f40:	40010400 	.word	0x40010400

08100f44 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100f44:	b580      	push	{r7, lr}
 8100f46:	b084      	sub	sp, #16
 8100f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8100f4a:	463b      	mov	r3, r7
 8100f4c:	2200      	movs	r2, #0
 8100f4e:	601a      	str	r2, [r3, #0]
 8100f50:	605a      	str	r2, [r3, #4]
 8100f52:	609a      	str	r2, [r3, #8]
 8100f54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100f56:	4b1d      	ldr	r3, [pc, #116]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f58:	4a1d      	ldr	r2, [pc, #116]	@ (8100fd0 <MX_TIM13_Init+0x8c>)
 8100f5a:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f5e:	2200      	movs	r2, #0
 8100f60:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f62:	4b1a      	ldr	r3, [pc, #104]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f64:	2200      	movs	r2, #0
 8100f66:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100f68:	4b18      	ldr	r3, [pc, #96]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100f6e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100f70:	4b16      	ldr	r3, [pc, #88]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f72:	2200      	movs	r2, #0
 8100f74:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100f76:	4b15      	ldr	r3, [pc, #84]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f78:	2200      	movs	r2, #0
 8100f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100f7c:	4813      	ldr	r0, [pc, #76]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f7e:	f008 fb4a 	bl	8109616 <HAL_TIM_Base_Init>
 8100f82:	4603      	mov	r3, r0
 8100f84:	2b00      	cmp	r3, #0
 8100f86:	d001      	beq.n	8100f8c <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8100f88:	f000 f96e 	bl	8101268 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100f8c:	480f      	ldr	r0, [pc, #60]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100f8e:	f008 fbf0 	bl	8109772 <HAL_TIM_IC_Init>
 8100f92:	4603      	mov	r3, r0
 8100f94:	2b00      	cmp	r3, #0
 8100f96:	d001      	beq.n	8100f9c <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8100f98:	f000 f966 	bl	8101268 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100f9c:	2300      	movs	r3, #0
 8100f9e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100fa0:	2301      	movs	r3, #1
 8100fa2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100fa4:	2300      	movs	r3, #0
 8100fa6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100fa8:	2300      	movs	r3, #0
 8100faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100fac:	463b      	mov	r3, r7
 8100fae:	2200      	movs	r2, #0
 8100fb0:	4619      	mov	r1, r3
 8100fb2:	4806      	ldr	r0, [pc, #24]	@ (8100fcc <MX_TIM13_Init+0x88>)
 8100fb4:	f008 fcb8 	bl	8109928 <HAL_TIM_IC_ConfigChannel>
 8100fb8:	4603      	mov	r3, r0
 8100fba:	2b00      	cmp	r3, #0
 8100fbc:	d001      	beq.n	8100fc2 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8100fbe:	f000 f953 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100fc2:	bf00      	nop
 8100fc4:	3710      	adds	r7, #16
 8100fc6:	46bd      	mov	sp, r7
 8100fc8:	bd80      	pop	{r7, pc}
 8100fca:	bf00      	nop
 8100fcc:	100006a8 	.word	0x100006a8
 8100fd0:	40001c00 	.word	0x40001c00

08100fd4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8100fd4:	b580      	push	{r7, lr}
 8100fd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8100fd8:	4b22      	ldr	r3, [pc, #136]	@ (8101064 <MX_UART8_Init+0x90>)
 8100fda:	4a23      	ldr	r2, [pc, #140]	@ (8101068 <MX_UART8_Init+0x94>)
 8100fdc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8100fde:	4b21      	ldr	r3, [pc, #132]	@ (8101064 <MX_UART8_Init+0x90>)
 8100fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100fe4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8100fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8101064 <MX_UART8_Init+0x90>)
 8100fe8:	2200      	movs	r2, #0
 8100fea:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8100fec:	4b1d      	ldr	r3, [pc, #116]	@ (8101064 <MX_UART8_Init+0x90>)
 8100fee:	2200      	movs	r2, #0
 8100ff0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8100ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8101064 <MX_UART8_Init+0x90>)
 8100ff4:	2200      	movs	r2, #0
 8100ff6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8100ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8101064 <MX_UART8_Init+0x90>)
 8100ffa:	220c      	movs	r2, #12
 8100ffc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100ffe:	4b19      	ldr	r3, [pc, #100]	@ (8101064 <MX_UART8_Init+0x90>)
 8101000:	2200      	movs	r2, #0
 8101002:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8101004:	4b17      	ldr	r3, [pc, #92]	@ (8101064 <MX_UART8_Init+0x90>)
 8101006:	2200      	movs	r2, #0
 8101008:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810100a:	4b16      	ldr	r3, [pc, #88]	@ (8101064 <MX_UART8_Init+0x90>)
 810100c:	2200      	movs	r2, #0
 810100e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101010:	4b14      	ldr	r3, [pc, #80]	@ (8101064 <MX_UART8_Init+0x90>)
 8101012:	2200      	movs	r2, #0
 8101014:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101016:	4b13      	ldr	r3, [pc, #76]	@ (8101064 <MX_UART8_Init+0x90>)
 8101018:	2200      	movs	r2, #0
 810101a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 810101c:	4811      	ldr	r0, [pc, #68]	@ (8101064 <MX_UART8_Init+0x90>)
 810101e:	f009 facb 	bl	810a5b8 <HAL_UART_Init>
 8101022:	4603      	mov	r3, r0
 8101024:	2b00      	cmp	r3, #0
 8101026:	d001      	beq.n	810102c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8101028:	f000 f91e 	bl	8101268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810102c:	2100      	movs	r1, #0
 810102e:	480d      	ldr	r0, [pc, #52]	@ (8101064 <MX_UART8_Init+0x90>)
 8101030:	f00a fad2 	bl	810b5d8 <HAL_UARTEx_SetTxFifoThreshold>
 8101034:	4603      	mov	r3, r0
 8101036:	2b00      	cmp	r3, #0
 8101038:	d001      	beq.n	810103e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 810103a:	f000 f915 	bl	8101268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810103e:	2100      	movs	r1, #0
 8101040:	4808      	ldr	r0, [pc, #32]	@ (8101064 <MX_UART8_Init+0x90>)
 8101042:	f00a fb07 	bl	810b654 <HAL_UARTEx_SetRxFifoThreshold>
 8101046:	4603      	mov	r3, r0
 8101048:	2b00      	cmp	r3, #0
 810104a:	d001      	beq.n	8101050 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 810104c:	f000 f90c 	bl	8101268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8101050:	4804      	ldr	r0, [pc, #16]	@ (8101064 <MX_UART8_Init+0x90>)
 8101052:	f00a fa88 	bl	810b566 <HAL_UARTEx_DisableFifoMode>
 8101056:	4603      	mov	r3, r0
 8101058:	2b00      	cmp	r3, #0
 810105a:	d001      	beq.n	8101060 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 810105c:	f000 f904 	bl	8101268 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8101060:	bf00      	nop
 8101062:	bd80      	pop	{r7, pc}
 8101064:	100006f4 	.word	0x100006f4
 8101068:	40007c00 	.word	0x40007c00

0810106c <MX_FMC_Init>:

}

/* FMC initialization function */
void MX_FMC_Init(void)
{
 810106c:	b580      	push	{r7, lr}
 810106e:	b088      	sub	sp, #32
 8101070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8101072:	1d3b      	adds	r3, r7, #4
 8101074:	2200      	movs	r2, #0
 8101076:	601a      	str	r2, [r3, #0]
 8101078:	605a      	str	r2, [r3, #4]
 810107a:	609a      	str	r2, [r3, #8]
 810107c:	60da      	str	r2, [r3, #12]
 810107e:	611a      	str	r2, [r3, #16]
 8101080:	615a      	str	r2, [r3, #20]
 8101082:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8101084:	4b1e      	ldr	r3, [pc, #120]	@ (8101100 <MX_FMC_Init+0x94>)
 8101086:	4a1f      	ldr	r2, [pc, #124]	@ (8101104 <MX_FMC_Init+0x98>)
 8101088:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 810108a:	4b1d      	ldr	r3, [pc, #116]	@ (8101100 <MX_FMC_Init+0x94>)
 810108c:	2201      	movs	r2, #1
 810108e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8101090:	4b1b      	ldr	r3, [pc, #108]	@ (8101100 <MX_FMC_Init+0x94>)
 8101092:	2200      	movs	r2, #0
 8101094:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8101096:	4b1a      	ldr	r3, [pc, #104]	@ (8101100 <MX_FMC_Init+0x94>)
 8101098:	2208      	movs	r2, #8
 810109a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 810109c:	4b18      	ldr	r3, [pc, #96]	@ (8101100 <MX_FMC_Init+0x94>)
 810109e:	2220      	movs	r2, #32
 81010a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 81010a2:	4b17      	ldr	r3, [pc, #92]	@ (8101100 <MX_FMC_Init+0x94>)
 81010a4:	2200      	movs	r2, #0
 81010a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 81010a8:	4b15      	ldr	r3, [pc, #84]	@ (8101100 <MX_FMC_Init+0x94>)
 81010aa:	2280      	movs	r2, #128	@ 0x80
 81010ac:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 81010ae:	4b14      	ldr	r3, [pc, #80]	@ (8101100 <MX_FMC_Init+0x94>)
 81010b0:	2200      	movs	r2, #0
 81010b2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 81010b4:	4b12      	ldr	r3, [pc, #72]	@ (8101100 <MX_FMC_Init+0x94>)
 81010b6:	2200      	movs	r2, #0
 81010b8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 81010ba:	4b11      	ldr	r3, [pc, #68]	@ (8101100 <MX_FMC_Init+0x94>)
 81010bc:	2200      	movs	r2, #0
 81010be:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 81010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8101100 <MX_FMC_Init+0x94>)
 81010c2:	2200      	movs	r2, #0
 81010c4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 81010c6:	2310      	movs	r3, #16
 81010c8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 81010ca:	2310      	movs	r3, #16
 81010cc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 81010ce:	2310      	movs	r3, #16
 81010d0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 81010d2:	2310      	movs	r3, #16
 81010d4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 81010d6:	2310      	movs	r3, #16
 81010d8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 81010da:	2310      	movs	r3, #16
 81010dc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 81010de:	2310      	movs	r3, #16
 81010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 81010e2:	1d3b      	adds	r3, r7, #4
 81010e4:	4619      	mov	r1, r3
 81010e6:	4806      	ldr	r0, [pc, #24]	@ (8101100 <MX_FMC_Init+0x94>)
 81010e8:	f008 f8ac 	bl	8109244 <HAL_SDRAM_Init>
 81010ec:	4603      	mov	r3, r0
 81010ee:	2b00      	cmp	r3, #0
 81010f0:	d001      	beq.n	81010f6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 81010f2:	f000 f8b9 	bl	8101268 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81010f6:	bf00      	nop
 81010f8:	3720      	adds	r7, #32
 81010fa:	46bd      	mov	sp, r7
 81010fc:	bd80      	pop	{r7, pc}
 81010fe:	bf00      	nop
 8101100:	10000788 	.word	0x10000788
 8101104:	52004140 	.word	0x52004140

08101108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101108:	b480      	push	{r7}
 810110a:	b08d      	sub	sp, #52	@ 0x34
 810110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810110e:	4b55      	ldr	r3, [pc, #340]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101114:	4a53      	ldr	r2, [pc, #332]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810111a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810111e:	4b51      	ldr	r3, [pc, #324]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810112a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810112c:	4b4d      	ldr	r3, [pc, #308]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101132:	4a4c      	ldr	r2, [pc, #304]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101138:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810113c:	4b49      	ldr	r3, [pc, #292]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8101148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810114a:	4b46      	ldr	r3, [pc, #280]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101150:	4a44      	ldr	r2, [pc, #272]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101152:	f043 0304 	orr.w	r3, r3, #4
 8101156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810115a:	4b42      	ldr	r3, [pc, #264]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101160:	f003 0304 	and.w	r3, r3, #4
 8101164:	627b      	str	r3, [r7, #36]	@ 0x24
 8101166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101168:	4b3e      	ldr	r3, [pc, #248]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810116e:	4a3d      	ldr	r2, [pc, #244]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101170:	f043 0310 	orr.w	r3, r3, #16
 8101174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101178:	4b3a      	ldr	r3, [pc, #232]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810117e:	f003 0310 	and.w	r3, r3, #16
 8101182:	623b      	str	r3, [r7, #32]
 8101184:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101186:	4b37      	ldr	r3, [pc, #220]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810118c:	4a35      	ldr	r2, [pc, #212]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810118e:	f043 0302 	orr.w	r3, r3, #2
 8101192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101196:	4b33      	ldr	r3, [pc, #204]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810119c:	f003 0302 	and.w	r3, r3, #2
 81011a0:	61fb      	str	r3, [r7, #28]
 81011a2:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81011a4:	4b2f      	ldr	r3, [pc, #188]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011aa:	4a2e      	ldr	r2, [pc, #184]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011b4:	4b2b      	ldr	r3, [pc, #172]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81011be:	61bb      	str	r3, [r7, #24]
 81011c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81011c2:	4b28      	ldr	r3, [pc, #160]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011c8:	4a26      	ldr	r2, [pc, #152]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011ca:	f043 0308 	orr.w	r3, r3, #8
 81011ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011d2:	4b24      	ldr	r3, [pc, #144]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011d8:	f003 0308 	and.w	r3, r3, #8
 81011dc:	617b      	str	r3, [r7, #20]
 81011de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81011e0:	4b20      	ldr	r3, [pc, #128]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011e8:	f043 0301 	orr.w	r3, r3, #1
 81011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8101264 <MX_GPIO_Init+0x15c>)
 81011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011f6:	f003 0301 	and.w	r3, r3, #1
 81011fa:	613b      	str	r3, [r7, #16]
 81011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81011fe:	4b19      	ldr	r3, [pc, #100]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101204:	4a17      	ldr	r2, [pc, #92]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101206:	f043 0320 	orr.w	r3, r3, #32
 810120a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810120e:	4b15      	ldr	r3, [pc, #84]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101214:	f003 0320 	and.w	r3, r3, #32
 8101218:	60fb      	str	r3, [r7, #12]
 810121a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 810121c:	4b11      	ldr	r3, [pc, #68]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101222:	4a10      	ldr	r2, [pc, #64]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101224:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810122c:	4b0d      	ldr	r3, [pc, #52]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101236:	60bb      	str	r3, [r7, #8]
 8101238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 810123a:	4b0a      	ldr	r3, [pc, #40]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101240:	4a08      	ldr	r2, [pc, #32]	@ (8101264 <MX_GPIO_Init+0x15c>)
 8101242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810124a:	4b06      	ldr	r3, [pc, #24]	@ (8101264 <MX_GPIO_Init+0x15c>)
 810124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101254:	607b      	str	r3, [r7, #4]
 8101256:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8101258:	bf00      	nop
 810125a:	3734      	adds	r7, #52	@ 0x34
 810125c:	46bd      	mov	sp, r7
 810125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101262:	4770      	bx	lr
 8101264:	58024400 	.word	0x58024400

08101268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101268:	b480      	push	{r7}
 810126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810126c:	b672      	cpsid	i
}
 810126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101270:	bf00      	nop
 8101272:	e7fd      	b.n	8101270 <Error_Handler+0x8>

08101274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101274:	b480      	push	{r7}
 8101276:	b083      	sub	sp, #12
 8101278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810127a:	4b0a      	ldr	r3, [pc, #40]	@ (81012a4 <HAL_MspInit+0x30>)
 810127c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101280:	4a08      	ldr	r2, [pc, #32]	@ (81012a4 <HAL_MspInit+0x30>)
 8101282:	f043 0302 	orr.w	r3, r3, #2
 8101286:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810128a:	4b06      	ldr	r3, [pc, #24]	@ (81012a4 <HAL_MspInit+0x30>)
 810128c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101290:	f003 0302 	and.w	r3, r3, #2
 8101294:	607b      	str	r3, [r7, #4]
 8101296:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101298:	bf00      	nop
 810129a:	370c      	adds	r7, #12
 810129c:	46bd      	mov	sp, r7
 810129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012a2:	4770      	bx	lr
 81012a4:	58024400 	.word	0x58024400

081012a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81012a8:	b580      	push	{r7, lr}
 81012aa:	b08c      	sub	sp, #48	@ 0x30
 81012ac:	af00      	add	r7, sp, #0
 81012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012b0:	f107 031c 	add.w	r3, r7, #28
 81012b4:	2200      	movs	r2, #0
 81012b6:	601a      	str	r2, [r3, #0]
 81012b8:	605a      	str	r2, [r3, #4]
 81012ba:	609a      	str	r2, [r3, #8]
 81012bc:	60da      	str	r2, [r3, #12]
 81012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	681b      	ldr	r3, [r3, #0]
 81012c4:	4a3e      	ldr	r2, [pc, #248]	@ (81013c0 <HAL_ADC_MspInit+0x118>)
 81012c6:	4293      	cmp	r3, r2
 81012c8:	d12a      	bne.n	8101320 <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012ca:	4b3e      	ldr	r3, [pc, #248]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 81012cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81012d0:	4a3c      	ldr	r2, [pc, #240]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 81012d2:	f043 0320 	orr.w	r3, r3, #32
 81012d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81012da:	4b3a      	ldr	r3, [pc, #232]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 81012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81012e0:	f003 0320 	and.w	r3, r3, #32
 81012e4:	61bb      	str	r3, [r7, #24]
 81012e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81012e8:	4b36      	ldr	r3, [pc, #216]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 81012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012ee:	4a35      	ldr	r2, [pc, #212]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 81012f0:	f043 0301 	orr.w	r3, r3, #1
 81012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012f8:	4b32      	ldr	r3, [pc, #200]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 81012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012fe:	f003 0301 	and.w	r3, r3, #1
 8101302:	617b      	str	r3, [r7, #20]
 8101304:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101306:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 810130a:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 810130e:	f001 f907 	bl	8102520 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101312:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8101316:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 810131a:	f001 f901 	bl	8102520 <HAL_SYSCFG_AnalogSwitchConfig>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 810131e:	e04a      	b.n	81013b6 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	681b      	ldr	r3, [r3, #0]
 8101324:	4a28      	ldr	r2, [pc, #160]	@ (81013c8 <HAL_ADC_MspInit+0x120>)
 8101326:	4293      	cmp	r3, r2
 8101328:	d145      	bne.n	81013b6 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 810132a:	4b26      	ldr	r3, [pc, #152]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 810132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101330:	4a24      	ldr	r2, [pc, #144]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 8101332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101336:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810133a:	4b22      	ldr	r3, [pc, #136]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 810133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101344:	613b      	str	r3, [r7, #16]
 8101346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101348:	4b1e      	ldr	r3, [pc, #120]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 810134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810134e:	4a1d      	ldr	r2, [pc, #116]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 8101350:	f043 0320 	orr.w	r3, r3, #32
 8101354:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101358:	4b1a      	ldr	r3, [pc, #104]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 810135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810135e:	f003 0320 	and.w	r3, r3, #32
 8101362:	60fb      	str	r3, [r7, #12]
 8101364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101366:	4b17      	ldr	r3, [pc, #92]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 8101368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810136c:	4a15      	ldr	r2, [pc, #84]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 810136e:	f043 0304 	orr.w	r3, r3, #4
 8101372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101376:	4b13      	ldr	r3, [pc, #76]	@ (81013c4 <HAL_ADC_MspInit+0x11c>)
 8101378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810137c:	f003 0304 	and.w	r3, r3, #4
 8101380:	60bb      	str	r3, [r7, #8]
 8101382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8101384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810138a:	2303      	movs	r3, #3
 810138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810138e:	2300      	movs	r3, #0
 8101390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8101392:	f107 031c 	add.w	r3, r7, #28
 8101396:	4619      	mov	r1, r3
 8101398:	480c      	ldr	r0, [pc, #48]	@ (81013cc <HAL_ADC_MspInit+0x124>)
 810139a:	f002 ffef 	bl	810437c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810139e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81013a2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 81013a6:	f001 f8bb 	bl	8102520 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013aa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81013ae:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 81013b2:	f001 f8b5 	bl	8102520 <HAL_SYSCFG_AnalogSwitchConfig>
}
 81013b6:	bf00      	nop
 81013b8:	3730      	adds	r7, #48	@ 0x30
 81013ba:	46bd      	mov	sp, r7
 81013bc:	bd80      	pop	{r7, pc}
 81013be:	bf00      	nop
 81013c0:	40022000 	.word	0x40022000
 81013c4:	58024400 	.word	0x58024400
 81013c8:	58026000 	.word	0x58026000
 81013cc:	58021400 	.word	0x58021400

081013d0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 81013d0:	b580      	push	{r7, lr}
 81013d2:	b08e      	sub	sp, #56	@ 0x38
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81013dc:	2200      	movs	r2, #0
 81013de:	601a      	str	r2, [r3, #0]
 81013e0:	605a      	str	r2, [r3, #4]
 81013e2:	609a      	str	r2, [r3, #8]
 81013e4:	60da      	str	r2, [r3, #12]
 81013e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	681b      	ldr	r3, [r3, #0]
 81013ec:	4a49      	ldr	r2, [pc, #292]	@ (8101514 <HAL_ETH_MspInit+0x144>)
 81013ee:	4293      	cmp	r3, r2
 81013f0:	f040 808b 	bne.w	810150a <HAL_ETH_MspInit+0x13a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81013f4:	4b48      	ldr	r3, [pc, #288]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 81013f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81013fa:	4a47      	ldr	r2, [pc, #284]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 81013fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101400:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101404:	4b44      	ldr	r3, [pc, #272]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101406:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810140a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810140e:	623b      	str	r3, [r7, #32]
 8101410:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8101412:	4b41      	ldr	r3, [pc, #260]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101414:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101418:	4a3f      	ldr	r2, [pc, #252]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 810141a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810141e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101422:	4b3d      	ldr	r3, [pc, #244]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810142c:	61fb      	str	r3, [r7, #28]
 810142e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8101430:	4b39      	ldr	r3, [pc, #228]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101436:	4a38      	ldr	r2, [pc, #224]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810143c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101440:	4b35      	ldr	r3, [pc, #212]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101442:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810144a:	61bb      	str	r3, [r7, #24]
 810144c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810144e:	4b32      	ldr	r3, [pc, #200]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101454:	4a30      	ldr	r2, [pc, #192]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810145a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810145e:	4b2e      	ldr	r3, [pc, #184]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101468:	617b      	str	r3, [r7, #20]
 810146a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810146c:	4b2a      	ldr	r3, [pc, #168]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 810146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101472:	4a29      	ldr	r2, [pc, #164]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101474:	f043 0304 	orr.w	r3, r3, #4
 8101478:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810147c:	4b26      	ldr	r3, [pc, #152]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 810147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101482:	f003 0304 	and.w	r3, r3, #4
 8101486:	613b      	str	r3, [r7, #16]
 8101488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810148a:	4b23      	ldr	r3, [pc, #140]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 810148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101490:	4a21      	ldr	r2, [pc, #132]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 8101492:	f043 0301 	orr.w	r3, r3, #1
 8101496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810149a:	4b1f      	ldr	r3, [pc, #124]	@ (8101518 <HAL_ETH_MspInit+0x148>)
 810149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a0:	f003 0301 	and.w	r3, r3, #1
 81014a4:	60fb      	str	r3, [r7, #12]
 81014a6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 81014a8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 81014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ae:	2302      	movs	r3, #2
 81014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014b2:	2300      	movs	r3, #0
 81014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014b6:	2300      	movs	r3, #0
 81014b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014ba:	230b      	movs	r3, #11
 81014bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81014be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81014c2:	4619      	mov	r1, r3
 81014c4:	4815      	ldr	r0, [pc, #84]	@ (810151c <HAL_ETH_MspInit+0x14c>)
 81014c6:	f002 ff59 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 81014ca:	2332      	movs	r3, #50	@ 0x32
 81014cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ce:	2302      	movs	r3, #2
 81014d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014d2:	2300      	movs	r3, #0
 81014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014d6:	2300      	movs	r3, #0
 81014d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014da:	230b      	movs	r3, #11
 81014dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81014de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81014e2:	4619      	mov	r1, r3
 81014e4:	480e      	ldr	r0, [pc, #56]	@ (8101520 <HAL_ETH_MspInit+0x150>)
 81014e6:	f002 ff49 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 81014ea:	2386      	movs	r3, #134	@ 0x86
 81014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014ee:	2302      	movs	r3, #2
 81014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014f2:	2300      	movs	r3, #0
 81014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81014f6:	2300      	movs	r3, #0
 81014f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81014fa:	230b      	movs	r3, #11
 81014fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101502:	4619      	mov	r1, r3
 8101504:	4807      	ldr	r0, [pc, #28]	@ (8101524 <HAL_ETH_MspInit+0x154>)
 8101506:	f002 ff39 	bl	810437c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 810150a:	bf00      	nop
 810150c:	3738      	adds	r7, #56	@ 0x38
 810150e:	46bd      	mov	sp, r7
 8101510:	bd80      	pop	{r7, pc}
 8101512:	bf00      	nop
 8101514:	40028000 	.word	0x40028000
 8101518:	58024400 	.word	0x58024400
 810151c:	58021800 	.word	0x58021800
 8101520:	58020800 	.word	0x58020800
 8101524:	58020000 	.word	0x58020000

08101528 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101528:	b580      	push	{r7, lr}
 810152a:	b0bc      	sub	sp, #240	@ 0xf0
 810152c:	af00      	add	r7, sp, #0
 810152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101530:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101534:	2200      	movs	r2, #0
 8101536:	601a      	str	r2, [r3, #0]
 8101538:	605a      	str	r2, [r3, #4]
 810153a:	609a      	str	r2, [r3, #8]
 810153c:	60da      	str	r2, [r3, #12]
 810153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101540:	f107 0310 	add.w	r3, r7, #16
 8101544:	22c8      	movs	r2, #200	@ 0xc8
 8101546:	2100      	movs	r1, #0
 8101548:	4618      	mov	r0, r3
 810154a:	f00a fec3 	bl	810c2d4 <memset>
  if(hcec->Instance==CEC)
 810154e:	687b      	ldr	r3, [r7, #4]
 8101550:	681b      	ldr	r3, [r3, #0]
 8101552:	4a2b      	ldr	r2, [pc, #172]	@ (8101600 <HAL_CEC_MspInit+0xd8>)
 8101554:	4293      	cmp	r3, r2
 8101556:	d14e      	bne.n	81015f6 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101558:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 810155c:	f04f 0300 	mov.w	r3, #0
 8101560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101564:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8101568:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810156c:	f107 0310 	add.w	r3, r7, #16
 8101570:	4618      	mov	r0, r3
 8101572:	f003 fbdf 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101576:	4603      	mov	r3, r0
 8101578:	2b00      	cmp	r3, #0
 810157a:	d001      	beq.n	8101580 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 810157c:	f7ff fe74 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8101580:	4b20      	ldr	r3, [pc, #128]	@ (8101604 <HAL_CEC_MspInit+0xdc>)
 8101582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101586:	4a1f      	ldr	r2, [pc, #124]	@ (8101604 <HAL_CEC_MspInit+0xdc>)
 8101588:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810158c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101590:	4b1c      	ldr	r3, [pc, #112]	@ (8101604 <HAL_CEC_MspInit+0xdc>)
 8101592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810159a:	60fb      	str	r3, [r7, #12]
 810159c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810159e:	4b19      	ldr	r3, [pc, #100]	@ (8101604 <HAL_CEC_MspInit+0xdc>)
 81015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015a4:	4a17      	ldr	r2, [pc, #92]	@ (8101604 <HAL_CEC_MspInit+0xdc>)
 81015a6:	f043 0302 	orr.w	r3, r3, #2
 81015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015ae:	4b15      	ldr	r3, [pc, #84]	@ (8101604 <HAL_CEC_MspInit+0xdc>)
 81015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015b4:	f003 0302 	and.w	r3, r3, #2
 81015b8:	60bb      	str	r3, [r7, #8]
 81015ba:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81015bc:	2340      	movs	r3, #64	@ 0x40
 81015be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015c2:	2312      	movs	r3, #18
 81015c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015c8:	2300      	movs	r3, #0
 81015ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ce:	2300      	movs	r3, #0
 81015d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81015d4:	2305      	movs	r3, #5
 81015d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 81015da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81015de:	4619      	mov	r1, r3
 81015e0:	4809      	ldr	r0, [pc, #36]	@ (8101608 <HAL_CEC_MspInit+0xe0>)
 81015e2:	f002 fecb 	bl	810437c <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 81015e6:	2200      	movs	r2, #0
 81015e8:	2100      	movs	r1, #0
 81015ea:	205e      	movs	r0, #94	@ 0x5e
 81015ec:	f002 fa4b 	bl	8103a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81015f0:	205e      	movs	r0, #94	@ 0x5e
 81015f2:	f002 fa62 	bl	8103aba <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 81015f6:	bf00      	nop
 81015f8:	37f0      	adds	r7, #240	@ 0xf0
 81015fa:	46bd      	mov	sp, r7
 81015fc:	bd80      	pop	{r7, pc}
 81015fe:	bf00      	nop
 8101600:	40006c00 	.word	0x40006c00
 8101604:	58024400 	.word	0x58024400
 8101608:	58020400 	.word	0x58020400

0810160c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 810160c:	b580      	push	{r7, lr}
 810160e:	b0c0      	sub	sp, #256	@ 0x100
 8101610:	af00      	add	r7, sp, #0
 8101612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101614:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101618:	2200      	movs	r2, #0
 810161a:	601a      	str	r2, [r3, #0]
 810161c:	605a      	str	r2, [r3, #4]
 810161e:	609a      	str	r2, [r3, #8]
 8101620:	60da      	str	r2, [r3, #12]
 8101622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101624:	f107 0320 	add.w	r3, r7, #32
 8101628:	22c8      	movs	r2, #200	@ 0xc8
 810162a:	2100      	movs	r1, #0
 810162c:	4618      	mov	r0, r3
 810162e:	f00a fe51 	bl	810c2d4 <memset>
  if(hqspi->Instance==QUADSPI)
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	681b      	ldr	r3, [r3, #0]
 8101636:	4a85      	ldr	r2, [pc, #532]	@ (810184c <HAL_QSPI_MspInit+0x240>)
 8101638:	4293      	cmp	r3, r2
 810163a:	f040 8102 	bne.w	8101842 <HAL_QSPI_MspInit+0x236>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 810163e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8101642:	f04f 0300 	mov.w	r3, #0
 8101646:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 810164a:	2300      	movs	r3, #0
 810164c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810164e:	f107 0320 	add.w	r3, r7, #32
 8101652:	4618      	mov	r0, r3
 8101654:	f003 fb6e 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101658:	4603      	mov	r3, r0
 810165a:	2b00      	cmp	r3, #0
 810165c:	d001      	beq.n	8101662 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810165e:	f7ff fe03 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101662:	4b7b      	ldr	r3, [pc, #492]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 8101664:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101668:	4a79      	ldr	r2, [pc, #484]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 810166a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810166e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101672:	4b77      	ldr	r3, [pc, #476]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 8101674:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810167c:	61fb      	str	r3, [r7, #28]
 810167e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8101680:	4b73      	ldr	r3, [pc, #460]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 8101682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101686:	4a72      	ldr	r2, [pc, #456]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 8101688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810168c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101690:	4b6f      	ldr	r3, [pc, #444]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 8101692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810169a:	61bb      	str	r3, [r7, #24]
 810169c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810169e:	4b6c      	ldr	r3, [pc, #432]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016a4:	4a6a      	ldr	r2, [pc, #424]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016a6:	f043 0320 	orr.w	r3, r3, #32
 81016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016ae:	4b68      	ldr	r3, [pc, #416]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016b4:	f003 0320 	and.w	r3, r3, #32
 81016b8:	617b      	str	r3, [r7, #20]
 81016ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81016bc:	4b64      	ldr	r3, [pc, #400]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016c2:	4a63      	ldr	r2, [pc, #396]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016cc:	4b60      	ldr	r3, [pc, #384]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81016d6:	613b      	str	r3, [r7, #16]
 81016d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016da:	4b5d      	ldr	r3, [pc, #372]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016e0:	4a5b      	ldr	r2, [pc, #364]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016e2:	f043 0302 	orr.w	r3, r3, #2
 81016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016ea:	4b59      	ldr	r3, [pc, #356]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016f0:	f003 0302 	and.w	r3, r3, #2
 81016f4:	60fb      	str	r3, [r7, #12]
 81016f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81016f8:	4b55      	ldr	r3, [pc, #340]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 81016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016fe:	4a54      	ldr	r2, [pc, #336]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 8101700:	f043 0308 	orr.w	r3, r3, #8
 8101704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101708:	4b51      	ldr	r3, [pc, #324]	@ (8101850 <HAL_QSPI_MspInit+0x244>)
 810170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810170e:	f003 0308 	and.w	r3, r3, #8
 8101712:	60bb      	str	r3, [r7, #8]
 8101714:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8101716:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 810171a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810171e:	2302      	movs	r3, #2
 8101720:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101724:	2300      	movs	r3, #0
 8101726:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810172a:	2300      	movs	r3, #0
 810172c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101730:	2309      	movs	r3, #9
 8101732:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101736:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810173a:	4619      	mov	r1, r3
 810173c:	4845      	ldr	r0, [pc, #276]	@ (8101854 <HAL_QSPI_MspInit+0x248>)
 810173e:	f002 fe1d 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8101742:	2340      	movs	r3, #64	@ 0x40
 8101744:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101748:	2302      	movs	r3, #2
 810174a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810174e:	2300      	movs	r3, #0
 8101750:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101754:	2300      	movs	r3, #0
 8101756:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 810175a:	230a      	movs	r3, #10
 810175c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8101760:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101764:	4619      	mov	r1, r3
 8101766:	483b      	ldr	r0, [pc, #236]	@ (8101854 <HAL_QSPI_MspInit+0x248>)
 8101768:	f002 fe08 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 810176c:	23c0      	movs	r3, #192	@ 0xc0
 810176e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101772:	2302      	movs	r3, #2
 8101774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101778:	2300      	movs	r3, #0
 810177a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810177e:	2300      	movs	r3, #0
 8101780:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101784:	2309      	movs	r3, #9
 8101786:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810178a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810178e:	4619      	mov	r1, r3
 8101790:	4831      	ldr	r0, [pc, #196]	@ (8101858 <HAL_QSPI_MspInit+0x24c>)
 8101792:	f002 fdf3 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8101796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810179a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810179e:	2302      	movs	r3, #2
 81017a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017a4:	2300      	movs	r3, #0
 81017a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017aa:	2300      	movs	r3, #0
 81017ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81017b0:	230a      	movs	r3, #10
 81017b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 81017b6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81017ba:	4619      	mov	r1, r3
 81017bc:	4826      	ldr	r0, [pc, #152]	@ (8101858 <HAL_QSPI_MspInit+0x24c>)
 81017be:	f002 fddd 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 81017c2:	230c      	movs	r3, #12
 81017c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017c8:	2302      	movs	r3, #2
 81017ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017ce:	2300      	movs	r3, #0
 81017d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017d4:	2300      	movs	r3, #0
 81017d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81017da:	2309      	movs	r3, #9
 81017dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81017e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81017e4:	4619      	mov	r1, r3
 81017e6:	481d      	ldr	r0, [pc, #116]	@ (810185c <HAL_QSPI_MspInit+0x250>)
 81017e8:	f002 fdc8 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 81017ec:	2304      	movs	r3, #4
 81017ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017f2:	2302      	movs	r3, #2
 81017f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017f8:	2300      	movs	r3, #0
 81017fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017fe:	2300      	movs	r3, #0
 8101800:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101804:	2309      	movs	r3, #9
 8101806:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 810180a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810180e:	4619      	mov	r1, r3
 8101810:	4813      	ldr	r0, [pc, #76]	@ (8101860 <HAL_QSPI_MspInit+0x254>)
 8101812:	f002 fdb3 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101816:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810181a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810181e:	2302      	movs	r3, #2
 8101820:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101824:	2300      	movs	r3, #0
 8101826:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810182a:	2300      	movs	r3, #0
 810182c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101830:	2309      	movs	r3, #9
 8101832:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8101836:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 810183a:	4619      	mov	r1, r3
 810183c:	4809      	ldr	r0, [pc, #36]	@ (8101864 <HAL_QSPI_MspInit+0x258>)
 810183e:	f002 fd9d 	bl	810437c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8101842:	bf00      	nop
 8101844:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101848:	46bd      	mov	sp, r7
 810184a:	bd80      	pop	{r7, pc}
 810184c:	52005000 	.word	0x52005000
 8101850:	58024400 	.word	0x58024400
 8101854:	58021800 	.word	0x58021800
 8101858:	58021400 	.word	0x58021400
 810185c:	58021c00 	.word	0x58021c00
 8101860:	58020400 	.word	0x58020400
 8101864:	58020c00 	.word	0x58020c00

08101868 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101868:	b580      	push	{r7, lr}
 810186a:	b0b4      	sub	sp, #208	@ 0xd0
 810186c:	af00      	add	r7, sp, #0
 810186e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101870:	f107 0308 	add.w	r3, r7, #8
 8101874:	22c8      	movs	r2, #200	@ 0xc8
 8101876:	2100      	movs	r1, #0
 8101878:	4618      	mov	r0, r3
 810187a:	f00a fd2b 	bl	810c2d4 <memset>
  if(hrtc->Instance==RTC)
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	681b      	ldr	r3, [r3, #0]
 8101882:	4a10      	ldr	r2, [pc, #64]	@ (81018c4 <HAL_RTC_MspInit+0x5c>)
 8101884:	4293      	cmp	r3, r2
 8101886:	d119      	bne.n	81018bc <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101888:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810188c:	f04f 0300 	mov.w	r3, #0
 8101890:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810189c:	f107 0308 	add.w	r3, r7, #8
 81018a0:	4618      	mov	r0, r3
 81018a2:	f003 fa47 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 81018a6:	4603      	mov	r3, r0
 81018a8:	2b00      	cmp	r3, #0
 81018aa:	d001      	beq.n	81018b0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 81018ac:	f7ff fcdc 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 81018b0:	4b05      	ldr	r3, [pc, #20]	@ (81018c8 <HAL_RTC_MspInit+0x60>)
 81018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81018b4:	4a04      	ldr	r2, [pc, #16]	@ (81018c8 <HAL_RTC_MspInit+0x60>)
 81018b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81018ba:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 81018bc:	bf00      	nop
 81018be:	37d0      	adds	r7, #208	@ 0xd0
 81018c0:	46bd      	mov	sp, r7
 81018c2:	bd80      	pop	{r7, pc}
 81018c4:	58004000 	.word	0x58004000
 81018c8:	58024400 	.word	0x58024400

081018cc <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 81018cc:	b580      	push	{r7, lr}
 81018ce:	b0be      	sub	sp, #248	@ 0xf8
 81018d0:	af00      	add	r7, sp, #0
 81018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81018d8:	2200      	movs	r2, #0
 81018da:	601a      	str	r2, [r3, #0]
 81018dc:	605a      	str	r2, [r3, #4]
 81018de:	609a      	str	r2, [r3, #8]
 81018e0:	60da      	str	r2, [r3, #12]
 81018e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81018e4:	f107 0318 	add.w	r3, r7, #24
 81018e8:	22c8      	movs	r2, #200	@ 0xc8
 81018ea:	2100      	movs	r1, #0
 81018ec:	4618      	mov	r0, r3
 81018ee:	f00a fcf1 	bl	810c2d4 <memset>
  if(hsd->Instance==SDMMC1)
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	681b      	ldr	r3, [r3, #0]
 81018f6:	4a38      	ldr	r2, [pc, #224]	@ (81019d8 <HAL_SD_MspInit+0x10c>)
 81018f8:	4293      	cmp	r3, r2
 81018fa:	d169      	bne.n	81019d0 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 81018fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101900:	f04f 0300 	mov.w	r3, #0
 8101904:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101908:	2300      	movs	r3, #0
 810190a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810190c:	f107 0318 	add.w	r3, r7, #24
 8101910:	4618      	mov	r0, r3
 8101912:	f003 fa0f 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101916:	4603      	mov	r3, r0
 8101918:	2b00      	cmp	r3, #0
 810191a:	d001      	beq.n	8101920 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 810191c:	f7ff fca4 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101920:	4b2e      	ldr	r3, [pc, #184]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101922:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101926:	4a2d      	ldr	r2, [pc, #180]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810192c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101930:	4b2a      	ldr	r3, [pc, #168]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101932:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810193a:	617b      	str	r3, [r7, #20]
 810193c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 810193e:	4b27      	ldr	r3, [pc, #156]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101944:	4a25      	ldr	r2, [pc, #148]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101946:	f043 0304 	orr.w	r3, r3, #4
 810194a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810194e:	4b23      	ldr	r3, [pc, #140]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101954:	f003 0304 	and.w	r3, r3, #4
 8101958:	613b      	str	r3, [r7, #16]
 810195a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810195c:	4b1f      	ldr	r3, [pc, #124]	@ (81019dc <HAL_SD_MspInit+0x110>)
 810195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101962:	4a1e      	ldr	r2, [pc, #120]	@ (81019dc <HAL_SD_MspInit+0x110>)
 8101964:	f043 0308 	orr.w	r3, r3, #8
 8101968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810196c:	4b1b      	ldr	r3, [pc, #108]	@ (81019dc <HAL_SD_MspInit+0x110>)
 810196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101972:	f003 0308 	and.w	r3, r3, #8
 8101976:	60fb      	str	r3, [r7, #12]
 8101978:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 810197a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 810197e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101982:	2302      	movs	r3, #2
 8101984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101988:	2300      	movs	r3, #0
 810198a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810198e:	2303      	movs	r3, #3
 8101990:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101994:	230c      	movs	r3, #12
 8101996:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810199a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810199e:	4619      	mov	r1, r3
 81019a0:	480f      	ldr	r0, [pc, #60]	@ (81019e0 <HAL_SD_MspInit+0x114>)
 81019a2:	f002 fceb 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 81019a6:	2304      	movs	r3, #4
 81019a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019ac:	2302      	movs	r3, #2
 81019ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019b2:	2300      	movs	r3, #0
 81019b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81019b8:	2303      	movs	r3, #3
 81019ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81019be:	230c      	movs	r3, #12
 81019c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 81019c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81019c8:	4619      	mov	r1, r3
 81019ca:	4806      	ldr	r0, [pc, #24]	@ (81019e4 <HAL_SD_MspInit+0x118>)
 81019cc:	f002 fcd6 	bl	810437c <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 81019d0:	bf00      	nop
 81019d2:	37f8      	adds	r7, #248	@ 0xf8
 81019d4:	46bd      	mov	sp, r7
 81019d6:	bd80      	pop	{r7, pc}
 81019d8:	52007000 	.word	0x52007000
 81019dc:	58024400 	.word	0x58024400
 81019e0:	58020800 	.word	0x58020800
 81019e4:	58020c00 	.word	0x58020c00

081019e8 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 81019e8:	b580      	push	{r7, lr}
 81019ea:	b0bc      	sub	sp, #240	@ 0xf0
 81019ec:	af00      	add	r7, sp, #0
 81019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81019f4:	2200      	movs	r2, #0
 81019f6:	601a      	str	r2, [r3, #0]
 81019f8:	605a      	str	r2, [r3, #4]
 81019fa:	609a      	str	r2, [r3, #8]
 81019fc:	60da      	str	r2, [r3, #12]
 81019fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a00:	f107 0310 	add.w	r3, r7, #16
 8101a04:	22c8      	movs	r2, #200	@ 0xc8
 8101a06:	2100      	movs	r1, #0
 8101a08:	4618      	mov	r0, r3
 8101a0a:	f00a fc63 	bl	810c2d4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8101a16:	d144      	bne.n	8101aa2 <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101a18:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101a1c:	f04f 0300 	mov.w	r3, #0
 8101a20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101a24:	2300      	movs	r3, #0
 8101a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a28:	f107 0310 	add.w	r3, r7, #16
 8101a2c:	4618      	mov	r0, r3
 8101a2e:	f003 f981 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101a32:	4603      	mov	r3, r0
 8101a34:	2b00      	cmp	r3, #0
 8101a36:	d001      	beq.n	8101a3c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101a38:	f7ff fc16 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8101aac <HAL_SPDIFRX_MspInit+0xc4>)
 8101a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101a42:	4a1a      	ldr	r2, [pc, #104]	@ (8101aac <HAL_SPDIFRX_MspInit+0xc4>)
 8101a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101a48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101a4c:	4b17      	ldr	r3, [pc, #92]	@ (8101aac <HAL_SPDIFRX_MspInit+0xc4>)
 8101a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101a56:	60fb      	str	r3, [r7, #12]
 8101a58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a5a:	4b14      	ldr	r3, [pc, #80]	@ (8101aac <HAL_SPDIFRX_MspInit+0xc4>)
 8101a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a60:	4a12      	ldr	r2, [pc, #72]	@ (8101aac <HAL_SPDIFRX_MspInit+0xc4>)
 8101a62:	f043 0308 	orr.w	r3, r3, #8
 8101a66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101a6a:	4b10      	ldr	r3, [pc, #64]	@ (8101aac <HAL_SPDIFRX_MspInit+0xc4>)
 8101a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a70:	f003 0308 	and.w	r3, r3, #8
 8101a74:	60bb      	str	r3, [r7, #8]
 8101a76:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101a78:	2380      	movs	r3, #128	@ 0x80
 8101a7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a7e:	2302      	movs	r3, #2
 8101a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a84:	2300      	movs	r3, #0
 8101a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a8a:	2300      	movs	r3, #0
 8101a8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101a90:	2309      	movs	r3, #9
 8101a92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101a96:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a9a:	4619      	mov	r1, r3
 8101a9c:	4804      	ldr	r0, [pc, #16]	@ (8101ab0 <HAL_SPDIFRX_MspInit+0xc8>)
 8101a9e:	f002 fc6d 	bl	810437c <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8101aa2:	bf00      	nop
 8101aa4:	37f0      	adds	r7, #240	@ 0xf0
 8101aa6:	46bd      	mov	sp, r7
 8101aa8:	bd80      	pop	{r7, pc}
 8101aaa:	bf00      	nop
 8101aac:	58024400 	.word	0x58024400
 8101ab0:	58020c00 	.word	0x58020c00

08101ab4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	b0c0      	sub	sp, #256	@ 0x100
 8101ab8:	af00      	add	r7, sp, #0
 8101aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101abc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101ac0:	2200      	movs	r2, #0
 8101ac2:	601a      	str	r2, [r3, #0]
 8101ac4:	605a      	str	r2, [r3, #4]
 8101ac6:	609a      	str	r2, [r3, #8]
 8101ac8:	60da      	str	r2, [r3, #12]
 8101aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101acc:	f107 0320 	add.w	r3, r7, #32
 8101ad0:	22c8      	movs	r2, #200	@ 0xc8
 8101ad2:	2100      	movs	r1, #0
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f00a fbfd 	bl	810c2d4 <memset>
  if(hspi->Instance==SPI2)
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	681b      	ldr	r3, [r3, #0]
 8101ade:	4a72      	ldr	r2, [pc, #456]	@ (8101ca8 <HAL_SPI_MspInit+0x1f4>)
 8101ae0:	4293      	cmp	r3, r2
 8101ae2:	d16b      	bne.n	8101bbc <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101ae4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101ae8:	f04f 0300 	mov.w	r3, #0
 8101aec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101af0:	2300      	movs	r3, #0
 8101af2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101af6:	f107 0320 	add.w	r3, r7, #32
 8101afa:	4618      	mov	r0, r3
 8101afc:	f003 f91a 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101b00:	4603      	mov	r3, r0
 8101b02:	2b00      	cmp	r3, #0
 8101b04:	d001      	beq.n	8101b0a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101b06:	f7ff fbaf 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101b0a:	4b68      	ldr	r3, [pc, #416]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b10:	4a66      	ldr	r2, [pc, #408]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101b16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101b1a:	4b64      	ldr	r3, [pc, #400]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101b24:	61fb      	str	r3, [r7, #28]
 8101b26:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b28:	4b60      	ldr	r3, [pc, #384]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b30:	f043 0301 	orr.w	r3, r3, #1
 8101b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b38:	4b5c      	ldr	r3, [pc, #368]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b3e:	f003 0301 	and.w	r3, r3, #1
 8101b42:	61bb      	str	r3, [r7, #24]
 8101b44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101b46:	4b59      	ldr	r3, [pc, #356]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b4c:	4a57      	ldr	r2, [pc, #348]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b4e:	f043 0304 	orr.w	r3, r3, #4
 8101b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b56:	4b55      	ldr	r3, [pc, #340]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b5c:	f003 0304 	and.w	r3, r3, #4
 8101b60:	617b      	str	r3, [r7, #20]
 8101b62:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PA12     ------> SPI2_SCK
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8101b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8101b68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6c:	2302      	movs	r3, #2
 8101b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b72:	2300      	movs	r3, #0
 8101b74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b78:	2300      	movs	r3, #0
 8101b7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101b7e:	2305      	movs	r3, #5
 8101b80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8101b84:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101b88:	4619      	mov	r1, r3
 8101b8a:	4849      	ldr	r0, [pc, #292]	@ (8101cb0 <HAL_SPI_MspInit+0x1fc>)
 8101b8c:	f002 fbf6 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101b90:	230c      	movs	r3, #12
 8101b92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b96:	2302      	movs	r3, #2
 8101b98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b9c:	2300      	movs	r3, #0
 8101b9e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ba2:	2300      	movs	r3, #0
 8101ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101ba8:	2305      	movs	r3, #5
 8101baa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101bae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101bb2:	4619      	mov	r1, r3
 8101bb4:	483f      	ldr	r0, [pc, #252]	@ (8101cb4 <HAL_SPI_MspInit+0x200>)
 8101bb6:	f002 fbe1 	bl	810437c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101bba:	e06f      	b.n	8101c9c <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	681b      	ldr	r3, [r3, #0]
 8101bc0:	4a3d      	ldr	r2, [pc, #244]	@ (8101cb8 <HAL_SPI_MspInit+0x204>)
 8101bc2:	4293      	cmp	r3, r2
 8101bc4:	d16a      	bne.n	8101c9c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101bc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101bca:	f04f 0300 	mov.w	r3, #0
 8101bce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101bd2:	2300      	movs	r3, #0
 8101bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101bd8:	f107 0320 	add.w	r3, r7, #32
 8101bdc:	4618      	mov	r0, r3
 8101bde:	f003 f8a9 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101be2:	4603      	mov	r3, r0
 8101be4:	2b00      	cmp	r3, #0
 8101be6:	d001      	beq.n	8101bec <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8101be8:	f7ff fb3e 	bl	8101268 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101bec:	4b2f      	ldr	r3, [pc, #188]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101bf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8101bf8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101c06:	613b      	str	r3, [r7, #16]
 8101c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101c0a:	4b28      	ldr	r3, [pc, #160]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c10:	4a26      	ldr	r2, [pc, #152]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c1a:	4b24      	ldr	r3, [pc, #144]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101c24:	60fb      	str	r3, [r7, #12]
 8101c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101c28:	4b20      	ldr	r3, [pc, #128]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101c30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101c38:	4b1c      	ldr	r3, [pc, #112]	@ (8101cac <HAL_SPI_MspInit+0x1f8>)
 8101c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101c42:	60bb      	str	r3, [r7, #8]
 8101c44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101c46:	2303      	movs	r3, #3
 8101c48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c4c:	2302      	movs	r3, #2
 8101c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c52:	2300      	movs	r3, #0
 8101c54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c58:	2300      	movs	r3, #0
 8101c5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101c5e:	2305      	movs	r3, #5
 8101c60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101c64:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101c68:	4619      	mov	r1, r3
 8101c6a:	4814      	ldr	r0, [pc, #80]	@ (8101cbc <HAL_SPI_MspInit+0x208>)
 8101c6c:	f002 fb86 	bl	810437c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c78:	2302      	movs	r3, #2
 8101c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c7e:	2300      	movs	r3, #0
 8101c80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c84:	2300      	movs	r3, #0
 8101c86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101c8a:	2305      	movs	r3, #5
 8101c8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101c90:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101c94:	4619      	mov	r1, r3
 8101c96:	480a      	ldr	r0, [pc, #40]	@ (8101cc0 <HAL_SPI_MspInit+0x20c>)
 8101c98:	f002 fb70 	bl	810437c <HAL_GPIO_Init>
}
 8101c9c:	bf00      	nop
 8101c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101ca2:	46bd      	mov	sp, r7
 8101ca4:	bd80      	pop	{r7, pc}
 8101ca6:	bf00      	nop
 8101ca8:	40003800 	.word	0x40003800
 8101cac:	58024400 	.word	0x58024400
 8101cb0:	58020000 	.word	0x58020000
 8101cb4:	58020800 	.word	0x58020800
 8101cb8:	40015000 	.word	0x40015000
 8101cbc:	58022800 	.word	0x58022800
 8101cc0:	58022400 	.word	0x58022400

08101cc4 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8101cc4:	b480      	push	{r7}
 8101cc6:	b085      	sub	sp, #20
 8101cc8:	af00      	add	r7, sp, #0
 8101cca:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	681b      	ldr	r3, [r3, #0]
 8101cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8101d00 <HAL_TIM_OC_MspInit+0x3c>)
 8101cd2:	4293      	cmp	r3, r2
 8101cd4:	d10e      	bne.n	8101cf4 <HAL_TIM_OC_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8101d04 <HAL_TIM_OC_MspInit+0x40>)
 8101cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101cdc:	4a09      	ldr	r2, [pc, #36]	@ (8101d04 <HAL_TIM_OC_MspInit+0x40>)
 8101cde:	f043 0302 	orr.w	r3, r3, #2
 8101ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101ce6:	4b07      	ldr	r3, [pc, #28]	@ (8101d04 <HAL_TIM_OC_MspInit+0x40>)
 8101ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101cec:	f003 0302 	and.w	r3, r3, #2
 8101cf0:	60fb      	str	r3, [r7, #12]
 8101cf2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8101cf4:	bf00      	nop
 8101cf6:	3714      	adds	r7, #20
 8101cf8:	46bd      	mov	sp, r7
 8101cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cfe:	4770      	bx	lr
 8101d00:	40010400 	.word	0x40010400
 8101d04:	58024400 	.word	0x58024400

08101d08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101d08:	b580      	push	{r7, lr}
 8101d0a:	b08a      	sub	sp, #40	@ 0x28
 8101d0c:	af00      	add	r7, sp, #0
 8101d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d10:	f107 0314 	add.w	r3, r7, #20
 8101d14:	2200      	movs	r2, #0
 8101d16:	601a      	str	r2, [r3, #0]
 8101d18:	605a      	str	r2, [r3, #4]
 8101d1a:	609a      	str	r2, [r3, #8]
 8101d1c:	60da      	str	r2, [r3, #12]
 8101d1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	681b      	ldr	r3, [r3, #0]
 8101d24:	4a1a      	ldr	r2, [pc, #104]	@ (8101d90 <HAL_TIM_Base_MspInit+0x88>)
 8101d26:	4293      	cmp	r3, r2
 8101d28:	d12e      	bne.n	8101d88 <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8101d94 <HAL_TIM_Base_MspInit+0x8c>)
 8101d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101d30:	4a18      	ldr	r2, [pc, #96]	@ (8101d94 <HAL_TIM_Base_MspInit+0x8c>)
 8101d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101d36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101d3a:	4b16      	ldr	r3, [pc, #88]	@ (8101d94 <HAL_TIM_Base_MspInit+0x8c>)
 8101d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101d44:	613b      	str	r3, [r7, #16]
 8101d46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101d48:	4b12      	ldr	r3, [pc, #72]	@ (8101d94 <HAL_TIM_Base_MspInit+0x8c>)
 8101d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d4e:	4a11      	ldr	r2, [pc, #68]	@ (8101d94 <HAL_TIM_Base_MspInit+0x8c>)
 8101d50:	f043 0320 	orr.w	r3, r3, #32
 8101d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d58:	4b0e      	ldr	r3, [pc, #56]	@ (8101d94 <HAL_TIM_Base_MspInit+0x8c>)
 8101d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d5e:	f003 0320 	and.w	r3, r3, #32
 8101d62:	60fb      	str	r3, [r7, #12]
 8101d64:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101d66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8101d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d6c:	2302      	movs	r3, #2
 8101d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d70:	2300      	movs	r3, #0
 8101d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d74:	2300      	movs	r3, #0
 8101d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101d78:	2309      	movs	r3, #9
 8101d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101d7c:	f107 0314 	add.w	r3, r7, #20
 8101d80:	4619      	mov	r1, r3
 8101d82:	4805      	ldr	r0, [pc, #20]	@ (8101d98 <HAL_TIM_Base_MspInit+0x90>)
 8101d84:	f002 fafa 	bl	810437c <HAL_GPIO_Init>

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 8101d88:	bf00      	nop
 8101d8a:	3728      	adds	r7, #40	@ 0x28
 8101d8c:	46bd      	mov	sp, r7
 8101d8e:	bd80      	pop	{r7, pc}
 8101d90:	40001c00 	.word	0x40001c00
 8101d94:	58024400 	.word	0x58024400
 8101d98:	58021400 	.word	0x58021400

08101d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101d9c:	b580      	push	{r7, lr}
 8101d9e:	b088      	sub	sp, #32
 8101da0:	af00      	add	r7, sp, #0
 8101da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101da4:	f107 030c 	add.w	r3, r7, #12
 8101da8:	2200      	movs	r2, #0
 8101daa:	601a      	str	r2, [r3, #0]
 8101dac:	605a      	str	r2, [r3, #4]
 8101dae:	609a      	str	r2, [r3, #8]
 8101db0:	60da      	str	r2, [r3, #12]
 8101db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	681b      	ldr	r3, [r3, #0]
 8101db8:	4a12      	ldr	r2, [pc, #72]	@ (8101e04 <HAL_TIM_MspPostInit+0x68>)
 8101dba:	4293      	cmp	r3, r2
 8101dbc:	d11e      	bne.n	8101dfc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101dbe:	4b12      	ldr	r3, [pc, #72]	@ (8101e08 <HAL_TIM_MspPostInit+0x6c>)
 8101dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dc4:	4a10      	ldr	r2, [pc, #64]	@ (8101e08 <HAL_TIM_MspPostInit+0x6c>)
 8101dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101dce:	4b0e      	ldr	r3, [pc, #56]	@ (8101e08 <HAL_TIM_MspPostInit+0x6c>)
 8101dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101dd8:	60bb      	str	r3, [r7, #8]
 8101dda:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8101ddc:	23c0      	movs	r3, #192	@ 0xc0
 8101dde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101de0:	2302      	movs	r3, #2
 8101de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101de4:	2300      	movs	r3, #0
 8101de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101de8:	2300      	movs	r3, #0
 8101dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101dec:	2303      	movs	r3, #3
 8101dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101df0:	f107 030c 	add.w	r3, r7, #12
 8101df4:	4619      	mov	r1, r3
 8101df6:	4805      	ldr	r0, [pc, #20]	@ (8101e0c <HAL_TIM_MspPostInit+0x70>)
 8101df8:	f002 fac0 	bl	810437c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8101dfc:	bf00      	nop
 8101dfe:	3720      	adds	r7, #32
 8101e00:	46bd      	mov	sp, r7
 8101e02:	bd80      	pop	{r7, pc}
 8101e04:	40010400 	.word	0x40010400
 8101e08:	58024400 	.word	0x58024400
 8101e0c:	58022400 	.word	0x58022400

08101e10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101e10:	b580      	push	{r7, lr}
 8101e12:	b0be      	sub	sp, #248	@ 0xf8
 8101e14:	af00      	add	r7, sp, #0
 8101e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101e1c:	2200      	movs	r2, #0
 8101e1e:	601a      	str	r2, [r3, #0]
 8101e20:	605a      	str	r2, [r3, #4]
 8101e22:	609a      	str	r2, [r3, #8]
 8101e24:	60da      	str	r2, [r3, #12]
 8101e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e28:	f107 0318 	add.w	r3, r7, #24
 8101e2c:	22c8      	movs	r2, #200	@ 0xc8
 8101e2e:	2100      	movs	r1, #0
 8101e30:	4618      	mov	r0, r3
 8101e32:	f00a fa4f 	bl	810c2d4 <memset>
  if(huart->Instance==UART8)
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	681b      	ldr	r3, [r3, #0]
 8101e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8101f28 <HAL_UART_MspInit+0x118>)
 8101e3c:	4293      	cmp	r3, r2
 8101e3e:	d147      	bne.n	8101ed0 <HAL_UART_MspInit+0xc0>

    /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8101e40:	f04f 0202 	mov.w	r2, #2
 8101e44:	f04f 0300 	mov.w	r3, #0
 8101e48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101e4c:	2300      	movs	r3, #0
 8101e4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e52:	f107 0318 	add.w	r3, r7, #24
 8101e56:	4618      	mov	r0, r3
 8101e58:	f002 ff6c 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101e5c:	4603      	mov	r3, r0
 8101e5e:	2b00      	cmp	r3, #0
 8101e60:	d001      	beq.n	8101e66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101e62:	f7ff fa01 	bl	8101268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8101e66:	4b31      	ldr	r3, [pc, #196]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101e6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8101e72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101e76:	4b2d      	ldr	r3, [pc, #180]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8101e80:	617b      	str	r3, [r7, #20]
 8101e82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e84:	4b29      	ldr	r3, [pc, #164]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e8a:	4a28      	ldr	r2, [pc, #160]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101e8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e94:	4b25      	ldr	r3, [pc, #148]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101e9e:	613b      	str	r3, [r7, #16]
 8101ea0:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8101ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8101ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101eaa:	2302      	movs	r3, #2
 8101eac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101eb0:	2300      	movs	r3, #0
 8101eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101eb6:	2300      	movs	r3, #0
 8101eb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8101ebc:	2308      	movs	r3, #8
 8101ebe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101ec2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101ec6:	4619      	mov	r1, r3
 8101ec8:	4819      	ldr	r0, [pc, #100]	@ (8101f30 <HAL_UART_MspInit+0x120>)
 8101eca:	f002 fa57 	bl	810437c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8101ece:	e026      	b.n	8101f1e <HAL_UART_MspInit+0x10e>
  else if(huart->Instance==USART1)
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	681b      	ldr	r3, [r3, #0]
 8101ed4:	4a17      	ldr	r2, [pc, #92]	@ (8101f34 <HAL_UART_MspInit+0x124>)
 8101ed6:	4293      	cmp	r3, r2
 8101ed8:	d121      	bne.n	8101f1e <HAL_UART_MspInit+0x10e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8101eda:	f04f 0201 	mov.w	r2, #1
 8101ede:	f04f 0300 	mov.w	r3, #0
 8101ee2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8101ee6:	2300      	movs	r3, #0
 8101ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101eec:	f107 0318 	add.w	r3, r7, #24
 8101ef0:	4618      	mov	r0, r3
 8101ef2:	f002 ff1f 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101ef6:	4603      	mov	r3, r0
 8101ef8:	2b00      	cmp	r3, #0
 8101efa:	d001      	beq.n	8101f00 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8101efc:	f7ff f9b4 	bl	8101268 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8101f00:	4b0a      	ldr	r3, [pc, #40]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f06:	4a09      	ldr	r2, [pc, #36]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101f08:	f043 0310 	orr.w	r3, r3, #16
 8101f0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101f10:	4b06      	ldr	r3, [pc, #24]	@ (8101f2c <HAL_UART_MspInit+0x11c>)
 8101f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101f16:	f003 0310 	and.w	r3, r3, #16
 8101f1a:	60fb      	str	r3, [r7, #12]
 8101f1c:	68fb      	ldr	r3, [r7, #12]
}
 8101f1e:	bf00      	nop
 8101f20:	37f8      	adds	r7, #248	@ 0xf8
 8101f22:	46bd      	mov	sp, r7
 8101f24:	bd80      	pop	{r7, pc}
 8101f26:	bf00      	nop
 8101f28:	40007c00 	.word	0x40007c00
 8101f2c:	58024400 	.word	0x58024400
 8101f30:	58022400 	.word	0x58022400
 8101f34:	40011000 	.word	0x40011000

08101f38 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8101f38:	b580      	push	{r7, lr}
 8101f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8101f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8101f3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101f42:	2200      	movs	r2, #0
 8101f44:	601a      	str	r2, [r3, #0]
 8101f46:	605a      	str	r2, [r3, #4]
 8101f48:	609a      	str	r2, [r3, #8]
 8101f4a:	60da      	str	r2, [r3, #12]
 8101f4c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8101f4e:	4b5c      	ldr	r3, [pc, #368]	@ (81020c0 <HAL_FMC_MspInit+0x188>)
 8101f50:	681b      	ldr	r3, [r3, #0]
 8101f52:	2b00      	cmp	r3, #0
 8101f54:	f040 80b0 	bne.w	81020b8 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 8101f58:	4b59      	ldr	r3, [pc, #356]	@ (81020c0 <HAL_FMC_MspInit+0x188>)
 8101f5a:	2201      	movs	r2, #1
 8101f5c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f5e:	f107 0308 	add.w	r3, r7, #8
 8101f62:	22c8      	movs	r2, #200	@ 0xc8
 8101f64:	2100      	movs	r1, #0
 8101f66:	4618      	mov	r0, r3
 8101f68:	f00a f9b4 	bl	810c2d4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8101f6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8101f70:	f04f 0300 	mov.w	r3, #0
 8101f74:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8101f78:	2300      	movs	r3, #0
 8101f7a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f7c:	f107 0308 	add.w	r3, r7, #8
 8101f80:	4618      	mov	r0, r3
 8101f82:	f002 fed7 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 8101f86:	4603      	mov	r3, r0
 8101f88:	2b00      	cmp	r3, #0
 8101f8a:	d001      	beq.n	8101f90 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8101f8c:	f7ff f96c 	bl	8101268 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8101f90:	4b4c      	ldr	r3, [pc, #304]	@ (81020c4 <HAL_FMC_MspInit+0x18c>)
 8101f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101f96:	4a4b      	ldr	r2, [pc, #300]	@ (81020c4 <HAL_FMC_MspInit+0x18c>)
 8101f98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8101f9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101fa0:	4b48      	ldr	r3, [pc, #288]	@ (81020c4 <HAL_FMC_MspInit+0x18c>)
 8101fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101faa:	607b      	str	r3, [r7, #4]
 8101fac:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 8101fae:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8101fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fb6:	2302      	movs	r3, #2
 8101fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fbc:	2300      	movs	r3, #0
 8101fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101fc2:	2303      	movs	r3, #3
 8101fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101fc8:	230c      	movs	r3, #12
 8101fca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101fce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101fd2:	4619      	mov	r1, r3
 8101fd4:	483c      	ldr	r0, [pc, #240]	@ (81020c8 <HAL_FMC_MspInit+0x190>)
 8101fd6:	f002 f9d1 	bl	810437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 8101fda:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8101fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fe2:	2302      	movs	r3, #2
 8101fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fe8:	2300      	movs	r3, #0
 8101fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101fee:	2303      	movs	r3, #3
 8101ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101ff4:	230c      	movs	r3, #12
 8101ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101ffa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101ffe:	4619      	mov	r1, r3
 8102000:	4832      	ldr	r0, [pc, #200]	@ (81020cc <HAL_FMC_MspInit+0x194>)
 8102002:	f002 f9bb 	bl	810437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 8102006:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 810200a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810200e:	2302      	movs	r3, #2
 8102010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102014:	2300      	movs	r3, #0
 8102016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810201a:	2303      	movs	r3, #3
 810201c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102020:	230c      	movs	r3, #12
 8102022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8102026:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810202a:	4619      	mov	r1, r3
 810202c:	4828      	ldr	r0, [pc, #160]	@ (81020d0 <HAL_FMC_MspInit+0x198>)
 810202e:	f002 f9a5 	bl	810437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 8102032:	f248 1317 	movw	r3, #33047	@ 0x8117
 8102036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810203a:	2302      	movs	r3, #2
 810203c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102040:	2300      	movs	r3, #0
 8102042:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102046:	2303      	movs	r3, #3
 8102048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810204c:	230c      	movs	r3, #12
 810204e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8102052:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102056:	4619      	mov	r1, r3
 8102058:	481e      	ldr	r0, [pc, #120]	@ (81020d4 <HAL_FMC_MspInit+0x19c>)
 810205a:	f002 f98f 	bl	810437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 810205e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8102062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102066:	2302      	movs	r3, #2
 8102068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810206c:	2300      	movs	r3, #0
 810206e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102072:	2303      	movs	r3, #3
 8102074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102078:	230c      	movs	r3, #12
 810207a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810207e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102082:	4619      	mov	r1, r3
 8102084:	4814      	ldr	r0, [pc, #80]	@ (81020d8 <HAL_FMC_MspInit+0x1a0>)
 8102086:	f002 f979 	bl	810437c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 810208a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 810208e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102092:	2302      	movs	r3, #2
 8102094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102098:	2300      	movs	r3, #0
 810209a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810209e:	2303      	movs	r3, #3
 81020a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81020a4:	230c      	movs	r3, #12
 81020a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81020aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81020ae:	4619      	mov	r1, r3
 81020b0:	480a      	ldr	r0, [pc, #40]	@ (81020dc <HAL_FMC_MspInit+0x1a4>)
 81020b2:	f002 f963 	bl	810437c <HAL_GPIO_Init>
 81020b6:	e000      	b.n	81020ba <HAL_FMC_MspInit+0x182>
    return;
 81020b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 81020ba:	37e8      	adds	r7, #232	@ 0xe8
 81020bc:	46bd      	mov	sp, r7
 81020be:	bd80      	pop	{r7, pc}
 81020c0:	100007d4 	.word	0x100007d4
 81020c4:	58024400 	.word	0x58024400
 81020c8:	58022000 	.word	0x58022000
 81020cc:	58021000 	.word	0x58021000
 81020d0:	58021c00 	.word	0x58021c00
 81020d4:	58021800 	.word	0x58021800
 81020d8:	58020c00 	.word	0x58020c00
 81020dc:	58021400 	.word	0x58021400

081020e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 81020e0:	b580      	push	{r7, lr}
 81020e2:	b082      	sub	sp, #8
 81020e4:	af00      	add	r7, sp, #0
 81020e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 81020e8:	f7ff ff26 	bl	8101f38 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 81020ec:	bf00      	nop
 81020ee:	3708      	adds	r7, #8
 81020f0:	46bd      	mov	sp, r7
 81020f2:	bd80      	pop	{r7, pc}

081020f4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81020f4:	b580      	push	{r7, lr}
 81020f6:	b0bc      	sub	sp, #240	@ 0xf0
 81020f8:	af00      	add	r7, sp, #0
 81020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81020fc:	f107 0310 	add.w	r3, r7, #16
 8102100:	22c8      	movs	r2, #200	@ 0xc8
 8102102:	2100      	movs	r1, #0
 8102104:	4618      	mov	r0, r3
 8102106:	f00a f8e5 	bl	810c2d4 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	681b      	ldr	r3, [r3, #0]
 810210e:	4a4f      	ldr	r2, [pc, #316]	@ (810224c <HAL_SAI_MspInit+0x158>)
 8102110:	4293      	cmp	r3, r2
 8102112:	d153      	bne.n	81021bc <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8102114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102118:	f04f 0300 	mov.w	r3, #0
 810211c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8102120:	2300      	movs	r3, #0
 8102122:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102124:	f107 0310 	add.w	r3, r7, #16
 8102128:	4618      	mov	r0, r3
 810212a:	f002 fe03 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 810212e:	4603      	mov	r3, r0
 8102130:	2b00      	cmp	r3, #0
 8102132:	d001      	beq.n	8102138 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8102134:	f7ff f898 	bl	8101268 <Error_Handler>
    }

    if (SAI1_client == 0)
 8102138:	4b45      	ldr	r3, [pc, #276]	@ (8102250 <HAL_SAI_MspInit+0x15c>)
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	2b00      	cmp	r3, #0
 810213e:	d10e      	bne.n	810215e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8102140:	4b44      	ldr	r3, [pc, #272]	@ (8102254 <HAL_SAI_MspInit+0x160>)
 8102142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102146:	4a43      	ldr	r2, [pc, #268]	@ (8102254 <HAL_SAI_MspInit+0x160>)
 8102148:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810214c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102150:	4b40      	ldr	r3, [pc, #256]	@ (8102254 <HAL_SAI_MspInit+0x160>)
 8102152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810215a:	60fb      	str	r3, [r7, #12]
 810215c:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 810215e:	4b3c      	ldr	r3, [pc, #240]	@ (8102250 <HAL_SAI_MspInit+0x15c>)
 8102160:	681b      	ldr	r3, [r3, #0]
 8102162:	3301      	adds	r3, #1
 8102164:	4a3a      	ldr	r2, [pc, #232]	@ (8102250 <HAL_SAI_MspInit+0x15c>)
 8102166:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8102168:	2370      	movs	r3, #112	@ 0x70
 810216a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810216e:	2302      	movs	r3, #2
 8102170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102174:	2300      	movs	r3, #0
 8102176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810217a:	2300      	movs	r3, #0
 810217c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102180:	2306      	movs	r3, #6
 8102182:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102186:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810218a:	4619      	mov	r1, r3
 810218c:	4832      	ldr	r0, [pc, #200]	@ (8102258 <HAL_SAI_MspInit+0x164>)
 810218e:	f002 f8f5 	bl	810437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8102192:	2380      	movs	r3, #128	@ 0x80
 8102194:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102198:	2302      	movs	r3, #2
 810219a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810219e:	2300      	movs	r3, #0
 81021a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021a4:	2300      	movs	r3, #0
 81021a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81021aa:	2306      	movs	r3, #6
 81021ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81021b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81021b4:	4619      	mov	r1, r3
 81021b6:	4829      	ldr	r0, [pc, #164]	@ (810225c <HAL_SAI_MspInit+0x168>)
 81021b8:	f002 f8e0 	bl	810437c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	4a27      	ldr	r2, [pc, #156]	@ (8102260 <HAL_SAI_MspInit+0x16c>)
 81021c2:	4293      	cmp	r3, r2
 81021c4:	d13e      	bne.n	8102244 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81021c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81021ca:	f04f 0300 	mov.w	r3, #0
 81021ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81021d2:	2300      	movs	r3, #0
 81021d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81021d6:	f107 0310 	add.w	r3, r7, #16
 81021da:	4618      	mov	r0, r3
 81021dc:	f002 fdaa 	bl	8104d34 <HAL_RCCEx_PeriphCLKConfig>
 81021e0:	4603      	mov	r3, r0
 81021e2:	2b00      	cmp	r3, #0
 81021e4:	d001      	beq.n	81021ea <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 81021e6:	f7ff f83f 	bl	8101268 <Error_Handler>
    }

      if (SAI1_client == 0)
 81021ea:	4b19      	ldr	r3, [pc, #100]	@ (8102250 <HAL_SAI_MspInit+0x15c>)
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d10e      	bne.n	8102210 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81021f2:	4b18      	ldr	r3, [pc, #96]	@ (8102254 <HAL_SAI_MspInit+0x160>)
 81021f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81021f8:	4a16      	ldr	r2, [pc, #88]	@ (8102254 <HAL_SAI_MspInit+0x160>)
 81021fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81021fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102202:	4b14      	ldr	r3, [pc, #80]	@ (8102254 <HAL_SAI_MspInit+0x160>)
 8102204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810220c:	60bb      	str	r3, [r7, #8]
 810220e:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8102210:	4b0f      	ldr	r3, [pc, #60]	@ (8102250 <HAL_SAI_MspInit+0x15c>)
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	3301      	adds	r3, #1
 8102216:	4a0e      	ldr	r2, [pc, #56]	@ (8102250 <HAL_SAI_MspInit+0x15c>)
 8102218:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 810221a:	2308      	movs	r3, #8
 810221c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102220:	2302      	movs	r3, #2
 8102222:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102226:	2300      	movs	r3, #0
 8102228:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810222c:	2300      	movs	r3, #0
 810222e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102232:	2306      	movs	r3, #6
 8102234:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8102238:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810223c:	4619      	mov	r1, r3
 810223e:	4806      	ldr	r0, [pc, #24]	@ (8102258 <HAL_SAI_MspInit+0x164>)
 8102240:	f002 f89c 	bl	810437c <HAL_GPIO_Init>

    }
}
 8102244:	bf00      	nop
 8102246:	37f0      	adds	r7, #240	@ 0xf0
 8102248:	46bd      	mov	sp, r7
 810224a:	bd80      	pop	{r7, pc}
 810224c:	40015804 	.word	0x40015804
 8102250:	100007d8 	.word	0x100007d8
 8102254:	58024400 	.word	0x58024400
 8102258:	58021000 	.word	0x58021000
 810225c:	58021800 	.word	0x58021800
 8102260:	40015824 	.word	0x40015824

08102264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102264:	b480      	push	{r7}
 8102266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102268:	bf00      	nop
 810226a:	e7fd      	b.n	8102268 <NMI_Handler+0x4>

0810226c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810226c:	b480      	push	{r7}
 810226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102270:	bf00      	nop
 8102272:	e7fd      	b.n	8102270 <HardFault_Handler+0x4>

08102274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102274:	b480      	push	{r7}
 8102276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102278:	bf00      	nop
 810227a:	e7fd      	b.n	8102278 <MemManage_Handler+0x4>

0810227c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810227c:	b480      	push	{r7}
 810227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102280:	bf00      	nop
 8102282:	e7fd      	b.n	8102280 <BusFault_Handler+0x4>

08102284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102284:	b480      	push	{r7}
 8102286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102288:	bf00      	nop
 810228a:	e7fd      	b.n	8102288 <UsageFault_Handler+0x4>

0810228c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810228c:	b480      	push	{r7}
 810228e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102290:	bf00      	nop
 8102292:	46bd      	mov	sp, r7
 8102294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102298:	4770      	bx	lr

0810229a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810229a:	b480      	push	{r7}
 810229c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810229e:	bf00      	nop
 81022a0:	46bd      	mov	sp, r7
 81022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a6:	4770      	bx	lr

081022a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81022a8:	b480      	push	{r7}
 81022aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81022ac:	bf00      	nop
 81022ae:	46bd      	mov	sp, r7
 81022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b4:	4770      	bx	lr

081022b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81022b6:	b580      	push	{r7, lr}
 81022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81022ba:	f000 f8cd 	bl	8102458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81022be:	bf00      	nop
 81022c0:	bd80      	pop	{r7, pc}
	...

081022c4 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 81022c4:	b580      	push	{r7, lr}
 81022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 81022c8:	4802      	ldr	r0, [pc, #8]	@ (81022d4 <CEC_IRQHandler+0x10>)
 81022ca:	f001 fa05 	bl	81036d8 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 81022ce:	bf00      	nop
 81022d0:	bd80      	pop	{r7, pc}
 81022d2:	bf00      	nop
 81022d4:	1000029c 	.word	0x1000029c

081022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81022d8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8102314 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81022dc:	f7fe f9ae 	bl	810063c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81022e0:	f7fe f990 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81022e4:	480c      	ldr	r0, [pc, #48]	@ (8102318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81022e6:	490d      	ldr	r1, [pc, #52]	@ (810231c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81022e8:	4a0d      	ldr	r2, [pc, #52]	@ (8102320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81022ec:	e002      	b.n	81022f4 <LoopCopyDataInit>

081022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81022f2:	3304      	adds	r3, #4

081022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81022f8:	d3f9      	bcc.n	81022ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81022fa:	4a0a      	ldr	r2, [pc, #40]	@ (8102324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81022fc:	4c0a      	ldr	r4, [pc, #40]	@ (8102328 <LoopFillZerobss+0x22>)
  movs r3, #0
 81022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102300:	e001      	b.n	8102306 <LoopFillZerobss>

08102302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102304:	3204      	adds	r2, #4

08102306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102308:	d3fb      	bcc.n	8102302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810230a:	f009 ffeb 	bl	810c2e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810230e:	f7fe f9ad 	bl	810066c <main>
  bx  lr
 8102312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102314:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102318:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810231c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8102320:	0810c38c 	.word	0x0810c38c
  ldr r2, =_sbss
 8102324:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 8102328:	100007e0 	.word	0x100007e0

0810232c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810232c:	e7fe      	b.n	810232c <ADC3_IRQHandler>
	...

08102330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102330:	b580      	push	{r7, lr}
 8102332:	b082      	sub	sp, #8
 8102334:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102336:	4b28      	ldr	r3, [pc, #160]	@ (81023d8 <HAL_Init+0xa8>)
 8102338:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810233c:	4a26      	ldr	r2, [pc, #152]	@ (81023d8 <HAL_Init+0xa8>)
 810233e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102342:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102346:	4b24      	ldr	r3, [pc, #144]	@ (81023d8 <HAL_Init+0xa8>)
 8102348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810234c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102350:	603b      	str	r3, [r7, #0]
 8102352:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102354:	4b21      	ldr	r3, [pc, #132]	@ (81023dc <HAL_Init+0xac>)
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810235c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102360:	4a1e      	ldr	r2, [pc, #120]	@ (81023dc <HAL_Init+0xac>)
 8102362:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102366:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102368:	4b1c      	ldr	r3, [pc, #112]	@ (81023dc <HAL_Init+0xac>)
 810236a:	681b      	ldr	r3, [r3, #0]
 810236c:	4a1b      	ldr	r2, [pc, #108]	@ (81023dc <HAL_Init+0xac>)
 810236e:	f043 0301 	orr.w	r3, r3, #1
 8102372:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102374:	2003      	movs	r0, #3
 8102376:	f001 fb7b 	bl	8103a70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810237a:	f002 fb03 	bl	8104984 <HAL_RCC_GetSysClockFreq>
 810237e:	4602      	mov	r2, r0
 8102380:	4b15      	ldr	r3, [pc, #84]	@ (81023d8 <HAL_Init+0xa8>)
 8102382:	699b      	ldr	r3, [r3, #24]
 8102384:	0a1b      	lsrs	r3, r3, #8
 8102386:	f003 030f 	and.w	r3, r3, #15
 810238a:	4915      	ldr	r1, [pc, #84]	@ (81023e0 <HAL_Init+0xb0>)
 810238c:	5ccb      	ldrb	r3, [r1, r3]
 810238e:	f003 031f 	and.w	r3, r3, #31
 8102392:	fa22 f303 	lsr.w	r3, r2, r3
 8102396:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102398:	4b0f      	ldr	r3, [pc, #60]	@ (81023d8 <HAL_Init+0xa8>)
 810239a:	699b      	ldr	r3, [r3, #24]
 810239c:	f003 030f 	and.w	r3, r3, #15
 81023a0:	4a0f      	ldr	r2, [pc, #60]	@ (81023e0 <HAL_Init+0xb0>)
 81023a2:	5cd3      	ldrb	r3, [r2, r3]
 81023a4:	f003 031f 	and.w	r3, r3, #31
 81023a8:	687a      	ldr	r2, [r7, #4]
 81023aa:	fa22 f303 	lsr.w	r3, r2, r3
 81023ae:	4a0d      	ldr	r2, [pc, #52]	@ (81023e4 <HAL_Init+0xb4>)
 81023b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81023b2:	4b0c      	ldr	r3, [pc, #48]	@ (81023e4 <HAL_Init+0xb4>)
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	4a0c      	ldr	r2, [pc, #48]	@ (81023e8 <HAL_Init+0xb8>)
 81023b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81023ba:	2000      	movs	r0, #0
 81023bc:	f000 f816 	bl	81023ec <HAL_InitTick>
 81023c0:	4603      	mov	r3, r0
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d001      	beq.n	81023ca <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81023c6:	2301      	movs	r3, #1
 81023c8:	e002      	b.n	81023d0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81023ca:	f7fe ff53 	bl	8101274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81023ce:	2300      	movs	r3, #0
}
 81023d0:	4618      	mov	r0, r3
 81023d2:	3708      	adds	r7, #8
 81023d4:	46bd      	mov	sp, r7
 81023d6:	bd80      	pop	{r7, pc}
 81023d8:	58024400 	.word	0x58024400
 81023dc:	40024400 	.word	0x40024400
 81023e0:	0810c344 	.word	0x0810c344
 81023e4:	10000004 	.word	0x10000004
 81023e8:	10000000 	.word	0x10000000

081023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81023ec:	b580      	push	{r7, lr}
 81023ee:	b082      	sub	sp, #8
 81023f0:	af00      	add	r7, sp, #0
 81023f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81023f4:	4b15      	ldr	r3, [pc, #84]	@ (810244c <HAL_InitTick+0x60>)
 81023f6:	781b      	ldrb	r3, [r3, #0]
 81023f8:	2b00      	cmp	r3, #0
 81023fa:	d101      	bne.n	8102400 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81023fc:	2301      	movs	r3, #1
 81023fe:	e021      	b.n	8102444 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102400:	4b13      	ldr	r3, [pc, #76]	@ (8102450 <HAL_InitTick+0x64>)
 8102402:	681a      	ldr	r2, [r3, #0]
 8102404:	4b11      	ldr	r3, [pc, #68]	@ (810244c <HAL_InitTick+0x60>)
 8102406:	781b      	ldrb	r3, [r3, #0]
 8102408:	4619      	mov	r1, r3
 810240a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102412:	fbb2 f3f3 	udiv	r3, r2, r3
 8102416:	4618      	mov	r0, r3
 8102418:	f001 fb5d 	bl	8103ad6 <HAL_SYSTICK_Config>
 810241c:	4603      	mov	r3, r0
 810241e:	2b00      	cmp	r3, #0
 8102420:	d001      	beq.n	8102426 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102422:	2301      	movs	r3, #1
 8102424:	e00e      	b.n	8102444 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	2b0f      	cmp	r3, #15
 810242a:	d80a      	bhi.n	8102442 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810242c:	2200      	movs	r2, #0
 810242e:	6879      	ldr	r1, [r7, #4]
 8102430:	f04f 30ff 	mov.w	r0, #4294967295
 8102434:	f001 fb27 	bl	8103a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102438:	4a06      	ldr	r2, [pc, #24]	@ (8102454 <HAL_InitTick+0x68>)
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810243e:	2300      	movs	r3, #0
 8102440:	e000      	b.n	8102444 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102442:	2301      	movs	r3, #1
}
 8102444:	4618      	mov	r0, r3
 8102446:	3708      	adds	r7, #8
 8102448:	46bd      	mov	sp, r7
 810244a:	bd80      	pop	{r7, pc}
 810244c:	1000000c 	.word	0x1000000c
 8102450:	10000000 	.word	0x10000000
 8102454:	10000008 	.word	0x10000008

08102458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102458:	b480      	push	{r7}
 810245a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810245c:	4b06      	ldr	r3, [pc, #24]	@ (8102478 <HAL_IncTick+0x20>)
 810245e:	781b      	ldrb	r3, [r3, #0]
 8102460:	461a      	mov	r2, r3
 8102462:	4b06      	ldr	r3, [pc, #24]	@ (810247c <HAL_IncTick+0x24>)
 8102464:	681b      	ldr	r3, [r3, #0]
 8102466:	4413      	add	r3, r2
 8102468:	4a04      	ldr	r2, [pc, #16]	@ (810247c <HAL_IncTick+0x24>)
 810246a:	6013      	str	r3, [r2, #0]
}
 810246c:	bf00      	nop
 810246e:	46bd      	mov	sp, r7
 8102470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102474:	4770      	bx	lr
 8102476:	bf00      	nop
 8102478:	1000000c 	.word	0x1000000c
 810247c:	100007dc 	.word	0x100007dc

08102480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102480:	b480      	push	{r7}
 8102482:	af00      	add	r7, sp, #0
  return uwTick;
 8102484:	4b03      	ldr	r3, [pc, #12]	@ (8102494 <HAL_GetTick+0x14>)
 8102486:	681b      	ldr	r3, [r3, #0]
}
 8102488:	4618      	mov	r0, r3
 810248a:	46bd      	mov	sp, r7
 810248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102490:	4770      	bx	lr
 8102492:	bf00      	nop
 8102494:	100007dc 	.word	0x100007dc

08102498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102498:	b580      	push	{r7, lr}
 810249a:	b084      	sub	sp, #16
 810249c:	af00      	add	r7, sp, #0
 810249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81024a0:	f7ff ffee 	bl	8102480 <HAL_GetTick>
 81024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81024aa:	68fb      	ldr	r3, [r7, #12]
 81024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81024b0:	d005      	beq.n	81024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81024b2:	4b0a      	ldr	r3, [pc, #40]	@ (81024dc <HAL_Delay+0x44>)
 81024b4:	781b      	ldrb	r3, [r3, #0]
 81024b6:	461a      	mov	r2, r3
 81024b8:	68fb      	ldr	r3, [r7, #12]
 81024ba:	4413      	add	r3, r2
 81024bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81024be:	bf00      	nop
 81024c0:	f7ff ffde 	bl	8102480 <HAL_GetTick>
 81024c4:	4602      	mov	r2, r0
 81024c6:	68bb      	ldr	r3, [r7, #8]
 81024c8:	1ad3      	subs	r3, r2, r3
 81024ca:	68fa      	ldr	r2, [r7, #12]
 81024cc:	429a      	cmp	r2, r3
 81024ce:	d8f7      	bhi.n	81024c0 <HAL_Delay+0x28>
  {
  }
}
 81024d0:	bf00      	nop
 81024d2:	bf00      	nop
 81024d4:	3710      	adds	r7, #16
 81024d6:	46bd      	mov	sp, r7
 81024d8:	bd80      	pop	{r7, pc}
 81024da:	bf00      	nop
 81024dc:	1000000c 	.word	0x1000000c

081024e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81024e0:	b480      	push	{r7}
 81024e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81024e4:	4b03      	ldr	r3, [pc, #12]	@ (81024f4 <HAL_GetREVID+0x14>)
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	0c1b      	lsrs	r3, r3, #16
}
 81024ea:	4618      	mov	r0, r3
 81024ec:	46bd      	mov	sp, r7
 81024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024f2:	4770      	bx	lr
 81024f4:	5c001000 	.word	0x5c001000

081024f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81024f8:	b480      	push	{r7}
 81024fa:	b083      	sub	sp, #12
 81024fc:	af00      	add	r7, sp, #0
 81024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102500:	4b06      	ldr	r3, [pc, #24]	@ (810251c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102502:	685b      	ldr	r3, [r3, #4]
 8102504:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8102508:	4904      	ldr	r1, [pc, #16]	@ (810251c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	4313      	orrs	r3, r2
 810250e:	604b      	str	r3, [r1, #4]
}
 8102510:	bf00      	nop
 8102512:	370c      	adds	r7, #12
 8102514:	46bd      	mov	sp, r7
 8102516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251a:	4770      	bx	lr
 810251c:	58000400 	.word	0x58000400

08102520 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102520:	b480      	push	{r7}
 8102522:	b083      	sub	sp, #12
 8102524:	af00      	add	r7, sp, #0
 8102526:	6078      	str	r0, [r7, #4]
 8102528:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810252a:	4b07      	ldr	r3, [pc, #28]	@ (8102548 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810252c:	685a      	ldr	r2, [r3, #4]
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	43db      	mvns	r3, r3
 8102532:	401a      	ands	r2, r3
 8102534:	4904      	ldr	r1, [pc, #16]	@ (8102548 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102536:	683b      	ldr	r3, [r7, #0]
 8102538:	4313      	orrs	r3, r2
 810253a:	604b      	str	r3, [r1, #4]
}
 810253c:	bf00      	nop
 810253e:	370c      	adds	r7, #12
 8102540:	46bd      	mov	sp, r7
 8102542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102546:	4770      	bx	lr
 8102548:	58000400 	.word	0x58000400

0810254c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 810254c:	b480      	push	{r7}
 810254e:	b083      	sub	sp, #12
 8102550:	af00      	add	r7, sp, #0
 8102552:	6078      	str	r0, [r7, #4]
 8102554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	689b      	ldr	r3, [r3, #8]
 810255a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 810255e:	683b      	ldr	r3, [r7, #0]
 8102560:	431a      	orrs	r2, r3
 8102562:	687b      	ldr	r3, [r7, #4]
 8102564:	609a      	str	r2, [r3, #8]
}
 8102566:	bf00      	nop
 8102568:	370c      	adds	r7, #12
 810256a:	46bd      	mov	sp, r7
 810256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102570:	4770      	bx	lr

08102572 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102572:	b480      	push	{r7}
 8102574:	b083      	sub	sp, #12
 8102576:	af00      	add	r7, sp, #0
 8102578:	6078      	str	r0, [r7, #4]
 810257a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	689b      	ldr	r3, [r3, #8]
 8102580:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8102584:	683b      	ldr	r3, [r7, #0]
 8102586:	431a      	orrs	r2, r3
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	609a      	str	r2, [r3, #8]
}
 810258c:	bf00      	nop
 810258e:	370c      	adds	r7, #12
 8102590:	46bd      	mov	sp, r7
 8102592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102596:	4770      	bx	lr

08102598 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102598:	b480      	push	{r7}
 810259a:	b083      	sub	sp, #12
 810259c:	af00      	add	r7, sp, #0
 810259e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	689b      	ldr	r3, [r3, #8]
 81025a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81025a8:	4618      	mov	r0, r3
 81025aa:	370c      	adds	r7, #12
 81025ac:	46bd      	mov	sp, r7
 81025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025b2:	4770      	bx	lr

081025b4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 81025b4:	b480      	push	{r7}
 81025b6:	b087      	sub	sp, #28
 81025b8:	af00      	add	r7, sp, #0
 81025ba:	6078      	str	r0, [r7, #4]
 81025bc:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 81025be:	683b      	ldr	r3, [r7, #0]
 81025c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81025c4:	2b00      	cmp	r3, #0
 81025c6:	d107      	bne.n	81025d8 <LL_ADC_SetChannelPreselection+0x24>
 81025c8:	683b      	ldr	r3, [r7, #0]
 81025ca:	0e9b      	lsrs	r3, r3, #26
 81025cc:	f003 031f 	and.w	r3, r3, #31
 81025d0:	2201      	movs	r2, #1
 81025d2:	fa02 f303 	lsl.w	r3, r2, r3
 81025d6:	e015      	b.n	8102604 <LL_ADC_SetChannelPreselection+0x50>
 81025d8:	683b      	ldr	r3, [r7, #0]
 81025da:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81025dc:	693b      	ldr	r3, [r7, #16]
 81025de:	fa93 f3a3 	rbit	r3, r3
 81025e2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81025e4:	68fb      	ldr	r3, [r7, #12]
 81025e6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81025e8:	697b      	ldr	r3, [r7, #20]
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	d101      	bne.n	81025f2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 81025ee:	2320      	movs	r3, #32
 81025f0:	e003      	b.n	81025fa <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 81025f2:	697b      	ldr	r3, [r7, #20]
 81025f4:	fab3 f383 	clz	r3, r3
 81025f8:	b2db      	uxtb	r3, r3
 81025fa:	f003 031f 	and.w	r3, r3, #31
 81025fe:	2201      	movs	r2, #1
 8102600:	fa02 f303 	lsl.w	r3, r2, r3
 8102604:	687a      	ldr	r2, [r7, #4]
 8102606:	69d2      	ldr	r2, [r2, #28]
 8102608:	431a      	orrs	r2, r3
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 810260e:	bf00      	nop
 8102610:	371c      	adds	r7, #28
 8102612:	46bd      	mov	sp, r7
 8102614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102618:	4770      	bx	lr

0810261a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810261a:	b480      	push	{r7}
 810261c:	b087      	sub	sp, #28
 810261e:	af00      	add	r7, sp, #0
 8102620:	60f8      	str	r0, [r7, #12]
 8102622:	60b9      	str	r1, [r7, #8]
 8102624:	607a      	str	r2, [r7, #4]
 8102626:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	3360      	adds	r3, #96	@ 0x60
 810262c:	461a      	mov	r2, r3
 810262e:	68bb      	ldr	r3, [r7, #8]
 8102630:	009b      	lsls	r3, r3, #2
 8102632:	4413      	add	r3, r2
 8102634:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102636:	697b      	ldr	r3, [r7, #20]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102644:	683b      	ldr	r3, [r7, #0]
 8102646:	430b      	orrs	r3, r1
 8102648:	431a      	orrs	r2, r3
 810264a:	697b      	ldr	r3, [r7, #20]
 810264c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 810264e:	bf00      	nop
 8102650:	371c      	adds	r7, #28
 8102652:	46bd      	mov	sp, r7
 8102654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102658:	4770      	bx	lr

0810265a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810265a:	b480      	push	{r7}
 810265c:	b085      	sub	sp, #20
 810265e:	af00      	add	r7, sp, #0
 8102660:	60f8      	str	r0, [r7, #12]
 8102662:	60b9      	str	r1, [r7, #8]
 8102664:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	691b      	ldr	r3, [r3, #16]
 810266a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 810266e:	68bb      	ldr	r3, [r7, #8]
 8102670:	f003 031f 	and.w	r3, r3, #31
 8102674:	6879      	ldr	r1, [r7, #4]
 8102676:	fa01 f303 	lsl.w	r3, r1, r3
 810267a:	431a      	orrs	r2, r3
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	611a      	str	r2, [r3, #16]
}
 8102680:	bf00      	nop
 8102682:	3714      	adds	r7, #20
 8102684:	46bd      	mov	sp, r7
 8102686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810268a:	4770      	bx	lr

0810268c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810268c:	b480      	push	{r7}
 810268e:	b087      	sub	sp, #28
 8102690:	af00      	add	r7, sp, #0
 8102692:	60f8      	str	r0, [r7, #12]
 8102694:	60b9      	str	r1, [r7, #8]
 8102696:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102698:	68fb      	ldr	r3, [r7, #12]
 810269a:	3360      	adds	r3, #96	@ 0x60
 810269c:	461a      	mov	r2, r3
 810269e:	68bb      	ldr	r3, [r7, #8]
 81026a0:	009b      	lsls	r3, r3, #2
 81026a2:	4413      	add	r3, r2
 81026a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81026a6:	697b      	ldr	r3, [r7, #20]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	431a      	orrs	r2, r3
 81026b2:	697b      	ldr	r3, [r7, #20]
 81026b4:	601a      	str	r2, [r3, #0]
  }
}
 81026b6:	bf00      	nop
 81026b8:	371c      	adds	r7, #28
 81026ba:	46bd      	mov	sp, r7
 81026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026c0:	4770      	bx	lr

081026c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81026c2:	b480      	push	{r7}
 81026c4:	b087      	sub	sp, #28
 81026c6:	af00      	add	r7, sp, #0
 81026c8:	60f8      	str	r0, [r7, #12]
 81026ca:	60b9      	str	r1, [r7, #8]
 81026cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	3330      	adds	r3, #48	@ 0x30
 81026d2:	461a      	mov	r2, r3
 81026d4:	68bb      	ldr	r3, [r7, #8]
 81026d6:	0a1b      	lsrs	r3, r3, #8
 81026d8:	009b      	lsls	r3, r3, #2
 81026da:	f003 030c 	and.w	r3, r3, #12
 81026de:	4413      	add	r3, r2
 81026e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81026e2:	697b      	ldr	r3, [r7, #20]
 81026e4:	681a      	ldr	r2, [r3, #0]
 81026e6:	68bb      	ldr	r3, [r7, #8]
 81026e8:	f003 031f 	and.w	r3, r3, #31
 81026ec:	211f      	movs	r1, #31
 81026ee:	fa01 f303 	lsl.w	r3, r1, r3
 81026f2:	43db      	mvns	r3, r3
 81026f4:	401a      	ands	r2, r3
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	0e9b      	lsrs	r3, r3, #26
 81026fa:	f003 011f 	and.w	r1, r3, #31
 81026fe:	68bb      	ldr	r3, [r7, #8]
 8102700:	f003 031f 	and.w	r3, r3, #31
 8102704:	fa01 f303 	lsl.w	r3, r1, r3
 8102708:	431a      	orrs	r2, r3
 810270a:	697b      	ldr	r3, [r7, #20]
 810270c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810270e:	bf00      	nop
 8102710:	371c      	adds	r7, #28
 8102712:	46bd      	mov	sp, r7
 8102714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102718:	4770      	bx	lr

0810271a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810271a:	b480      	push	{r7}
 810271c:	b087      	sub	sp, #28
 810271e:	af00      	add	r7, sp, #0
 8102720:	60f8      	str	r0, [r7, #12]
 8102722:	60b9      	str	r1, [r7, #8]
 8102724:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102726:	68fb      	ldr	r3, [r7, #12]
 8102728:	3314      	adds	r3, #20
 810272a:	461a      	mov	r2, r3
 810272c:	68bb      	ldr	r3, [r7, #8]
 810272e:	0e5b      	lsrs	r3, r3, #25
 8102730:	009b      	lsls	r3, r3, #2
 8102732:	f003 0304 	and.w	r3, r3, #4
 8102736:	4413      	add	r3, r2
 8102738:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810273a:	697b      	ldr	r3, [r7, #20]
 810273c:	681a      	ldr	r2, [r3, #0]
 810273e:	68bb      	ldr	r3, [r7, #8]
 8102740:	0d1b      	lsrs	r3, r3, #20
 8102742:	f003 031f 	and.w	r3, r3, #31
 8102746:	2107      	movs	r1, #7
 8102748:	fa01 f303 	lsl.w	r3, r1, r3
 810274c:	43db      	mvns	r3, r3
 810274e:	401a      	ands	r2, r3
 8102750:	68bb      	ldr	r3, [r7, #8]
 8102752:	0d1b      	lsrs	r3, r3, #20
 8102754:	f003 031f 	and.w	r3, r3, #31
 8102758:	6879      	ldr	r1, [r7, #4]
 810275a:	fa01 f303 	lsl.w	r3, r1, r3
 810275e:	431a      	orrs	r2, r3
 8102760:	697b      	ldr	r3, [r7, #20]
 8102762:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102764:	bf00      	nop
 8102766:	371c      	adds	r7, #28
 8102768:	46bd      	mov	sp, r7
 810276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810276e:	4770      	bx	lr

08102770 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102770:	b480      	push	{r7}
 8102772:	b085      	sub	sp, #20
 8102774:	af00      	add	r7, sp, #0
 8102776:	60f8      	str	r0, [r7, #12]
 8102778:	60b9      	str	r1, [r7, #8]
 810277a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102782:	68bb      	ldr	r3, [r7, #8]
 8102784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102788:	43db      	mvns	r3, r3
 810278a:	401a      	ands	r2, r3
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	f003 0318 	and.w	r3, r3, #24
 8102792:	4908      	ldr	r1, [pc, #32]	@ (81027b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102794:	40d9      	lsrs	r1, r3
 8102796:	68bb      	ldr	r3, [r7, #8]
 8102798:	400b      	ands	r3, r1
 810279a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810279e:	431a      	orrs	r2, r3
 81027a0:	68fb      	ldr	r3, [r7, #12]
 81027a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81027a6:	bf00      	nop
 81027a8:	3714      	adds	r7, #20
 81027aa:	46bd      	mov	sp, r7
 81027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027b0:	4770      	bx	lr
 81027b2:	bf00      	nop
 81027b4:	000fffff 	.word	0x000fffff

081027b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81027b8:	b480      	push	{r7}
 81027ba:	b083      	sub	sp, #12
 81027bc:	af00      	add	r7, sp, #0
 81027be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	689b      	ldr	r3, [r3, #8]
 81027c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 81027c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81027cc:	687a      	ldr	r2, [r7, #4]
 81027ce:	6093      	str	r3, [r2, #8]
}
 81027d0:	bf00      	nop
 81027d2:	370c      	adds	r7, #12
 81027d4:	46bd      	mov	sp, r7
 81027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027da:	4770      	bx	lr

081027dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 81027dc:	b480      	push	{r7}
 81027de:	b083      	sub	sp, #12
 81027e0:	af00      	add	r7, sp, #0
 81027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	689b      	ldr	r3, [r3, #8]
 81027e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81027ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81027f0:	d101      	bne.n	81027f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81027f2:	2301      	movs	r3, #1
 81027f4:	e000      	b.n	81027f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81027f6:	2300      	movs	r3, #0
}
 81027f8:	4618      	mov	r0, r3
 81027fa:	370c      	adds	r7, #12
 81027fc:	46bd      	mov	sp, r7
 81027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102802:	4770      	bx	lr

08102804 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102804:	b480      	push	{r7}
 8102806:	b083      	sub	sp, #12
 8102808:	af00      	add	r7, sp, #0
 810280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	689b      	ldr	r3, [r3, #8]
 8102810:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102814:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102818:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102820:	bf00      	nop
 8102822:	370c      	adds	r7, #12
 8102824:	46bd      	mov	sp, r7
 8102826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810282a:	4770      	bx	lr

0810282c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 810282c:	b480      	push	{r7}
 810282e:	b083      	sub	sp, #12
 8102830:	af00      	add	r7, sp, #0
 8102832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	689b      	ldr	r3, [r3, #8]
 8102838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810283c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102840:	d101      	bne.n	8102846 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102842:	2301      	movs	r3, #1
 8102844:	e000      	b.n	8102848 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102846:	2300      	movs	r3, #0
}
 8102848:	4618      	mov	r0, r3
 810284a:	370c      	adds	r7, #12
 810284c:	46bd      	mov	sp, r7
 810284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102852:	4770      	bx	lr

08102854 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8102854:	b480      	push	{r7}
 8102856:	b083      	sub	sp, #12
 8102858:	af00      	add	r7, sp, #0
 810285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	689b      	ldr	r3, [r3, #8]
 8102860:	f003 0301 	and.w	r3, r3, #1
 8102864:	2b01      	cmp	r3, #1
 8102866:	d101      	bne.n	810286c <LL_ADC_IsEnabled+0x18>
 8102868:	2301      	movs	r3, #1
 810286a:	e000      	b.n	810286e <LL_ADC_IsEnabled+0x1a>
 810286c:	2300      	movs	r3, #0
}
 810286e:	4618      	mov	r0, r3
 8102870:	370c      	adds	r7, #12
 8102872:	46bd      	mov	sp, r7
 8102874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102878:	4770      	bx	lr

0810287a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 810287a:	b480      	push	{r7}
 810287c:	b083      	sub	sp, #12
 810287e:	af00      	add	r7, sp, #0
 8102880:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	689b      	ldr	r3, [r3, #8]
 8102886:	f003 0304 	and.w	r3, r3, #4
 810288a:	2b04      	cmp	r3, #4
 810288c:	d101      	bne.n	8102892 <LL_ADC_REG_IsConversionOngoing+0x18>
 810288e:	2301      	movs	r3, #1
 8102890:	e000      	b.n	8102894 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102892:	2300      	movs	r3, #0
}
 8102894:	4618      	mov	r0, r3
 8102896:	370c      	adds	r7, #12
 8102898:	46bd      	mov	sp, r7
 810289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810289e:	4770      	bx	lr

081028a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 81028a0:	b480      	push	{r7}
 81028a2:	b083      	sub	sp, #12
 81028a4:	af00      	add	r7, sp, #0
 81028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	689b      	ldr	r3, [r3, #8]
 81028ac:	f003 0308 	and.w	r3, r3, #8
 81028b0:	2b08      	cmp	r3, #8
 81028b2:	d101      	bne.n	81028b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81028b4:	2301      	movs	r3, #1
 81028b6:	e000      	b.n	81028ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81028b8:	2300      	movs	r3, #0
}
 81028ba:	4618      	mov	r0, r3
 81028bc:	370c      	adds	r7, #12
 81028be:	46bd      	mov	sp, r7
 81028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028c4:	4770      	bx	lr
	...

081028c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81028c8:	b590      	push	{r4, r7, lr}
 81028ca:	b089      	sub	sp, #36	@ 0x24
 81028cc:	af00      	add	r7, sp, #0
 81028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81028d0:	2300      	movs	r3, #0
 81028d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81028d4:	2300      	movs	r3, #0
 81028d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	2b00      	cmp	r3, #0
 81028dc:	d101      	bne.n	81028e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81028de:	2301      	movs	r3, #1
 81028e0:	e18f      	b.n	8102c02 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	68db      	ldr	r3, [r3, #12]
 81028e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81028ec:	2b00      	cmp	r3, #0
 81028ee:	d109      	bne.n	8102904 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81028f0:	6878      	ldr	r0, [r7, #4]
 81028f2:	f7fe fcd9 	bl	81012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	2200      	movs	r2, #0
 81028fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	2200      	movs	r2, #0
 8102900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	4618      	mov	r0, r3
 810290a:	f7ff ff67 	bl	81027dc <LL_ADC_IsDeepPowerDownEnabled>
 810290e:	4603      	mov	r3, r0
 8102910:	2b00      	cmp	r3, #0
 8102912:	d004      	beq.n	810291e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	4618      	mov	r0, r3
 810291a:	f7ff ff4d 	bl	81027b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	4618      	mov	r0, r3
 8102924:	f7ff ff82 	bl	810282c <LL_ADC_IsInternalRegulatorEnabled>
 8102928:	4603      	mov	r3, r0
 810292a:	2b00      	cmp	r3, #0
 810292c:	d114      	bne.n	8102958 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810292e:	687b      	ldr	r3, [r7, #4]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	4618      	mov	r0, r3
 8102934:	f7ff ff66 	bl	8102804 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102938:	4b88      	ldr	r3, [pc, #544]	@ (8102b5c <HAL_ADC_Init+0x294>)
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	099b      	lsrs	r3, r3, #6
 810293e:	4a88      	ldr	r2, [pc, #544]	@ (8102b60 <HAL_ADC_Init+0x298>)
 8102940:	fba2 2303 	umull	r2, r3, r2, r3
 8102944:	099b      	lsrs	r3, r3, #6
 8102946:	3301      	adds	r3, #1
 8102948:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810294a:	e002      	b.n	8102952 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810294c:	68bb      	ldr	r3, [r7, #8]
 810294e:	3b01      	subs	r3, #1
 8102950:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102952:	68bb      	ldr	r3, [r7, #8]
 8102954:	2b00      	cmp	r3, #0
 8102956:	d1f9      	bne.n	810294c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4618      	mov	r0, r3
 810295e:	f7ff ff65 	bl	810282c <LL_ADC_IsInternalRegulatorEnabled>
 8102962:	4603      	mov	r3, r0
 8102964:	2b00      	cmp	r3, #0
 8102966:	d10d      	bne.n	8102984 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810296c:	f043 0210 	orr.w	r2, r3, #16
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102978:	f043 0201 	orr.w	r2, r3, #1
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8102980:	2301      	movs	r3, #1
 8102982:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4618      	mov	r0, r3
 810298a:	f7ff ff76 	bl	810287a <LL_ADC_REG_IsConversionOngoing>
 810298e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102994:	f003 0310 	and.w	r3, r3, #16
 8102998:	2b00      	cmp	r3, #0
 810299a:	f040 8129 	bne.w	8102bf0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810299e:	697b      	ldr	r3, [r7, #20]
 81029a0:	2b00      	cmp	r3, #0
 81029a2:	f040 8125 	bne.w	8102bf0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029aa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81029ae:	f043 0202 	orr.w	r2, r3, #2
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4618      	mov	r0, r3
 81029bc:	f7ff ff4a 	bl	8102854 <LL_ADC_IsEnabled>
 81029c0:	4603      	mov	r3, r0
 81029c2:	2b00      	cmp	r3, #0
 81029c4:	d136      	bne.n	8102a34 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	4a66      	ldr	r2, [pc, #408]	@ (8102b64 <HAL_ADC_Init+0x29c>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d004      	beq.n	81029da <HAL_ADC_Init+0x112>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	4a64      	ldr	r2, [pc, #400]	@ (8102b68 <HAL_ADC_Init+0x2a0>)
 81029d6:	4293      	cmp	r3, r2
 81029d8:	d10e      	bne.n	81029f8 <HAL_ADC_Init+0x130>
 81029da:	4862      	ldr	r0, [pc, #392]	@ (8102b64 <HAL_ADC_Init+0x29c>)
 81029dc:	f7ff ff3a 	bl	8102854 <LL_ADC_IsEnabled>
 81029e0:	4604      	mov	r4, r0
 81029e2:	4861      	ldr	r0, [pc, #388]	@ (8102b68 <HAL_ADC_Init+0x2a0>)
 81029e4:	f7ff ff36 	bl	8102854 <LL_ADC_IsEnabled>
 81029e8:	4603      	mov	r3, r0
 81029ea:	4323      	orrs	r3, r4
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	bf0c      	ite	eq
 81029f0:	2301      	moveq	r3, #1
 81029f2:	2300      	movne	r3, #0
 81029f4:	b2db      	uxtb	r3, r3
 81029f6:	e008      	b.n	8102a0a <HAL_ADC_Init+0x142>
 81029f8:	485c      	ldr	r0, [pc, #368]	@ (8102b6c <HAL_ADC_Init+0x2a4>)
 81029fa:	f7ff ff2b 	bl	8102854 <LL_ADC_IsEnabled>
 81029fe:	4603      	mov	r3, r0
 8102a00:	2b00      	cmp	r3, #0
 8102a02:	bf0c      	ite	eq
 8102a04:	2301      	moveq	r3, #1
 8102a06:	2300      	movne	r3, #0
 8102a08:	b2db      	uxtb	r3, r3
 8102a0a:	2b00      	cmp	r3, #0
 8102a0c:	d012      	beq.n	8102a34 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	4a54      	ldr	r2, [pc, #336]	@ (8102b64 <HAL_ADC_Init+0x29c>)
 8102a14:	4293      	cmp	r3, r2
 8102a16:	d004      	beq.n	8102a22 <HAL_ADC_Init+0x15a>
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	681b      	ldr	r3, [r3, #0]
 8102a1c:	4a52      	ldr	r2, [pc, #328]	@ (8102b68 <HAL_ADC_Init+0x2a0>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d101      	bne.n	8102a26 <HAL_ADC_Init+0x15e>
 8102a22:	4a53      	ldr	r2, [pc, #332]	@ (8102b70 <HAL_ADC_Init+0x2a8>)
 8102a24:	e000      	b.n	8102a28 <HAL_ADC_Init+0x160>
 8102a26:	4a53      	ldr	r2, [pc, #332]	@ (8102b74 <HAL_ADC_Init+0x2ac>)
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	685b      	ldr	r3, [r3, #4]
 8102a2c:	4619      	mov	r1, r3
 8102a2e:	4610      	mov	r0, r2
 8102a30:	f7ff fd8c 	bl	810254c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102a34:	f7ff fd54 	bl	81024e0 <HAL_GetREVID>
 8102a38:	4603      	mov	r3, r0
 8102a3a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d914      	bls.n	8102a6c <HAL_ADC_Init+0x1a4>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	689b      	ldr	r3, [r3, #8]
 8102a46:	2b10      	cmp	r3, #16
 8102a48:	d110      	bne.n	8102a6c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	7d5b      	ldrb	r3, [r3, #21]
 8102a4e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a54:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102a5a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	7f1b      	ldrb	r3, [r3, #28]
 8102a60:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102a62:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a64:	f043 030c 	orr.w	r3, r3, #12
 8102a68:	61bb      	str	r3, [r7, #24]
 8102a6a:	e00d      	b.n	8102a88 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	7d5b      	ldrb	r3, [r3, #21]
 8102a70:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a76:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8102a7c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	7f1b      	ldrb	r3, [r3, #28]
 8102a82:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102a84:	4313      	orrs	r3, r2
 8102a86:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	7f1b      	ldrb	r3, [r3, #28]
 8102a8c:	2b01      	cmp	r3, #1
 8102a8e:	d106      	bne.n	8102a9e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	6a1b      	ldr	r3, [r3, #32]
 8102a94:	3b01      	subs	r3, #1
 8102a96:	045b      	lsls	r3, r3, #17
 8102a98:	69ba      	ldr	r2, [r7, #24]
 8102a9a:	4313      	orrs	r3, r2
 8102a9c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102aa2:	2b00      	cmp	r3, #0
 8102aa4:	d009      	beq.n	8102aba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102aa6:	687b      	ldr	r3, [r7, #4]
 8102aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102aaa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ab2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102ab4:	69ba      	ldr	r2, [r7, #24]
 8102ab6:	4313      	orrs	r3, r2
 8102ab8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	68da      	ldr	r2, [r3, #12]
 8102ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8102b78 <HAL_ADC_Init+0x2b0>)
 8102ac2:	4013      	ands	r3, r2
 8102ac4:	687a      	ldr	r2, [r7, #4]
 8102ac6:	6812      	ldr	r2, [r2, #0]
 8102ac8:	69b9      	ldr	r1, [r7, #24]
 8102aca:	430b      	orrs	r3, r1
 8102acc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	681b      	ldr	r3, [r3, #0]
 8102ad2:	4618      	mov	r0, r3
 8102ad4:	f7ff fed1 	bl	810287a <LL_ADC_REG_IsConversionOngoing>
 8102ad8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	4618      	mov	r0, r3
 8102ae0:	f7ff fede 	bl	81028a0 <LL_ADC_INJ_IsConversionOngoing>
 8102ae4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102ae6:	693b      	ldr	r3, [r7, #16]
 8102ae8:	2b00      	cmp	r3, #0
 8102aea:	d15f      	bne.n	8102bac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102aec:	68fb      	ldr	r3, [r7, #12]
 8102aee:	2b00      	cmp	r3, #0
 8102af0:	d15c      	bne.n	8102bac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	7d1b      	ldrb	r3, [r3, #20]
 8102af6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8102afc:	4313      	orrs	r3, r2
 8102afe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	68db      	ldr	r3, [r3, #12]
 8102b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8102b0a:	f023 0303 	bic.w	r3, r3, #3
 8102b0e:	687a      	ldr	r2, [r7, #4]
 8102b10:	6812      	ldr	r2, [r2, #0]
 8102b12:	69b9      	ldr	r1, [r7, #24]
 8102b14:	430b      	orrs	r3, r1
 8102b16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8102b1e:	2b01      	cmp	r3, #1
 8102b20:	d12e      	bne.n	8102b80 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b26:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	691a      	ldr	r2, [r3, #16]
 8102b2e:	4b13      	ldr	r3, [pc, #76]	@ (8102b7c <HAL_ADC_Init+0x2b4>)
 8102b30:	4013      	ands	r3, r2
 8102b32:	687a      	ldr	r2, [r7, #4]
 8102b34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8102b36:	3a01      	subs	r2, #1
 8102b38:	0411      	lsls	r1, r2, #16
 8102b3a:	687a      	ldr	r2, [r7, #4]
 8102b3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8102b3e:	4311      	orrs	r1, r2
 8102b40:	687a      	ldr	r2, [r7, #4]
 8102b42:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102b44:	4311      	orrs	r1, r2
 8102b46:	687a      	ldr	r2, [r7, #4]
 8102b48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8102b4a:	430a      	orrs	r2, r1
 8102b4c:	431a      	orrs	r2, r3
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	f042 0201 	orr.w	r2, r2, #1
 8102b56:	611a      	str	r2, [r3, #16]
 8102b58:	e01a      	b.n	8102b90 <HAL_ADC_Init+0x2c8>
 8102b5a:	bf00      	nop
 8102b5c:	10000000 	.word	0x10000000
 8102b60:	053e2d63 	.word	0x053e2d63
 8102b64:	40022000 	.word	0x40022000
 8102b68:	40022100 	.word	0x40022100
 8102b6c:	58026000 	.word	0x58026000
 8102b70:	40022300 	.word	0x40022300
 8102b74:	58026300 	.word	0x58026300
 8102b78:	fff0c003 	.word	0xfff0c003
 8102b7c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	691a      	ldr	r2, [r3, #16]
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	f022 0201 	bic.w	r2, r2, #1
 8102b8e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	691b      	ldr	r3, [r3, #16]
 8102b96:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	430a      	orrs	r2, r1
 8102ba4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102ba6:	6878      	ldr	r0, [r7, #4]
 8102ba8:	f000 fb20 	bl	81031ec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	68db      	ldr	r3, [r3, #12]
 8102bb0:	2b01      	cmp	r3, #1
 8102bb2:	d10c      	bne.n	8102bce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102bba:	f023 010f 	bic.w	r1, r3, #15
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	699b      	ldr	r3, [r3, #24]
 8102bc2:	1e5a      	subs	r2, r3, #1
 8102bc4:	687b      	ldr	r3, [r7, #4]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	430a      	orrs	r2, r1
 8102bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8102bcc:	e007      	b.n	8102bde <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	681b      	ldr	r3, [r3, #0]
 8102bd8:	f022 020f 	bic.w	r2, r2, #15
 8102bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102be2:	f023 0303 	bic.w	r3, r3, #3
 8102be6:	f043 0201 	orr.w	r2, r3, #1
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	655a      	str	r2, [r3, #84]	@ 0x54
 8102bee:	e007      	b.n	8102c00 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102bf4:	f043 0210 	orr.w	r2, r3, #16
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8102bfc:	2301      	movs	r3, #1
 8102bfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8102c02:	4618      	mov	r0, r3
 8102c04:	3724      	adds	r7, #36	@ 0x24
 8102c06:	46bd      	mov	sp, r7
 8102c08:	bd90      	pop	{r4, r7, pc}
 8102c0a:	bf00      	nop

08102c0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102c0c:	b590      	push	{r4, r7, lr}
 8102c0e:	b08d      	sub	sp, #52	@ 0x34
 8102c10:	af00      	add	r7, sp, #0
 8102c12:	6078      	str	r0, [r7, #4]
 8102c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102c16:	2300      	movs	r3, #0
 8102c18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102c1c:	2300      	movs	r3, #0
 8102c1e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102c20:	683b      	ldr	r3, [r7, #0]
 8102c22:	68db      	ldr	r3, [r3, #12]
 8102c24:	4a65      	ldr	r2, [pc, #404]	@ (8102dbc <HAL_ADC_ConfigChannel+0x1b0>)
 8102c26:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8102c2e:	2b01      	cmp	r3, #1
 8102c30:	d101      	bne.n	8102c36 <HAL_ADC_ConfigChannel+0x2a>
 8102c32:	2302      	movs	r3, #2
 8102c34:	e2c7      	b.n	81031c6 <HAL_ADC_ConfigChannel+0x5ba>
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	2201      	movs	r2, #1
 8102c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	4618      	mov	r0, r3
 8102c44:	f7ff fe19 	bl	810287a <LL_ADC_REG_IsConversionOngoing>
 8102c48:	4603      	mov	r3, r0
 8102c4a:	2b00      	cmp	r3, #0
 8102c4c:	f040 82ac 	bne.w	81031a8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8102c50:	683b      	ldr	r3, [r7, #0]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	2b00      	cmp	r3, #0
 8102c56:	db2c      	blt.n	8102cb2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102c58:	683b      	ldr	r3, [r7, #0]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	d108      	bne.n	8102c76 <HAL_ADC_ConfigChannel+0x6a>
 8102c64:	683b      	ldr	r3, [r7, #0]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	0e9b      	lsrs	r3, r3, #26
 8102c6a:	f003 031f 	and.w	r3, r3, #31
 8102c6e:	2201      	movs	r2, #1
 8102c70:	fa02 f303 	lsl.w	r3, r2, r3
 8102c74:	e016      	b.n	8102ca4 <HAL_ADC_ConfigChannel+0x98>
 8102c76:	683b      	ldr	r3, [r7, #0]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102c7c:	697b      	ldr	r3, [r7, #20]
 8102c7e:	fa93 f3a3 	rbit	r3, r3
 8102c82:	613b      	str	r3, [r7, #16]
  return result;
 8102c84:	693b      	ldr	r3, [r7, #16]
 8102c86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8102c88:	69bb      	ldr	r3, [r7, #24]
 8102c8a:	2b00      	cmp	r3, #0
 8102c8c:	d101      	bne.n	8102c92 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8102c8e:	2320      	movs	r3, #32
 8102c90:	e003      	b.n	8102c9a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8102c92:	69bb      	ldr	r3, [r7, #24]
 8102c94:	fab3 f383 	clz	r3, r3
 8102c98:	b2db      	uxtb	r3, r3
 8102c9a:	f003 031f 	and.w	r3, r3, #31
 8102c9e:	2201      	movs	r2, #1
 8102ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8102ca4:	687a      	ldr	r2, [r7, #4]
 8102ca6:	6812      	ldr	r2, [r2, #0]
 8102ca8:	69d1      	ldr	r1, [r2, #28]
 8102caa:	687a      	ldr	r2, [r7, #4]
 8102cac:	6812      	ldr	r2, [r2, #0]
 8102cae:	430b      	orrs	r3, r1
 8102cb0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	6818      	ldr	r0, [r3, #0]
 8102cb6:	683b      	ldr	r3, [r7, #0]
 8102cb8:	6859      	ldr	r1, [r3, #4]
 8102cba:	683b      	ldr	r3, [r7, #0]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	461a      	mov	r2, r3
 8102cc0:	f7ff fcff 	bl	81026c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	681b      	ldr	r3, [r3, #0]
 8102cc8:	4618      	mov	r0, r3
 8102cca:	f7ff fdd6 	bl	810287a <LL_ADC_REG_IsConversionOngoing>
 8102cce:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	4618      	mov	r0, r3
 8102cd6:	f7ff fde3 	bl	81028a0 <LL_ADC_INJ_IsConversionOngoing>
 8102cda:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	f040 80b8 	bne.w	8102e54 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102ce6:	2b00      	cmp	r3, #0
 8102ce8:	f040 80b4 	bne.w	8102e54 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	6818      	ldr	r0, [r3, #0]
 8102cf0:	683b      	ldr	r3, [r7, #0]
 8102cf2:	6819      	ldr	r1, [r3, #0]
 8102cf4:	683b      	ldr	r3, [r7, #0]
 8102cf6:	689b      	ldr	r3, [r3, #8]
 8102cf8:	461a      	mov	r2, r3
 8102cfa:	f7ff fd0e 	bl	810271a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102cfe:	4b30      	ldr	r3, [pc, #192]	@ (8102dc0 <HAL_ADC_ConfigChannel+0x1b4>)
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8102d06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102d0a:	d10b      	bne.n	8102d24 <HAL_ADC_ConfigChannel+0x118>
 8102d0c:	683b      	ldr	r3, [r7, #0]
 8102d0e:	695a      	ldr	r2, [r3, #20]
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	68db      	ldr	r3, [r3, #12]
 8102d16:	089b      	lsrs	r3, r3, #2
 8102d18:	f003 0307 	and.w	r3, r3, #7
 8102d1c:	005b      	lsls	r3, r3, #1
 8102d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d22:	e01d      	b.n	8102d60 <HAL_ADC_ConfigChannel+0x154>
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	681b      	ldr	r3, [r3, #0]
 8102d28:	68db      	ldr	r3, [r3, #12]
 8102d2a:	f003 0310 	and.w	r3, r3, #16
 8102d2e:	2b00      	cmp	r3, #0
 8102d30:	d10b      	bne.n	8102d4a <HAL_ADC_ConfigChannel+0x13e>
 8102d32:	683b      	ldr	r3, [r7, #0]
 8102d34:	695a      	ldr	r2, [r3, #20]
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	681b      	ldr	r3, [r3, #0]
 8102d3a:	68db      	ldr	r3, [r3, #12]
 8102d3c:	089b      	lsrs	r3, r3, #2
 8102d3e:	f003 0307 	and.w	r3, r3, #7
 8102d42:	005b      	lsls	r3, r3, #1
 8102d44:	fa02 f303 	lsl.w	r3, r2, r3
 8102d48:	e00a      	b.n	8102d60 <HAL_ADC_ConfigChannel+0x154>
 8102d4a:	683b      	ldr	r3, [r7, #0]
 8102d4c:	695a      	ldr	r2, [r3, #20]
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	68db      	ldr	r3, [r3, #12]
 8102d54:	089b      	lsrs	r3, r3, #2
 8102d56:	f003 0304 	and.w	r3, r3, #4
 8102d5a:	005b      	lsls	r3, r3, #1
 8102d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8102d60:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d62:	683b      	ldr	r3, [r7, #0]
 8102d64:	691b      	ldr	r3, [r3, #16]
 8102d66:	2b04      	cmp	r3, #4
 8102d68:	d02c      	beq.n	8102dc4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	6818      	ldr	r0, [r3, #0]
 8102d6e:	683b      	ldr	r3, [r7, #0]
 8102d70:	6919      	ldr	r1, [r3, #16]
 8102d72:	683b      	ldr	r3, [r7, #0]
 8102d74:	681a      	ldr	r2, [r3, #0]
 8102d76:	6a3b      	ldr	r3, [r7, #32]
 8102d78:	f7ff fc4f 	bl	810261a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	6818      	ldr	r0, [r3, #0]
 8102d80:	683b      	ldr	r3, [r7, #0]
 8102d82:	6919      	ldr	r1, [r3, #16]
 8102d84:	683b      	ldr	r3, [r7, #0]
 8102d86:	7e5b      	ldrb	r3, [r3, #25]
 8102d88:	2b01      	cmp	r3, #1
 8102d8a:	d102      	bne.n	8102d92 <HAL_ADC_ConfigChannel+0x186>
 8102d8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8102d90:	e000      	b.n	8102d94 <HAL_ADC_ConfigChannel+0x188>
 8102d92:	2300      	movs	r3, #0
 8102d94:	461a      	mov	r2, r3
 8102d96:	f7ff fc79 	bl	810268c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	6818      	ldr	r0, [r3, #0]
 8102d9e:	683b      	ldr	r3, [r7, #0]
 8102da0:	6919      	ldr	r1, [r3, #16]
 8102da2:	683b      	ldr	r3, [r7, #0]
 8102da4:	7e1b      	ldrb	r3, [r3, #24]
 8102da6:	2b01      	cmp	r3, #1
 8102da8:	d102      	bne.n	8102db0 <HAL_ADC_ConfigChannel+0x1a4>
 8102daa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102dae:	e000      	b.n	8102db2 <HAL_ADC_ConfigChannel+0x1a6>
 8102db0:	2300      	movs	r3, #0
 8102db2:	461a      	mov	r2, r3
 8102db4:	f7ff fc51 	bl	810265a <LL_ADC_SetDataRightShift>
 8102db8:	e04c      	b.n	8102e54 <HAL_ADC_ConfigChannel+0x248>
 8102dba:	bf00      	nop
 8102dbc:	47ff0000 	.word	0x47ff0000
 8102dc0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	681b      	ldr	r3, [r3, #0]
 8102dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102dca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102dce:	683b      	ldr	r3, [r7, #0]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	069b      	lsls	r3, r3, #26
 8102dd4:	429a      	cmp	r2, r3
 8102dd6:	d107      	bne.n	8102de8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102de6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102dee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102df2:	683b      	ldr	r3, [r7, #0]
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	069b      	lsls	r3, r3, #26
 8102df8:	429a      	cmp	r2, r3
 8102dfa:	d107      	bne.n	8102e0c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102e0a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102e16:	683b      	ldr	r3, [r7, #0]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	069b      	lsls	r3, r3, #26
 8102e1c:	429a      	cmp	r2, r3
 8102e1e:	d107      	bne.n	8102e30 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102e2e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102e36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102e3a:	683b      	ldr	r3, [r7, #0]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	069b      	lsls	r3, r3, #26
 8102e40:	429a      	cmp	r2, r3
 8102e42:	d107      	bne.n	8102e54 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	681b      	ldr	r3, [r3, #0]
 8102e4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102e52:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102e54:	687b      	ldr	r3, [r7, #4]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	4618      	mov	r0, r3
 8102e5a:	f7ff fcfb 	bl	8102854 <LL_ADC_IsEnabled>
 8102e5e:	4603      	mov	r3, r0
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	f040 81aa 	bne.w	81031ba <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	6818      	ldr	r0, [r3, #0]
 8102e6a:	683b      	ldr	r3, [r7, #0]
 8102e6c:	6819      	ldr	r1, [r3, #0]
 8102e6e:	683b      	ldr	r3, [r7, #0]
 8102e70:	68db      	ldr	r3, [r3, #12]
 8102e72:	461a      	mov	r2, r3
 8102e74:	f7ff fc7c 	bl	8102770 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102e78:	683b      	ldr	r3, [r7, #0]
 8102e7a:	68db      	ldr	r3, [r3, #12]
 8102e7c:	4a87      	ldr	r2, [pc, #540]	@ (810309c <HAL_ADC_ConfigChannel+0x490>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	f040 809a 	bne.w	8102fb8 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681a      	ldr	r2, [r3, #0]
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	4984      	ldr	r1, [pc, #528]	@ (81030a0 <HAL_ADC_ConfigChannel+0x494>)
 8102e8e:	428b      	cmp	r3, r1
 8102e90:	d147      	bne.n	8102f22 <HAL_ADC_ConfigChannel+0x316>
 8102e92:	683b      	ldr	r3, [r7, #0]
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	4983      	ldr	r1, [pc, #524]	@ (81030a4 <HAL_ADC_ConfigChannel+0x498>)
 8102e98:	428b      	cmp	r3, r1
 8102e9a:	d040      	beq.n	8102f1e <HAL_ADC_ConfigChannel+0x312>
 8102e9c:	683b      	ldr	r3, [r7, #0]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	4981      	ldr	r1, [pc, #516]	@ (81030a8 <HAL_ADC_ConfigChannel+0x49c>)
 8102ea2:	428b      	cmp	r3, r1
 8102ea4:	d039      	beq.n	8102f1a <HAL_ADC_ConfigChannel+0x30e>
 8102ea6:	683b      	ldr	r3, [r7, #0]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	4980      	ldr	r1, [pc, #512]	@ (81030ac <HAL_ADC_ConfigChannel+0x4a0>)
 8102eac:	428b      	cmp	r3, r1
 8102eae:	d032      	beq.n	8102f16 <HAL_ADC_ConfigChannel+0x30a>
 8102eb0:	683b      	ldr	r3, [r7, #0]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	497e      	ldr	r1, [pc, #504]	@ (81030b0 <HAL_ADC_ConfigChannel+0x4a4>)
 8102eb6:	428b      	cmp	r3, r1
 8102eb8:	d02b      	beq.n	8102f12 <HAL_ADC_ConfigChannel+0x306>
 8102eba:	683b      	ldr	r3, [r7, #0]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	497d      	ldr	r1, [pc, #500]	@ (81030b4 <HAL_ADC_ConfigChannel+0x4a8>)
 8102ec0:	428b      	cmp	r3, r1
 8102ec2:	d024      	beq.n	8102f0e <HAL_ADC_ConfigChannel+0x302>
 8102ec4:	683b      	ldr	r3, [r7, #0]
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	497b      	ldr	r1, [pc, #492]	@ (81030b8 <HAL_ADC_ConfigChannel+0x4ac>)
 8102eca:	428b      	cmp	r3, r1
 8102ecc:	d01d      	beq.n	8102f0a <HAL_ADC_ConfigChannel+0x2fe>
 8102ece:	683b      	ldr	r3, [r7, #0]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	497a      	ldr	r1, [pc, #488]	@ (81030bc <HAL_ADC_ConfigChannel+0x4b0>)
 8102ed4:	428b      	cmp	r3, r1
 8102ed6:	d016      	beq.n	8102f06 <HAL_ADC_ConfigChannel+0x2fa>
 8102ed8:	683b      	ldr	r3, [r7, #0]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	4978      	ldr	r1, [pc, #480]	@ (81030c0 <HAL_ADC_ConfigChannel+0x4b4>)
 8102ede:	428b      	cmp	r3, r1
 8102ee0:	d00f      	beq.n	8102f02 <HAL_ADC_ConfigChannel+0x2f6>
 8102ee2:	683b      	ldr	r3, [r7, #0]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	4977      	ldr	r1, [pc, #476]	@ (81030c4 <HAL_ADC_ConfigChannel+0x4b8>)
 8102ee8:	428b      	cmp	r3, r1
 8102eea:	d008      	beq.n	8102efe <HAL_ADC_ConfigChannel+0x2f2>
 8102eec:	683b      	ldr	r3, [r7, #0]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	4975      	ldr	r1, [pc, #468]	@ (81030c8 <HAL_ADC_ConfigChannel+0x4bc>)
 8102ef2:	428b      	cmp	r3, r1
 8102ef4:	d101      	bne.n	8102efa <HAL_ADC_ConfigChannel+0x2ee>
 8102ef6:	4b75      	ldr	r3, [pc, #468]	@ (81030cc <HAL_ADC_ConfigChannel+0x4c0>)
 8102ef8:	e05a      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102efa:	2300      	movs	r3, #0
 8102efc:	e058      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102efe:	4b74      	ldr	r3, [pc, #464]	@ (81030d0 <HAL_ADC_ConfigChannel+0x4c4>)
 8102f00:	e056      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f02:	4b74      	ldr	r3, [pc, #464]	@ (81030d4 <HAL_ADC_ConfigChannel+0x4c8>)
 8102f04:	e054      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f06:	4b6e      	ldr	r3, [pc, #440]	@ (81030c0 <HAL_ADC_ConfigChannel+0x4b4>)
 8102f08:	e052      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f0a:	4b6c      	ldr	r3, [pc, #432]	@ (81030bc <HAL_ADC_ConfigChannel+0x4b0>)
 8102f0c:	e050      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f0e:	4b72      	ldr	r3, [pc, #456]	@ (81030d8 <HAL_ADC_ConfigChannel+0x4cc>)
 8102f10:	e04e      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f12:	4b72      	ldr	r3, [pc, #456]	@ (81030dc <HAL_ADC_ConfigChannel+0x4d0>)
 8102f14:	e04c      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f16:	4b72      	ldr	r3, [pc, #456]	@ (81030e0 <HAL_ADC_ConfigChannel+0x4d4>)
 8102f18:	e04a      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f1a:	4b72      	ldr	r3, [pc, #456]	@ (81030e4 <HAL_ADC_ConfigChannel+0x4d8>)
 8102f1c:	e048      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f1e:	2301      	movs	r3, #1
 8102f20:	e046      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4970      	ldr	r1, [pc, #448]	@ (81030e8 <HAL_ADC_ConfigChannel+0x4dc>)
 8102f28:	428b      	cmp	r3, r1
 8102f2a:	d140      	bne.n	8102fae <HAL_ADC_ConfigChannel+0x3a2>
 8102f2c:	683b      	ldr	r3, [r7, #0]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	495c      	ldr	r1, [pc, #368]	@ (81030a4 <HAL_ADC_ConfigChannel+0x498>)
 8102f32:	428b      	cmp	r3, r1
 8102f34:	d039      	beq.n	8102faa <HAL_ADC_ConfigChannel+0x39e>
 8102f36:	683b      	ldr	r3, [r7, #0]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	495b      	ldr	r1, [pc, #364]	@ (81030a8 <HAL_ADC_ConfigChannel+0x49c>)
 8102f3c:	428b      	cmp	r3, r1
 8102f3e:	d032      	beq.n	8102fa6 <HAL_ADC_ConfigChannel+0x39a>
 8102f40:	683b      	ldr	r3, [r7, #0]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	4959      	ldr	r1, [pc, #356]	@ (81030ac <HAL_ADC_ConfigChannel+0x4a0>)
 8102f46:	428b      	cmp	r3, r1
 8102f48:	d02b      	beq.n	8102fa2 <HAL_ADC_ConfigChannel+0x396>
 8102f4a:	683b      	ldr	r3, [r7, #0]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	4958      	ldr	r1, [pc, #352]	@ (81030b0 <HAL_ADC_ConfigChannel+0x4a4>)
 8102f50:	428b      	cmp	r3, r1
 8102f52:	d024      	beq.n	8102f9e <HAL_ADC_ConfigChannel+0x392>
 8102f54:	683b      	ldr	r3, [r7, #0]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4956      	ldr	r1, [pc, #344]	@ (81030b4 <HAL_ADC_ConfigChannel+0x4a8>)
 8102f5a:	428b      	cmp	r3, r1
 8102f5c:	d01d      	beq.n	8102f9a <HAL_ADC_ConfigChannel+0x38e>
 8102f5e:	683b      	ldr	r3, [r7, #0]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4955      	ldr	r1, [pc, #340]	@ (81030b8 <HAL_ADC_ConfigChannel+0x4ac>)
 8102f64:	428b      	cmp	r3, r1
 8102f66:	d016      	beq.n	8102f96 <HAL_ADC_ConfigChannel+0x38a>
 8102f68:	683b      	ldr	r3, [r7, #0]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4953      	ldr	r1, [pc, #332]	@ (81030bc <HAL_ADC_ConfigChannel+0x4b0>)
 8102f6e:	428b      	cmp	r3, r1
 8102f70:	d00f      	beq.n	8102f92 <HAL_ADC_ConfigChannel+0x386>
 8102f72:	683b      	ldr	r3, [r7, #0]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4952      	ldr	r1, [pc, #328]	@ (81030c0 <HAL_ADC_ConfigChannel+0x4b4>)
 8102f78:	428b      	cmp	r3, r1
 8102f7a:	d008      	beq.n	8102f8e <HAL_ADC_ConfigChannel+0x382>
 8102f7c:	683b      	ldr	r3, [r7, #0]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4951      	ldr	r1, [pc, #324]	@ (81030c8 <HAL_ADC_ConfigChannel+0x4bc>)
 8102f82:	428b      	cmp	r3, r1
 8102f84:	d101      	bne.n	8102f8a <HAL_ADC_ConfigChannel+0x37e>
 8102f86:	4b51      	ldr	r3, [pc, #324]	@ (81030cc <HAL_ADC_ConfigChannel+0x4c0>)
 8102f88:	e012      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f8a:	2300      	movs	r3, #0
 8102f8c:	e010      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f8e:	4b51      	ldr	r3, [pc, #324]	@ (81030d4 <HAL_ADC_ConfigChannel+0x4c8>)
 8102f90:	e00e      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f92:	4b4b      	ldr	r3, [pc, #300]	@ (81030c0 <HAL_ADC_ConfigChannel+0x4b4>)
 8102f94:	e00c      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f96:	4b49      	ldr	r3, [pc, #292]	@ (81030bc <HAL_ADC_ConfigChannel+0x4b0>)
 8102f98:	e00a      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f9a:	4b4f      	ldr	r3, [pc, #316]	@ (81030d8 <HAL_ADC_ConfigChannel+0x4cc>)
 8102f9c:	e008      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102f9e:	4b4f      	ldr	r3, [pc, #316]	@ (81030dc <HAL_ADC_ConfigChannel+0x4d0>)
 8102fa0:	e006      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102fa2:	4b4f      	ldr	r3, [pc, #316]	@ (81030e0 <HAL_ADC_ConfigChannel+0x4d4>)
 8102fa4:	e004      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102fa6:	4b4f      	ldr	r3, [pc, #316]	@ (81030e4 <HAL_ADC_ConfigChannel+0x4d8>)
 8102fa8:	e002      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102faa:	2301      	movs	r3, #1
 8102fac:	e000      	b.n	8102fb0 <HAL_ADC_ConfigChannel+0x3a4>
 8102fae:	2300      	movs	r3, #0
 8102fb0:	4619      	mov	r1, r3
 8102fb2:	4610      	mov	r0, r2
 8102fb4:	f7ff fafe 	bl	81025b4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102fb8:	683b      	ldr	r3, [r7, #0]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	2b00      	cmp	r3, #0
 8102fbe:	f280 80fc 	bge.w	81031ba <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4a36      	ldr	r2, [pc, #216]	@ (81030a0 <HAL_ADC_ConfigChannel+0x494>)
 8102fc8:	4293      	cmp	r3, r2
 8102fca:	d004      	beq.n	8102fd6 <HAL_ADC_ConfigChannel+0x3ca>
 8102fcc:	687b      	ldr	r3, [r7, #4]
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	4a45      	ldr	r2, [pc, #276]	@ (81030e8 <HAL_ADC_ConfigChannel+0x4dc>)
 8102fd2:	4293      	cmp	r3, r2
 8102fd4:	d101      	bne.n	8102fda <HAL_ADC_ConfigChannel+0x3ce>
 8102fd6:	4b45      	ldr	r3, [pc, #276]	@ (81030ec <HAL_ADC_ConfigChannel+0x4e0>)
 8102fd8:	e000      	b.n	8102fdc <HAL_ADC_ConfigChannel+0x3d0>
 8102fda:	4b45      	ldr	r3, [pc, #276]	@ (81030f0 <HAL_ADC_ConfigChannel+0x4e4>)
 8102fdc:	4618      	mov	r0, r3
 8102fde:	f7ff fadb 	bl	8102598 <LL_ADC_GetCommonPathInternalCh>
 8102fe2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	681b      	ldr	r3, [r3, #0]
 8102fe8:	4a2d      	ldr	r2, [pc, #180]	@ (81030a0 <HAL_ADC_ConfigChannel+0x494>)
 8102fea:	4293      	cmp	r3, r2
 8102fec:	d004      	beq.n	8102ff8 <HAL_ADC_ConfigChannel+0x3ec>
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	4a3d      	ldr	r2, [pc, #244]	@ (81030e8 <HAL_ADC_ConfigChannel+0x4dc>)
 8102ff4:	4293      	cmp	r3, r2
 8102ff6:	d10e      	bne.n	8103016 <HAL_ADC_ConfigChannel+0x40a>
 8102ff8:	4829      	ldr	r0, [pc, #164]	@ (81030a0 <HAL_ADC_ConfigChannel+0x494>)
 8102ffa:	f7ff fc2b 	bl	8102854 <LL_ADC_IsEnabled>
 8102ffe:	4604      	mov	r4, r0
 8103000:	4839      	ldr	r0, [pc, #228]	@ (81030e8 <HAL_ADC_ConfigChannel+0x4dc>)
 8103002:	f7ff fc27 	bl	8102854 <LL_ADC_IsEnabled>
 8103006:	4603      	mov	r3, r0
 8103008:	4323      	orrs	r3, r4
 810300a:	2b00      	cmp	r3, #0
 810300c:	bf0c      	ite	eq
 810300e:	2301      	moveq	r3, #1
 8103010:	2300      	movne	r3, #0
 8103012:	b2db      	uxtb	r3, r3
 8103014:	e008      	b.n	8103028 <HAL_ADC_ConfigChannel+0x41c>
 8103016:	4837      	ldr	r0, [pc, #220]	@ (81030f4 <HAL_ADC_ConfigChannel+0x4e8>)
 8103018:	f7ff fc1c 	bl	8102854 <LL_ADC_IsEnabled>
 810301c:	4603      	mov	r3, r0
 810301e:	2b00      	cmp	r3, #0
 8103020:	bf0c      	ite	eq
 8103022:	2301      	moveq	r3, #1
 8103024:	2300      	movne	r3, #0
 8103026:	b2db      	uxtb	r3, r3
 8103028:	2b00      	cmp	r3, #0
 810302a:	f000 80b3 	beq.w	8103194 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810302e:	683b      	ldr	r3, [r7, #0]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	4a31      	ldr	r2, [pc, #196]	@ (81030f8 <HAL_ADC_ConfigChannel+0x4ec>)
 8103034:	4293      	cmp	r3, r2
 8103036:	d165      	bne.n	8103104 <HAL_ADC_ConfigChannel+0x4f8>
 8103038:	69fb      	ldr	r3, [r7, #28]
 810303a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810303e:	2b00      	cmp	r3, #0
 8103040:	d160      	bne.n	8103104 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	4a2b      	ldr	r2, [pc, #172]	@ (81030f4 <HAL_ADC_ConfigChannel+0x4e8>)
 8103048:	4293      	cmp	r3, r2
 810304a:	f040 80b6 	bne.w	81031ba <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	4a13      	ldr	r2, [pc, #76]	@ (81030a0 <HAL_ADC_ConfigChannel+0x494>)
 8103054:	4293      	cmp	r3, r2
 8103056:	d004      	beq.n	8103062 <HAL_ADC_ConfigChannel+0x456>
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	4a22      	ldr	r2, [pc, #136]	@ (81030e8 <HAL_ADC_ConfigChannel+0x4dc>)
 810305e:	4293      	cmp	r3, r2
 8103060:	d101      	bne.n	8103066 <HAL_ADC_ConfigChannel+0x45a>
 8103062:	4a22      	ldr	r2, [pc, #136]	@ (81030ec <HAL_ADC_ConfigChannel+0x4e0>)
 8103064:	e000      	b.n	8103068 <HAL_ADC_ConfigChannel+0x45c>
 8103066:	4a22      	ldr	r2, [pc, #136]	@ (81030f0 <HAL_ADC_ConfigChannel+0x4e4>)
 8103068:	69fb      	ldr	r3, [r7, #28]
 810306a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810306e:	4619      	mov	r1, r3
 8103070:	4610      	mov	r0, r2
 8103072:	f7ff fa7e 	bl	8102572 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103076:	4b21      	ldr	r3, [pc, #132]	@ (81030fc <HAL_ADC_ConfigChannel+0x4f0>)
 8103078:	681b      	ldr	r3, [r3, #0]
 810307a:	099b      	lsrs	r3, r3, #6
 810307c:	4a20      	ldr	r2, [pc, #128]	@ (8103100 <HAL_ADC_ConfigChannel+0x4f4>)
 810307e:	fba2 2303 	umull	r2, r3, r2, r3
 8103082:	099b      	lsrs	r3, r3, #6
 8103084:	3301      	adds	r3, #1
 8103086:	005b      	lsls	r3, r3, #1
 8103088:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 810308a:	e002      	b.n	8103092 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 810308c:	68fb      	ldr	r3, [r7, #12]
 810308e:	3b01      	subs	r3, #1
 8103090:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8103092:	68fb      	ldr	r3, [r7, #12]
 8103094:	2b00      	cmp	r3, #0
 8103096:	d1f9      	bne.n	810308c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103098:	e08f      	b.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
 810309a:	bf00      	nop
 810309c:	47ff0000 	.word	0x47ff0000
 81030a0:	40022000 	.word	0x40022000
 81030a4:	04300002 	.word	0x04300002
 81030a8:	08600004 	.word	0x08600004
 81030ac:	0c900008 	.word	0x0c900008
 81030b0:	10c00010 	.word	0x10c00010
 81030b4:	14f00020 	.word	0x14f00020
 81030b8:	2a000400 	.word	0x2a000400
 81030bc:	2e300800 	.word	0x2e300800
 81030c0:	32601000 	.word	0x32601000
 81030c4:	43210000 	.word	0x43210000
 81030c8:	4b840000 	.word	0x4b840000
 81030cc:	4fb80000 	.word	0x4fb80000
 81030d0:	47520000 	.word	0x47520000
 81030d4:	36902000 	.word	0x36902000
 81030d8:	25b00200 	.word	0x25b00200
 81030dc:	21800100 	.word	0x21800100
 81030e0:	1d500080 	.word	0x1d500080
 81030e4:	19200040 	.word	0x19200040
 81030e8:	40022100 	.word	0x40022100
 81030ec:	40022300 	.word	0x40022300
 81030f0:	58026300 	.word	0x58026300
 81030f4:	58026000 	.word	0x58026000
 81030f8:	cb840000 	.word	0xcb840000
 81030fc:	10000000 	.word	0x10000000
 8103100:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103104:	683b      	ldr	r3, [r7, #0]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	4a31      	ldr	r2, [pc, #196]	@ (81031d0 <HAL_ADC_ConfigChannel+0x5c4>)
 810310a:	4293      	cmp	r3, r2
 810310c:	d11e      	bne.n	810314c <HAL_ADC_ConfigChannel+0x540>
 810310e:	69fb      	ldr	r3, [r7, #28]
 8103110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8103114:	2b00      	cmp	r3, #0
 8103116:	d119      	bne.n	810314c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	4a2d      	ldr	r2, [pc, #180]	@ (81031d4 <HAL_ADC_ConfigChannel+0x5c8>)
 810311e:	4293      	cmp	r3, r2
 8103120:	d14b      	bne.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	4a2c      	ldr	r2, [pc, #176]	@ (81031d8 <HAL_ADC_ConfigChannel+0x5cc>)
 8103128:	4293      	cmp	r3, r2
 810312a:	d004      	beq.n	8103136 <HAL_ADC_ConfigChannel+0x52a>
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	4a2a      	ldr	r2, [pc, #168]	@ (81031dc <HAL_ADC_ConfigChannel+0x5d0>)
 8103132:	4293      	cmp	r3, r2
 8103134:	d101      	bne.n	810313a <HAL_ADC_ConfigChannel+0x52e>
 8103136:	4a2a      	ldr	r2, [pc, #168]	@ (81031e0 <HAL_ADC_ConfigChannel+0x5d4>)
 8103138:	e000      	b.n	810313c <HAL_ADC_ConfigChannel+0x530>
 810313a:	4a2a      	ldr	r2, [pc, #168]	@ (81031e4 <HAL_ADC_ConfigChannel+0x5d8>)
 810313c:	69fb      	ldr	r3, [r7, #28]
 810313e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103142:	4619      	mov	r1, r3
 8103144:	4610      	mov	r0, r2
 8103146:	f7ff fa14 	bl	8102572 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810314a:	e036      	b.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810314c:	683b      	ldr	r3, [r7, #0]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a25      	ldr	r2, [pc, #148]	@ (81031e8 <HAL_ADC_ConfigChannel+0x5dc>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d131      	bne.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
 8103156:	69fb      	ldr	r3, [r7, #28]
 8103158:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810315c:	2b00      	cmp	r3, #0
 810315e:	d12c      	bne.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a1b      	ldr	r2, [pc, #108]	@ (81031d4 <HAL_ADC_ConfigChannel+0x5c8>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d127      	bne.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a1a      	ldr	r2, [pc, #104]	@ (81031d8 <HAL_ADC_ConfigChannel+0x5cc>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d004      	beq.n	810317e <HAL_ADC_ConfigChannel+0x572>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a18      	ldr	r2, [pc, #96]	@ (81031dc <HAL_ADC_ConfigChannel+0x5d0>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d101      	bne.n	8103182 <HAL_ADC_ConfigChannel+0x576>
 810317e:	4a18      	ldr	r2, [pc, #96]	@ (81031e0 <HAL_ADC_ConfigChannel+0x5d4>)
 8103180:	e000      	b.n	8103184 <HAL_ADC_ConfigChannel+0x578>
 8103182:	4a18      	ldr	r2, [pc, #96]	@ (81031e4 <HAL_ADC_ConfigChannel+0x5d8>)
 8103184:	69fb      	ldr	r3, [r7, #28]
 8103186:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810318a:	4619      	mov	r1, r3
 810318c:	4610      	mov	r0, r2
 810318e:	f7ff f9f0 	bl	8102572 <LL_ADC_SetCommonPathInternalCh>
 8103192:	e012      	b.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103198:	f043 0220 	orr.w	r2, r3, #32
 810319c:	687b      	ldr	r3, [r7, #4]
 810319e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 81031a0:	2301      	movs	r3, #1
 81031a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 81031a6:	e008      	b.n	81031ba <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81031ac:	f043 0220 	orr.w	r2, r3, #32
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81031b4:	2301      	movs	r3, #1
 81031b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	2200      	movs	r2, #0
 81031be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81031c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 81031c6:	4618      	mov	r0, r3
 81031c8:	3734      	adds	r7, #52	@ 0x34
 81031ca:	46bd      	mov	sp, r7
 81031cc:	bd90      	pop	{r4, r7, pc}
 81031ce:	bf00      	nop
 81031d0:	c7520000 	.word	0xc7520000
 81031d4:	58026000 	.word	0x58026000
 81031d8:	40022000 	.word	0x40022000
 81031dc:	40022100 	.word	0x40022100
 81031e0:	40022300 	.word	0x40022300
 81031e4:	58026300 	.word	0x58026300
 81031e8:	cfb80000 	.word	0xcfb80000

081031ec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81031ec:	b580      	push	{r7, lr}
 81031ee:	b084      	sub	sp, #16
 81031f0:	af00      	add	r7, sp, #0
 81031f2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	681b      	ldr	r3, [r3, #0]
 81031f8:	4a7a      	ldr	r2, [pc, #488]	@ (81033e4 <ADC_ConfigureBoostMode+0x1f8>)
 81031fa:	4293      	cmp	r3, r2
 81031fc:	d004      	beq.n	8103208 <ADC_ConfigureBoostMode+0x1c>
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	681b      	ldr	r3, [r3, #0]
 8103202:	4a79      	ldr	r2, [pc, #484]	@ (81033e8 <ADC_ConfigureBoostMode+0x1fc>)
 8103204:	4293      	cmp	r3, r2
 8103206:	d109      	bne.n	810321c <ADC_ConfigureBoostMode+0x30>
 8103208:	4b78      	ldr	r3, [pc, #480]	@ (81033ec <ADC_ConfigureBoostMode+0x200>)
 810320a:	689b      	ldr	r3, [r3, #8]
 810320c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103210:	2b00      	cmp	r3, #0
 8103212:	bf14      	ite	ne
 8103214:	2301      	movne	r3, #1
 8103216:	2300      	moveq	r3, #0
 8103218:	b2db      	uxtb	r3, r3
 810321a:	e008      	b.n	810322e <ADC_ConfigureBoostMode+0x42>
 810321c:	4b74      	ldr	r3, [pc, #464]	@ (81033f0 <ADC_ConfigureBoostMode+0x204>)
 810321e:	689b      	ldr	r3, [r3, #8]
 8103220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103224:	2b00      	cmp	r3, #0
 8103226:	bf14      	ite	ne
 8103228:	2301      	movne	r3, #1
 810322a:	2300      	moveq	r3, #0
 810322c:	b2db      	uxtb	r3, r3
 810322e:	2b00      	cmp	r3, #0
 8103230:	d01c      	beq.n	810326c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103232:	f001 fd21 	bl	8104c78 <HAL_RCC_GetHCLKFreq>
 8103236:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	685b      	ldr	r3, [r3, #4]
 810323c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103240:	d010      	beq.n	8103264 <ADC_ConfigureBoostMode+0x78>
 8103242:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103246:	d873      	bhi.n	8103330 <ADC_ConfigureBoostMode+0x144>
 8103248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810324c:	d002      	beq.n	8103254 <ADC_ConfigureBoostMode+0x68>
 810324e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103252:	d16d      	bne.n	8103330 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	685b      	ldr	r3, [r3, #4]
 8103258:	0c1b      	lsrs	r3, r3, #16
 810325a:	68fa      	ldr	r2, [r7, #12]
 810325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103260:	60fb      	str	r3, [r7, #12]
        break;
 8103262:	e068      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103264:	68fb      	ldr	r3, [r7, #12]
 8103266:	089b      	lsrs	r3, r3, #2
 8103268:	60fb      	str	r3, [r7, #12]
        break;
 810326a:	e064      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 810326c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8103270:	f04f 0100 	mov.w	r1, #0
 8103274:	f002 ffa8 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8103278:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	685b      	ldr	r3, [r3, #4]
 810327e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103282:	d051      	beq.n	8103328 <ADC_ConfigureBoostMode+0x13c>
 8103284:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103288:	d854      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 810328a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 810328e:	d047      	beq.n	8103320 <ADC_ConfigureBoostMode+0x134>
 8103290:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103294:	d84e      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 8103296:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 810329a:	d03d      	beq.n	8103318 <ADC_ConfigureBoostMode+0x12c>
 810329c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 81032a0:	d848      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81032a6:	d033      	beq.n	8103310 <ADC_ConfigureBoostMode+0x124>
 81032a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81032ac:	d842      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032ae:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81032b2:	d029      	beq.n	8103308 <ADC_ConfigureBoostMode+0x11c>
 81032b4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 81032b8:	d83c      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81032be:	d01a      	beq.n	81032f6 <ADC_ConfigureBoostMode+0x10a>
 81032c0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 81032c4:	d836      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81032ca:	d014      	beq.n	81032f6 <ADC_ConfigureBoostMode+0x10a>
 81032cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 81032d0:	d830      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81032d6:	d00e      	beq.n	81032f6 <ADC_ConfigureBoostMode+0x10a>
 81032d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81032dc:	d82a      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81032e2:	d008      	beq.n	81032f6 <ADC_ConfigureBoostMode+0x10a>
 81032e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 81032e8:	d824      	bhi.n	8103334 <ADC_ConfigureBoostMode+0x148>
 81032ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81032ee:	d002      	beq.n	81032f6 <ADC_ConfigureBoostMode+0x10a>
 81032f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81032f4:	d11e      	bne.n	8103334 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	685b      	ldr	r3, [r3, #4]
 81032fa:	0c9b      	lsrs	r3, r3, #18
 81032fc:	005b      	lsls	r3, r3, #1
 81032fe:	68fa      	ldr	r2, [r7, #12]
 8103300:	fbb2 f3f3 	udiv	r3, r2, r3
 8103304:	60fb      	str	r3, [r7, #12]
        break;
 8103306:	e016      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103308:	68fb      	ldr	r3, [r7, #12]
 810330a:	091b      	lsrs	r3, r3, #4
 810330c:	60fb      	str	r3, [r7, #12]
        break;
 810330e:	e012      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103310:	68fb      	ldr	r3, [r7, #12]
 8103312:	095b      	lsrs	r3, r3, #5
 8103314:	60fb      	str	r3, [r7, #12]
        break;
 8103316:	e00e      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103318:	68fb      	ldr	r3, [r7, #12]
 810331a:	099b      	lsrs	r3, r3, #6
 810331c:	60fb      	str	r3, [r7, #12]
        break;
 810331e:	e00a      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103320:	68fb      	ldr	r3, [r7, #12]
 8103322:	09db      	lsrs	r3, r3, #7
 8103324:	60fb      	str	r3, [r7, #12]
        break;
 8103326:	e006      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103328:	68fb      	ldr	r3, [r7, #12]
 810332a:	0a1b      	lsrs	r3, r3, #8
 810332c:	60fb      	str	r3, [r7, #12]
        break;
 810332e:	e002      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103330:	bf00      	nop
 8103332:	e000      	b.n	8103336 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103334:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103336:	f7ff f8d3 	bl	81024e0 <HAL_GetREVID>
 810333a:	4603      	mov	r3, r0
 810333c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103340:	4293      	cmp	r3, r2
 8103342:	d815      	bhi.n	8103370 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	4a2b      	ldr	r2, [pc, #172]	@ (81033f4 <ADC_ConfigureBoostMode+0x208>)
 8103348:	4293      	cmp	r3, r2
 810334a:	d908      	bls.n	810335e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	689a      	ldr	r2, [r3, #8]
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810335a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810335c:	e03e      	b.n	81033dc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	689a      	ldr	r2, [r3, #8]
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810336c:	609a      	str	r2, [r3, #8]
}
 810336e:	e035      	b.n	81033dc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103370:	68fb      	ldr	r3, [r7, #12]
 8103372:	085b      	lsrs	r3, r3, #1
 8103374:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103376:	68fb      	ldr	r3, [r7, #12]
 8103378:	4a1f      	ldr	r2, [pc, #124]	@ (81033f8 <ADC_ConfigureBoostMode+0x20c>)
 810337a:	4293      	cmp	r3, r2
 810337c:	d808      	bhi.n	8103390 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	689a      	ldr	r2, [r3, #8]
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 810338c:	609a      	str	r2, [r3, #8]
}
 810338e:	e025      	b.n	81033dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	4a1a      	ldr	r2, [pc, #104]	@ (81033fc <ADC_ConfigureBoostMode+0x210>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d80a      	bhi.n	81033ae <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	689b      	ldr	r3, [r3, #8]
 810339e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	681b      	ldr	r3, [r3, #0]
 81033a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81033aa:	609a      	str	r2, [r3, #8]
}
 81033ac:	e016      	b.n	81033dc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81033ae:	68fb      	ldr	r3, [r7, #12]
 81033b0:	4a13      	ldr	r2, [pc, #76]	@ (8103400 <ADC_ConfigureBoostMode+0x214>)
 81033b2:	4293      	cmp	r3, r2
 81033b4:	d80a      	bhi.n	81033cc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	681b      	ldr	r3, [r3, #0]
 81033ba:	689b      	ldr	r3, [r3, #8]
 81033bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81033c8:	609a      	str	r2, [r3, #8]
}
 81033ca:	e007      	b.n	81033dc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	689a      	ldr	r2, [r3, #8]
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 81033da:	609a      	str	r2, [r3, #8]
}
 81033dc:	bf00      	nop
 81033de:	3710      	adds	r7, #16
 81033e0:	46bd      	mov	sp, r7
 81033e2:	bd80      	pop	{r7, pc}
 81033e4:	40022000 	.word	0x40022000
 81033e8:	40022100 	.word	0x40022100
 81033ec:	40022300 	.word	0x40022300
 81033f0:	58026300 	.word	0x58026300
 81033f4:	01312d00 	.word	0x01312d00
 81033f8:	005f5e10 	.word	0x005f5e10
 81033fc:	00bebc20 	.word	0x00bebc20
 8103400:	017d7840 	.word	0x017d7840

08103404 <LL_ADC_IsEnabled>:
{
 8103404:	b480      	push	{r7}
 8103406:	b083      	sub	sp, #12
 8103408:	af00      	add	r7, sp, #0
 810340a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	689b      	ldr	r3, [r3, #8]
 8103410:	f003 0301 	and.w	r3, r3, #1
 8103414:	2b01      	cmp	r3, #1
 8103416:	d101      	bne.n	810341c <LL_ADC_IsEnabled+0x18>
 8103418:	2301      	movs	r3, #1
 810341a:	e000      	b.n	810341e <LL_ADC_IsEnabled+0x1a>
 810341c:	2300      	movs	r3, #0
}
 810341e:	4618      	mov	r0, r3
 8103420:	370c      	adds	r7, #12
 8103422:	46bd      	mov	sp, r7
 8103424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103428:	4770      	bx	lr

0810342a <LL_ADC_REG_IsConversionOngoing>:
{
 810342a:	b480      	push	{r7}
 810342c:	b083      	sub	sp, #12
 810342e:	af00      	add	r7, sp, #0
 8103430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	689b      	ldr	r3, [r3, #8]
 8103436:	f003 0304 	and.w	r3, r3, #4
 810343a:	2b04      	cmp	r3, #4
 810343c:	d101      	bne.n	8103442 <LL_ADC_REG_IsConversionOngoing+0x18>
 810343e:	2301      	movs	r3, #1
 8103440:	e000      	b.n	8103444 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103442:	2300      	movs	r3, #0
}
 8103444:	4618      	mov	r0, r3
 8103446:	370c      	adds	r7, #12
 8103448:	46bd      	mov	sp, r7
 810344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810344e:	4770      	bx	lr

08103450 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103450:	b590      	push	{r4, r7, lr}
 8103452:	b09f      	sub	sp, #124	@ 0x7c
 8103454:	af00      	add	r7, sp, #0
 8103456:	6078      	str	r0, [r7, #4]
 8103458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810345a:	2300      	movs	r3, #0
 810345c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103466:	2b01      	cmp	r3, #1
 8103468:	d101      	bne.n	810346e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810346a:	2302      	movs	r3, #2
 810346c:	e0c4      	b.n	81035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810346e:	687b      	ldr	r3, [r7, #4]
 8103470:	2201      	movs	r2, #1
 8103472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103476:	2300      	movs	r3, #0
 8103478:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810347a:	2300      	movs	r3, #0
 810347c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	4a5f      	ldr	r2, [pc, #380]	@ (8103600 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103484:	4293      	cmp	r3, r2
 8103486:	d102      	bne.n	810348e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103488:	4b5e      	ldr	r3, [pc, #376]	@ (8103604 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810348a:	60bb      	str	r3, [r7, #8]
 810348c:	e001      	b.n	8103492 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810348e:	2300      	movs	r3, #0
 8103490:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103492:	68bb      	ldr	r3, [r7, #8]
 8103494:	2b00      	cmp	r3, #0
 8103496:	d10b      	bne.n	81034b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810349c:	f043 0220 	orr.w	r2, r3, #32
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	2200      	movs	r2, #0
 81034a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 81034ac:	2301      	movs	r3, #1
 81034ae:	e0a3      	b.n	81035f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81034b0:	68bb      	ldr	r3, [r7, #8]
 81034b2:	4618      	mov	r0, r3
 81034b4:	f7ff ffb9 	bl	810342a <LL_ADC_REG_IsConversionOngoing>
 81034b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	4618      	mov	r0, r3
 81034c0:	f7ff ffb3 	bl	810342a <LL_ADC_REG_IsConversionOngoing>
 81034c4:	4603      	mov	r3, r0
 81034c6:	2b00      	cmp	r3, #0
 81034c8:	f040 8085 	bne.w	81035d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81034cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81034ce:	2b00      	cmp	r3, #0
 81034d0:	f040 8081 	bne.w	81035d6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	681b      	ldr	r3, [r3, #0]
 81034d8:	4a49      	ldr	r2, [pc, #292]	@ (8103600 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81034da:	4293      	cmp	r3, r2
 81034dc:	d004      	beq.n	81034e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	4a48      	ldr	r2, [pc, #288]	@ (8103604 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81034e4:	4293      	cmp	r3, r2
 81034e6:	d101      	bne.n	81034ec <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81034e8:	4b47      	ldr	r3, [pc, #284]	@ (8103608 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81034ea:	e000      	b.n	81034ee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81034ec:	4b47      	ldr	r3, [pc, #284]	@ (810360c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81034ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034f0:	683b      	ldr	r3, [r7, #0]
 81034f2:	681b      	ldr	r3, [r3, #0]
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d03b      	beq.n	8103570 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81034f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81034fa:	689b      	ldr	r3, [r3, #8]
 81034fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103500:	683b      	ldr	r3, [r7, #0]
 8103502:	685b      	ldr	r3, [r3, #4]
 8103504:	431a      	orrs	r2, r3
 8103506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103508:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	4a3c      	ldr	r2, [pc, #240]	@ (8103600 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103510:	4293      	cmp	r3, r2
 8103512:	d004      	beq.n	810351e <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	4a3a      	ldr	r2, [pc, #232]	@ (8103604 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810351a:	4293      	cmp	r3, r2
 810351c:	d10e      	bne.n	810353c <HAL_ADCEx_MultiModeConfigChannel+0xec>
 810351e:	4838      	ldr	r0, [pc, #224]	@ (8103600 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103520:	f7ff ff70 	bl	8103404 <LL_ADC_IsEnabled>
 8103524:	4604      	mov	r4, r0
 8103526:	4837      	ldr	r0, [pc, #220]	@ (8103604 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103528:	f7ff ff6c 	bl	8103404 <LL_ADC_IsEnabled>
 810352c:	4603      	mov	r3, r0
 810352e:	4323      	orrs	r3, r4
 8103530:	2b00      	cmp	r3, #0
 8103532:	bf0c      	ite	eq
 8103534:	2301      	moveq	r3, #1
 8103536:	2300      	movne	r3, #0
 8103538:	b2db      	uxtb	r3, r3
 810353a:	e008      	b.n	810354e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 810353c:	4834      	ldr	r0, [pc, #208]	@ (8103610 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810353e:	f7ff ff61 	bl	8103404 <LL_ADC_IsEnabled>
 8103542:	4603      	mov	r3, r0
 8103544:	2b00      	cmp	r3, #0
 8103546:	bf0c      	ite	eq
 8103548:	2301      	moveq	r3, #1
 810354a:	2300      	movne	r3, #0
 810354c:	b2db      	uxtb	r3, r3
 810354e:	2b00      	cmp	r3, #0
 8103550:	d04b      	beq.n	81035ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103554:	689b      	ldr	r3, [r3, #8]
 8103556:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 810355a:	f023 030f 	bic.w	r3, r3, #15
 810355e:	683a      	ldr	r2, [r7, #0]
 8103560:	6811      	ldr	r1, [r2, #0]
 8103562:	683a      	ldr	r2, [r7, #0]
 8103564:	6892      	ldr	r2, [r2, #8]
 8103566:	430a      	orrs	r2, r1
 8103568:	431a      	orrs	r2, r3
 810356a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810356c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810356e:	e03c      	b.n	81035ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103572:	689b      	ldr	r3, [r3, #8]
 8103574:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810357a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a1f      	ldr	r2, [pc, #124]	@ (8103600 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d004      	beq.n	8103590 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a1e      	ldr	r2, [pc, #120]	@ (8103604 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d10e      	bne.n	81035ae <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103590:	481b      	ldr	r0, [pc, #108]	@ (8103600 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103592:	f7ff ff37 	bl	8103404 <LL_ADC_IsEnabled>
 8103596:	4604      	mov	r4, r0
 8103598:	481a      	ldr	r0, [pc, #104]	@ (8103604 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810359a:	f7ff ff33 	bl	8103404 <LL_ADC_IsEnabled>
 810359e:	4603      	mov	r3, r0
 81035a0:	4323      	orrs	r3, r4
 81035a2:	2b00      	cmp	r3, #0
 81035a4:	bf0c      	ite	eq
 81035a6:	2301      	moveq	r3, #1
 81035a8:	2300      	movne	r3, #0
 81035aa:	b2db      	uxtb	r3, r3
 81035ac:	e008      	b.n	81035c0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81035ae:	4818      	ldr	r0, [pc, #96]	@ (8103610 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81035b0:	f7ff ff28 	bl	8103404 <LL_ADC_IsEnabled>
 81035b4:	4603      	mov	r3, r0
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	bf0c      	ite	eq
 81035ba:	2301      	moveq	r3, #1
 81035bc:	2300      	movne	r3, #0
 81035be:	b2db      	uxtb	r3, r3
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d012      	beq.n	81035ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81035c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81035c6:	689b      	ldr	r3, [r3, #8]
 81035c8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81035cc:	f023 030f 	bic.w	r3, r3, #15
 81035d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 81035d2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81035d4:	e009      	b.n	81035ea <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035da:	f043 0220 	orr.w	r2, r3, #32
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81035e2:	2301      	movs	r3, #1
 81035e4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 81035e8:	e000      	b.n	81035ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81035ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	2200      	movs	r2, #0
 81035f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81035f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 81035f8:	4618      	mov	r0, r3
 81035fa:	377c      	adds	r7, #124	@ 0x7c
 81035fc:	46bd      	mov	sp, r7
 81035fe:	bd90      	pop	{r4, r7, pc}
 8103600:	40022000 	.word	0x40022000
 8103604:	40022100 	.word	0x40022100
 8103608:	40022300 	.word	0x40022300
 810360c:	58026300 	.word	0x58026300
 8103610:	58026000 	.word	0x58026000

08103614 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103614:	b580      	push	{r7, lr}
 8103616:	b082      	sub	sp, #8
 8103618:	af00      	add	r7, sp, #0
 810361a:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	2b00      	cmp	r3, #0
 8103620:	d003      	beq.n	810362a <HAL_CEC_Init+0x16>
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103626:	2b00      	cmp	r3, #0
 8103628:	d101      	bne.n	810362e <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 810362a:	2301      	movs	r3, #1
 810362c:	e050      	b.n	81036d0 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103632:	2b00      	cmp	r3, #0
 8103634:	d106      	bne.n	8103644 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	2200      	movs	r2, #0
 810363a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 810363e:	6878      	ldr	r0, [r7, #4]
 8103640:	f7fd ff72 	bl	8101528 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	2224      	movs	r2, #36	@ 0x24
 8103648:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	681b      	ldr	r3, [r3, #0]
 810364e:	681a      	ldr	r2, [r3, #0]
 8103650:	687b      	ldr	r3, [r7, #4]
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	f022 0201 	bic.w	r2, r2, #1
 8103658:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810365a:	687b      	ldr	r3, [r7, #4]
 810365c:	685a      	ldr	r2, [r3, #4]
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	689b      	ldr	r3, [r3, #8]
 8103662:	431a      	orrs	r2, r3
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	68db      	ldr	r3, [r3, #12]
 8103668:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810366e:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	695b      	ldr	r3, [r3, #20]
 8103674:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810367a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103680:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8103686:	041b      	lsls	r3, r3, #16
 8103688:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103694:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103696:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	695b      	ldr	r3, [r3, #20]
 810369e:	687a      	ldr	r2, [r7, #4]
 81036a0:	6812      	ldr	r2, [r2, #0]
 81036a2:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 81036a6:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 81036aa:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	681a      	ldr	r2, [r3, #0]
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	f042 0201 	orr.w	r2, r2, #1
 81036ba:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81036bc:	687b      	ldr	r3, [r7, #4]
 81036be:	2200      	movs	r2, #0
 81036c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	2220      	movs	r2, #32
 81036c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	2220      	movs	r2, #32
 81036cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81036ce:	2300      	movs	r3, #0
}
 81036d0:	4618      	mov	r0, r3
 81036d2:	3708      	adds	r7, #8
 81036d4:	46bd      	mov	sp, r7
 81036d6:	bd80      	pop	{r7, pc}

081036d8 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 81036d8:	b580      	push	{r7, lr}
 81036da:	b084      	sub	sp, #16
 81036dc:	af00      	add	r7, sp, #0
 81036de:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	691b      	ldr	r3, [r3, #16]
 81036e6:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 81036e8:	68fb      	ldr	r3, [r7, #12]
 81036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81036ee:	2b00      	cmp	r3, #0
 81036f0:	d00a      	beq.n	8103708 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	2280      	movs	r2, #128	@ 0x80
 81036f6:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	691a      	ldr	r2, [r3, #16]
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8103706:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8103708:	68fb      	ldr	r3, [r7, #12]
 810370a:	f003 0301 	and.w	r3, r3, #1
 810370e:	2b00      	cmp	r3, #0
 8103710:	d01c      	beq.n	810374c <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	2222      	movs	r2, #34	@ 0x22
 8103716:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8103718:	687b      	ldr	r3, [r7, #4]
 810371a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810371c:	3301      	adds	r3, #1
 810371e:	b29a      	uxth	r2, r3
 8103720:	687b      	ldr	r3, [r7, #4]
 8103722:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	68da      	ldr	r2, [r3, #12]
 810372a:	687b      	ldr	r3, [r7, #4]
 810372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810372e:	b2d2      	uxtb	r2, r2
 8103730:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103732:	687b      	ldr	r3, [r7, #4]
 8103734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103736:	1c5a      	adds	r2, r3, #1
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 810373c:	687b      	ldr	r3, [r7, #4]
 810373e:	681b      	ldr	r3, [r3, #0]
 8103740:	691a      	ldr	r2, [r3, #16]
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	f042 0201 	orr.w	r2, r2, #1
 810374a:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 810374c:	68fb      	ldr	r3, [r7, #12]
 810374e:	f003 0302 	and.w	r3, r3, #2
 8103752:	2b00      	cmp	r3, #0
 8103754:	d01e      	beq.n	8103794 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	691a      	ldr	r2, [r3, #16]
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	681b      	ldr	r3, [r3, #0]
 8103760:	f042 0202 	orr.w	r2, r2, #2
 8103764:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103766:	687b      	ldr	r3, [r7, #4]
 8103768:	2220      	movs	r2, #32
 810376a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	2200      	movs	r2, #0
 8103770:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103776:	687b      	ldr	r3, [r7, #4]
 8103778:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 810377a:	425b      	negs	r3, r3
 810377c:	441a      	add	r2, r3
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103786:	4619      	mov	r1, r3
 8103788:	6878      	ldr	r0, [r7, #4]
 810378a:	f000 f88c 	bl	81038a6 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	2200      	movs	r2, #0
 8103792:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8103794:	68fb      	ldr	r3, [r7, #12]
 8103796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810379a:	2b00      	cmp	r3, #0
 810379c:	d024      	beq.n	81037e8 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 810379e:	687b      	ldr	r3, [r7, #4]
 81037a0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 81037a2:	3b01      	subs	r3, #1
 81037a4:	b29a      	uxth	r2, r3
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 81037ae:	2b00      	cmp	r3, #0
 81037b0:	d107      	bne.n	81037c2 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	681b      	ldr	r3, [r3, #0]
 81037b6:	681a      	ldr	r2, [r3, #0]
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	f042 0204 	orr.w	r2, r2, #4
 81037c0:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037c6:	781a      	ldrb	r2, [r3, #0]
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037d2:	1c5a      	adds	r2, r3, #1
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	691a      	ldr	r2, [r3, #16]
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81037e6:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 81037e8:	68fb      	ldr	r3, [r7, #12]
 81037ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	d014      	beq.n	810381c <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	681b      	ldr	r3, [r3, #0]
 81037f6:	691a      	ldr	r2, [r3, #16]
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103800:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	2220      	movs	r2, #32
 8103806:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	2200      	movs	r2, #0
 810380c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2200      	movs	r2, #0
 8103814:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103816:	6878      	ldr	r0, [r7, #4]
 8103818:	f000 f83b 	bl	8103892 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 810381c:	68fa      	ldr	r2, [r7, #12]
 810381e:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8103822:	4013      	ands	r3, r2
 8103824:	2b00      	cmp	r3, #0
 8103826:	d030      	beq.n	810388a <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	68fa      	ldr	r2, [r7, #12]
 810382c:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	681b      	ldr	r3, [r3, #0]
 8103832:	691b      	ldr	r3, [r3, #16]
 8103834:	687a      	ldr	r2, [r7, #4]
 8103836:	6812      	ldr	r2, [r2, #0]
 8103838:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 810383c:	f043 031c 	orr.w	r3, r3, #28
 8103840:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8103842:	68fb      	ldr	r3, [r7, #12]
 8103844:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8103848:	2b00      	cmp	r3, #0
 810384a:	d00e      	beq.n	810386a <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103854:	425b      	negs	r3, r3
 8103856:	441a      	add	r2, r3
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	2200      	movs	r2, #0
 8103860:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	2220      	movs	r2, #32
 8103866:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103868:	e00c      	b.n	8103884 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 810386a:	68fb      	ldr	r3, [r7, #12]
 810386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103870:	2b00      	cmp	r3, #0
 8103872:	d107      	bne.n	8103884 <HAL_CEC_IRQHandler+0x1ac>
 8103874:	68fb      	ldr	r3, [r7, #12]
 8103876:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 810387a:	2b00      	cmp	r3, #0
 810387c:	d002      	beq.n	8103884 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	2220      	movs	r2, #32
 8103882:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103884:	6878      	ldr	r0, [r7, #4]
 8103886:	f000 f819 	bl	81038bc <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 810388a:	bf00      	nop
 810388c:	3710      	adds	r7, #16
 810388e:	46bd      	mov	sp, r7
 8103890:	bd80      	pop	{r7, pc}

08103892 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103892:	b480      	push	{r7}
 8103894:	b083      	sub	sp, #12
 8103896:	af00      	add	r7, sp, #0
 8103898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 810389a:	bf00      	nop
 810389c:	370c      	adds	r7, #12
 810389e:	46bd      	mov	sp, r7
 81038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038a4:	4770      	bx	lr

081038a6 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 81038a6:	b480      	push	{r7}
 81038a8:	b083      	sub	sp, #12
 81038aa:	af00      	add	r7, sp, #0
 81038ac:	6078      	str	r0, [r7, #4]
 81038ae:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 81038b0:	bf00      	nop
 81038b2:	370c      	adds	r7, #12
 81038b4:	46bd      	mov	sp, r7
 81038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ba:	4770      	bx	lr

081038bc <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 81038bc:	b480      	push	{r7}
 81038be:	b083      	sub	sp, #12
 81038c0:	af00      	add	r7, sp, #0
 81038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 81038c4:	bf00      	nop
 81038c6:	370c      	adds	r7, #12
 81038c8:	46bd      	mov	sp, r7
 81038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ce:	4770      	bx	lr

081038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81038d0:	b480      	push	{r7}
 81038d2:	b085      	sub	sp, #20
 81038d4:	af00      	add	r7, sp, #0
 81038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	f003 0307 	and.w	r3, r3, #7
 81038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8103914 <__NVIC_SetPriorityGrouping+0x44>)
 81038e2:	68db      	ldr	r3, [r3, #12]
 81038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81038e6:	68ba      	ldr	r2, [r7, #8]
 81038e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81038ec:	4013      	ands	r3, r2
 81038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81038f0:	68fb      	ldr	r3, [r7, #12]
 81038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81038f4:	68bb      	ldr	r3, [r7, #8]
 81038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81038f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81038fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103902:	4a04      	ldr	r2, [pc, #16]	@ (8103914 <__NVIC_SetPriorityGrouping+0x44>)
 8103904:	68bb      	ldr	r3, [r7, #8]
 8103906:	60d3      	str	r3, [r2, #12]
}
 8103908:	bf00      	nop
 810390a:	3714      	adds	r7, #20
 810390c:	46bd      	mov	sp, r7
 810390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103912:	4770      	bx	lr
 8103914:	e000ed00 	.word	0xe000ed00

08103918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103918:	b480      	push	{r7}
 810391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810391c:	4b04      	ldr	r3, [pc, #16]	@ (8103930 <__NVIC_GetPriorityGrouping+0x18>)
 810391e:	68db      	ldr	r3, [r3, #12]
 8103920:	0a1b      	lsrs	r3, r3, #8
 8103922:	f003 0307 	and.w	r3, r3, #7
}
 8103926:	4618      	mov	r0, r3
 8103928:	46bd      	mov	sp, r7
 810392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810392e:	4770      	bx	lr
 8103930:	e000ed00 	.word	0xe000ed00

08103934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103934:	b480      	push	{r7}
 8103936:	b083      	sub	sp, #12
 8103938:	af00      	add	r7, sp, #0
 810393a:	4603      	mov	r3, r0
 810393c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810393e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103942:	2b00      	cmp	r3, #0
 8103944:	db0b      	blt.n	810395e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103946:	88fb      	ldrh	r3, [r7, #6]
 8103948:	f003 021f 	and.w	r2, r3, #31
 810394c:	4907      	ldr	r1, [pc, #28]	@ (810396c <__NVIC_EnableIRQ+0x38>)
 810394e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103952:	095b      	lsrs	r3, r3, #5
 8103954:	2001      	movs	r0, #1
 8103956:	fa00 f202 	lsl.w	r2, r0, r2
 810395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810395e:	bf00      	nop
 8103960:	370c      	adds	r7, #12
 8103962:	46bd      	mov	sp, r7
 8103964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103968:	4770      	bx	lr
 810396a:	bf00      	nop
 810396c:	e000e100 	.word	0xe000e100

08103970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103970:	b480      	push	{r7}
 8103972:	b083      	sub	sp, #12
 8103974:	af00      	add	r7, sp, #0
 8103976:	4603      	mov	r3, r0
 8103978:	6039      	str	r1, [r7, #0]
 810397a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810397c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103980:	2b00      	cmp	r3, #0
 8103982:	db0a      	blt.n	810399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103984:	683b      	ldr	r3, [r7, #0]
 8103986:	b2da      	uxtb	r2, r3
 8103988:	490c      	ldr	r1, [pc, #48]	@ (81039bc <__NVIC_SetPriority+0x4c>)
 810398a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810398e:	0112      	lsls	r2, r2, #4
 8103990:	b2d2      	uxtb	r2, r2
 8103992:	440b      	add	r3, r1
 8103994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103998:	e00a      	b.n	81039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810399a:	683b      	ldr	r3, [r7, #0]
 810399c:	b2da      	uxtb	r2, r3
 810399e:	4908      	ldr	r1, [pc, #32]	@ (81039c0 <__NVIC_SetPriority+0x50>)
 81039a0:	88fb      	ldrh	r3, [r7, #6]
 81039a2:	f003 030f 	and.w	r3, r3, #15
 81039a6:	3b04      	subs	r3, #4
 81039a8:	0112      	lsls	r2, r2, #4
 81039aa:	b2d2      	uxtb	r2, r2
 81039ac:	440b      	add	r3, r1
 81039ae:	761a      	strb	r2, [r3, #24]
}
 81039b0:	bf00      	nop
 81039b2:	370c      	adds	r7, #12
 81039b4:	46bd      	mov	sp, r7
 81039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039ba:	4770      	bx	lr
 81039bc:	e000e100 	.word	0xe000e100
 81039c0:	e000ed00 	.word	0xe000ed00

081039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81039c4:	b480      	push	{r7}
 81039c6:	b089      	sub	sp, #36	@ 0x24
 81039c8:	af00      	add	r7, sp, #0
 81039ca:	60f8      	str	r0, [r7, #12]
 81039cc:	60b9      	str	r1, [r7, #8]
 81039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81039d0:	68fb      	ldr	r3, [r7, #12]
 81039d2:	f003 0307 	and.w	r3, r3, #7
 81039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81039d8:	69fb      	ldr	r3, [r7, #28]
 81039da:	f1c3 0307 	rsb	r3, r3, #7
 81039de:	2b04      	cmp	r3, #4
 81039e0:	bf28      	it	cs
 81039e2:	2304      	movcs	r3, #4
 81039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81039e6:	69fb      	ldr	r3, [r7, #28]
 81039e8:	3304      	adds	r3, #4
 81039ea:	2b06      	cmp	r3, #6
 81039ec:	d902      	bls.n	81039f4 <NVIC_EncodePriority+0x30>
 81039ee:	69fb      	ldr	r3, [r7, #28]
 81039f0:	3b03      	subs	r3, #3
 81039f2:	e000      	b.n	81039f6 <NVIC_EncodePriority+0x32>
 81039f4:	2300      	movs	r3, #0
 81039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81039f8:	f04f 32ff 	mov.w	r2, #4294967295
 81039fc:	69bb      	ldr	r3, [r7, #24]
 81039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8103a02:	43da      	mvns	r2, r3
 8103a04:	68bb      	ldr	r3, [r7, #8]
 8103a06:	401a      	ands	r2, r3
 8103a08:	697b      	ldr	r3, [r7, #20]
 8103a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8103a10:	697b      	ldr	r3, [r7, #20]
 8103a12:	fa01 f303 	lsl.w	r3, r1, r3
 8103a16:	43d9      	mvns	r1, r3
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103a1c:	4313      	orrs	r3, r2
         );
}
 8103a1e:	4618      	mov	r0, r3
 8103a20:	3724      	adds	r7, #36	@ 0x24
 8103a22:	46bd      	mov	sp, r7
 8103a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a28:	4770      	bx	lr
	...

08103a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103a2c:	b580      	push	{r7, lr}
 8103a2e:	b082      	sub	sp, #8
 8103a30:	af00      	add	r7, sp, #0
 8103a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	3b01      	subs	r3, #1
 8103a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103a3c:	d301      	bcc.n	8103a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103a3e:	2301      	movs	r3, #1
 8103a40:	e00f      	b.n	8103a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103a42:	4a0a      	ldr	r2, [pc, #40]	@ (8103a6c <SysTick_Config+0x40>)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	3b01      	subs	r3, #1
 8103a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103a4a:	210f      	movs	r1, #15
 8103a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8103a50:	f7ff ff8e 	bl	8103970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103a54:	4b05      	ldr	r3, [pc, #20]	@ (8103a6c <SysTick_Config+0x40>)
 8103a56:	2200      	movs	r2, #0
 8103a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103a5a:	4b04      	ldr	r3, [pc, #16]	@ (8103a6c <SysTick_Config+0x40>)
 8103a5c:	2207      	movs	r2, #7
 8103a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103a60:	2300      	movs	r3, #0
}
 8103a62:	4618      	mov	r0, r3
 8103a64:	3708      	adds	r7, #8
 8103a66:	46bd      	mov	sp, r7
 8103a68:	bd80      	pop	{r7, pc}
 8103a6a:	bf00      	nop
 8103a6c:	e000e010 	.word	0xe000e010

08103a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103a70:	b580      	push	{r7, lr}
 8103a72:	b082      	sub	sp, #8
 8103a74:	af00      	add	r7, sp, #0
 8103a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103a78:	6878      	ldr	r0, [r7, #4]
 8103a7a:	f7ff ff29 	bl	81038d0 <__NVIC_SetPriorityGrouping>
}
 8103a7e:	bf00      	nop
 8103a80:	3708      	adds	r7, #8
 8103a82:	46bd      	mov	sp, r7
 8103a84:	bd80      	pop	{r7, pc}

08103a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103a86:	b580      	push	{r7, lr}
 8103a88:	b086      	sub	sp, #24
 8103a8a:	af00      	add	r7, sp, #0
 8103a8c:	4603      	mov	r3, r0
 8103a8e:	60b9      	str	r1, [r7, #8]
 8103a90:	607a      	str	r2, [r7, #4]
 8103a92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103a94:	f7ff ff40 	bl	8103918 <__NVIC_GetPriorityGrouping>
 8103a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103a9a:	687a      	ldr	r2, [r7, #4]
 8103a9c:	68b9      	ldr	r1, [r7, #8]
 8103a9e:	6978      	ldr	r0, [r7, #20]
 8103aa0:	f7ff ff90 	bl	81039c4 <NVIC_EncodePriority>
 8103aa4:	4602      	mov	r2, r0
 8103aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103aaa:	4611      	mov	r1, r2
 8103aac:	4618      	mov	r0, r3
 8103aae:	f7ff ff5f 	bl	8103970 <__NVIC_SetPriority>
}
 8103ab2:	bf00      	nop
 8103ab4:	3718      	adds	r7, #24
 8103ab6:	46bd      	mov	sp, r7
 8103ab8:	bd80      	pop	{r7, pc}

08103aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103aba:	b580      	push	{r7, lr}
 8103abc:	b082      	sub	sp, #8
 8103abe:	af00      	add	r7, sp, #0
 8103ac0:	4603      	mov	r3, r0
 8103ac2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103ac8:	4618      	mov	r0, r3
 8103aca:	f7ff ff33 	bl	8103934 <__NVIC_EnableIRQ>
}
 8103ace:	bf00      	nop
 8103ad0:	3708      	adds	r7, #8
 8103ad2:	46bd      	mov	sp, r7
 8103ad4:	bd80      	pop	{r7, pc}

08103ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103ad6:	b580      	push	{r7, lr}
 8103ad8:	b082      	sub	sp, #8
 8103ada:	af00      	add	r7, sp, #0
 8103adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103ade:	6878      	ldr	r0, [r7, #4]
 8103ae0:	f7ff ffa4 	bl	8103a2c <SysTick_Config>
 8103ae4:	4603      	mov	r3, r0
}
 8103ae6:	4618      	mov	r0, r3
 8103ae8:	3708      	adds	r7, #8
 8103aea:	46bd      	mov	sp, r7
 8103aec:	bd80      	pop	{r7, pc}
	...

08103af0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103af0:	b480      	push	{r7}
 8103af2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103af4:	4b06      	ldr	r3, [pc, #24]	@ (8103b10 <HAL_GetCurrentCPUID+0x20>)
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8103afc:	2b70      	cmp	r3, #112	@ 0x70
 8103afe:	d101      	bne.n	8103b04 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8103b00:	2303      	movs	r3, #3
 8103b02:	e000      	b.n	8103b06 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8103b04:	2301      	movs	r3, #1
  }
}
 8103b06:	4618      	mov	r0, r3
 8103b08:	46bd      	mov	sp, r7
 8103b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b0e:	4770      	bx	lr
 8103b10:	e000ed00 	.word	0xe000ed00

08103b14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8103b14:	b580      	push	{r7, lr}
 8103b16:	b084      	sub	sp, #16
 8103b18:	af00      	add	r7, sp, #0
 8103b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d101      	bne.n	8103b26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8103b22:	2301      	movs	r3, #1
 8103b24:	e0e7      	b.n	8103cf6 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8103b26:	687b      	ldr	r3, [r7, #4]
 8103b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d106      	bne.n	8103b3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	2220      	movs	r2, #32
 8103b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8103b38:	6878      	ldr	r0, [r7, #4]
 8103b3a:	f7fd fc49 	bl	81013d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103b3e:	4b70      	ldr	r3, [pc, #448]	@ (8103d00 <HAL_ETH_Init+0x1ec>)
 8103b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103b44:	4a6e      	ldr	r2, [pc, #440]	@ (8103d00 <HAL_ETH_Init+0x1ec>)
 8103b46:	f043 0302 	orr.w	r3, r3, #2
 8103b4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8103d00 <HAL_ETH_Init+0x1ec>)
 8103b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103b54:	f003 0302 	and.w	r3, r3, #2
 8103b58:	60bb      	str	r3, [r7, #8]
 8103b5a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	7a1b      	ldrb	r3, [r3, #8]
 8103b60:	2b00      	cmp	r3, #0
 8103b62:	d103      	bne.n	8103b6c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8103b64:	2000      	movs	r0, #0
 8103b66:	f7fe fcc7 	bl	81024f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8103b6a:	e003      	b.n	8103b74 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8103b6c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8103b70:	f7fe fcc2 	bl	81024f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8103b74:	4b63      	ldr	r3, [pc, #396]	@ (8103d04 <HAL_ETH_Init+0x1f0>)
 8103b76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	681b      	ldr	r3, [r3, #0]
 8103b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	687a      	ldr	r2, [r7, #4]
 8103b84:	6812      	ldr	r2, [r2, #0]
 8103b86:	f043 0301 	orr.w	r3, r3, #1
 8103b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8103b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8103b90:	f7fe fc76 	bl	8102480 <HAL_GetTick>
 8103b94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8103b96:	e011      	b.n	8103bbc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8103b98:	f7fe fc72 	bl	8102480 <HAL_GetTick>
 8103b9c:	4602      	mov	r2, r0
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	1ad3      	subs	r3, r2, r3
 8103ba2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8103ba6:	d909      	bls.n	8103bbc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	2204      	movs	r2, #4
 8103bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	22e0      	movs	r2, #224	@ 0xe0
 8103bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8103bb8:	2301      	movs	r3, #1
 8103bba:	e09c      	b.n	8103cf6 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103bc4:	681b      	ldr	r3, [r3, #0]
 8103bc6:	f003 0301 	and.w	r3, r3, #1
 8103bca:	2b00      	cmp	r3, #0
 8103bcc:	d1e4      	bne.n	8103b98 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8103bce:	6878      	ldr	r0, [r7, #4]
 8103bd0:	f000 f89e 	bl	8103d10 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8103bd4:	f001 f850 	bl	8104c78 <HAL_RCC_GetHCLKFreq>
 8103bd8:	4603      	mov	r3, r0
 8103bda:	4a4b      	ldr	r2, [pc, #300]	@ (8103d08 <HAL_ETH_Init+0x1f4>)
 8103bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8103be0:	0c9a      	lsrs	r2, r3, #18
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	681b      	ldr	r3, [r3, #0]
 8103be6:	3a01      	subs	r2, #1
 8103be8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8103bec:	6878      	ldr	r0, [r7, #4]
 8103bee:	f000 fa81 	bl	81040f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103bfa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8103bfe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8103c02:	687a      	ldr	r2, [r7, #4]
 8103c04:	6812      	ldr	r2, [r2, #0]
 8103c06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103c0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8103c0e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	695b      	ldr	r3, [r3, #20]
 8103c16:	f003 0303 	and.w	r3, r3, #3
 8103c1a:	2b00      	cmp	r3, #0
 8103c1c:	d009      	beq.n	8103c32 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	2201      	movs	r2, #1
 8103c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	22e0      	movs	r2, #224	@ 0xe0
 8103c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8103c2e:	2301      	movs	r3, #1
 8103c30:	e061      	b.n	8103cf6 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103c3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8103c3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8103c42:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8103c46:	687a      	ldr	r2, [r7, #4]
 8103c48:	6952      	ldr	r2, [r2, #20]
 8103c4a:	0051      	lsls	r1, r2, #1
 8103c4c:	687a      	ldr	r2, [r7, #4]
 8103c4e:	6812      	ldr	r2, [r2, #0]
 8103c50:	430b      	orrs	r3, r1
 8103c52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8103c56:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8103c5a:	6878      	ldr	r0, [r7, #4]
 8103c5c:	f000 fae7 	bl	810422e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8103c60:	6878      	ldr	r0, [r7, #4]
 8103c62:	f000 fb2d 	bl	81042c0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	685b      	ldr	r3, [r3, #4]
 8103c6a:	3305      	adds	r3, #5
 8103c6c:	781b      	ldrb	r3, [r3, #0]
 8103c6e:	021a      	lsls	r2, r3, #8
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	685b      	ldr	r3, [r3, #4]
 8103c74:	3304      	adds	r3, #4
 8103c76:	781b      	ldrb	r3, [r3, #0]
 8103c78:	4619      	mov	r1, r3
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	430a      	orrs	r2, r1
 8103c80:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	685b      	ldr	r3, [r3, #4]
 8103c88:	3303      	adds	r3, #3
 8103c8a:	781b      	ldrb	r3, [r3, #0]
 8103c8c:	061a      	lsls	r2, r3, #24
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	685b      	ldr	r3, [r3, #4]
 8103c92:	3302      	adds	r3, #2
 8103c94:	781b      	ldrb	r3, [r3, #0]
 8103c96:	041b      	lsls	r3, r3, #16
 8103c98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	685b      	ldr	r3, [r3, #4]
 8103c9e:	3301      	adds	r3, #1
 8103ca0:	781b      	ldrb	r3, [r3, #0]
 8103ca2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103ca4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	685b      	ldr	r3, [r3, #4]
 8103caa:	781b      	ldrb	r3, [r3, #0]
 8103cac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8103cb2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8103cb4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	681a      	ldr	r2, [r3, #0]
 8103cc4:	4b11      	ldr	r3, [pc, #68]	@ (8103d0c <HAL_ETH_Init+0x1f8>)
 8103cc6:	430b      	orrs	r3, r1
 8103cc8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8103cd4:	687a      	ldr	r2, [r7, #4]
 8103cd6:	6812      	ldr	r2, [r2, #0]
 8103cd8:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 8103cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8103ce0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	2200      	movs	r2, #0
 8103ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	2210      	movs	r2, #16
 8103cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8103cf4:	2300      	movs	r3, #0
}
 8103cf6:	4618      	mov	r0, r3
 8103cf8:	3710      	adds	r7, #16
 8103cfa:	46bd      	mov	sp, r7
 8103cfc:	bd80      	pop	{r7, pc}
 8103cfe:	bf00      	nop
 8103d00:	58024400 	.word	0x58024400
 8103d04:	58000400 	.word	0x58000400
 8103d08:	431bde83 	.word	0x431bde83
 8103d0c:	0c020060 	.word	0x0c020060

08103d10 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8103d10:	b580      	push	{r7, lr}
 8103d12:	b084      	sub	sp, #16
 8103d14:	af00      	add	r7, sp, #0
 8103d16:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8103d20:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8103d22:	68fb      	ldr	r3, [r7, #12]
 8103d24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103d28:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8103d2a:	f000 ffa5 	bl	8104c78 <HAL_RCC_GetHCLKFreq>
 8103d2e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8103d30:	68bb      	ldr	r3, [r7, #8]
 8103d32:	4a1a      	ldr	r2, [pc, #104]	@ (8103d9c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8103d34:	4293      	cmp	r3, r2
 8103d36:	d804      	bhi.n	8103d42 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8103d38:	68fb      	ldr	r3, [r7, #12]
 8103d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8103d3e:	60fb      	str	r3, [r7, #12]
 8103d40:	e022      	b.n	8103d88 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8103d42:	68bb      	ldr	r3, [r7, #8]
 8103d44:	4a16      	ldr	r2, [pc, #88]	@ (8103da0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8103d46:	4293      	cmp	r3, r2
 8103d48:	d204      	bcs.n	8103d54 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8103d50:	60fb      	str	r3, [r7, #12]
 8103d52:	e019      	b.n	8103d88 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8103d54:	68bb      	ldr	r3, [r7, #8]
 8103d56:	4a13      	ldr	r2, [pc, #76]	@ (8103da4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8103d58:	4293      	cmp	r3, r2
 8103d5a:	d915      	bls.n	8103d88 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8103d5c:	68bb      	ldr	r3, [r7, #8]
 8103d5e:	4a12      	ldr	r2, [pc, #72]	@ (8103da8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8103d60:	4293      	cmp	r3, r2
 8103d62:	d804      	bhi.n	8103d6e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8103d64:	68fb      	ldr	r3, [r7, #12]
 8103d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103d6a:	60fb      	str	r3, [r7, #12]
 8103d6c:	e00c      	b.n	8103d88 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8103d6e:	68bb      	ldr	r3, [r7, #8]
 8103d70:	4a0e      	ldr	r2, [pc, #56]	@ (8103dac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8103d72:	4293      	cmp	r3, r2
 8103d74:	d804      	bhi.n	8103d80 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8103d76:	68fb      	ldr	r3, [r7, #12]
 8103d78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8103d7c:	60fb      	str	r3, [r7, #12]
 8103d7e:	e003      	b.n	8103d88 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8103d86:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	68fa      	ldr	r2, [r7, #12]
 8103d8e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8103d92:	bf00      	nop
 8103d94:	3710      	adds	r7, #16
 8103d96:	46bd      	mov	sp, r7
 8103d98:	bd80      	pop	{r7, pc}
 8103d9a:	bf00      	nop
 8103d9c:	02160ebf 	.word	0x02160ebf
 8103da0:	03938700 	.word	0x03938700
 8103da4:	05f5e0ff 	.word	0x05f5e0ff
 8103da8:	08f0d17f 	.word	0x08f0d17f
 8103dac:	0ee6b27f 	.word	0x0ee6b27f

08103db0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8103db0:	b480      	push	{r7}
 8103db2:	b085      	sub	sp, #20
 8103db4:	af00      	add	r7, sp, #0
 8103db6:	6078      	str	r0, [r7, #4]
 8103db8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8103dba:	683b      	ldr	r3, [r7, #0]
 8103dbc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8103dbe:	683b      	ldr	r3, [r7, #0]
 8103dc0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8103dc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8103dc4:	683b      	ldr	r3, [r7, #0]
 8103dc6:	791b      	ldrb	r3, [r3, #4]
 8103dc8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8103dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8103dcc:	683b      	ldr	r3, [r7, #0]
 8103dce:	7b1b      	ldrb	r3, [r3, #12]
 8103dd0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8103dd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8103dd4:	683b      	ldr	r3, [r7, #0]
 8103dd6:	7b5b      	ldrb	r3, [r3, #13]
 8103dd8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8103dda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8103ddc:	683b      	ldr	r3, [r7, #0]
 8103dde:	7b9b      	ldrb	r3, [r3, #14]
 8103de0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8103de2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8103de4:	683b      	ldr	r3, [r7, #0]
 8103de6:	7bdb      	ldrb	r3, [r3, #15]
 8103de8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8103dea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8103dec:	683a      	ldr	r2, [r7, #0]
 8103dee:	7c12      	ldrb	r2, [r2, #16]
 8103df0:	2a00      	cmp	r2, #0
 8103df2:	d102      	bne.n	8103dfa <ETH_SetMACConfig+0x4a>
 8103df4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8103df8:	e000      	b.n	8103dfc <ETH_SetMACConfig+0x4c>
 8103dfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8103dfc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8103dfe:	683a      	ldr	r2, [r7, #0]
 8103e00:	7c52      	ldrb	r2, [r2, #17]
 8103e02:	2a00      	cmp	r2, #0
 8103e04:	d102      	bne.n	8103e0c <ETH_SetMACConfig+0x5c>
 8103e06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8103e0a:	e000      	b.n	8103e0e <ETH_SetMACConfig+0x5e>
 8103e0c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8103e0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8103e10:	683b      	ldr	r3, [r7, #0]
 8103e12:	7c9b      	ldrb	r3, [r3, #18]
 8103e14:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8103e16:	431a      	orrs	r2, r3
               macconf->Speed |
 8103e18:	683b      	ldr	r3, [r7, #0]
 8103e1a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8103e1c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8103e1e:	683b      	ldr	r3, [r7, #0]
 8103e20:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8103e22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8103e24:	683b      	ldr	r3, [r7, #0]
 8103e26:	7f1b      	ldrb	r3, [r3, #28]
 8103e28:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8103e2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8103e2c:	683b      	ldr	r3, [r7, #0]
 8103e2e:	7f5b      	ldrb	r3, [r3, #29]
 8103e30:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8103e32:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8103e34:	683a      	ldr	r2, [r7, #0]
 8103e36:	7f92      	ldrb	r2, [r2, #30]
 8103e38:	2a00      	cmp	r2, #0
 8103e3a:	d102      	bne.n	8103e42 <ETH_SetMACConfig+0x92>
 8103e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103e40:	e000      	b.n	8103e44 <ETH_SetMACConfig+0x94>
 8103e42:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8103e44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8103e46:	683b      	ldr	r3, [r7, #0]
 8103e48:	7fdb      	ldrb	r3, [r3, #31]
 8103e4a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8103e4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8103e4e:	683a      	ldr	r2, [r7, #0]
 8103e50:	f892 2020 	ldrb.w	r2, [r2, #32]
 8103e54:	2a00      	cmp	r2, #0
 8103e56:	d102      	bne.n	8103e5e <ETH_SetMACConfig+0xae>
 8103e58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8103e5c:	e000      	b.n	8103e60 <ETH_SetMACConfig+0xb0>
 8103e5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8103e60:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8103e62:	683b      	ldr	r3, [r7, #0]
 8103e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8103e66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8103e68:	683b      	ldr	r3, [r7, #0]
 8103e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103e6e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8103e70:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8103e72:	683b      	ldr	r3, [r7, #0]
 8103e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8103e76:	4313      	orrs	r3, r2
 8103e78:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	681a      	ldr	r2, [r3, #0]
 8103e80:	4b57      	ldr	r3, [pc, #348]	@ (8103fe0 <ETH_SetMACConfig+0x230>)
 8103e82:	4013      	ands	r3, r2
 8103e84:	687a      	ldr	r2, [r7, #4]
 8103e86:	6812      	ldr	r2, [r2, #0]
 8103e88:	68f9      	ldr	r1, [r7, #12]
 8103e8a:	430b      	orrs	r3, r1
 8103e8c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8103e8e:	683b      	ldr	r3, [r7, #0]
 8103e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103e92:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8103e94:	683b      	ldr	r3, [r7, #0]
 8103e96:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8103e9a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8103e9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8103e9e:	683b      	ldr	r3, [r7, #0]
 8103ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8103ea4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8103ea6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8103ea8:	683b      	ldr	r3, [r7, #0]
 8103eaa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8103eae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8103eb0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8103eb2:	683a      	ldr	r2, [r7, #0]
 8103eb4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8103eb8:	2a00      	cmp	r2, #0
 8103eba:	d102      	bne.n	8103ec2 <ETH_SetMACConfig+0x112>
 8103ebc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8103ec0:	e000      	b.n	8103ec4 <ETH_SetMACConfig+0x114>
 8103ec2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8103ec4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8103ec6:	683b      	ldr	r3, [r7, #0]
 8103ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8103eca:	4313      	orrs	r3, r2
 8103ecc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	685a      	ldr	r2, [r3, #4]
 8103ed4:	4b43      	ldr	r3, [pc, #268]	@ (8103fe4 <ETH_SetMACConfig+0x234>)
 8103ed6:	4013      	ands	r3, r2
 8103ed8:	687a      	ldr	r2, [r7, #4]
 8103eda:	6812      	ldr	r2, [r2, #0]
 8103edc:	68f9      	ldr	r1, [r7, #12]
 8103ede:	430b      	orrs	r3, r1
 8103ee0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8103ee2:	683b      	ldr	r3, [r7, #0]
 8103ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103ee8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8103eea:	683b      	ldr	r3, [r7, #0]
 8103eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8103eee:	4313      	orrs	r3, r2
 8103ef0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8103ef2:	687b      	ldr	r3, [r7, #4]
 8103ef4:	681b      	ldr	r3, [r3, #0]
 8103ef6:	68db      	ldr	r3, [r3, #12]
 8103ef8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8103efc:	f023 0301 	bic.w	r3, r3, #1
 8103f00:	687a      	ldr	r2, [r7, #4]
 8103f02:	6812      	ldr	r2, [r2, #0]
 8103f04:	68f9      	ldr	r1, [r7, #12]
 8103f06:	430b      	orrs	r3, r1
 8103f08:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8103f0a:	683b      	ldr	r3, [r7, #0]
 8103f0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8103f10:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8103f12:	683b      	ldr	r3, [r7, #0]
 8103f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8103f16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8103f18:	683a      	ldr	r2, [r7, #0]
 8103f1a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8103f1e:	2a00      	cmp	r2, #0
 8103f20:	d101      	bne.n	8103f26 <ETH_SetMACConfig+0x176>
 8103f22:	2280      	movs	r2, #128	@ 0x80
 8103f24:	e000      	b.n	8103f28 <ETH_SetMACConfig+0x178>
 8103f26:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8103f28:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8103f2a:	683b      	ldr	r3, [r7, #0]
 8103f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103f2e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8103f30:	4313      	orrs	r3, r2
 8103f32:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103f3a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8103f3e:	4013      	ands	r3, r2
 8103f40:	687a      	ldr	r2, [r7, #4]
 8103f42:	6812      	ldr	r2, [r2, #0]
 8103f44:	68f9      	ldr	r1, [r7, #12]
 8103f46:	430b      	orrs	r3, r1
 8103f48:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8103f4a:	683b      	ldr	r3, [r7, #0]
 8103f4c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8103f50:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8103f52:	683b      	ldr	r3, [r7, #0]
 8103f54:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8103f58:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8103f5a:	4313      	orrs	r3, r2
 8103f5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103f66:	f023 0103 	bic.w	r1, r3, #3
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	68fa      	ldr	r2, [r7, #12]
 8103f70:	430a      	orrs	r2, r1
 8103f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8103f76:	687b      	ldr	r3, [r7, #4]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8103f7e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8103f82:	683b      	ldr	r3, [r7, #0]
 8103f84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	430a      	orrs	r2, r1
 8103f8c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8103f90:	683b      	ldr	r3, [r7, #0]
 8103f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8103f94:	683a      	ldr	r2, [r7, #0]
 8103f96:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8103f9a:	2a00      	cmp	r2, #0
 8103f9c:	d101      	bne.n	8103fa2 <ETH_SetMACConfig+0x1f2>
 8103f9e:	2240      	movs	r2, #64	@ 0x40
 8103fa0:	e000      	b.n	8103fa4 <ETH_SetMACConfig+0x1f4>
 8103fa2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8103fa4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8103fa6:	683b      	ldr	r3, [r7, #0]
 8103fa8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8103fac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8103fae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8103fb0:	683b      	ldr	r3, [r7, #0]
 8103fb2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8103fb6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8103fb8:	4313      	orrs	r3, r2
 8103fba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8103fc4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8103fc8:	687b      	ldr	r3, [r7, #4]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	68fa      	ldr	r2, [r7, #12]
 8103fce:	430a      	orrs	r2, r1
 8103fd0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8103fd4:	bf00      	nop
 8103fd6:	3714      	adds	r7, #20
 8103fd8:	46bd      	mov	sp, r7
 8103fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fde:	4770      	bx	lr
 8103fe0:	00048083 	.word	0x00048083
 8103fe4:	c0f88000 	.word	0xc0f88000

08103fe8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8103fe8:	b480      	push	{r7}
 8103fea:	b085      	sub	sp, #20
 8103fec:	af00      	add	r7, sp, #0
 8103fee:	6078      	str	r0, [r7, #4]
 8103ff0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8104000:	f023 0302 	bic.w	r3, r3, #2
 8104004:	683a      	ldr	r2, [r7, #0]
 8104006:	6811      	ldr	r1, [r2, #0]
 8104008:	687a      	ldr	r2, [r7, #4]
 810400a:	6812      	ldr	r2, [r2, #0]
 810400c:	430b      	orrs	r3, r1
 810400e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104012:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104014:	683b      	ldr	r3, [r7, #0]
 8104016:	791b      	ldrb	r3, [r3, #4]
 8104018:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810401a:	683b      	ldr	r3, [r7, #0]
 810401c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810401e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8104020:	683b      	ldr	r3, [r7, #0]
 8104022:	7b1b      	ldrb	r3, [r3, #12]
 8104024:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104026:	4313      	orrs	r3, r2
 8104028:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810402a:	687b      	ldr	r3, [r7, #4]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104032:	685b      	ldr	r3, [r3, #4]
 8104034:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8104038:	f023 0301 	bic.w	r3, r3, #1
 810403c:	687a      	ldr	r2, [r7, #4]
 810403e:	6812      	ldr	r2, [r2, #0]
 8104040:	68f9      	ldr	r1, [r7, #12]
 8104042:	430b      	orrs	r3, r1
 8104044:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104048:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810404a:	683b      	ldr	r3, [r7, #0]
 810404c:	7b5b      	ldrb	r3, [r3, #13]
 810404e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8104050:	683b      	ldr	r3, [r7, #0]
 8104052:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104054:	4313      	orrs	r3, r2
 8104056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104060:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8104064:	4b21      	ldr	r3, [pc, #132]	@ (81040ec <ETH_SetDMAConfig+0x104>)
 8104066:	4013      	ands	r3, r2
 8104068:	687a      	ldr	r2, [r7, #4]
 810406a:	6812      	ldr	r2, [r2, #0]
 810406c:	68f9      	ldr	r1, [r7, #12]
 810406e:	430b      	orrs	r3, r1
 8104070:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104074:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8104078:	683b      	ldr	r3, [r7, #0]
 810407a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810407c:	683b      	ldr	r3, [r7, #0]
 810407e:	7d1b      	ldrb	r3, [r3, #20]
 8104080:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8104082:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8104084:	683b      	ldr	r3, [r7, #0]
 8104086:	7f5b      	ldrb	r3, [r3, #29]
 8104088:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810408a:	4313      	orrs	r3, r2
 810408c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104096:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810409a:	4b15      	ldr	r3, [pc, #84]	@ (81040f0 <ETH_SetDMAConfig+0x108>)
 810409c:	4013      	ands	r3, r2
 810409e:	687a      	ldr	r2, [r7, #4]
 81040a0:	6812      	ldr	r2, [r2, #0]
 81040a2:	68f9      	ldr	r1, [r7, #12]
 81040a4:	430b      	orrs	r3, r1
 81040a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81040aa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81040ae:	683b      	ldr	r3, [r7, #0]
 81040b0:	7f1b      	ldrb	r3, [r3, #28]
 81040b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81040b4:	683b      	ldr	r3, [r7, #0]
 81040b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81040b8:	4313      	orrs	r3, r2
 81040ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81040c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 81040c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81040cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 81040d0:	687a      	ldr	r2, [r7, #4]
 81040d2:	6812      	ldr	r2, [r2, #0]
 81040d4:	68f9      	ldr	r1, [r7, #12]
 81040d6:	430b      	orrs	r3, r1
 81040d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81040dc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 81040e0:	bf00      	nop
 81040e2:	3714      	adds	r7, #20
 81040e4:	46bd      	mov	sp, r7
 81040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ea:	4770      	bx	lr
 81040ec:	fffec000 	.word	0xfffec000
 81040f0:	ffc0efef 	.word	0xffc0efef

081040f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81040f4:	b580      	push	{r7, lr}
 81040f6:	b0a4      	sub	sp, #144	@ 0x90
 81040f8:	af00      	add	r7, sp, #0
 81040fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81040fc:	2301      	movs	r3, #1
 81040fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8104102:	2300      	movs	r3, #0
 8104104:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8104106:	2300      	movs	r3, #0
 8104108:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810410c:	2300      	movs	r3, #0
 810410e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8104112:	2301      	movs	r3, #1
 8104114:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8104118:	2301      	movs	r3, #1
 810411a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810411e:	2301      	movs	r3, #1
 8104120:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8104124:	2300      	movs	r3, #0
 8104126:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810412a:	2301      	movs	r3, #1
 810412c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8104130:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104134:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8104136:	2300      	movs	r3, #0
 8104138:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810413c:	2300      	movs	r3, #0
 810413e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8104140:	2300      	movs	r3, #0
 8104142:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8104146:	2300      	movs	r3, #0
 8104148:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810414c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8104150:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8104152:	2300      	movs	r3, #0
 8104154:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8104158:	2300      	movs	r3, #0
 810415a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810415c:	2301      	movs	r3, #1
 810415e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8104162:	2300      	movs	r3, #0
 8104164:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8104168:	2300      	movs	r3, #0
 810416a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810416e:	2300      	movs	r3, #0
 8104170:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8104172:	2300      	movs	r3, #0
 8104174:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8104176:	2300      	movs	r3, #0
 8104178:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810417a:	2300      	movs	r3, #0
 810417c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8104180:	2300      	movs	r3, #0
 8104182:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8104186:	2301      	movs	r3, #1
 8104188:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810418c:	2320      	movs	r3, #32
 810418e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8104192:	2301      	movs	r3, #1
 8104194:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8104198:	2300      	movs	r3, #0
 810419a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810419e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 81041a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81041a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81041a8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81041aa:	2300      	movs	r3, #0
 81041ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81041b0:	2302      	movs	r3, #2
 81041b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81041b6:	2300      	movs	r3, #0
 81041b8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81041bc:	2300      	movs	r3, #0
 81041be:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81041c2:	2300      	movs	r3, #0
 81041c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81041c8:	2301      	movs	r3, #1
 81041ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81041ce:	2300      	movs	r3, #0
 81041d0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81041d2:	2301      	movs	r3, #1
 81041d4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81041d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81041dc:	4619      	mov	r1, r3
 81041de:	6878      	ldr	r0, [r7, #4]
 81041e0:	f7ff fde6 	bl	8103db0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81041e4:	2301      	movs	r3, #1
 81041e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81041e8:	2301      	movs	r3, #1
 81041ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81041ec:	2300      	movs	r3, #0
 81041ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81041f0:	2300      	movs	r3, #0
 81041f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81041f6:	2300      	movs	r3, #0
 81041f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81041fa:	2300      	movs	r3, #0
 81041fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81041fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8104202:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8104204:	2300      	movs	r3, #0
 8104206:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8104208:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810420c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810420e:	2300      	movs	r3, #0
 8104210:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8104214:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8104218:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810421a:	f107 0308 	add.w	r3, r7, #8
 810421e:	4619      	mov	r1, r3
 8104220:	6878      	ldr	r0, [r7, #4]
 8104222:	f7ff fee1 	bl	8103fe8 <ETH_SetDMAConfig>
}
 8104226:	bf00      	nop
 8104228:	3790      	adds	r7, #144	@ 0x90
 810422a:	46bd      	mov	sp, r7
 810422c:	bd80      	pop	{r7, pc}

0810422e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810422e:	b480      	push	{r7}
 8104230:	b085      	sub	sp, #20
 8104232:	af00      	add	r7, sp, #0
 8104234:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104236:	2300      	movs	r3, #0
 8104238:	60fb      	str	r3, [r7, #12]
 810423a:	e01d      	b.n	8104278 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	68d9      	ldr	r1, [r3, #12]
 8104240:	68fa      	ldr	r2, [r7, #12]
 8104242:	4613      	mov	r3, r2
 8104244:	005b      	lsls	r3, r3, #1
 8104246:	4413      	add	r3, r2
 8104248:	00db      	lsls	r3, r3, #3
 810424a:	440b      	add	r3, r1
 810424c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810424e:	68bb      	ldr	r3, [r7, #8]
 8104250:	2200      	movs	r2, #0
 8104252:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8104254:	68bb      	ldr	r3, [r7, #8]
 8104256:	2200      	movs	r2, #0
 8104258:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810425a:	68bb      	ldr	r3, [r7, #8]
 810425c:	2200      	movs	r2, #0
 810425e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8104260:	68bb      	ldr	r3, [r7, #8]
 8104262:	2200      	movs	r2, #0
 8104264:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8104266:	68b9      	ldr	r1, [r7, #8]
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	68fa      	ldr	r2, [r7, #12]
 810426c:	3206      	adds	r2, #6
 810426e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	3301      	adds	r3, #1
 8104276:	60fb      	str	r3, [r7, #12]
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	2b03      	cmp	r3, #3
 810427c:	d9de      	bls.n	810423c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	2200      	movs	r2, #0
 8104282:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	681b      	ldr	r3, [r3, #0]
 8104288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810428c:	461a      	mov	r2, r3
 810428e:	2303      	movs	r3, #3
 8104290:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	68da      	ldr	r2, [r3, #12]
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	681b      	ldr	r3, [r3, #0]
 810429c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81042a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81042a4:	687b      	ldr	r3, [r7, #4]
 81042a6:	68da      	ldr	r2, [r3, #12]
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81042b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 81042b4:	bf00      	nop
 81042b6:	3714      	adds	r7, #20
 81042b8:	46bd      	mov	sp, r7
 81042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042be:	4770      	bx	lr

081042c0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81042c0:	b480      	push	{r7}
 81042c2:	b085      	sub	sp, #20
 81042c4:	af00      	add	r7, sp, #0
 81042c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81042c8:	2300      	movs	r3, #0
 81042ca:	60fb      	str	r3, [r7, #12]
 81042cc:	e023      	b.n	8104316 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	6919      	ldr	r1, [r3, #16]
 81042d2:	68fa      	ldr	r2, [r7, #12]
 81042d4:	4613      	mov	r3, r2
 81042d6:	005b      	lsls	r3, r3, #1
 81042d8:	4413      	add	r3, r2
 81042da:	00db      	lsls	r3, r3, #3
 81042dc:	440b      	add	r3, r1
 81042de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 81042e0:	68bb      	ldr	r3, [r7, #8]
 81042e2:	2200      	movs	r2, #0
 81042e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 81042e6:	68bb      	ldr	r3, [r7, #8]
 81042e8:	2200      	movs	r2, #0
 81042ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 81042ec:	68bb      	ldr	r3, [r7, #8]
 81042ee:	2200      	movs	r2, #0
 81042f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 81042f2:	68bb      	ldr	r3, [r7, #8]
 81042f4:	2200      	movs	r2, #0
 81042f6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 81042f8:	68bb      	ldr	r3, [r7, #8]
 81042fa:	2200      	movs	r2, #0
 81042fc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 81042fe:	68bb      	ldr	r3, [r7, #8]
 8104300:	2200      	movs	r2, #0
 8104302:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8104304:	68b9      	ldr	r1, [r7, #8]
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	68fa      	ldr	r2, [r7, #12]
 810430a:	3212      	adds	r2, #18
 810430c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104310:	68fb      	ldr	r3, [r7, #12]
 8104312:	3301      	adds	r3, #1
 8104314:	60fb      	str	r3, [r7, #12]
 8104316:	68fb      	ldr	r3, [r7, #12]
 8104318:	2b03      	cmp	r3, #3
 810431a:	d9d8      	bls.n	81042ce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	2200      	movs	r2, #0
 8104320:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	2200      	movs	r2, #0
 8104326:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	2200      	movs	r2, #0
 810432c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	2200      	movs	r2, #0
 8104332:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	2200      	movs	r2, #0
 8104338:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	681b      	ldr	r3, [r3, #0]
 810433e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104342:	461a      	mov	r2, r3
 8104344:	2303      	movs	r3, #3
 8104346:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810434a:	687b      	ldr	r3, [r7, #4]
 810434c:	691a      	ldr	r2, [r3, #16]
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	681b      	ldr	r3, [r3, #0]
 8104352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104356:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	691b      	ldr	r3, [r3, #16]
 810435e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	681b      	ldr	r3, [r3, #0]
 8104366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810436a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810436e:	bf00      	nop
 8104370:	3714      	adds	r7, #20
 8104372:	46bd      	mov	sp, r7
 8104374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104378:	4770      	bx	lr
	...

0810437c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810437c:	b480      	push	{r7}
 810437e:	b089      	sub	sp, #36	@ 0x24
 8104380:	af00      	add	r7, sp, #0
 8104382:	6078      	str	r0, [r7, #4]
 8104384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104386:	2300      	movs	r3, #0
 8104388:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810438a:	4b89      	ldr	r3, [pc, #548]	@ (81045b0 <HAL_GPIO_Init+0x234>)
 810438c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810438e:	e194      	b.n	81046ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104390:	683b      	ldr	r3, [r7, #0]
 8104392:	681a      	ldr	r2, [r3, #0]
 8104394:	2101      	movs	r1, #1
 8104396:	69fb      	ldr	r3, [r7, #28]
 8104398:	fa01 f303 	lsl.w	r3, r1, r3
 810439c:	4013      	ands	r3, r2
 810439e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81043a0:	693b      	ldr	r3, [r7, #16]
 81043a2:	2b00      	cmp	r3, #0
 81043a4:	f000 8186 	beq.w	81046b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81043a8:	683b      	ldr	r3, [r7, #0]
 81043aa:	685b      	ldr	r3, [r3, #4]
 81043ac:	f003 0303 	and.w	r3, r3, #3
 81043b0:	2b01      	cmp	r3, #1
 81043b2:	d005      	beq.n	81043c0 <HAL_GPIO_Init+0x44>
 81043b4:	683b      	ldr	r3, [r7, #0]
 81043b6:	685b      	ldr	r3, [r3, #4]
 81043b8:	f003 0303 	and.w	r3, r3, #3
 81043bc:	2b02      	cmp	r3, #2
 81043be:	d130      	bne.n	8104422 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	689b      	ldr	r3, [r3, #8]
 81043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81043c6:	69fb      	ldr	r3, [r7, #28]
 81043c8:	005b      	lsls	r3, r3, #1
 81043ca:	2203      	movs	r2, #3
 81043cc:	fa02 f303 	lsl.w	r3, r2, r3
 81043d0:	43db      	mvns	r3, r3
 81043d2:	69ba      	ldr	r2, [r7, #24]
 81043d4:	4013      	ands	r3, r2
 81043d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81043d8:	683b      	ldr	r3, [r7, #0]
 81043da:	68da      	ldr	r2, [r3, #12]
 81043dc:	69fb      	ldr	r3, [r7, #28]
 81043de:	005b      	lsls	r3, r3, #1
 81043e0:	fa02 f303 	lsl.w	r3, r2, r3
 81043e4:	69ba      	ldr	r2, [r7, #24]
 81043e6:	4313      	orrs	r3, r2
 81043e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	69ba      	ldr	r2, [r7, #24]
 81043ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	685b      	ldr	r3, [r3, #4]
 81043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81043f6:	2201      	movs	r2, #1
 81043f8:	69fb      	ldr	r3, [r7, #28]
 81043fa:	fa02 f303 	lsl.w	r3, r2, r3
 81043fe:	43db      	mvns	r3, r3
 8104400:	69ba      	ldr	r2, [r7, #24]
 8104402:	4013      	ands	r3, r2
 8104404:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104406:	683b      	ldr	r3, [r7, #0]
 8104408:	685b      	ldr	r3, [r3, #4]
 810440a:	091b      	lsrs	r3, r3, #4
 810440c:	f003 0201 	and.w	r2, r3, #1
 8104410:	69fb      	ldr	r3, [r7, #28]
 8104412:	fa02 f303 	lsl.w	r3, r2, r3
 8104416:	69ba      	ldr	r2, [r7, #24]
 8104418:	4313      	orrs	r3, r2
 810441a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	69ba      	ldr	r2, [r7, #24]
 8104420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104422:	683b      	ldr	r3, [r7, #0]
 8104424:	685b      	ldr	r3, [r3, #4]
 8104426:	f003 0303 	and.w	r3, r3, #3
 810442a:	2b03      	cmp	r3, #3
 810442c:	d017      	beq.n	810445e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	68db      	ldr	r3, [r3, #12]
 8104432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104434:	69fb      	ldr	r3, [r7, #28]
 8104436:	005b      	lsls	r3, r3, #1
 8104438:	2203      	movs	r2, #3
 810443a:	fa02 f303 	lsl.w	r3, r2, r3
 810443e:	43db      	mvns	r3, r3
 8104440:	69ba      	ldr	r2, [r7, #24]
 8104442:	4013      	ands	r3, r2
 8104444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104446:	683b      	ldr	r3, [r7, #0]
 8104448:	689a      	ldr	r2, [r3, #8]
 810444a:	69fb      	ldr	r3, [r7, #28]
 810444c:	005b      	lsls	r3, r3, #1
 810444e:	fa02 f303 	lsl.w	r3, r2, r3
 8104452:	69ba      	ldr	r2, [r7, #24]
 8104454:	4313      	orrs	r3, r2
 8104456:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	69ba      	ldr	r2, [r7, #24]
 810445c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810445e:	683b      	ldr	r3, [r7, #0]
 8104460:	685b      	ldr	r3, [r3, #4]
 8104462:	f003 0303 	and.w	r3, r3, #3
 8104466:	2b02      	cmp	r3, #2
 8104468:	d123      	bne.n	81044b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810446a:	69fb      	ldr	r3, [r7, #28]
 810446c:	08da      	lsrs	r2, r3, #3
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	3208      	adds	r2, #8
 8104472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104478:	69fb      	ldr	r3, [r7, #28]
 810447a:	f003 0307 	and.w	r3, r3, #7
 810447e:	009b      	lsls	r3, r3, #2
 8104480:	220f      	movs	r2, #15
 8104482:	fa02 f303 	lsl.w	r3, r2, r3
 8104486:	43db      	mvns	r3, r3
 8104488:	69ba      	ldr	r2, [r7, #24]
 810448a:	4013      	ands	r3, r2
 810448c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810448e:	683b      	ldr	r3, [r7, #0]
 8104490:	691a      	ldr	r2, [r3, #16]
 8104492:	69fb      	ldr	r3, [r7, #28]
 8104494:	f003 0307 	and.w	r3, r3, #7
 8104498:	009b      	lsls	r3, r3, #2
 810449a:	fa02 f303 	lsl.w	r3, r2, r3
 810449e:	69ba      	ldr	r2, [r7, #24]
 81044a0:	4313      	orrs	r3, r2
 81044a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81044a4:	69fb      	ldr	r3, [r7, #28]
 81044a6:	08da      	lsrs	r2, r3, #3
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	3208      	adds	r2, #8
 81044ac:	69b9      	ldr	r1, [r7, #24]
 81044ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81044b8:	69fb      	ldr	r3, [r7, #28]
 81044ba:	005b      	lsls	r3, r3, #1
 81044bc:	2203      	movs	r2, #3
 81044be:	fa02 f303 	lsl.w	r3, r2, r3
 81044c2:	43db      	mvns	r3, r3
 81044c4:	69ba      	ldr	r2, [r7, #24]
 81044c6:	4013      	ands	r3, r2
 81044c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81044ca:	683b      	ldr	r3, [r7, #0]
 81044cc:	685b      	ldr	r3, [r3, #4]
 81044ce:	f003 0203 	and.w	r2, r3, #3
 81044d2:	69fb      	ldr	r3, [r7, #28]
 81044d4:	005b      	lsls	r3, r3, #1
 81044d6:	fa02 f303 	lsl.w	r3, r2, r3
 81044da:	69ba      	ldr	r2, [r7, #24]
 81044dc:	4313      	orrs	r3, r2
 81044de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	69ba      	ldr	r2, [r7, #24]
 81044e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81044e6:	683b      	ldr	r3, [r7, #0]
 81044e8:	685b      	ldr	r3, [r3, #4]
 81044ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81044ee:	2b00      	cmp	r3, #0
 81044f0:	f000 80e0 	beq.w	81046b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81044f4:	4b2f      	ldr	r3, [pc, #188]	@ (81045b4 <HAL_GPIO_Init+0x238>)
 81044f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81044fa:	4a2e      	ldr	r2, [pc, #184]	@ (81045b4 <HAL_GPIO_Init+0x238>)
 81044fc:	f043 0302 	orr.w	r3, r3, #2
 8104500:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104504:	4b2b      	ldr	r3, [pc, #172]	@ (81045b4 <HAL_GPIO_Init+0x238>)
 8104506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810450a:	f003 0302 	and.w	r3, r3, #2
 810450e:	60fb      	str	r3, [r7, #12]
 8104510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104512:	4a29      	ldr	r2, [pc, #164]	@ (81045b8 <HAL_GPIO_Init+0x23c>)
 8104514:	69fb      	ldr	r3, [r7, #28]
 8104516:	089b      	lsrs	r3, r3, #2
 8104518:	3302      	adds	r3, #2
 810451a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104520:	69fb      	ldr	r3, [r7, #28]
 8104522:	f003 0303 	and.w	r3, r3, #3
 8104526:	009b      	lsls	r3, r3, #2
 8104528:	220f      	movs	r2, #15
 810452a:	fa02 f303 	lsl.w	r3, r2, r3
 810452e:	43db      	mvns	r3, r3
 8104530:	69ba      	ldr	r2, [r7, #24]
 8104532:	4013      	ands	r3, r2
 8104534:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	4a20      	ldr	r2, [pc, #128]	@ (81045bc <HAL_GPIO_Init+0x240>)
 810453a:	4293      	cmp	r3, r2
 810453c:	d052      	beq.n	81045e4 <HAL_GPIO_Init+0x268>
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	4a1f      	ldr	r2, [pc, #124]	@ (81045c0 <HAL_GPIO_Init+0x244>)
 8104542:	4293      	cmp	r3, r2
 8104544:	d031      	beq.n	81045aa <HAL_GPIO_Init+0x22e>
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	4a1e      	ldr	r2, [pc, #120]	@ (81045c4 <HAL_GPIO_Init+0x248>)
 810454a:	4293      	cmp	r3, r2
 810454c:	d02b      	beq.n	81045a6 <HAL_GPIO_Init+0x22a>
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	4a1d      	ldr	r2, [pc, #116]	@ (81045c8 <HAL_GPIO_Init+0x24c>)
 8104552:	4293      	cmp	r3, r2
 8104554:	d025      	beq.n	81045a2 <HAL_GPIO_Init+0x226>
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	4a1c      	ldr	r2, [pc, #112]	@ (81045cc <HAL_GPIO_Init+0x250>)
 810455a:	4293      	cmp	r3, r2
 810455c:	d01f      	beq.n	810459e <HAL_GPIO_Init+0x222>
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	4a1b      	ldr	r2, [pc, #108]	@ (81045d0 <HAL_GPIO_Init+0x254>)
 8104562:	4293      	cmp	r3, r2
 8104564:	d019      	beq.n	810459a <HAL_GPIO_Init+0x21e>
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	4a1a      	ldr	r2, [pc, #104]	@ (81045d4 <HAL_GPIO_Init+0x258>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d013      	beq.n	8104596 <HAL_GPIO_Init+0x21a>
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	4a19      	ldr	r2, [pc, #100]	@ (81045d8 <HAL_GPIO_Init+0x25c>)
 8104572:	4293      	cmp	r3, r2
 8104574:	d00d      	beq.n	8104592 <HAL_GPIO_Init+0x216>
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	4a18      	ldr	r2, [pc, #96]	@ (81045dc <HAL_GPIO_Init+0x260>)
 810457a:	4293      	cmp	r3, r2
 810457c:	d007      	beq.n	810458e <HAL_GPIO_Init+0x212>
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	4a17      	ldr	r2, [pc, #92]	@ (81045e0 <HAL_GPIO_Init+0x264>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d101      	bne.n	810458a <HAL_GPIO_Init+0x20e>
 8104586:	2309      	movs	r3, #9
 8104588:	e02d      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 810458a:	230a      	movs	r3, #10
 810458c:	e02b      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 810458e:	2308      	movs	r3, #8
 8104590:	e029      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 8104592:	2307      	movs	r3, #7
 8104594:	e027      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 8104596:	2306      	movs	r3, #6
 8104598:	e025      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 810459a:	2305      	movs	r3, #5
 810459c:	e023      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 810459e:	2304      	movs	r3, #4
 81045a0:	e021      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 81045a2:	2303      	movs	r3, #3
 81045a4:	e01f      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 81045a6:	2302      	movs	r3, #2
 81045a8:	e01d      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 81045aa:	2301      	movs	r3, #1
 81045ac:	e01b      	b.n	81045e6 <HAL_GPIO_Init+0x26a>
 81045ae:	bf00      	nop
 81045b0:	580000c0 	.word	0x580000c0
 81045b4:	58024400 	.word	0x58024400
 81045b8:	58000400 	.word	0x58000400
 81045bc:	58020000 	.word	0x58020000
 81045c0:	58020400 	.word	0x58020400
 81045c4:	58020800 	.word	0x58020800
 81045c8:	58020c00 	.word	0x58020c00
 81045cc:	58021000 	.word	0x58021000
 81045d0:	58021400 	.word	0x58021400
 81045d4:	58021800 	.word	0x58021800
 81045d8:	58021c00 	.word	0x58021c00
 81045dc:	58022000 	.word	0x58022000
 81045e0:	58022400 	.word	0x58022400
 81045e4:	2300      	movs	r3, #0
 81045e6:	69fa      	ldr	r2, [r7, #28]
 81045e8:	f002 0203 	and.w	r2, r2, #3
 81045ec:	0092      	lsls	r2, r2, #2
 81045ee:	4093      	lsls	r3, r2
 81045f0:	69ba      	ldr	r2, [r7, #24]
 81045f2:	4313      	orrs	r3, r2
 81045f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81045f6:	4938      	ldr	r1, [pc, #224]	@ (81046d8 <HAL_GPIO_Init+0x35c>)
 81045f8:	69fb      	ldr	r3, [r7, #28]
 81045fa:	089b      	lsrs	r3, r3, #2
 81045fc:	3302      	adds	r3, #2
 81045fe:	69ba      	ldr	r2, [r7, #24]
 8104600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810460c:	693b      	ldr	r3, [r7, #16]
 810460e:	43db      	mvns	r3, r3
 8104610:	69ba      	ldr	r2, [r7, #24]
 8104612:	4013      	ands	r3, r2
 8104614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104616:	683b      	ldr	r3, [r7, #0]
 8104618:	685b      	ldr	r3, [r3, #4]
 810461a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810461e:	2b00      	cmp	r3, #0
 8104620:	d003      	beq.n	810462a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104622:	69ba      	ldr	r2, [r7, #24]
 8104624:	693b      	ldr	r3, [r7, #16]
 8104626:	4313      	orrs	r3, r2
 8104628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810462a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810462e:	69bb      	ldr	r3, [r7, #24]
 8104630:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8104636:	685b      	ldr	r3, [r3, #4]
 8104638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810463a:	693b      	ldr	r3, [r7, #16]
 810463c:	43db      	mvns	r3, r3
 810463e:	69ba      	ldr	r2, [r7, #24]
 8104640:	4013      	ands	r3, r2
 8104642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104644:	683b      	ldr	r3, [r7, #0]
 8104646:	685b      	ldr	r3, [r3, #4]
 8104648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810464c:	2b00      	cmp	r3, #0
 810464e:	d003      	beq.n	8104658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104650:	69ba      	ldr	r2, [r7, #24]
 8104652:	693b      	ldr	r3, [r7, #16]
 8104654:	4313      	orrs	r3, r2
 8104656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104658:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810465c:	69bb      	ldr	r3, [r7, #24]
 810465e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104660:	697b      	ldr	r3, [r7, #20]
 8104662:	685b      	ldr	r3, [r3, #4]
 8104664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104666:	693b      	ldr	r3, [r7, #16]
 8104668:	43db      	mvns	r3, r3
 810466a:	69ba      	ldr	r2, [r7, #24]
 810466c:	4013      	ands	r3, r2
 810466e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104670:	683b      	ldr	r3, [r7, #0]
 8104672:	685b      	ldr	r3, [r3, #4]
 8104674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104678:	2b00      	cmp	r3, #0
 810467a:	d003      	beq.n	8104684 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810467c:	69ba      	ldr	r2, [r7, #24]
 810467e:	693b      	ldr	r3, [r7, #16]
 8104680:	4313      	orrs	r3, r2
 8104682:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104684:	697b      	ldr	r3, [r7, #20]
 8104686:	69ba      	ldr	r2, [r7, #24]
 8104688:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810468a:	697b      	ldr	r3, [r7, #20]
 810468c:	681b      	ldr	r3, [r3, #0]
 810468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104690:	693b      	ldr	r3, [r7, #16]
 8104692:	43db      	mvns	r3, r3
 8104694:	69ba      	ldr	r2, [r7, #24]
 8104696:	4013      	ands	r3, r2
 8104698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810469a:	683b      	ldr	r3, [r7, #0]
 810469c:	685b      	ldr	r3, [r3, #4]
 810469e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81046a2:	2b00      	cmp	r3, #0
 81046a4:	d003      	beq.n	81046ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81046a6:	69ba      	ldr	r2, [r7, #24]
 81046a8:	693b      	ldr	r3, [r7, #16]
 81046aa:	4313      	orrs	r3, r2
 81046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81046ae:	697b      	ldr	r3, [r7, #20]
 81046b0:	69ba      	ldr	r2, [r7, #24]
 81046b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81046b4:	69fb      	ldr	r3, [r7, #28]
 81046b6:	3301      	adds	r3, #1
 81046b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81046ba:	683b      	ldr	r3, [r7, #0]
 81046bc:	681a      	ldr	r2, [r3, #0]
 81046be:	69fb      	ldr	r3, [r7, #28]
 81046c0:	fa22 f303 	lsr.w	r3, r2, r3
 81046c4:	2b00      	cmp	r3, #0
 81046c6:	f47f ae63 	bne.w	8104390 <HAL_GPIO_Init+0x14>
  }
}
 81046ca:	bf00      	nop
 81046cc:	bf00      	nop
 81046ce:	3724      	adds	r7, #36	@ 0x24
 81046d0:	46bd      	mov	sp, r7
 81046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046d6:	4770      	bx	lr
 81046d8:	58000400 	.word	0x58000400

081046dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81046dc:	b480      	push	{r7}
 81046de:	b083      	sub	sp, #12
 81046e0:	af00      	add	r7, sp, #0
 81046e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81046e4:	4b05      	ldr	r3, [pc, #20]	@ (81046fc <HAL_HSEM_ActivateNotification+0x20>)
 81046e6:	681a      	ldr	r2, [r3, #0]
 81046e8:	4904      	ldr	r1, [pc, #16]	@ (81046fc <HAL_HSEM_ActivateNotification+0x20>)
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	4313      	orrs	r3, r2
 81046ee:	600b      	str	r3, [r1, #0]
#endif
}
 81046f0:	bf00      	nop
 81046f2:	370c      	adds	r7, #12
 81046f4:	46bd      	mov	sp, r7
 81046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046fa:	4770      	bx	lr
 81046fc:	58026510 	.word	0x58026510

08104700 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104700:	b580      	push	{r7, lr}
 8104702:	b084      	sub	sp, #16
 8104704:	af00      	add	r7, sp, #0
 8104706:	60f8      	str	r0, [r7, #12]
 8104708:	460b      	mov	r3, r1
 810470a:	607a      	str	r2, [r7, #4]
 810470c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810470e:	4b37      	ldr	r3, [pc, #220]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8104710:	681b      	ldr	r3, [r3, #0]
 8104712:	f023 0201 	bic.w	r2, r3, #1
 8104716:	4935      	ldr	r1, [pc, #212]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8104718:	68fb      	ldr	r3, [r7, #12]
 810471a:	4313      	orrs	r3, r2
 810471c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	2b00      	cmp	r3, #0
 8104722:	d123      	bne.n	810476c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104724:	f7ff f9e4 	bl	8103af0 <HAL_GetCurrentCPUID>
 8104728:	4603      	mov	r3, r0
 810472a:	2b03      	cmp	r3, #3
 810472c:	d158      	bne.n	81047e0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810472e:	4b2f      	ldr	r3, [pc, #188]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8104730:	691b      	ldr	r3, [r3, #16]
 8104732:	4a2e      	ldr	r2, [pc, #184]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8104734:	f023 0301 	bic.w	r3, r3, #1
 8104738:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810473a:	4b2d      	ldr	r3, [pc, #180]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810473c:	691b      	ldr	r3, [r3, #16]
 810473e:	4a2c      	ldr	r2, [pc, #176]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104740:	f043 0304 	orr.w	r3, r3, #4
 8104744:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104746:	f3bf 8f4f 	dsb	sy
}
 810474a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810474c:	f3bf 8f6f 	isb	sy
}
 8104750:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104752:	7afb      	ldrb	r3, [r7, #11]
 8104754:	2b01      	cmp	r3, #1
 8104756:	d101      	bne.n	810475c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104758:	bf30      	wfi
 810475a:	e000      	b.n	810475e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810475c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810475e:	4b24      	ldr	r3, [pc, #144]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104760:	691b      	ldr	r3, [r3, #16]
 8104762:	4a23      	ldr	r2, [pc, #140]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104764:	f023 0304 	bic.w	r3, r3, #4
 8104768:	6113      	str	r3, [r2, #16]
 810476a:	e03c      	b.n	81047e6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810476c:	687b      	ldr	r3, [r7, #4]
 810476e:	2b01      	cmp	r3, #1
 8104770:	d123      	bne.n	81047ba <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104772:	f7ff f9bd 	bl	8103af0 <HAL_GetCurrentCPUID>
 8104776:	4603      	mov	r3, r0
 8104778:	2b01      	cmp	r3, #1
 810477a:	d133      	bne.n	81047e4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810477c:	4b1b      	ldr	r3, [pc, #108]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 810477e:	695b      	ldr	r3, [r3, #20]
 8104780:	4a1a      	ldr	r2, [pc, #104]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8104782:	f023 0302 	bic.w	r3, r3, #2
 8104786:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104788:	4b19      	ldr	r3, [pc, #100]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810478a:	691b      	ldr	r3, [r3, #16]
 810478c:	4a18      	ldr	r2, [pc, #96]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810478e:	f043 0304 	orr.w	r3, r3, #4
 8104792:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104794:	f3bf 8f4f 	dsb	sy
}
 8104798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810479a:	f3bf 8f6f 	isb	sy
}
 810479e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81047a0:	7afb      	ldrb	r3, [r7, #11]
 81047a2:	2b01      	cmp	r3, #1
 81047a4:	d101      	bne.n	81047aa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81047a6:	bf30      	wfi
 81047a8:	e000      	b.n	81047ac <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81047aa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81047ac:	4b10      	ldr	r3, [pc, #64]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047ae:	691b      	ldr	r3, [r3, #16]
 81047b0:	4a0f      	ldr	r2, [pc, #60]	@ (81047f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81047b2:	f023 0304 	bic.w	r3, r3, #4
 81047b6:	6113      	str	r3, [r2, #16]
 81047b8:	e015      	b.n	81047e6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81047ba:	f7ff f999 	bl	8103af0 <HAL_GetCurrentCPUID>
 81047be:	4603      	mov	r3, r0
 81047c0:	2b03      	cmp	r3, #3
 81047c2:	d106      	bne.n	81047d2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81047c4:	4b09      	ldr	r3, [pc, #36]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81047c6:	691b      	ldr	r3, [r3, #16]
 81047c8:	4a08      	ldr	r2, [pc, #32]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81047ca:	f023 0304 	bic.w	r3, r3, #4
 81047ce:	6113      	str	r3, [r2, #16]
 81047d0:	e009      	b.n	81047e6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81047d2:	4b06      	ldr	r3, [pc, #24]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81047d4:	695b      	ldr	r3, [r3, #20]
 81047d6:	4a05      	ldr	r2, [pc, #20]	@ (81047ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81047d8:	f023 0304 	bic.w	r3, r3, #4
 81047dc:	6153      	str	r3, [r2, #20]
 81047de:	e002      	b.n	81047e6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81047e0:	bf00      	nop
 81047e2:	e000      	b.n	81047e6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81047e4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81047e6:	3710      	adds	r7, #16
 81047e8:	46bd      	mov	sp, r7
 81047ea:	bd80      	pop	{r7, pc}
 81047ec:	58024800 	.word	0x58024800
 81047f0:	e000ed00 	.word	0xe000ed00

081047f4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81047f4:	b580      	push	{r7, lr}
 81047f6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81047f8:	f7ff f97a 	bl	8103af0 <HAL_GetCurrentCPUID>
 81047fc:	4603      	mov	r3, r0
 81047fe:	2b03      	cmp	r3, #3
 8104800:	d101      	bne.n	8104806 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104802:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104804:	e001      	b.n	810480a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104806:	bf40      	sev
    __WFE ();
 8104808:	bf20      	wfe
}
 810480a:	bf00      	nop
 810480c:	bd80      	pop	{r7, pc}
	...

08104810 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8104810:	b580      	push	{r7, lr}
 8104812:	b086      	sub	sp, #24
 8104814:	af02      	add	r7, sp, #8
 8104816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8104818:	f7fd fe32 	bl	8102480 <HAL_GetTick>
 810481c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 810481e:	687b      	ldr	r3, [r7, #4]
 8104820:	2b00      	cmp	r3, #0
 8104822:	d101      	bne.n	8104828 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8104824:	2301      	movs	r3, #1
 8104826:	e061      	b.n	81048ec <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810482e:	b2db      	uxtb	r3, r3
 8104830:	2b00      	cmp	r3, #0
 8104832:	d107      	bne.n	8104844 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8104834:	6878      	ldr	r0, [r7, #4]
 8104836:	f7fc fee9 	bl	810160c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 810483a:	f241 3188 	movw	r1, #5000	@ 0x1388
 810483e:	6878      	ldr	r0, [r7, #4]
 8104840:	f000 f85a 	bl	81048f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	689b      	ldr	r3, [r3, #8]
 8104852:	3b01      	subs	r3, #1
 8104854:	021a      	lsls	r2, r3, #8
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	430a      	orrs	r2, r1
 810485c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104862:	9300      	str	r3, [sp, #0]
 8104864:	68fb      	ldr	r3, [r7, #12]
 8104866:	2200      	movs	r2, #0
 8104868:	2120      	movs	r1, #32
 810486a:	6878      	ldr	r0, [r7, #4]
 810486c:	f000 f852 	bl	8104914 <QSPI_WaitFlagStateUntilTimeout>
 8104870:	4603      	mov	r3, r0
 8104872:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8104874:	7afb      	ldrb	r3, [r7, #11]
 8104876:	2b00      	cmp	r3, #0
 8104878:	d137      	bne.n	81048ea <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8104884:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8104888:	687a      	ldr	r2, [r7, #4]
 810488a:	6852      	ldr	r2, [r2, #4]
 810488c:	0611      	lsls	r1, r2, #24
 810488e:	687a      	ldr	r2, [r7, #4]
 8104890:	68d2      	ldr	r2, [r2, #12]
 8104892:	4311      	orrs	r1, r2
 8104894:	687a      	ldr	r2, [r7, #4]
 8104896:	69d2      	ldr	r2, [r2, #28]
 8104898:	4311      	orrs	r1, r2
 810489a:	687a      	ldr	r2, [r7, #4]
 810489c:	6a12      	ldr	r2, [r2, #32]
 810489e:	4311      	orrs	r1, r2
 81048a0:	687a      	ldr	r2, [r7, #4]
 81048a2:	6812      	ldr	r2, [r2, #0]
 81048a4:	430b      	orrs	r3, r1
 81048a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	681b      	ldr	r3, [r3, #0]
 81048ac:	685a      	ldr	r2, [r3, #4]
 81048ae:	4b11      	ldr	r3, [pc, #68]	@ (81048f4 <HAL_QSPI_Init+0xe4>)
 81048b0:	4013      	ands	r3, r2
 81048b2:	687a      	ldr	r2, [r7, #4]
 81048b4:	6912      	ldr	r2, [r2, #16]
 81048b6:	0411      	lsls	r1, r2, #16
 81048b8:	687a      	ldr	r2, [r7, #4]
 81048ba:	6952      	ldr	r2, [r2, #20]
 81048bc:	4311      	orrs	r1, r2
 81048be:	687a      	ldr	r2, [r7, #4]
 81048c0:	6992      	ldr	r2, [r2, #24]
 81048c2:	4311      	orrs	r1, r2
 81048c4:	687a      	ldr	r2, [r7, #4]
 81048c6:	6812      	ldr	r2, [r2, #0]
 81048c8:	430b      	orrs	r3, r1
 81048ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	681b      	ldr	r3, [r3, #0]
 81048d0:	681a      	ldr	r2, [r3, #0]
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	f042 0201 	orr.w	r2, r2, #1
 81048da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	2200      	movs	r2, #0
 81048e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	2201      	movs	r2, #1
 81048e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 81048ea:	7afb      	ldrb	r3, [r7, #11]
}
 81048ec:	4618      	mov	r0, r3
 81048ee:	3710      	adds	r7, #16
 81048f0:	46bd      	mov	sp, r7
 81048f2:	bd80      	pop	{r7, pc}
 81048f4:	ffe0f8fe 	.word	0xffe0f8fe

081048f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 81048f8:	b480      	push	{r7}
 81048fa:	b083      	sub	sp, #12
 81048fc:	af00      	add	r7, sp, #0
 81048fe:	6078      	str	r0, [r7, #4]
 8104900:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	683a      	ldr	r2, [r7, #0]
 8104906:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8104908:	bf00      	nop
 810490a:	370c      	adds	r7, #12
 810490c:	46bd      	mov	sp, r7
 810490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104912:	4770      	bx	lr

08104914 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8104914:	b580      	push	{r7, lr}
 8104916:	b084      	sub	sp, #16
 8104918:	af00      	add	r7, sp, #0
 810491a:	60f8      	str	r0, [r7, #12]
 810491c:	60b9      	str	r1, [r7, #8]
 810491e:	603b      	str	r3, [r7, #0]
 8104920:	4613      	mov	r3, r2
 8104922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8104924:	e01a      	b.n	810495c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104926:	69bb      	ldr	r3, [r7, #24]
 8104928:	f1b3 3fff 	cmp.w	r3, #4294967295
 810492c:	d016      	beq.n	810495c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810492e:	f7fd fda7 	bl	8102480 <HAL_GetTick>
 8104932:	4602      	mov	r2, r0
 8104934:	683b      	ldr	r3, [r7, #0]
 8104936:	1ad3      	subs	r3, r2, r3
 8104938:	69ba      	ldr	r2, [r7, #24]
 810493a:	429a      	cmp	r2, r3
 810493c:	d302      	bcc.n	8104944 <QSPI_WaitFlagStateUntilTimeout+0x30>
 810493e:	69bb      	ldr	r3, [r7, #24]
 8104940:	2b00      	cmp	r3, #0
 8104942:	d10b      	bne.n	810495c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	2204      	movs	r2, #4
 8104948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104950:	f043 0201 	orr.w	r2, r3, #1
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8104958:	2301      	movs	r3, #1
 810495a:	e00e      	b.n	810497a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	689a      	ldr	r2, [r3, #8]
 8104962:	68bb      	ldr	r3, [r7, #8]
 8104964:	4013      	ands	r3, r2
 8104966:	2b00      	cmp	r3, #0
 8104968:	bf14      	ite	ne
 810496a:	2301      	movne	r3, #1
 810496c:	2300      	moveq	r3, #0
 810496e:	b2db      	uxtb	r3, r3
 8104970:	461a      	mov	r2, r3
 8104972:	79fb      	ldrb	r3, [r7, #7]
 8104974:	429a      	cmp	r2, r3
 8104976:	d1d6      	bne.n	8104926 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8104978:	2300      	movs	r3, #0
}
 810497a:	4618      	mov	r0, r3
 810497c:	3710      	adds	r7, #16
 810497e:	46bd      	mov	sp, r7
 8104980:	bd80      	pop	{r7, pc}
	...

08104984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104984:	b480      	push	{r7}
 8104986:	b089      	sub	sp, #36	@ 0x24
 8104988:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810498a:	4bb3      	ldr	r3, [pc, #716]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810498c:	691b      	ldr	r3, [r3, #16]
 810498e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104992:	2b18      	cmp	r3, #24
 8104994:	f200 8155 	bhi.w	8104c42 <HAL_RCC_GetSysClockFreq+0x2be>
 8104998:	a201      	add	r2, pc, #4	@ (adr r2, 81049a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 810499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810499e:	bf00      	nop
 81049a0:	08104a05 	.word	0x08104a05
 81049a4:	08104c43 	.word	0x08104c43
 81049a8:	08104c43 	.word	0x08104c43
 81049ac:	08104c43 	.word	0x08104c43
 81049b0:	08104c43 	.word	0x08104c43
 81049b4:	08104c43 	.word	0x08104c43
 81049b8:	08104c43 	.word	0x08104c43
 81049bc:	08104c43 	.word	0x08104c43
 81049c0:	08104a2b 	.word	0x08104a2b
 81049c4:	08104c43 	.word	0x08104c43
 81049c8:	08104c43 	.word	0x08104c43
 81049cc:	08104c43 	.word	0x08104c43
 81049d0:	08104c43 	.word	0x08104c43
 81049d4:	08104c43 	.word	0x08104c43
 81049d8:	08104c43 	.word	0x08104c43
 81049dc:	08104c43 	.word	0x08104c43
 81049e0:	08104a31 	.word	0x08104a31
 81049e4:	08104c43 	.word	0x08104c43
 81049e8:	08104c43 	.word	0x08104c43
 81049ec:	08104c43 	.word	0x08104c43
 81049f0:	08104c43 	.word	0x08104c43
 81049f4:	08104c43 	.word	0x08104c43
 81049f8:	08104c43 	.word	0x08104c43
 81049fc:	08104c43 	.word	0x08104c43
 8104a00:	08104a37 	.word	0x08104a37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a04:	4b94      	ldr	r3, [pc, #592]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	f003 0320 	and.w	r3, r3, #32
 8104a0c:	2b00      	cmp	r3, #0
 8104a0e:	d009      	beq.n	8104a24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a10:	4b91      	ldr	r3, [pc, #580]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	08db      	lsrs	r3, r3, #3
 8104a16:	f003 0303 	and.w	r3, r3, #3
 8104a1a:	4a90      	ldr	r2, [pc, #576]	@ (8104c5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8104a20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8104a22:	e111      	b.n	8104c48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104a24:	4b8d      	ldr	r3, [pc, #564]	@ (8104c5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104a26:	61bb      	str	r3, [r7, #24]
      break;
 8104a28:	e10e      	b.n	8104c48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104a2a:	4b8d      	ldr	r3, [pc, #564]	@ (8104c60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104a2c:	61bb      	str	r3, [r7, #24]
      break;
 8104a2e:	e10b      	b.n	8104c48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104a30:	4b8c      	ldr	r3, [pc, #560]	@ (8104c64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104a32:	61bb      	str	r3, [r7, #24]
      break;
 8104a34:	e108      	b.n	8104c48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104a36:	4b88      	ldr	r3, [pc, #544]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a3a:	f003 0303 	and.w	r3, r3, #3
 8104a3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104a40:	4b85      	ldr	r3, [pc, #532]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a44:	091b      	lsrs	r3, r3, #4
 8104a46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104a4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104a4c:	4b82      	ldr	r3, [pc, #520]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a50:	f003 0301 	and.w	r3, r3, #1
 8104a54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104a56:	4b80      	ldr	r3, [pc, #512]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104a5a:	08db      	lsrs	r3, r3, #3
 8104a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104a60:	68fa      	ldr	r2, [r7, #12]
 8104a62:	fb02 f303 	mul.w	r3, r2, r3
 8104a66:	ee07 3a90 	vmov	s15, r3
 8104a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104a72:	693b      	ldr	r3, [r7, #16]
 8104a74:	2b00      	cmp	r3, #0
 8104a76:	f000 80e1 	beq.w	8104c3c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8104a7a:	697b      	ldr	r3, [r7, #20]
 8104a7c:	2b02      	cmp	r3, #2
 8104a7e:	f000 8083 	beq.w	8104b88 <HAL_RCC_GetSysClockFreq+0x204>
 8104a82:	697b      	ldr	r3, [r7, #20]
 8104a84:	2b02      	cmp	r3, #2
 8104a86:	f200 80a1 	bhi.w	8104bcc <HAL_RCC_GetSysClockFreq+0x248>
 8104a8a:	697b      	ldr	r3, [r7, #20]
 8104a8c:	2b00      	cmp	r3, #0
 8104a8e:	d003      	beq.n	8104a98 <HAL_RCC_GetSysClockFreq+0x114>
 8104a90:	697b      	ldr	r3, [r7, #20]
 8104a92:	2b01      	cmp	r3, #1
 8104a94:	d056      	beq.n	8104b44 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104a96:	e099      	b.n	8104bcc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a98:	4b6f      	ldr	r3, [pc, #444]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	f003 0320 	and.w	r3, r3, #32
 8104aa0:	2b00      	cmp	r3, #0
 8104aa2:	d02d      	beq.n	8104b00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	08db      	lsrs	r3, r3, #3
 8104aaa:	f003 0303 	and.w	r3, r3, #3
 8104aae:	4a6b      	ldr	r2, [pc, #428]	@ (8104c5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8104ab4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	ee07 3a90 	vmov	s15, r3
 8104abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ac0:	693b      	ldr	r3, [r7, #16]
 8104ac2:	ee07 3a90 	vmov	s15, r3
 8104ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ace:	4b62      	ldr	r3, [pc, #392]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ad6:	ee07 3a90 	vmov	s15, r3
 8104ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ae2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8104c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104afa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104afe:	e087      	b.n	8104c10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b00:	693b      	ldr	r3, [r7, #16]
 8104b02:	ee07 3a90 	vmov	s15, r3
 8104b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8104c6c <HAL_RCC_GetSysClockFreq+0x2e8>
 8104b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b12:	4b51      	ldr	r3, [pc, #324]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b1a:	ee07 3a90 	vmov	s15, r3
 8104b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8104c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104b42:	e065      	b.n	8104c10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b44:	693b      	ldr	r3, [r7, #16]
 8104b46:	ee07 3a90 	vmov	s15, r3
 8104b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8104c70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b56:	4b40      	ldr	r3, [pc, #256]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b5e:	ee07 3a90 	vmov	s15, r3
 8104b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8104c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104b86:	e043      	b.n	8104c10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b88:	693b      	ldr	r3, [r7, #16]
 8104b8a:	ee07 3a90 	vmov	s15, r3
 8104b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8104c74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ba2:	ee07 3a90 	vmov	s15, r3
 8104ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8104bae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8104c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104bca:	e021      	b.n	8104c10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104bcc:	693b      	ldr	r3, [r7, #16]
 8104bce:	ee07 3a90 	vmov	s15, r3
 8104bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104c70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bde:	4b1e      	ldr	r3, [pc, #120]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104be6:	ee07 3a90 	vmov	s15, r3
 8104bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8104bf2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8104c68 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104c0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104c10:	4b11      	ldr	r3, [pc, #68]	@ (8104c58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104c14:	0a5b      	lsrs	r3, r3, #9
 8104c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104c1a:	3301      	adds	r3, #1
 8104c1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104c1e:	683b      	ldr	r3, [r7, #0]
 8104c20:	ee07 3a90 	vmov	s15, r3
 8104c24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c34:	ee17 3a90 	vmov	r3, s15
 8104c38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104c3a:	e005      	b.n	8104c48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104c3c:	2300      	movs	r3, #0
 8104c3e:	61bb      	str	r3, [r7, #24]
      break;
 8104c40:	e002      	b.n	8104c48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8104c42:	4b07      	ldr	r3, [pc, #28]	@ (8104c60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104c44:	61bb      	str	r3, [r7, #24]
      break;
 8104c46:	bf00      	nop
  }

  return sysclockfreq;
 8104c48:	69bb      	ldr	r3, [r7, #24]
}
 8104c4a:	4618      	mov	r0, r3
 8104c4c:	3724      	adds	r7, #36	@ 0x24
 8104c4e:	46bd      	mov	sp, r7
 8104c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c54:	4770      	bx	lr
 8104c56:	bf00      	nop
 8104c58:	58024400 	.word	0x58024400
 8104c5c:	03d09000 	.word	0x03d09000
 8104c60:	003d0900 	.word	0x003d0900
 8104c64:	017d7840 	.word	0x017d7840
 8104c68:	46000000 	.word	0x46000000
 8104c6c:	4c742400 	.word	0x4c742400
 8104c70:	4a742400 	.word	0x4a742400
 8104c74:	4bbebc20 	.word	0x4bbebc20

08104c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104c78:	b580      	push	{r7, lr}
 8104c7a:	b082      	sub	sp, #8
 8104c7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104c7e:	f7ff fe81 	bl	8104984 <HAL_RCC_GetSysClockFreq>
 8104c82:	4602      	mov	r2, r0
 8104c84:	4b11      	ldr	r3, [pc, #68]	@ (8104ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8104c86:	699b      	ldr	r3, [r3, #24]
 8104c88:	0a1b      	lsrs	r3, r3, #8
 8104c8a:	f003 030f 	and.w	r3, r3, #15
 8104c8e:	4910      	ldr	r1, [pc, #64]	@ (8104cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8104c90:	5ccb      	ldrb	r3, [r1, r3]
 8104c92:	f003 031f 	and.w	r3, r3, #31
 8104c96:	fa22 f303 	lsr.w	r3, r2, r3
 8104c9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8104ccc <HAL_RCC_GetHCLKFreq+0x54>)
 8104c9e:	699b      	ldr	r3, [r3, #24]
 8104ca0:	f003 030f 	and.w	r3, r3, #15
 8104ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8104cd0 <HAL_RCC_GetHCLKFreq+0x58>)
 8104ca6:	5cd3      	ldrb	r3, [r2, r3]
 8104ca8:	f003 031f 	and.w	r3, r3, #31
 8104cac:	687a      	ldr	r2, [r7, #4]
 8104cae:	fa22 f303 	lsr.w	r3, r2, r3
 8104cb2:	4a08      	ldr	r2, [pc, #32]	@ (8104cd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104cb4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104cb6:	4b07      	ldr	r3, [pc, #28]	@ (8104cd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	4a07      	ldr	r2, [pc, #28]	@ (8104cd8 <HAL_RCC_GetHCLKFreq+0x60>)
 8104cbc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104cbe:	4b05      	ldr	r3, [pc, #20]	@ (8104cd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104cc0:	681b      	ldr	r3, [r3, #0]
}
 8104cc2:	4618      	mov	r0, r3
 8104cc4:	3708      	adds	r7, #8
 8104cc6:	46bd      	mov	sp, r7
 8104cc8:	bd80      	pop	{r7, pc}
 8104cca:	bf00      	nop
 8104ccc:	58024400 	.word	0x58024400
 8104cd0:	0810c344 	.word	0x0810c344
 8104cd4:	10000004 	.word	0x10000004
 8104cd8:	10000000 	.word	0x10000000

08104cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104cdc:	b580      	push	{r7, lr}
 8104cde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104ce0:	f7ff ffca 	bl	8104c78 <HAL_RCC_GetHCLKFreq>
 8104ce4:	4602      	mov	r2, r0
 8104ce6:	4b06      	ldr	r3, [pc, #24]	@ (8104d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104ce8:	69db      	ldr	r3, [r3, #28]
 8104cea:	091b      	lsrs	r3, r3, #4
 8104cec:	f003 0307 	and.w	r3, r3, #7
 8104cf0:	4904      	ldr	r1, [pc, #16]	@ (8104d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104cf2:	5ccb      	ldrb	r3, [r1, r3]
 8104cf4:	f003 031f 	and.w	r3, r3, #31
 8104cf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104cfc:	4618      	mov	r0, r3
 8104cfe:	bd80      	pop	{r7, pc}
 8104d00:	58024400 	.word	0x58024400
 8104d04:	0810c344 	.word	0x0810c344

08104d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104d08:	b580      	push	{r7, lr}
 8104d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104d0c:	f7ff ffb4 	bl	8104c78 <HAL_RCC_GetHCLKFreq>
 8104d10:	4602      	mov	r2, r0
 8104d12:	4b06      	ldr	r3, [pc, #24]	@ (8104d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8104d14:	69db      	ldr	r3, [r3, #28]
 8104d16:	0a1b      	lsrs	r3, r3, #8
 8104d18:	f003 0307 	and.w	r3, r3, #7
 8104d1c:	4904      	ldr	r1, [pc, #16]	@ (8104d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104d1e:	5ccb      	ldrb	r3, [r1, r3]
 8104d20:	f003 031f 	and.w	r3, r3, #31
 8104d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104d28:	4618      	mov	r0, r3
 8104d2a:	bd80      	pop	{r7, pc}
 8104d2c:	58024400 	.word	0x58024400
 8104d30:	0810c344 	.word	0x0810c344

08104d34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104d38:	b0cc      	sub	sp, #304	@ 0x130
 8104d3a:	af00      	add	r7, sp, #0
 8104d3c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104d40:	2300      	movs	r3, #0
 8104d42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104d46:	2300      	movs	r3, #0
 8104d48:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8104d58:	2500      	movs	r5, #0
 8104d5a:	ea54 0305 	orrs.w	r3, r4, r5
 8104d5e:	d049      	beq.n	8104df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104d66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104d6a:	d02f      	beq.n	8104dcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104d6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104d70:	d828      	bhi.n	8104dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104d76:	d01a      	beq.n	8104dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104d7c:	d822      	bhi.n	8104dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104d7e:	2b00      	cmp	r3, #0
 8104d80:	d003      	beq.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104d86:	d007      	beq.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104d88:	e01c      	b.n	8104dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d8a:	4bb8      	ldr	r3, [pc, #736]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d8e:	4ab7      	ldr	r2, [pc, #732]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d96:	e01a      	b.n	8104dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104d98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d9c:	3308      	adds	r3, #8
 8104d9e:	2102      	movs	r1, #2
 8104da0:	4618      	mov	r0, r3
 8104da2:	f002 fba1 	bl	81074e8 <RCCEx_PLL2_Config>
 8104da6:	4603      	mov	r3, r0
 8104da8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104dac:	e00f      	b.n	8104dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104db2:	3328      	adds	r3, #40	@ 0x28
 8104db4:	2102      	movs	r1, #2
 8104db6:	4618      	mov	r0, r3
 8104db8:	f002 fc48 	bl	810764c <RCCEx_PLL3_Config>
 8104dbc:	4603      	mov	r3, r0
 8104dbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104dc2:	e004      	b.n	8104dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104dc4:	2301      	movs	r3, #1
 8104dc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104dca:	e000      	b.n	8104dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8104dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104dce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104dd2:	2b00      	cmp	r3, #0
 8104dd4:	d10a      	bne.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104dd6:	4ba5      	ldr	r3, [pc, #660]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104dda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8104dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104de4:	4aa1      	ldr	r2, [pc, #644]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104de6:	430b      	orrs	r3, r1
 8104de8:	6513      	str	r3, [r2, #80]	@ 0x50
 8104dea:	e003      	b.n	8104df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104df0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104df4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dfc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8104e00:	f04f 0900 	mov.w	r9, #0
 8104e04:	ea58 0309 	orrs.w	r3, r8, r9
 8104e08:	d047      	beq.n	8104e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8104e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104e10:	2b04      	cmp	r3, #4
 8104e12:	d82a      	bhi.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104e14:	a201      	add	r2, pc, #4	@ (adr r2, 8104e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e1a:	bf00      	nop
 8104e1c:	08104e31 	.word	0x08104e31
 8104e20:	08104e3f 	.word	0x08104e3f
 8104e24:	08104e55 	.word	0x08104e55
 8104e28:	08104e73 	.word	0x08104e73
 8104e2c:	08104e73 	.word	0x08104e73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e30:	4b8e      	ldr	r3, [pc, #568]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e34:	4a8d      	ldr	r2, [pc, #564]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104e3c:	e01a      	b.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e42:	3308      	adds	r3, #8
 8104e44:	2100      	movs	r1, #0
 8104e46:	4618      	mov	r0, r3
 8104e48:	f002 fb4e 	bl	81074e8 <RCCEx_PLL2_Config>
 8104e4c:	4603      	mov	r3, r0
 8104e4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104e52:	e00f      	b.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e58:	3328      	adds	r3, #40	@ 0x28
 8104e5a:	2100      	movs	r1, #0
 8104e5c:	4618      	mov	r0, r3
 8104e5e:	f002 fbf5 	bl	810764c <RCCEx_PLL3_Config>
 8104e62:	4603      	mov	r3, r0
 8104e64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104e68:	e004      	b.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e6a:	2301      	movs	r3, #1
 8104e6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104e70:	e000      	b.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104e78:	2b00      	cmp	r3, #0
 8104e7a:	d10a      	bne.n	8104e92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104e7c:	4b7b      	ldr	r3, [pc, #492]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e80:	f023 0107 	bic.w	r1, r3, #7
 8104e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104e8a:	4a78      	ldr	r2, [pc, #480]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e8c:	430b      	orrs	r3, r1
 8104e8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104e90:	e003      	b.n	8104e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104e96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ea2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8104ea6:	f04f 0b00 	mov.w	fp, #0
 8104eaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8104eae:	d04c      	beq.n	8104f4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104eba:	d030      	beq.n	8104f1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104ec0:	d829      	bhi.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8104ec4:	d02d      	beq.n	8104f22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8104ec8:	d825      	bhi.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104eca:	2b80      	cmp	r3, #128	@ 0x80
 8104ecc:	d018      	beq.n	8104f00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104ece:	2b80      	cmp	r3, #128	@ 0x80
 8104ed0:	d821      	bhi.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104ed2:	2b00      	cmp	r3, #0
 8104ed4:	d002      	beq.n	8104edc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104ed6:	2b40      	cmp	r3, #64	@ 0x40
 8104ed8:	d007      	beq.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104eda:	e01c      	b.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104edc:	4b63      	ldr	r3, [pc, #396]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ee0:	4a62      	ldr	r2, [pc, #392]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104ee8:	e01c      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104eee:	3308      	adds	r3, #8
 8104ef0:	2100      	movs	r1, #0
 8104ef2:	4618      	mov	r0, r3
 8104ef4:	f002 faf8 	bl	81074e8 <RCCEx_PLL2_Config>
 8104ef8:	4603      	mov	r3, r0
 8104efa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104efe:	e011      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f04:	3328      	adds	r3, #40	@ 0x28
 8104f06:	2100      	movs	r1, #0
 8104f08:	4618      	mov	r0, r3
 8104f0a:	f002 fb9f 	bl	810764c <RCCEx_PLL3_Config>
 8104f0e:	4603      	mov	r3, r0
 8104f10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104f14:	e006      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f16:	2301      	movs	r3, #1
 8104f18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104f1c:	e002      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104f1e:	bf00      	nop
 8104f20:	e000      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f24:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104f28:	2b00      	cmp	r3, #0
 8104f2a:	d10a      	bne.n	8104f42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104f2c:	4b4f      	ldr	r3, [pc, #316]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104f30:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8104f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104f3a:	4a4c      	ldr	r2, [pc, #304]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f3c:	430b      	orrs	r3, r1
 8104f3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104f40:	e003      	b.n	8104f4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104f46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f52:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104f56:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8104f5a:	2300      	movs	r3, #0
 8104f5c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8104f60:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8104f64:	460b      	mov	r3, r1
 8104f66:	4313      	orrs	r3, r2
 8104f68:	d053      	beq.n	8105012 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104f72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104f76:	d035      	beq.n	8104fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104f78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104f7c:	d82e      	bhi.n	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104f82:	d031      	beq.n	8104fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104f84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104f88:	d828      	bhi.n	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104f8e:	d01a      	beq.n	8104fc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104f94:	d822      	bhi.n	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d003      	beq.n	8104fa2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104f9e:	d007      	beq.n	8104fb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104fa0:	e01c      	b.n	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fa2:	4b32      	ldr	r3, [pc, #200]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104fa6:	4a31      	ldr	r2, [pc, #196]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104fae:	e01c      	b.n	8104fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104fb4:	3308      	adds	r3, #8
 8104fb6:	2100      	movs	r1, #0
 8104fb8:	4618      	mov	r0, r3
 8104fba:	f002 fa95 	bl	81074e8 <RCCEx_PLL2_Config>
 8104fbe:	4603      	mov	r3, r0
 8104fc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104fc4:	e011      	b.n	8104fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104fca:	3328      	adds	r3, #40	@ 0x28
 8104fcc:	2100      	movs	r1, #0
 8104fce:	4618      	mov	r0, r3
 8104fd0:	f002 fb3c 	bl	810764c <RCCEx_PLL3_Config>
 8104fd4:	4603      	mov	r3, r0
 8104fd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104fda:	e006      	b.n	8104fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104fdc:	2301      	movs	r3, #1
 8104fde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104fe2:	e002      	b.n	8104fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104fe4:	bf00      	nop
 8104fe6:	e000      	b.n	8104fea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104fea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	d10b      	bne.n	810500a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104ff2:	4b1e      	ldr	r3, [pc, #120]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104ff6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8104ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ffe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105002:	4a1a      	ldr	r2, [pc, #104]	@ (810506c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105004:	430b      	orrs	r3, r1
 8105006:	6593      	str	r3, [r2, #88]	@ 0x58
 8105008:	e003      	b.n	8105012 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810500a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810500e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105016:	e9d3 2300 	ldrd	r2, r3, [r3]
 810501a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810501e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8105022:	2300      	movs	r3, #0
 8105024:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105028:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810502c:	460b      	mov	r3, r1
 810502e:	4313      	orrs	r3, r2
 8105030:	d056      	beq.n	81050e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810503a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810503e:	d038      	beq.n	81050b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105044:	d831      	bhi.n	81050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105046:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810504a:	d034      	beq.n	81050b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810504c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105050:	d82b      	bhi.n	81050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105056:	d01d      	beq.n	8105094 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810505c:	d825      	bhi.n	81050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 810505e:	2b00      	cmp	r3, #0
 8105060:	d006      	beq.n	8105070 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105066:	d00a      	beq.n	810507e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105068:	e01f      	b.n	81050aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 810506a:	bf00      	nop
 810506c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105070:	4ba2      	ldr	r3, [pc, #648]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105074:	4aa1      	ldr	r2, [pc, #644]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810507a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810507c:	e01c      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810507e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105082:	3308      	adds	r3, #8
 8105084:	2100      	movs	r1, #0
 8105086:	4618      	mov	r0, r3
 8105088:	f002 fa2e 	bl	81074e8 <RCCEx_PLL2_Config>
 810508c:	4603      	mov	r3, r0
 810508e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105092:	e011      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105098:	3328      	adds	r3, #40	@ 0x28
 810509a:	2100      	movs	r1, #0
 810509c:	4618      	mov	r0, r3
 810509e:	f002 fad5 	bl	810764c <RCCEx_PLL3_Config>
 81050a2:	4603      	mov	r3, r0
 81050a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81050a8:	e006      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81050aa:	2301      	movs	r3, #1
 81050ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81050b0:	e002      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81050b2:	bf00      	nop
 81050b4:	e000      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81050b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81050bc:	2b00      	cmp	r3, #0
 81050be:	d10b      	bne.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81050c0:	4b8e      	ldr	r3, [pc, #568]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81050c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81050c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81050c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81050cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81050d0:	4a8a      	ldr	r2, [pc, #552]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81050d2:	430b      	orrs	r3, r1
 81050d4:	6593      	str	r3, [r2, #88]	@ 0x58
 81050d6:	e003      	b.n	81050e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81050dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81050e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81050ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81050f0:	2300      	movs	r3, #0
 81050f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81050f6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81050fa:	460b      	mov	r3, r1
 81050fc:	4313      	orrs	r3, r2
 81050fe:	d03a      	beq.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105106:	2b30      	cmp	r3, #48	@ 0x30
 8105108:	d01f      	beq.n	810514a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810510a:	2b30      	cmp	r3, #48	@ 0x30
 810510c:	d819      	bhi.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810510e:	2b20      	cmp	r3, #32
 8105110:	d00c      	beq.n	810512c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105112:	2b20      	cmp	r3, #32
 8105114:	d815      	bhi.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105116:	2b00      	cmp	r3, #0
 8105118:	d019      	beq.n	810514e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810511a:	2b10      	cmp	r3, #16
 810511c:	d111      	bne.n	8105142 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810511e:	4b77      	ldr	r3, [pc, #476]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105122:	4a76      	ldr	r2, [pc, #472]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105128:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810512a:	e011      	b.n	8105150 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810512c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105130:	3308      	adds	r3, #8
 8105132:	2102      	movs	r1, #2
 8105134:	4618      	mov	r0, r3
 8105136:	f002 f9d7 	bl	81074e8 <RCCEx_PLL2_Config>
 810513a:	4603      	mov	r3, r0
 810513c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105140:	e006      	b.n	8105150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105142:	2301      	movs	r3, #1
 8105144:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105148:	e002      	b.n	8105150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810514a:	bf00      	nop
 810514c:	e000      	b.n	8105150 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810514e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105150:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105154:	2b00      	cmp	r3, #0
 8105156:	d10a      	bne.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105158:	4b68      	ldr	r3, [pc, #416]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810515a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810515c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8105160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105166:	4a65      	ldr	r2, [pc, #404]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105168:	430b      	orrs	r3, r1
 810516a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810516c:	e003      	b.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810516e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105172:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810517e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8105182:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8105186:	2300      	movs	r3, #0
 8105188:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810518c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8105190:	460b      	mov	r3, r1
 8105192:	4313      	orrs	r3, r2
 8105194:	d051      	beq.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810519a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810519c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81051a0:	d035      	beq.n	810520e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81051a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81051a6:	d82e      	bhi.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81051a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81051ac:	d031      	beq.n	8105212 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81051ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81051b2:	d828      	bhi.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81051b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81051b8:	d01a      	beq.n	81051f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81051be:	d822      	bhi.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81051c0:	2b00      	cmp	r3, #0
 81051c2:	d003      	beq.n	81051cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81051c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81051c8:	d007      	beq.n	81051da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81051ca:	e01c      	b.n	8105206 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051cc:	4b4b      	ldr	r3, [pc, #300]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81051d0:	4a4a      	ldr	r2, [pc, #296]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81051d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81051d8:	e01c      	b.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81051da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81051de:	3308      	adds	r3, #8
 81051e0:	2100      	movs	r1, #0
 81051e2:	4618      	mov	r0, r3
 81051e4:	f002 f980 	bl	81074e8 <RCCEx_PLL2_Config>
 81051e8:	4603      	mov	r3, r0
 81051ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81051ee:	e011      	b.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81051f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81051f4:	3328      	adds	r3, #40	@ 0x28
 81051f6:	2100      	movs	r1, #0
 81051f8:	4618      	mov	r0, r3
 81051fa:	f002 fa27 	bl	810764c <RCCEx_PLL3_Config>
 81051fe:	4603      	mov	r3, r0
 8105200:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105204:	e006      	b.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105206:	2301      	movs	r3, #1
 8105208:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810520c:	e002      	b.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810520e:	bf00      	nop
 8105210:	e000      	b.n	8105214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105214:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105218:	2b00      	cmp	r3, #0
 810521a:	d10a      	bne.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810521c:	4b37      	ldr	r3, [pc, #220]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810521e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105220:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8105224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810522a:	4a34      	ldr	r2, [pc, #208]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810522c:	430b      	orrs	r3, r1
 810522e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105230:	e003      	b.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105232:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105236:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810523a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105242:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8105246:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810524a:	2300      	movs	r3, #0
 810524c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8105250:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8105254:	460b      	mov	r3, r1
 8105256:	4313      	orrs	r3, r2
 8105258:	d056      	beq.n	8105308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810525a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810525e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105264:	d033      	beq.n	81052ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105266:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810526a:	d82c      	bhi.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810526c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105270:	d02f      	beq.n	81052d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105272:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105276:	d826      	bhi.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105278:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810527c:	d02b      	beq.n	81052d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810527e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105282:	d820      	bhi.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105288:	d012      	beq.n	81052b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810528a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810528e:	d81a      	bhi.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105290:	2b00      	cmp	r3, #0
 8105292:	d022      	beq.n	81052da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105298:	d115      	bne.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810529a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810529e:	3308      	adds	r3, #8
 81052a0:	2101      	movs	r1, #1
 81052a2:	4618      	mov	r0, r3
 81052a4:	f002 f920 	bl	81074e8 <RCCEx_PLL2_Config>
 81052a8:	4603      	mov	r3, r0
 81052aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81052ae:	e015      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81052b4:	3328      	adds	r3, #40	@ 0x28
 81052b6:	2101      	movs	r1, #1
 81052b8:	4618      	mov	r0, r3
 81052ba:	f002 f9c7 	bl	810764c <RCCEx_PLL3_Config>
 81052be:	4603      	mov	r3, r0
 81052c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81052c4:	e00a      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052c6:	2301      	movs	r3, #1
 81052c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81052cc:	e006      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81052ce:	bf00      	nop
 81052d0:	e004      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81052d2:	bf00      	nop
 81052d4:	e002      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81052d6:	bf00      	nop
 81052d8:	e000      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81052da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81052e0:	2b00      	cmp	r3, #0
 81052e2:	d10d      	bne.n	8105300 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81052e4:	4b05      	ldr	r3, [pc, #20]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81052e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81052ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81052f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81052f2:	4a02      	ldr	r2, [pc, #8]	@ (81052fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052f4:	430b      	orrs	r3, r1
 81052f6:	6513      	str	r3, [r2, #80]	@ 0x50
 81052f8:	e006      	b.n	8105308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81052fa:	bf00      	nop
 81052fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105300:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105304:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105310:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8105314:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8105318:	2300      	movs	r3, #0
 810531a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810531e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8105322:	460b      	mov	r3, r1
 8105324:	4313      	orrs	r3, r2
 8105326:	d055      	beq.n	81053d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8105328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810532c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105330:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105334:	d033      	beq.n	810539e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8105336:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810533a:	d82c      	bhi.n	8105396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105340:	d02f      	beq.n	81053a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8105342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105346:	d826      	bhi.n	8105396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105348:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810534c:	d02b      	beq.n	81053a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810534e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105352:	d820      	bhi.n	8105396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105358:	d012      	beq.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810535a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810535e:	d81a      	bhi.n	8105396 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105360:	2b00      	cmp	r3, #0
 8105362:	d022      	beq.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105368:	d115      	bne.n	8105396 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810536a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810536e:	3308      	adds	r3, #8
 8105370:	2101      	movs	r1, #1
 8105372:	4618      	mov	r0, r3
 8105374:	f002 f8b8 	bl	81074e8 <RCCEx_PLL2_Config>
 8105378:	4603      	mov	r3, r0
 810537a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810537e:	e015      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105380:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105384:	3328      	adds	r3, #40	@ 0x28
 8105386:	2101      	movs	r1, #1
 8105388:	4618      	mov	r0, r3
 810538a:	f002 f95f 	bl	810764c <RCCEx_PLL3_Config>
 810538e:	4603      	mov	r3, r0
 8105390:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105394:	e00a      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8105396:	2301      	movs	r3, #1
 8105398:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810539c:	e006      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810539e:	bf00      	nop
 81053a0:	e004      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81053a2:	bf00      	nop
 81053a4:	e002      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81053a6:	bf00      	nop
 81053a8:	e000      	b.n	81053ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81053aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81053b0:	2b00      	cmp	r3, #0
 81053b2:	d10b      	bne.n	81053cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81053b4:	4bb7      	ldr	r3, [pc, #732]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81053b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81053bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81053c4:	4ab3      	ldr	r2, [pc, #716]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81053c6:	430b      	orrs	r3, r1
 81053c8:	6593      	str	r3, [r2, #88]	@ 0x58
 81053ca:	e003      	b.n	81053d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81053d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81053d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053dc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81053e4:	2300      	movs	r3, #0
 81053e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81053ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81053ee:	460b      	mov	r3, r1
 81053f0:	4313      	orrs	r3, r2
 81053f2:	d02a      	beq.n	810544a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81053f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81053fa:	2b00      	cmp	r3, #0
 81053fc:	d011      	beq.n	8105422 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81053fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105402:	d10a      	bne.n	810541a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105408:	3308      	adds	r3, #8
 810540a:	2101      	movs	r1, #1
 810540c:	4618      	mov	r0, r3
 810540e:	f002 f86b 	bl	81074e8 <RCCEx_PLL2_Config>
 8105412:	4603      	mov	r3, r0
 8105414:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8105418:	e004      	b.n	8105424 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810541a:	2301      	movs	r3, #1
 810541c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105420:	e000      	b.n	8105424 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8105422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105424:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105428:	2b00      	cmp	r3, #0
 810542a:	d10a      	bne.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810542c:	4b99      	ldr	r3, [pc, #612]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810542e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105430:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8105434:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810543a:	4a96      	ldr	r2, [pc, #600]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810543c:	430b      	orrs	r3, r1
 810543e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105440:	e003      	b.n	810544a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105446:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810544a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105452:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8105456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810545a:	2300      	movs	r3, #0
 810545c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8105460:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8105464:	460b      	mov	r3, r1
 8105466:	4313      	orrs	r3, r2
 8105468:	d037      	beq.n	81054da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810546a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810546e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105474:	d00e      	beq.n	8105494 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8105476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810547a:	d816      	bhi.n	81054aa <HAL_RCCEx_PeriphCLKConfig+0x776>
 810547c:	2b00      	cmp	r3, #0
 810547e:	d018      	beq.n	81054b2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8105480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105484:	d111      	bne.n	81054aa <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105486:	4b83      	ldr	r3, [pc, #524]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810548a:	4a82      	ldr	r2, [pc, #520]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810548c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105492:	e00f      	b.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105498:	3308      	adds	r3, #8
 810549a:	2101      	movs	r1, #1
 810549c:	4618      	mov	r0, r3
 810549e:	f002 f823 	bl	81074e8 <RCCEx_PLL2_Config>
 81054a2:	4603      	mov	r3, r0
 81054a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81054a8:	e004      	b.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81054aa:	2301      	movs	r3, #1
 81054ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81054b0:	e000      	b.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 81054b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81054b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	d10a      	bne.n	81054d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81054bc:	4b75      	ldr	r3, [pc, #468]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81054be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81054c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81054c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81054ca:	4a72      	ldr	r2, [pc, #456]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81054cc:	430b      	orrs	r3, r1
 81054ce:	6513      	str	r3, [r2, #80]	@ 0x50
 81054d0:	e003      	b.n	81054da <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81054d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81054da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054e2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81054e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81054ea:	2300      	movs	r3, #0
 81054ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81054f0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81054f4:	460b      	mov	r3, r1
 81054f6:	4313      	orrs	r3, r2
 81054f8:	d03a      	beq.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81054fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105500:	2b03      	cmp	r3, #3
 8105502:	d81d      	bhi.n	8105540 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8105504:	a201      	add	r2, pc, #4	@ (adr r2, 810550c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8105506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810550a:	bf00      	nop
 810550c:	08105549 	.word	0x08105549
 8105510:	0810551d 	.word	0x0810551d
 8105514:	0810552b 	.word	0x0810552b
 8105518:	08105549 	.word	0x08105549
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810551c:	4b5d      	ldr	r3, [pc, #372]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105520:	4a5c      	ldr	r2, [pc, #368]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105528:	e00f      	b.n	810554a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810552a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810552e:	3308      	adds	r3, #8
 8105530:	2102      	movs	r1, #2
 8105532:	4618      	mov	r0, r3
 8105534:	f001 ffd8 	bl	81074e8 <RCCEx_PLL2_Config>
 8105538:	4603      	mov	r3, r0
 810553a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810553e:	e004      	b.n	810554a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105540:	2301      	movs	r3, #1
 8105542:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105546:	e000      	b.n	810554a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8105548:	bf00      	nop
    }

    if (ret == HAL_OK)
 810554a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810554e:	2b00      	cmp	r3, #0
 8105550:	d10a      	bne.n	8105568 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105552:	4b50      	ldr	r3, [pc, #320]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105556:	f023 0103 	bic.w	r1, r3, #3
 810555a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810555e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105560:	4a4c      	ldr	r2, [pc, #304]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105562:	430b      	orrs	r3, r1
 8105564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105566:	e003      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105568:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810556c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105578:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810557c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105580:	2300      	movs	r3, #0
 8105582:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8105586:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810558a:	460b      	mov	r3, r1
 810558c:	4313      	orrs	r3, r2
 810558e:	f000 80a0 	beq.w	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105592:	4b41      	ldr	r3, [pc, #260]	@ (8105698 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	4a40      	ldr	r2, [pc, #256]	@ (8105698 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810559c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810559e:	f7fc ff6f 	bl	8102480 <HAL_GetTick>
 81055a2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81055a6:	e00b      	b.n	81055c0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81055a8:	f7fc ff6a 	bl	8102480 <HAL_GetTick>
 81055ac:	4602      	mov	r2, r0
 81055ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81055b2:	1ad3      	subs	r3, r2, r3
 81055b4:	2b64      	cmp	r3, #100	@ 0x64
 81055b6:	d903      	bls.n	81055c0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 81055b8:	2303      	movs	r3, #3
 81055ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81055be:	e005      	b.n	81055cc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81055c0:	4b35      	ldr	r3, [pc, #212]	@ (8105698 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d0ed      	beq.n	81055a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 81055cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81055d0:	2b00      	cmp	r3, #0
 81055d2:	d17a      	bne.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81055d4:	4b2f      	ldr	r3, [pc, #188]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81055d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81055d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81055dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81055e0:	4053      	eors	r3, r2
 81055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81055e6:	2b00      	cmp	r3, #0
 81055e8:	d015      	beq.n	8105616 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81055ea:	4b2a      	ldr	r3, [pc, #168]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81055ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81055f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81055f6:	4b27      	ldr	r3, [pc, #156]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81055f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81055fa:	4a26      	ldr	r2, [pc, #152]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81055fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105600:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105602:	4b24      	ldr	r3, [pc, #144]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105606:	4a23      	ldr	r2, [pc, #140]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810560c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810560e:	4a21      	ldr	r2, [pc, #132]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105610:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8105614:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810561a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810561e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105622:	d118      	bne.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105624:	f7fc ff2c 	bl	8102480 <HAL_GetTick>
 8105628:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810562c:	e00d      	b.n	810564a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810562e:	f7fc ff27 	bl	8102480 <HAL_GetTick>
 8105632:	4602      	mov	r2, r0
 8105634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8105638:	1ad2      	subs	r2, r2, r3
 810563a:	f241 3388 	movw	r3, #5000	@ 0x1388
 810563e:	429a      	cmp	r2, r3
 8105640:	d903      	bls.n	810564a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8105642:	2303      	movs	r3, #3
 8105644:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8105648:	e005      	b.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810564a:	4b12      	ldr	r3, [pc, #72]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810564e:	f003 0302 	and.w	r3, r3, #2
 8105652:	2b00      	cmp	r3, #0
 8105654:	d0eb      	beq.n	810562e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8105656:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810565a:	2b00      	cmp	r3, #0
 810565c:	d130      	bne.n	81056c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810565e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810566a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810566e:	d115      	bne.n	810569c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8105670:	4b08      	ldr	r3, [pc, #32]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8105672:	691b      	ldr	r3, [r3, #16]
 8105674:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105678:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810567c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105680:	091b      	lsrs	r3, r3, #4
 8105682:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105686:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810568a:	4a02      	ldr	r2, [pc, #8]	@ (8105694 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810568c:	430b      	orrs	r3, r1
 810568e:	6113      	str	r3, [r2, #16]
 8105690:	e00a      	b.n	81056a8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8105692:	bf00      	nop
 8105694:	58024400 	.word	0x58024400
 8105698:	58024800 	.word	0x58024800
 810569c:	4bd4      	ldr	r3, [pc, #848]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810569e:	691b      	ldr	r3, [r3, #16]
 81056a0:	4ad3      	ldr	r2, [pc, #844]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81056a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81056a6:	6113      	str	r3, [r2, #16]
 81056a8:	4bd1      	ldr	r3, [pc, #836]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81056aa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81056ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81056b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81056b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81056b8:	4acd      	ldr	r2, [pc, #820]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81056ba:	430b      	orrs	r3, r1
 81056bc:	6713      	str	r3, [r2, #112]	@ 0x70
 81056be:	e008      	b.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81056c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81056c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 81056c8:	e003      	b.n	81056d2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81056ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81056d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056da:	f002 0301 	and.w	r3, r2, #1
 81056de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81056e2:	2300      	movs	r3, #0
 81056e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81056e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81056ec:	460b      	mov	r3, r1
 81056ee:	4313      	orrs	r3, r2
 81056f0:	f000 808b 	beq.w	810580a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81056f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81056f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81056fc:	2b28      	cmp	r3, #40	@ 0x28
 81056fe:	d86b      	bhi.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8105700:	a201      	add	r2, pc, #4	@ (adr r2, 8105708 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8105702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105706:	bf00      	nop
 8105708:	081057e1 	.word	0x081057e1
 810570c:	081057d9 	.word	0x081057d9
 8105710:	081057d9 	.word	0x081057d9
 8105714:	081057d9 	.word	0x081057d9
 8105718:	081057d9 	.word	0x081057d9
 810571c:	081057d9 	.word	0x081057d9
 8105720:	081057d9 	.word	0x081057d9
 8105724:	081057d9 	.word	0x081057d9
 8105728:	081057ad 	.word	0x081057ad
 810572c:	081057d9 	.word	0x081057d9
 8105730:	081057d9 	.word	0x081057d9
 8105734:	081057d9 	.word	0x081057d9
 8105738:	081057d9 	.word	0x081057d9
 810573c:	081057d9 	.word	0x081057d9
 8105740:	081057d9 	.word	0x081057d9
 8105744:	081057d9 	.word	0x081057d9
 8105748:	081057c3 	.word	0x081057c3
 810574c:	081057d9 	.word	0x081057d9
 8105750:	081057d9 	.word	0x081057d9
 8105754:	081057d9 	.word	0x081057d9
 8105758:	081057d9 	.word	0x081057d9
 810575c:	081057d9 	.word	0x081057d9
 8105760:	081057d9 	.word	0x081057d9
 8105764:	081057d9 	.word	0x081057d9
 8105768:	081057e1 	.word	0x081057e1
 810576c:	081057d9 	.word	0x081057d9
 8105770:	081057d9 	.word	0x081057d9
 8105774:	081057d9 	.word	0x081057d9
 8105778:	081057d9 	.word	0x081057d9
 810577c:	081057d9 	.word	0x081057d9
 8105780:	081057d9 	.word	0x081057d9
 8105784:	081057d9 	.word	0x081057d9
 8105788:	081057e1 	.word	0x081057e1
 810578c:	081057d9 	.word	0x081057d9
 8105790:	081057d9 	.word	0x081057d9
 8105794:	081057d9 	.word	0x081057d9
 8105798:	081057d9 	.word	0x081057d9
 810579c:	081057d9 	.word	0x081057d9
 81057a0:	081057d9 	.word	0x081057d9
 81057a4:	081057d9 	.word	0x081057d9
 81057a8:	081057e1 	.word	0x081057e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81057ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81057b0:	3308      	adds	r3, #8
 81057b2:	2101      	movs	r1, #1
 81057b4:	4618      	mov	r0, r3
 81057b6:	f001 fe97 	bl	81074e8 <RCCEx_PLL2_Config>
 81057ba:	4603      	mov	r3, r0
 81057bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81057c0:	e00f      	b.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81057c6:	3328      	adds	r3, #40	@ 0x28
 81057c8:	2101      	movs	r1, #1
 81057ca:	4618      	mov	r0, r3
 81057cc:	f001 ff3e 	bl	810764c <RCCEx_PLL3_Config>
 81057d0:	4603      	mov	r3, r0
 81057d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81057d6:	e004      	b.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057d8:	2301      	movs	r3, #1
 81057da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81057de:	e000      	b.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 81057e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81057e6:	2b00      	cmp	r3, #0
 81057e8:	d10b      	bne.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81057ea:	4b81      	ldr	r3, [pc, #516]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81057ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81057ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81057f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81057f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81057fa:	4a7d      	ldr	r2, [pc, #500]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81057fc:	430b      	orrs	r3, r1
 81057fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8105800:	e003      	b.n	810580a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105802:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105806:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810580a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105812:	f002 0302 	and.w	r3, r2, #2
 8105816:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810581a:	2300      	movs	r3, #0
 810581c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8105820:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105824:	460b      	mov	r3, r1
 8105826:	4313      	orrs	r3, r2
 8105828:	d042      	beq.n	81058b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810582a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810582e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105830:	2b05      	cmp	r3, #5
 8105832:	d825      	bhi.n	8105880 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8105834:	a201      	add	r2, pc, #4	@ (adr r2, 810583c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8105836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810583a:	bf00      	nop
 810583c:	08105889 	.word	0x08105889
 8105840:	08105855 	.word	0x08105855
 8105844:	0810586b 	.word	0x0810586b
 8105848:	08105889 	.word	0x08105889
 810584c:	08105889 	.word	0x08105889
 8105850:	08105889 	.word	0x08105889
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105858:	3308      	adds	r3, #8
 810585a:	2101      	movs	r1, #1
 810585c:	4618      	mov	r0, r3
 810585e:	f001 fe43 	bl	81074e8 <RCCEx_PLL2_Config>
 8105862:	4603      	mov	r3, r0
 8105864:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105868:	e00f      	b.n	810588a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810586a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810586e:	3328      	adds	r3, #40	@ 0x28
 8105870:	2101      	movs	r1, #1
 8105872:	4618      	mov	r0, r3
 8105874:	f001 feea 	bl	810764c <RCCEx_PLL3_Config>
 8105878:	4603      	mov	r3, r0
 810587a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810587e:	e004      	b.n	810588a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105880:	2301      	movs	r3, #1
 8105882:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105886:	e000      	b.n	810588a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8105888:	bf00      	nop
    }

    if (ret == HAL_OK)
 810588a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810588e:	2b00      	cmp	r3, #0
 8105890:	d10a      	bne.n	81058a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105892:	4b57      	ldr	r3, [pc, #348]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8105894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105896:	f023 0107 	bic.w	r1, r3, #7
 810589a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810589e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81058a0:	4a53      	ldr	r2, [pc, #332]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81058a2:	430b      	orrs	r3, r1
 81058a4:	6553      	str	r3, [r2, #84]	@ 0x54
 81058a6:	e003      	b.n	81058b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81058ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81058b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058b8:	f002 0304 	and.w	r3, r2, #4
 81058bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81058c0:	2300      	movs	r3, #0
 81058c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81058c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81058ca:	460b      	mov	r3, r1
 81058cc:	4313      	orrs	r3, r2
 81058ce:	d044      	beq.n	810595a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81058d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81058d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81058d8:	2b05      	cmp	r3, #5
 81058da:	d825      	bhi.n	8105928 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 81058dc:	a201      	add	r2, pc, #4	@ (adr r2, 81058e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 81058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81058e2:	bf00      	nop
 81058e4:	08105931 	.word	0x08105931
 81058e8:	081058fd 	.word	0x081058fd
 81058ec:	08105913 	.word	0x08105913
 81058f0:	08105931 	.word	0x08105931
 81058f4:	08105931 	.word	0x08105931
 81058f8:	08105931 	.word	0x08105931
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81058fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105900:	3308      	adds	r3, #8
 8105902:	2101      	movs	r1, #1
 8105904:	4618      	mov	r0, r3
 8105906:	f001 fdef 	bl	81074e8 <RCCEx_PLL2_Config>
 810590a:	4603      	mov	r3, r0
 810590c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105910:	e00f      	b.n	8105932 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105916:	3328      	adds	r3, #40	@ 0x28
 8105918:	2101      	movs	r1, #1
 810591a:	4618      	mov	r0, r3
 810591c:	f001 fe96 	bl	810764c <RCCEx_PLL3_Config>
 8105920:	4603      	mov	r3, r0
 8105922:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105926:	e004      	b.n	8105932 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105928:	2301      	movs	r3, #1
 810592a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810592e:	e000      	b.n	8105932 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8105930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105932:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105936:	2b00      	cmp	r3, #0
 8105938:	d10b      	bne.n	8105952 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810593a:	4b2d      	ldr	r3, [pc, #180]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810593e:	f023 0107 	bic.w	r1, r3, #7
 8105942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810594a:	4a29      	ldr	r2, [pc, #164]	@ (81059f0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810594c:	430b      	orrs	r3, r1
 810594e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105950:	e003      	b.n	810595a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105952:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105956:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810595a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105962:	f002 0320 	and.w	r3, r2, #32
 8105966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810596a:	2300      	movs	r3, #0
 810596c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105974:	460b      	mov	r3, r1
 8105976:	4313      	orrs	r3, r2
 8105978:	d057      	beq.n	8105a2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810597a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810597e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105986:	d035      	beq.n	81059f4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8105988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810598c:	d82c      	bhi.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810598e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105992:	d031      	beq.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8105994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105998:	d826      	bhi.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810599a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810599e:	d02d      	beq.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 81059a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81059a4:	d820      	bhi.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81059a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81059aa:	d012      	beq.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 81059ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81059b0:	d81a      	bhi.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81059b2:	2b00      	cmp	r3, #0
 81059b4:	d024      	beq.n	8105a00 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 81059b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81059ba:	d115      	bne.n	81059e8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81059bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81059c0:	3308      	adds	r3, #8
 81059c2:	2100      	movs	r1, #0
 81059c4:	4618      	mov	r0, r3
 81059c6:	f001 fd8f 	bl	81074e8 <RCCEx_PLL2_Config>
 81059ca:	4603      	mov	r3, r0
 81059cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81059d0:	e017      	b.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81059d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81059d6:	3328      	adds	r3, #40	@ 0x28
 81059d8:	2102      	movs	r1, #2
 81059da:	4618      	mov	r0, r3
 81059dc:	f001 fe36 	bl	810764c <RCCEx_PLL3_Config>
 81059e0:	4603      	mov	r3, r0
 81059e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81059e6:	e00c      	b.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81059e8:	2301      	movs	r3, #1
 81059ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81059ee:	e008      	b.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 81059f0:	58024400 	.word	0x58024400
        break;
 81059f4:	bf00      	nop
 81059f6:	e004      	b.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81059f8:	bf00      	nop
 81059fa:	e002      	b.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81059fc:	bf00      	nop
 81059fe:	e000      	b.n	8105a02 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8105a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105a06:	2b00      	cmp	r3, #0
 8105a08:	d10b      	bne.n	8105a22 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105a0a:	4bc2      	ldr	r3, [pc, #776]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105a0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8105a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105a1a:	4abe      	ldr	r2, [pc, #760]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105a1c:	430b      	orrs	r3, r1
 8105a1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8105a20:	e003      	b.n	8105a2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105a26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a32:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8105a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8105a3a:	2300      	movs	r3, #0
 8105a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8105a40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8105a44:	460b      	mov	r3, r1
 8105a46:	4313      	orrs	r3, r2
 8105a48:	d055      	beq.n	8105af6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105a52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105a56:	d033      	beq.n	8105ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8105a58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105a5c:	d82c      	bhi.n	8105ab8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8105a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105a62:	d02f      	beq.n	8105ac4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8105a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105a68:	d826      	bhi.n	8105ab8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8105a6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105a6e:	d02b      	beq.n	8105ac8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8105a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105a74:	d820      	bhi.n	8105ab8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8105a76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105a7a:	d012      	beq.n	8105aa2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8105a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105a80:	d81a      	bhi.n	8105ab8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8105a82:	2b00      	cmp	r3, #0
 8105a84:	d022      	beq.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8105a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105a8a:	d115      	bne.n	8105ab8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a90:	3308      	adds	r3, #8
 8105a92:	2100      	movs	r1, #0
 8105a94:	4618      	mov	r0, r3
 8105a96:	f001 fd27 	bl	81074e8 <RCCEx_PLL2_Config>
 8105a9a:	4603      	mov	r3, r0
 8105a9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105aa0:	e015      	b.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105aa6:	3328      	adds	r3, #40	@ 0x28
 8105aa8:	2102      	movs	r1, #2
 8105aaa:	4618      	mov	r0, r3
 8105aac:	f001 fdce 	bl	810764c <RCCEx_PLL3_Config>
 8105ab0:	4603      	mov	r3, r0
 8105ab2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105ab6:	e00a      	b.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ab8:	2301      	movs	r3, #1
 8105aba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105abe:	e006      	b.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8105ac0:	bf00      	nop
 8105ac2:	e004      	b.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8105ac4:	bf00      	nop
 8105ac6:	e002      	b.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8105ac8:	bf00      	nop
 8105aca:	e000      	b.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8105acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ace:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ad2:	2b00      	cmp	r3, #0
 8105ad4:	d10b      	bne.n	8105aee <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105ad6:	4b8f      	ldr	r3, [pc, #572]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105ada:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8105ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105ae6:	4a8b      	ldr	r2, [pc, #556]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105ae8:	430b      	orrs	r3, r1
 8105aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8105aec:	e003      	b.n	8105af6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105aee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105af2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105afe:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8105b02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8105b06:	2300      	movs	r3, #0
 8105b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8105b0c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8105b10:	460b      	mov	r3, r1
 8105b12:	4313      	orrs	r3, r2
 8105b14:	d055      	beq.n	8105bc2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105b1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8105b22:	d033      	beq.n	8105b8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8105b24:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8105b28:	d82c      	bhi.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8105b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105b2e:	d02f      	beq.n	8105b90 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8105b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105b34:	d826      	bhi.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8105b36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105b3a:	d02b      	beq.n	8105b94 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8105b3c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105b40:	d820      	bhi.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8105b42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105b46:	d012      	beq.n	8105b6e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8105b48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105b4c:	d81a      	bhi.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8105b4e:	2b00      	cmp	r3, #0
 8105b50:	d022      	beq.n	8105b98 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8105b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105b56:	d115      	bne.n	8105b84 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b5c:	3308      	adds	r3, #8
 8105b5e:	2100      	movs	r1, #0
 8105b60:	4618      	mov	r0, r3
 8105b62:	f001 fcc1 	bl	81074e8 <RCCEx_PLL2_Config>
 8105b66:	4603      	mov	r3, r0
 8105b68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105b6c:	e015      	b.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b72:	3328      	adds	r3, #40	@ 0x28
 8105b74:	2102      	movs	r1, #2
 8105b76:	4618      	mov	r0, r3
 8105b78:	f001 fd68 	bl	810764c <RCCEx_PLL3_Config>
 8105b7c:	4603      	mov	r3, r0
 8105b7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105b82:	e00a      	b.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b84:	2301      	movs	r3, #1
 8105b86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105b8a:	e006      	b.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8105b8c:	bf00      	nop
 8105b8e:	e004      	b.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8105b90:	bf00      	nop
 8105b92:	e002      	b.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8105b94:	bf00      	nop
 8105b96:	e000      	b.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8105b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105b9e:	2b00      	cmp	r3, #0
 8105ba0:	d10b      	bne.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105ba6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8105baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105bb2:	4a58      	ldr	r2, [pc, #352]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105bb4:	430b      	orrs	r3, r1
 8105bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8105bb8:	e003      	b.n	8105bc2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105bbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bca:	f002 0308 	and.w	r3, r2, #8
 8105bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8105bd2:	2300      	movs	r3, #0
 8105bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8105bd8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8105bdc:	460b      	mov	r3, r1
 8105bde:	4313      	orrs	r3, r2
 8105be0:	d01e      	beq.n	8105c20 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105bee:	d10c      	bne.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bf4:	3328      	adds	r3, #40	@ 0x28
 8105bf6:	2102      	movs	r1, #2
 8105bf8:	4618      	mov	r0, r3
 8105bfa:	f001 fd27 	bl	810764c <RCCEx_PLL3_Config>
 8105bfe:	4603      	mov	r3, r0
 8105c00:	2b00      	cmp	r3, #0
 8105c02:	d002      	beq.n	8105c0a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8105c04:	2301      	movs	r3, #1
 8105c06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105c0a:	4b42      	ldr	r3, [pc, #264]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105c0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8105c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105c1c:	430b      	orrs	r3, r1
 8105c1e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c28:	f002 0310 	and.w	r3, r2, #16
 8105c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105c30:	2300      	movs	r3, #0
 8105c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105c36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8105c3a:	460b      	mov	r3, r1
 8105c3c:	4313      	orrs	r3, r2
 8105c3e:	d01e      	beq.n	8105c7e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105c4c:	d10c      	bne.n	8105c68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c52:	3328      	adds	r3, #40	@ 0x28
 8105c54:	2102      	movs	r1, #2
 8105c56:	4618      	mov	r0, r3
 8105c58:	f001 fcf8 	bl	810764c <RCCEx_PLL3_Config>
 8105c5c:	4603      	mov	r3, r0
 8105c5e:	2b00      	cmp	r3, #0
 8105c60:	d002      	beq.n	8105c68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8105c62:	2301      	movs	r3, #1
 8105c64:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105c68:	4b2a      	ldr	r3, [pc, #168]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105c6c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105c78:	4a26      	ldr	r2, [pc, #152]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105c7a:	430b      	orrs	r3, r1
 8105c7c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c86:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8105c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8105c8e:	2300      	movs	r3, #0
 8105c90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8105c94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8105c98:	460b      	mov	r3, r1
 8105c9a:	4313      	orrs	r3, r2
 8105c9c:	d040      	beq.n	8105d20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105caa:	d022      	beq.n	8105cf2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8105cac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105cb0:	d81b      	bhi.n	8105cea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8105cb2:	2b00      	cmp	r3, #0
 8105cb4:	d003      	beq.n	8105cbe <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8105cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105cba:	d00b      	beq.n	8105cd4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8105cbc:	e015      	b.n	8105cea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105cc2:	3308      	adds	r3, #8
 8105cc4:	2100      	movs	r1, #0
 8105cc6:	4618      	mov	r0, r3
 8105cc8:	f001 fc0e 	bl	81074e8 <RCCEx_PLL2_Config>
 8105ccc:	4603      	mov	r3, r0
 8105cce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105cd2:	e00f      	b.n	8105cf4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105cd8:	3328      	adds	r3, #40	@ 0x28
 8105cda:	2102      	movs	r1, #2
 8105cdc:	4618      	mov	r0, r3
 8105cde:	f001 fcb5 	bl	810764c <RCCEx_PLL3_Config>
 8105ce2:	4603      	mov	r3, r0
 8105ce4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105ce8:	e004      	b.n	8105cf4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105cea:	2301      	movs	r3, #1
 8105cec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105cf0:	e000      	b.n	8105cf4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8105cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105cf4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105cf8:	2b00      	cmp	r3, #0
 8105cfa:	d10d      	bne.n	8105d18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105cfc:	4b05      	ldr	r3, [pc, #20]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8105d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105d0c:	4a01      	ldr	r2, [pc, #4]	@ (8105d14 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105d0e:	430b      	orrs	r3, r1
 8105d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8105d12:	e005      	b.n	8105d20 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8105d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105d1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d28:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8105d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8105d2e:	2300      	movs	r3, #0
 8105d30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8105d32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8105d36:	460b      	mov	r3, r1
 8105d38:	4313      	orrs	r3, r2
 8105d3a:	d03b      	beq.n	8105db4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8105d44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105d48:	d01f      	beq.n	8105d8a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8105d4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105d4e:	d818      	bhi.n	8105d82 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8105d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105d54:	d003      	beq.n	8105d5e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8105d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105d5a:	d007      	beq.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8105d5c:	e011      	b.n	8105d82 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d5e:	4b64      	ldr	r3, [pc, #400]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d62:	4a63      	ldr	r2, [pc, #396]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105d6a:	e00f      	b.n	8105d8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d70:	3328      	adds	r3, #40	@ 0x28
 8105d72:	2101      	movs	r1, #1
 8105d74:	4618      	mov	r0, r3
 8105d76:	f001 fc69 	bl	810764c <RCCEx_PLL3_Config>
 8105d7a:	4603      	mov	r3, r0
 8105d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8105d80:	e004      	b.n	8105d8c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105d82:	2301      	movs	r3, #1
 8105d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105d88:	e000      	b.n	8105d8c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8105d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105d90:	2b00      	cmp	r3, #0
 8105d92:	d10b      	bne.n	8105dac <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105d94:	4b56      	ldr	r3, [pc, #344]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105d98:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8105da4:	4a52      	ldr	r2, [pc, #328]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105da6:	430b      	orrs	r3, r1
 8105da8:	6553      	str	r3, [r2, #84]	@ 0x54
 8105daa:	e003      	b.n	8105db4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105db0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105dbc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8105dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8105dc2:	2300      	movs	r3, #0
 8105dc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8105dc6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8105dca:	460b      	mov	r3, r1
 8105dcc:	4313      	orrs	r3, r2
 8105dce:	d031      	beq.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8105dd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105dd6:	2b00      	cmp	r3, #0
 8105dd8:	d003      	beq.n	8105de2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8105dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105dde:	d007      	beq.n	8105df0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8105de0:	e011      	b.n	8105e06 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105de2:	4b43      	ldr	r3, [pc, #268]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105de6:	4a42      	ldr	r2, [pc, #264]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105dee:	e00e      	b.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105df4:	3308      	adds	r3, #8
 8105df6:	2102      	movs	r1, #2
 8105df8:	4618      	mov	r0, r3
 8105dfa:	f001 fb75 	bl	81074e8 <RCCEx_PLL2_Config>
 8105dfe:	4603      	mov	r3, r0
 8105e00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105e04:	e003      	b.n	8105e0e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8105e06:	2301      	movs	r3, #1
 8105e08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105e12:	2b00      	cmp	r3, #0
 8105e14:	d10a      	bne.n	8105e2c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105e16:	4b36      	ldr	r3, [pc, #216]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105e1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8105e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105e24:	4a32      	ldr	r2, [pc, #200]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105e26:	430b      	orrs	r3, r1
 8105e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105e2a:	e003      	b.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105e30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8105e42:	2300      	movs	r3, #0
 8105e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8105e46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8105e4a:	460b      	mov	r3, r1
 8105e4c:	4313      	orrs	r3, r2
 8105e4e:	d00c      	beq.n	8105e6a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e54:	3328      	adds	r3, #40	@ 0x28
 8105e56:	2102      	movs	r1, #2
 8105e58:	4618      	mov	r0, r3
 8105e5a:	f001 fbf7 	bl	810764c <RCCEx_PLL3_Config>
 8105e5e:	4603      	mov	r3, r0
 8105e60:	2b00      	cmp	r3, #0
 8105e62:	d002      	beq.n	8105e6a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8105e64:	2301      	movs	r3, #1
 8105e66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8105e76:	663b      	str	r3, [r7, #96]	@ 0x60
 8105e78:	2300      	movs	r3, #0
 8105e7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8105e7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105e80:	460b      	mov	r3, r1
 8105e82:	4313      	orrs	r3, r2
 8105e84:	d03a      	beq.n	8105efc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8105e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105e92:	d018      	beq.n	8105ec6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8105e94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105e98:	d811      	bhi.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8105e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105e9e:	d014      	beq.n	8105eca <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8105ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105ea4:	d80b      	bhi.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8105ea6:	2b00      	cmp	r3, #0
 8105ea8:	d011      	beq.n	8105ece <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8105eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105eae:	d106      	bne.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105ebc:	e008      	b.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ebe:	2301      	movs	r3, #1
 8105ec0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105ec4:	e004      	b.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8105ec6:	bf00      	nop
 8105ec8:	e002      	b.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8105eca:	bf00      	nop
 8105ecc:	e000      	b.n	8105ed0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8105ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ed0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d10d      	bne.n	8105ef4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105ed8:	4b05      	ldr	r3, [pc, #20]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105edc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105ee8:	4a01      	ldr	r2, [pc, #4]	@ (8105ef0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105eea:	430b      	orrs	r3, r1
 8105eec:	6553      	str	r3, [r2, #84]	@ 0x54
 8105eee:	e005      	b.n	8105efc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8105ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ef4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ef8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8105f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105f0a:	2300      	movs	r3, #0
 8105f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8105f0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8105f12:	460b      	mov	r3, r1
 8105f14:	4313      	orrs	r3, r2
 8105f16:	d009      	beq.n	8105f2c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105f18:	4baa      	ldr	r3, [pc, #680]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8105f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105f26:	4aa7      	ldr	r2, [pc, #668]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105f28:	430b      	orrs	r3, r1
 8105f2a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f34:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8105f3a:	2300      	movs	r3, #0
 8105f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8105f3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8105f42:	460b      	mov	r3, r1
 8105f44:	4313      	orrs	r3, r2
 8105f46:	d00a      	beq.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105f48:	4b9e      	ldr	r3, [pc, #632]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105f4a:	691b      	ldr	r3, [r3, #16]
 8105f4c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8105f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105f58:	4a9a      	ldr	r2, [pc, #616]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105f5a:	430b      	orrs	r3, r1
 8105f5c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105f5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8105f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105f6c:	2300      	movs	r3, #0
 8105f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105f70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105f74:	460b      	mov	r3, r1
 8105f76:	4313      	orrs	r3, r2
 8105f78:	d009      	beq.n	8105f8e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105f7a:	4b92      	ldr	r3, [pc, #584]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f7e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8105f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105f88:	4a8e      	ldr	r2, [pc, #568]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105f8a:	430b      	orrs	r3, r1
 8105f8c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f96:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8105f9c:	2300      	movs	r3, #0
 8105f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8105fa0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8105fa4:	460b      	mov	r3, r1
 8105fa6:	4313      	orrs	r3, r2
 8105fa8:	d00e      	beq.n	8105fc8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105faa:	4b86      	ldr	r3, [pc, #536]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105fac:	691b      	ldr	r3, [r3, #16]
 8105fae:	4a85      	ldr	r2, [pc, #532]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105fb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8105fb4:	6113      	str	r3, [r2, #16]
 8105fb6:	4b83      	ldr	r3, [pc, #524]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105fb8:	6919      	ldr	r1, [r3, #16]
 8105fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8105fc2:	4a80      	ldr	r2, [pc, #512]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105fc4:	430b      	orrs	r3, r1
 8105fc6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fd0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8105fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105fd6:	2300      	movs	r3, #0
 8105fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105fda:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105fde:	460b      	mov	r3, r1
 8105fe0:	4313      	orrs	r3, r2
 8105fe2:	d009      	beq.n	8105ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105fe4:	4b77      	ldr	r3, [pc, #476]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105fe8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105ff2:	4a74      	ldr	r2, [pc, #464]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105ff4:	430b      	orrs	r3, r1
 8105ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106000:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8106004:	633b      	str	r3, [r7, #48]	@ 0x30
 8106006:	2300      	movs	r3, #0
 8106008:	637b      	str	r3, [r7, #52]	@ 0x34
 810600a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810600e:	460b      	mov	r3, r1
 8106010:	4313      	orrs	r3, r2
 8106012:	d00a      	beq.n	810602a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106014:	4b6b      	ldr	r3, [pc, #428]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106018:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810601c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106024:	4a67      	ldr	r2, [pc, #412]	@ (81061c4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106026:	430b      	orrs	r3, r1
 8106028:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810602a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106032:	2100      	movs	r1, #0
 8106034:	62b9      	str	r1, [r7, #40]	@ 0x28
 8106036:	f003 0301 	and.w	r3, r3, #1
 810603a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810603c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106040:	460b      	mov	r3, r1
 8106042:	4313      	orrs	r3, r2
 8106044:	d011      	beq.n	810606a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810604a:	3308      	adds	r3, #8
 810604c:	2100      	movs	r1, #0
 810604e:	4618      	mov	r0, r3
 8106050:	f001 fa4a 	bl	81074e8 <RCCEx_PLL2_Config>
 8106054:	4603      	mov	r3, r0
 8106056:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810605a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810605e:	2b00      	cmp	r3, #0
 8106060:	d003      	beq.n	810606a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106062:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106066:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810606a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106072:	2100      	movs	r1, #0
 8106074:	6239      	str	r1, [r7, #32]
 8106076:	f003 0302 	and.w	r3, r3, #2
 810607a:	627b      	str	r3, [r7, #36]	@ 0x24
 810607c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106080:	460b      	mov	r3, r1
 8106082:	4313      	orrs	r3, r2
 8106084:	d011      	beq.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810608a:	3308      	adds	r3, #8
 810608c:	2101      	movs	r1, #1
 810608e:	4618      	mov	r0, r3
 8106090:	f001 fa2a 	bl	81074e8 <RCCEx_PLL2_Config>
 8106094:	4603      	mov	r3, r0
 8106096:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810609a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810609e:	2b00      	cmp	r3, #0
 81060a0:	d003      	beq.n	81060aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81060a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81060aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060b2:	2100      	movs	r1, #0
 81060b4:	61b9      	str	r1, [r7, #24]
 81060b6:	f003 0304 	and.w	r3, r3, #4
 81060ba:	61fb      	str	r3, [r7, #28]
 81060bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81060c0:	460b      	mov	r3, r1
 81060c2:	4313      	orrs	r3, r2
 81060c4:	d011      	beq.n	81060ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81060c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060ca:	3308      	adds	r3, #8
 81060cc:	2102      	movs	r1, #2
 81060ce:	4618      	mov	r0, r3
 81060d0:	f001 fa0a 	bl	81074e8 <RCCEx_PLL2_Config>
 81060d4:	4603      	mov	r3, r0
 81060d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81060da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81060de:	2b00      	cmp	r3, #0
 81060e0:	d003      	beq.n	81060ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81060e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81060ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060f2:	2100      	movs	r1, #0
 81060f4:	6139      	str	r1, [r7, #16]
 81060f6:	f003 0308 	and.w	r3, r3, #8
 81060fa:	617b      	str	r3, [r7, #20]
 81060fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106100:	460b      	mov	r3, r1
 8106102:	4313      	orrs	r3, r2
 8106104:	d011      	beq.n	810612a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810610a:	3328      	adds	r3, #40	@ 0x28
 810610c:	2100      	movs	r1, #0
 810610e:	4618      	mov	r0, r3
 8106110:	f001 fa9c 	bl	810764c <RCCEx_PLL3_Config>
 8106114:	4603      	mov	r3, r0
 8106116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810611a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810611e:	2b00      	cmp	r3, #0
 8106120:	d003      	beq.n	810612a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106122:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106126:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106132:	2100      	movs	r1, #0
 8106134:	60b9      	str	r1, [r7, #8]
 8106136:	f003 0310 	and.w	r3, r3, #16
 810613a:	60fb      	str	r3, [r7, #12]
 810613c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106140:	460b      	mov	r3, r1
 8106142:	4313      	orrs	r3, r2
 8106144:	d011      	beq.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810614a:	3328      	adds	r3, #40	@ 0x28
 810614c:	2101      	movs	r1, #1
 810614e:	4618      	mov	r0, r3
 8106150:	f001 fa7c 	bl	810764c <RCCEx_PLL3_Config>
 8106154:	4603      	mov	r3, r0
 8106156:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810615a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810615e:	2b00      	cmp	r3, #0
 8106160:	d003      	beq.n	810616a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106166:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810616a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106172:	2100      	movs	r1, #0
 8106174:	6039      	str	r1, [r7, #0]
 8106176:	f003 0320 	and.w	r3, r3, #32
 810617a:	607b      	str	r3, [r7, #4]
 810617c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106180:	460b      	mov	r3, r1
 8106182:	4313      	orrs	r3, r2
 8106184:	d011      	beq.n	81061aa <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810618a:	3328      	adds	r3, #40	@ 0x28
 810618c:	2102      	movs	r1, #2
 810618e:	4618      	mov	r0, r3
 8106190:	f001 fa5c 	bl	810764c <RCCEx_PLL3_Config>
 8106194:	4603      	mov	r3, r0
 8106196:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810619a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810619e:	2b00      	cmp	r3, #0
 81061a0:	d003      	beq.n	81061aa <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81061a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 81061aa:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 81061ae:	2b00      	cmp	r3, #0
 81061b0:	d101      	bne.n	81061b6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 81061b2:	2300      	movs	r3, #0
 81061b4:	e000      	b.n	81061b8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 81061b6:	2301      	movs	r3, #1
}
 81061b8:	4618      	mov	r0, r3
 81061ba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 81061be:	46bd      	mov	sp, r7
 81061c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81061c4:	58024400 	.word	0x58024400

081061c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81061c8:	b580      	push	{r7, lr}
 81061ca:	b090      	sub	sp, #64	@ 0x40
 81061cc:	af00      	add	r7, sp, #0
 81061ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81061d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81061d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81061da:	430b      	orrs	r3, r1
 81061dc:	f040 8094 	bne.w	8106308 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81061e0:	4b9e      	ldr	r3, [pc, #632]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81061e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81061e4:	f003 0307 	and.w	r3, r3, #7
 81061e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061ec:	2b04      	cmp	r3, #4
 81061ee:	f200 8087 	bhi.w	8106300 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81061f2:	a201      	add	r2, pc, #4	@ (adr r2, 81061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061f8:	0810620d 	.word	0x0810620d
 81061fc:	08106235 	.word	0x08106235
 8106200:	0810625d 	.word	0x0810625d
 8106204:	081062f9 	.word	0x081062f9
 8106208:	08106285 	.word	0x08106285
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810620c:	4b93      	ldr	r3, [pc, #588]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106218:	d108      	bne.n	810622c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810621a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810621e:	4618      	mov	r0, r3
 8106220:	f001 f810 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106228:	f000 bd45 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810622c:	2300      	movs	r3, #0
 810622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106230:	f000 bd41 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106234:	4b89      	ldr	r3, [pc, #548]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810623c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106240:	d108      	bne.n	8106254 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106242:	f107 0318 	add.w	r3, r7, #24
 8106246:	4618      	mov	r0, r3
 8106248:	f000 fd54 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810624c:	69bb      	ldr	r3, [r7, #24]
 810624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106250:	f000 bd31 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106254:	2300      	movs	r3, #0
 8106256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106258:	f000 bd2d 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810625c:	4b7f      	ldr	r3, [pc, #508]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106268:	d108      	bne.n	810627c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810626a:	f107 030c 	add.w	r3, r7, #12
 810626e:	4618      	mov	r0, r3
 8106270:	f000 fe94 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106274:	68fb      	ldr	r3, [r7, #12]
 8106276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106278:	f000 bd1d 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810627c:	2300      	movs	r3, #0
 810627e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106280:	f000 bd19 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106284:	4b75      	ldr	r3, [pc, #468]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810628c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810628e:	4b73      	ldr	r3, [pc, #460]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106290:	681b      	ldr	r3, [r3, #0]
 8106292:	f003 0304 	and.w	r3, r3, #4
 8106296:	2b04      	cmp	r3, #4
 8106298:	d10c      	bne.n	81062b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810629a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810629c:	2b00      	cmp	r3, #0
 810629e:	d109      	bne.n	81062b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81062a0:	4b6e      	ldr	r3, [pc, #440]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	08db      	lsrs	r3, r3, #3
 81062a6:	f003 0303 	and.w	r3, r3, #3
 81062aa:	4a6d      	ldr	r2, [pc, #436]	@ (8106460 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81062ac:	fa22 f303 	lsr.w	r3, r2, r3
 81062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81062b2:	e01f      	b.n	81062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81062b4:	4b69      	ldr	r3, [pc, #420]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81062bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81062c0:	d106      	bne.n	81062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81062c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81062c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81062c8:	d102      	bne.n	81062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81062ca:	4b66      	ldr	r3, [pc, #408]	@ (8106464 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81062cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81062ce:	e011      	b.n	81062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81062d0:	4b62      	ldr	r3, [pc, #392]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81062d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81062dc:	d106      	bne.n	81062ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81062de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81062e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81062e4:	d102      	bne.n	81062ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81062e6:	4b60      	ldr	r3, [pc, #384]	@ (8106468 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81062ea:	e003      	b.n	81062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81062ec:	2300      	movs	r3, #0
 81062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81062f0:	f000 bce1 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81062f4:	f000 bcdf 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81062f8:	4b5c      	ldr	r3, [pc, #368]	@ (810646c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81062fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81062fc:	f000 bcdb 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106300:	2300      	movs	r3, #0
 8106302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106304:	f000 bcd7 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106308:	e9d7 2300 	ldrd	r2, r3, [r7]
 810630c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8106310:	430b      	orrs	r3, r1
 8106312:	f040 80ad 	bne.w	8106470 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106316:	4b51      	ldr	r3, [pc, #324]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810631a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810631e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106326:	d056      	beq.n	81063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810632a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810632e:	f200 8090 	bhi.w	8106452 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106334:	2bc0      	cmp	r3, #192	@ 0xc0
 8106336:	f000 8088 	beq.w	810644a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810633c:	2bc0      	cmp	r3, #192	@ 0xc0
 810633e:	f200 8088 	bhi.w	8106452 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106344:	2b80      	cmp	r3, #128	@ 0x80
 8106346:	d032      	beq.n	81063ae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8106348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810634a:	2b80      	cmp	r3, #128	@ 0x80
 810634c:	f200 8081 	bhi.w	8106452 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106352:	2b00      	cmp	r3, #0
 8106354:	d003      	beq.n	810635e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106358:	2b40      	cmp	r3, #64	@ 0x40
 810635a:	d014      	beq.n	8106386 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810635c:	e079      	b.n	8106452 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810635e:	4b3f      	ldr	r3, [pc, #252]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106366:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810636a:	d108      	bne.n	810637e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810636c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106370:	4618      	mov	r0, r3
 8106372:	f000 ff67 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810637a:	f000 bc9c 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810637e:	2300      	movs	r3, #0
 8106380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106382:	f000 bc98 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106386:	4b35      	ldr	r3, [pc, #212]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810638e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106392:	d108      	bne.n	81063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106394:	f107 0318 	add.w	r3, r7, #24
 8106398:	4618      	mov	r0, r3
 810639a:	f000 fcab 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810639e:	69bb      	ldr	r3, [r7, #24]
 81063a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81063a2:	f000 bc88 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81063a6:	2300      	movs	r3, #0
 81063a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81063aa:	f000 bc84 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81063ae:	4b2b      	ldr	r3, [pc, #172]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81063b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81063ba:	d108      	bne.n	81063ce <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81063bc:	f107 030c 	add.w	r3, r7, #12
 81063c0:	4618      	mov	r0, r3
 81063c2:	f000 fdeb 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81063c6:	68fb      	ldr	r3, [r7, #12]
 81063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81063ca:	f000 bc74 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81063ce:	2300      	movs	r3, #0
 81063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81063d2:	f000 bc70 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81063d6:	4b21      	ldr	r3, [pc, #132]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81063d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81063da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81063de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81063e0:	4b1e      	ldr	r3, [pc, #120]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81063e2:	681b      	ldr	r3, [r3, #0]
 81063e4:	f003 0304 	and.w	r3, r3, #4
 81063e8:	2b04      	cmp	r3, #4
 81063ea:	d10c      	bne.n	8106406 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81063ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81063ee:	2b00      	cmp	r3, #0
 81063f0:	d109      	bne.n	8106406 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81063f2:	4b1a      	ldr	r3, [pc, #104]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	08db      	lsrs	r3, r3, #3
 81063f8:	f003 0303 	and.w	r3, r3, #3
 81063fc:	4a18      	ldr	r2, [pc, #96]	@ (8106460 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81063fe:	fa22 f303 	lsr.w	r3, r2, r3
 8106402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106404:	e01f      	b.n	8106446 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106406:	4b15      	ldr	r3, [pc, #84]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810640e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106412:	d106      	bne.n	8106422 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8106414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810641a:	d102      	bne.n	8106422 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810641c:	4b11      	ldr	r3, [pc, #68]	@ (8106464 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106420:	e011      	b.n	8106446 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106422:	4b0e      	ldr	r3, [pc, #56]	@ (810645c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810642a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810642e:	d106      	bne.n	810643e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8106430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106436:	d102      	bne.n	810643e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106438:	4b0b      	ldr	r3, [pc, #44]	@ (8106468 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810643c:	e003      	b.n	8106446 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810643e:	2300      	movs	r3, #0
 8106440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106442:	f000 bc38 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106446:	f000 bc36 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810644a:	4b08      	ldr	r3, [pc, #32]	@ (810646c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810644e:	f000 bc32 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106452:	2300      	movs	r3, #0
 8106454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106456:	f000 bc2e 	b.w	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810645a:	bf00      	nop
 810645c:	58024400 	.word	0x58024400
 8106460:	03d09000 	.word	0x03d09000
 8106464:	003d0900 	.word	0x003d0900
 8106468:	017d7840 	.word	0x017d7840
 810646c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106474:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8106478:	430b      	orrs	r3, r1
 810647a:	f040 809c 	bne.w	81065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810647e:	4b9e      	ldr	r3, [pc, #632]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106482:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8106486:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810648a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810648e:	d054      	beq.n	810653a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8106490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106492:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8106496:	f200 808b 	bhi.w	81065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810649c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81064a0:	f000 8083 	beq.w	81065aa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81064aa:	f200 8081 	bhi.w	81065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81064b4:	d02f      	beq.n	8106516 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81064bc:	d878      	bhi.n	81065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064c0:	2b00      	cmp	r3, #0
 81064c2:	d004      	beq.n	81064ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81064ca:	d012      	beq.n	81064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81064cc:	e070      	b.n	81065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81064ce:	4b8a      	ldr	r3, [pc, #552]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81064d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81064da:	d107      	bne.n	81064ec <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81064dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81064e0:	4618      	mov	r0, r3
 81064e2:	f000 feaf 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81064ea:	e3e4      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81064ec:	2300      	movs	r3, #0
 81064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81064f0:	e3e1      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81064f2:	4b81      	ldr	r3, [pc, #516]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81064f4:	681b      	ldr	r3, [r3, #0]
 81064f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81064fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81064fe:	d107      	bne.n	8106510 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106500:	f107 0318 	add.w	r3, r7, #24
 8106504:	4618      	mov	r0, r3
 8106506:	f000 fbf5 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810650a:	69bb      	ldr	r3, [r7, #24]
 810650c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810650e:	e3d2      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106510:	2300      	movs	r3, #0
 8106512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106514:	e3cf      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106516:	4b78      	ldr	r3, [pc, #480]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810651e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106522:	d107      	bne.n	8106534 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106524:	f107 030c 	add.w	r3, r7, #12
 8106528:	4618      	mov	r0, r3
 810652a:	f000 fd37 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810652e:	68fb      	ldr	r3, [r7, #12]
 8106530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106532:	e3c0      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106534:	2300      	movs	r3, #0
 8106536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106538:	e3bd      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810653a:	4b6f      	ldr	r3, [pc, #444]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810653c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810653e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106542:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106544:	4b6c      	ldr	r3, [pc, #432]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	f003 0304 	and.w	r3, r3, #4
 810654c:	2b04      	cmp	r3, #4
 810654e:	d10c      	bne.n	810656a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8106550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106552:	2b00      	cmp	r3, #0
 8106554:	d109      	bne.n	810656a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106556:	4b68      	ldr	r3, [pc, #416]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106558:	681b      	ldr	r3, [r3, #0]
 810655a:	08db      	lsrs	r3, r3, #3
 810655c:	f003 0303 	and.w	r3, r3, #3
 8106560:	4a66      	ldr	r2, [pc, #408]	@ (81066fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106562:	fa22 f303 	lsr.w	r3, r2, r3
 8106566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106568:	e01e      	b.n	81065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810656a:	4b63      	ldr	r3, [pc, #396]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810656c:	681b      	ldr	r3, [r3, #0]
 810656e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106576:	d106      	bne.n	8106586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8106578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810657a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810657e:	d102      	bne.n	8106586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106580:	4b5f      	ldr	r3, [pc, #380]	@ (8106700 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106584:	e010      	b.n	81065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106586:	4b5c      	ldr	r3, [pc, #368]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106588:	681b      	ldr	r3, [r3, #0]
 810658a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810658e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106592:	d106      	bne.n	81065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8106594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810659a:	d102      	bne.n	81065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810659c:	4b59      	ldr	r3, [pc, #356]	@ (8106704 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81065a0:	e002      	b.n	81065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81065a2:	2300      	movs	r3, #0
 81065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81065a6:	e386      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81065a8:	e385      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81065aa:	4b57      	ldr	r3, [pc, #348]	@ (8106708 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065ae:	e382      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81065b0:	2300      	movs	r3, #0
 81065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81065b4:	e37f      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81065ba:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 81065be:	430b      	orrs	r3, r1
 81065c0:	f040 80a7 	bne.w	8106712 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81065c4:	4b4c      	ldr	r3, [pc, #304]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81065c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81065c8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81065cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81065d4:	d055      	beq.n	8106682 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81065dc:	f200 8096 	bhi.w	810670c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81065e6:	f000 8084 	beq.w	81066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81065f0:	f200 808c 	bhi.w	810670c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81065fa:	d030      	beq.n	810665e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106602:	f200 8083 	bhi.w	810670c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106608:	2b00      	cmp	r3, #0
 810660a:	d004      	beq.n	8106616 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810660e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106612:	d012      	beq.n	810663a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8106614:	e07a      	b.n	810670c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106616:	4b38      	ldr	r3, [pc, #224]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106618:	681b      	ldr	r3, [r3, #0]
 810661a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810661e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106622:	d107      	bne.n	8106634 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106628:	4618      	mov	r0, r3
 810662a:	f000 fe0b 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106632:	e340      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106634:	2300      	movs	r3, #0
 8106636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106638:	e33d      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810663a:	4b2f      	ldr	r3, [pc, #188]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106646:	d107      	bne.n	8106658 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106648:	f107 0318 	add.w	r3, r7, #24
 810664c:	4618      	mov	r0, r3
 810664e:	f000 fb51 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106652:	69bb      	ldr	r3, [r7, #24]
 8106654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106656:	e32e      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106658:	2300      	movs	r3, #0
 810665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810665c:	e32b      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810665e:	4b26      	ldr	r3, [pc, #152]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810666a:	d107      	bne.n	810667c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810666c:	f107 030c 	add.w	r3, r7, #12
 8106670:	4618      	mov	r0, r3
 8106672:	f000 fc93 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810667a:	e31c      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810667c:	2300      	movs	r3, #0
 810667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106680:	e319      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106682:	4b1d      	ldr	r3, [pc, #116]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106686:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810668a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810668c:	4b1a      	ldr	r3, [pc, #104]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810668e:	681b      	ldr	r3, [r3, #0]
 8106690:	f003 0304 	and.w	r3, r3, #4
 8106694:	2b04      	cmp	r3, #4
 8106696:	d10c      	bne.n	81066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8106698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810669a:	2b00      	cmp	r3, #0
 810669c:	d109      	bne.n	81066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810669e:	4b16      	ldr	r3, [pc, #88]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81066a0:	681b      	ldr	r3, [r3, #0]
 81066a2:	08db      	lsrs	r3, r3, #3
 81066a4:	f003 0303 	and.w	r3, r3, #3
 81066a8:	4a14      	ldr	r2, [pc, #80]	@ (81066fc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81066aa:	fa22 f303 	lsr.w	r3, r2, r3
 81066ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81066b0:	e01e      	b.n	81066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81066b2:	4b11      	ldr	r3, [pc, #68]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81066b4:	681b      	ldr	r3, [r3, #0]
 81066b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81066ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81066be:	d106      	bne.n	81066ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81066c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81066c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81066c6:	d102      	bne.n	81066ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81066c8:	4b0d      	ldr	r3, [pc, #52]	@ (8106700 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81066cc:	e010      	b.n	81066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81066ce:	4b0a      	ldr	r3, [pc, #40]	@ (81066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81066d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81066da:	d106      	bne.n	81066ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81066dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81066de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81066e2:	d102      	bne.n	81066ea <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81066e4:	4b07      	ldr	r3, [pc, #28]	@ (8106704 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81066e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81066e8:	e002      	b.n	81066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81066ea:	2300      	movs	r3, #0
 81066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81066ee:	e2e2      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81066f0:	e2e1      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81066f2:	4b05      	ldr	r3, [pc, #20]	@ (8106708 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81066f6:	e2de      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81066f8:	58024400 	.word	0x58024400
 81066fc:	03d09000 	.word	0x03d09000
 8106700:	003d0900 	.word	0x003d0900
 8106704:	017d7840 	.word	0x017d7840
 8106708:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810670c:	2300      	movs	r3, #0
 810670e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106710:	e2d1      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106716:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810671a:	430b      	orrs	r3, r1
 810671c:	f040 809c 	bne.w	8106858 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8106720:	4b93      	ldr	r3, [pc, #588]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106724:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8106728:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810672c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106730:	d054      	beq.n	81067dc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106738:	f200 808b 	bhi.w	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810673e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106742:	f000 8083 	beq.w	810684c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8106746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810674c:	f200 8081 	bhi.w	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106756:	d02f      	beq.n	81067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8106758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810675a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810675e:	d878      	bhi.n	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106762:	2b00      	cmp	r3, #0
 8106764:	d004      	beq.n	8106770 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8106766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810676c:	d012      	beq.n	8106794 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810676e:	e070      	b.n	8106852 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106770:	4b7f      	ldr	r3, [pc, #508]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106772:	681b      	ldr	r3, [r3, #0]
 8106774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106778:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810677c:	d107      	bne.n	810678e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810677e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106782:	4618      	mov	r0, r3
 8106784:	f000 fd5e 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810678c:	e293      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810678e:	2300      	movs	r3, #0
 8106790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106792:	e290      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106794:	4b76      	ldr	r3, [pc, #472]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810679c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81067a0:	d107      	bne.n	81067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81067a2:	f107 0318 	add.w	r3, r7, #24
 81067a6:	4618      	mov	r0, r3
 81067a8:	f000 faa4 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81067ac:	69bb      	ldr	r3, [r7, #24]
 81067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81067b0:	e281      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81067b2:	2300      	movs	r3, #0
 81067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067b6:	e27e      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81067b8:	4b6d      	ldr	r3, [pc, #436]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81067ba:	681b      	ldr	r3, [r3, #0]
 81067bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81067c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81067c4:	d107      	bne.n	81067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81067c6:	f107 030c 	add.w	r3, r7, #12
 81067ca:	4618      	mov	r0, r3
 81067cc:	f000 fbe6 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81067d0:	68fb      	ldr	r3, [r7, #12]
 81067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81067d4:	e26f      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81067d6:	2300      	movs	r3, #0
 81067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81067da:	e26c      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81067dc:	4b64      	ldr	r3, [pc, #400]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81067de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81067e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81067e4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81067e6:	4b62      	ldr	r3, [pc, #392]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	f003 0304 	and.w	r3, r3, #4
 81067ee:	2b04      	cmp	r3, #4
 81067f0:	d10c      	bne.n	810680c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81067f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81067f4:	2b00      	cmp	r3, #0
 81067f6:	d109      	bne.n	810680c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81067f8:	4b5d      	ldr	r3, [pc, #372]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	08db      	lsrs	r3, r3, #3
 81067fe:	f003 0303 	and.w	r3, r3, #3
 8106802:	4a5c      	ldr	r2, [pc, #368]	@ (8106974 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106804:	fa22 f303 	lsr.w	r3, r2, r3
 8106808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810680a:	e01e      	b.n	810684a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810680c:	4b58      	ldr	r3, [pc, #352]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810680e:	681b      	ldr	r3, [r3, #0]
 8106810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106818:	d106      	bne.n	8106828 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810681a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810681c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106820:	d102      	bne.n	8106828 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106822:	4b55      	ldr	r3, [pc, #340]	@ (8106978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106826:	e010      	b.n	810684a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106828:	4b51      	ldr	r3, [pc, #324]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106834:	d106      	bne.n	8106844 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8106836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810683c:	d102      	bne.n	8106844 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810683e:	4b4f      	ldr	r3, [pc, #316]	@ (810697c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106842:	e002      	b.n	810684a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106844:	2300      	movs	r3, #0
 8106846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106848:	e235      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810684a:	e234      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810684c:	4b4c      	ldr	r3, [pc, #304]	@ (8106980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106850:	e231      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106852:	2300      	movs	r3, #0
 8106854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106856:	e22e      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8106858:	e9d7 2300 	ldrd	r2, r3, [r7]
 810685c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8106860:	430b      	orrs	r3, r1
 8106862:	f040 808f 	bne.w	8106984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8106866:	4b42      	ldr	r3, [pc, #264]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810686a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810686e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8106870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106872:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106876:	d06b      	beq.n	8106950 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8106878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810687a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810687e:	d874      	bhi.n	810696a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106886:	d056      	beq.n	8106936 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8106888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810688a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810688e:	d86c      	bhi.n	810696a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106896:	d03b      	beq.n	8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8106898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810689a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810689e:	d864      	bhi.n	810696a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81068a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81068a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81068a6:	d021      	beq.n	81068ec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81068aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81068ae:	d85c      	bhi.n	810696a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81068b2:	2b00      	cmp	r3, #0
 81068b4:	d004      	beq.n	81068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81068b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81068bc:	d004      	beq.n	81068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81068be:	e054      	b.n	810696a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81068c0:	f7fe fa0c 	bl	8104cdc <HAL_RCC_GetPCLK1Freq>
 81068c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81068c6:	e1f6      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81068c8:	4b29      	ldr	r3, [pc, #164]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81068ca:	681b      	ldr	r3, [r3, #0]
 81068cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81068d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81068d4:	d107      	bne.n	81068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81068d6:	f107 0318 	add.w	r3, r7, #24
 81068da:	4618      	mov	r0, r3
 81068dc:	f000 fa0a 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81068e0:	69fb      	ldr	r3, [r7, #28]
 81068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81068e4:	e1e7      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81068e6:	2300      	movs	r3, #0
 81068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81068ea:	e1e4      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81068ec:	4b20      	ldr	r3, [pc, #128]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81068ee:	681b      	ldr	r3, [r3, #0]
 81068f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81068f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81068f8:	d107      	bne.n	810690a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81068fa:	f107 030c 	add.w	r3, r7, #12
 81068fe:	4618      	mov	r0, r3
 8106900:	f000 fb4c 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106904:	693b      	ldr	r3, [r7, #16]
 8106906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106908:	e1d5      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810690a:	2300      	movs	r3, #0
 810690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810690e:	e1d2      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106910:	4b17      	ldr	r3, [pc, #92]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	f003 0304 	and.w	r3, r3, #4
 8106918:	2b04      	cmp	r3, #4
 810691a:	d109      	bne.n	8106930 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810691c:	4b14      	ldr	r3, [pc, #80]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810691e:	681b      	ldr	r3, [r3, #0]
 8106920:	08db      	lsrs	r3, r3, #3
 8106922:	f003 0303 	and.w	r3, r3, #3
 8106926:	4a13      	ldr	r2, [pc, #76]	@ (8106974 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106928:	fa22 f303 	lsr.w	r3, r2, r3
 810692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810692e:	e1c2      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106930:	2300      	movs	r3, #0
 8106932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106934:	e1bf      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106936:	4b0e      	ldr	r3, [pc, #56]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106938:	681b      	ldr	r3, [r3, #0]
 810693a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810693e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106942:	d102      	bne.n	810694a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8106944:	4b0c      	ldr	r3, [pc, #48]	@ (8106978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106948:	e1b5      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810694a:	2300      	movs	r3, #0
 810694c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810694e:	e1b2      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106950:	4b07      	ldr	r3, [pc, #28]	@ (8106970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106958:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810695c:	d102      	bne.n	8106964 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810695e:	4b07      	ldr	r3, [pc, #28]	@ (810697c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106962:	e1a8      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106964:	2300      	movs	r3, #0
 8106966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106968:	e1a5      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810696a:	2300      	movs	r3, #0
 810696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810696e:	e1a2      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106970:	58024400 	.word	0x58024400
 8106974:	03d09000 	.word	0x03d09000
 8106978:	003d0900 	.word	0x003d0900
 810697c:	017d7840 	.word	0x017d7840
 8106980:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106988:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810698c:	430b      	orrs	r3, r1
 810698e:	d173      	bne.n	8106a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8106990:	4b9c      	ldr	r3, [pc, #624]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106998:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810699c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81069a0:	d02f      	beq.n	8106a02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81069a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81069a8:	d863      	bhi.n	8106a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81069aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069ac:	2b00      	cmp	r3, #0
 81069ae:	d004      	beq.n	81069ba <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81069b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81069b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81069b6:	d012      	beq.n	81069de <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81069b8:	e05b      	b.n	8106a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81069ba:	4b92      	ldr	r3, [pc, #584]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81069bc:	681b      	ldr	r3, [r3, #0]
 81069be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81069c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81069c6:	d107      	bne.n	81069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81069c8:	f107 0318 	add.w	r3, r7, #24
 81069cc:	4618      	mov	r0, r3
 81069ce:	f000 f991 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81069d2:	69bb      	ldr	r3, [r7, #24]
 81069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81069d6:	e16e      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81069d8:	2300      	movs	r3, #0
 81069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81069dc:	e16b      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81069de:	4b89      	ldr	r3, [pc, #548]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81069e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81069ea:	d107      	bne.n	81069fc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81069ec:	f107 030c 	add.w	r3, r7, #12
 81069f0:	4618      	mov	r0, r3
 81069f2:	f000 fad3 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81069f6:	697b      	ldr	r3, [r7, #20]
 81069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81069fa:	e15c      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81069fc:	2300      	movs	r3, #0
 81069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a00:	e159      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106a02:	4b80      	ldr	r3, [pc, #512]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106a0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106a0e:	681b      	ldr	r3, [r3, #0]
 8106a10:	f003 0304 	and.w	r3, r3, #4
 8106a14:	2b04      	cmp	r3, #4
 8106a16:	d10c      	bne.n	8106a32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8106a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106a1a:	2b00      	cmp	r3, #0
 8106a1c:	d109      	bne.n	8106a32 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106a1e:	4b79      	ldr	r3, [pc, #484]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106a20:	681b      	ldr	r3, [r3, #0]
 8106a22:	08db      	lsrs	r3, r3, #3
 8106a24:	f003 0303 	and.w	r3, r3, #3
 8106a28:	4a77      	ldr	r2, [pc, #476]	@ (8106c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8106a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8106a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106a30:	e01e      	b.n	8106a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106a32:	4b74      	ldr	r3, [pc, #464]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106a34:	681b      	ldr	r3, [r3, #0]
 8106a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106a3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106a3e:	d106      	bne.n	8106a4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8106a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106a42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106a46:	d102      	bne.n	8106a4e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106a48:	4b70      	ldr	r3, [pc, #448]	@ (8106c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8106a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106a4c:	e010      	b.n	8106a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106a5a:	d106      	bne.n	8106a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8106a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106a62:	d102      	bne.n	8106a6a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106a64:	4b6a      	ldr	r3, [pc, #424]	@ (8106c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106a68:	e002      	b.n	8106a70 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106a6a:	2300      	movs	r3, #0
 8106a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106a6e:	e122      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106a70:	e121      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106a72:	2300      	movs	r3, #0
 8106a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106a76:	e11e      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106a7c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8106a80:	430b      	orrs	r3, r1
 8106a82:	d133      	bne.n	8106aec <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8106a84:	4b5f      	ldr	r3, [pc, #380]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106a8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	d004      	beq.n	8106a9e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8106a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106a9a:	d012      	beq.n	8106ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8106a9c:	e023      	b.n	8106ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106a9e:	4b59      	ldr	r3, [pc, #356]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106aa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106aaa:	d107      	bne.n	8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106ab0:	4618      	mov	r0, r3
 8106ab2:	f000 fbc7 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106aba:	e0fc      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106abc:	2300      	movs	r3, #0
 8106abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ac0:	e0f9      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ac2:	4b50      	ldr	r3, [pc, #320]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106ace:	d107      	bne.n	8106ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ad0:	f107 0318 	add.w	r3, r7, #24
 8106ad4:	4618      	mov	r0, r3
 8106ad6:	f000 f90d 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106ada:	6a3b      	ldr	r3, [r7, #32]
 8106adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ade:	e0ea      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ae0:	2300      	movs	r3, #0
 8106ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ae4:	e0e7      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106ae6:	2300      	movs	r3, #0
 8106ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106aea:	e0e4      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106af0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8106af4:	430b      	orrs	r3, r1
 8106af6:	f040 808d 	bne.w	8106c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8106afa:	4b42      	ldr	r3, [pc, #264]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106afe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8106b02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106b0a:	d06b      	beq.n	8106be4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8106b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106b12:	d874      	bhi.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b1a:	d056      	beq.n	8106bca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8106b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b22:	d86c      	bhi.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b2a:	d03b      	beq.n	8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8106b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b32:	d864      	bhi.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b3a:	d021      	beq.n	8106b80 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8106b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b42:	d85c      	bhi.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8106b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b46:	2b00      	cmp	r3, #0
 8106b48:	d004      	beq.n	8106b54 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8106b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106b50:	d004      	beq.n	8106b5c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8106b52:	e054      	b.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106b54:	f000 f8b8 	bl	8106cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8106b58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8106b5a:	e0ac      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106b5c:	4b29      	ldr	r3, [pc, #164]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106b64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106b68:	d107      	bne.n	8106b7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b6a:	f107 0318 	add.w	r3, r7, #24
 8106b6e:	4618      	mov	r0, r3
 8106b70:	f000 f8c0 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106b74:	69fb      	ldr	r3, [r7, #28]
 8106b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b78:	e09d      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b7a:	2300      	movs	r3, #0
 8106b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106b7e:	e09a      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b80:	4b20      	ldr	r3, [pc, #128]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b8c:	d107      	bne.n	8106b9e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106b8e:	f107 030c 	add.w	r3, r7, #12
 8106b92:	4618      	mov	r0, r3
 8106b94:	f000 fa02 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106b98:	693b      	ldr	r3, [r7, #16]
 8106b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b9c:	e08b      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b9e:	2300      	movs	r3, #0
 8106ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ba2:	e088      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106ba4:	4b17      	ldr	r3, [pc, #92]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106ba6:	681b      	ldr	r3, [r3, #0]
 8106ba8:	f003 0304 	and.w	r3, r3, #4
 8106bac:	2b04      	cmp	r3, #4
 8106bae:	d109      	bne.n	8106bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106bb0:	4b14      	ldr	r3, [pc, #80]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	08db      	lsrs	r3, r3, #3
 8106bb6:	f003 0303 	and.w	r3, r3, #3
 8106bba:	4a13      	ldr	r2, [pc, #76]	@ (8106c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8106bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8106bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106bc2:	e078      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106bc4:	2300      	movs	r3, #0
 8106bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106bc8:	e075      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106bca:	4b0e      	ldr	r3, [pc, #56]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106bcc:	681b      	ldr	r3, [r3, #0]
 8106bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106bd6:	d102      	bne.n	8106bde <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8106bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8106c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8106bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106bdc:	e06b      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106bde:	2300      	movs	r3, #0
 8106be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106be2:	e068      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106be4:	4b07      	ldr	r3, [pc, #28]	@ (8106c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106be6:	681b      	ldr	r3, [r3, #0]
 8106be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106bf0:	d102      	bne.n	8106bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8106bf2:	4b07      	ldr	r3, [pc, #28]	@ (8106c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8106bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106bf6:	e05e      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106bf8:	2300      	movs	r3, #0
 8106bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106bfc:	e05b      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8106bfe:	2300      	movs	r3, #0
 8106c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c02:	e058      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106c04:	58024400 	.word	0x58024400
 8106c08:	03d09000 	.word	0x03d09000
 8106c0c:	003d0900 	.word	0x003d0900
 8106c10:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106c18:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8106c1c:	430b      	orrs	r3, r1
 8106c1e:	d148      	bne.n	8106cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8106c20:	4b27      	ldr	r3, [pc, #156]	@ (8106cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106c24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106c28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c30:	d02a      	beq.n	8106c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8106c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106c38:	d838      	bhi.n	8106cac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8106c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c3c:	2b00      	cmp	r3, #0
 8106c3e:	d004      	beq.n	8106c4a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8106c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106c46:	d00d      	beq.n	8106c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8106c48:	e030      	b.n	8106cac <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8106cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106c4c:	681b      	ldr	r3, [r3, #0]
 8106c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106c52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c56:	d102      	bne.n	8106c5e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8106c58:	4b1a      	ldr	r3, [pc, #104]	@ (8106cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8106c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c5c:	e02b      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c5e:	2300      	movs	r3, #0
 8106c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c62:	e028      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106c64:	4b16      	ldr	r3, [pc, #88]	@ (8106cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106c66:	681b      	ldr	r3, [r3, #0]
 8106c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106c6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106c70:	d107      	bne.n	8106c82 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106c76:	4618      	mov	r0, r3
 8106c78:	f000 fae4 	bl	8107244 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c80:	e019      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c82:	2300      	movs	r3, #0
 8106c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106c86:	e016      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c88:	4b0d      	ldr	r3, [pc, #52]	@ (8106cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106c8a:	681b      	ldr	r3, [r3, #0]
 8106c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106c94:	d107      	bne.n	8106ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c96:	f107 0318 	add.w	r3, r7, #24
 8106c9a:	4618      	mov	r0, r3
 8106c9c:	f000 f82a 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106ca0:	69fb      	ldr	r3, [r7, #28]
 8106ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106ca4:	e007      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ca6:	2300      	movs	r3, #0
 8106ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106caa:	e004      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106cac:	2300      	movs	r3, #0
 8106cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106cb0:	e001      	b.n	8106cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8106cb2:	2300      	movs	r3, #0
 8106cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8106cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8106cb8:	4618      	mov	r0, r3
 8106cba:	3740      	adds	r7, #64	@ 0x40
 8106cbc:	46bd      	mov	sp, r7
 8106cbe:	bd80      	pop	{r7, pc}
 8106cc0:	58024400 	.word	0x58024400
 8106cc4:	017d7840 	.word	0x017d7840

08106cc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106cc8:	b580      	push	{r7, lr}
 8106cca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106ccc:	f7fd ffd4 	bl	8104c78 <HAL_RCC_GetHCLKFreq>
 8106cd0:	4602      	mov	r2, r0
 8106cd2:	4b06      	ldr	r3, [pc, #24]	@ (8106cec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106cd4:	6a1b      	ldr	r3, [r3, #32]
 8106cd6:	091b      	lsrs	r3, r3, #4
 8106cd8:	f003 0307 	and.w	r3, r3, #7
 8106cdc:	4904      	ldr	r1, [pc, #16]	@ (8106cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106cde:	5ccb      	ldrb	r3, [r1, r3]
 8106ce0:	f003 031f 	and.w	r3, r3, #31
 8106ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106ce8:	4618      	mov	r0, r3
 8106cea:	bd80      	pop	{r7, pc}
 8106cec:	58024400 	.word	0x58024400
 8106cf0:	0810c344 	.word	0x0810c344

08106cf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8106cf4:	b480      	push	{r7}
 8106cf6:	b089      	sub	sp, #36	@ 0x24
 8106cf8:	af00      	add	r7, sp, #0
 8106cfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106cfc:	4ba1      	ldr	r3, [pc, #644]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d00:	f003 0303 	and.w	r3, r3, #3
 8106d04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106d06:	4b9f      	ldr	r3, [pc, #636]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106d0a:	0b1b      	lsrs	r3, r3, #12
 8106d0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106d10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106d12:	4b9c      	ldr	r3, [pc, #624]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d16:	091b      	lsrs	r3, r3, #4
 8106d18:	f003 0301 	and.w	r3, r3, #1
 8106d1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106d1e:	4b99      	ldr	r3, [pc, #612]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106d22:	08db      	lsrs	r3, r3, #3
 8106d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106d28:	693a      	ldr	r2, [r7, #16]
 8106d2a:	fb02 f303 	mul.w	r3, r2, r3
 8106d2e:	ee07 3a90 	vmov	s15, r3
 8106d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106d3a:	697b      	ldr	r3, [r7, #20]
 8106d3c:	2b00      	cmp	r3, #0
 8106d3e:	f000 8111 	beq.w	8106f64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106d42:	69bb      	ldr	r3, [r7, #24]
 8106d44:	2b02      	cmp	r3, #2
 8106d46:	f000 8083 	beq.w	8106e50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106d4a:	69bb      	ldr	r3, [r7, #24]
 8106d4c:	2b02      	cmp	r3, #2
 8106d4e:	f200 80a1 	bhi.w	8106e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106d52:	69bb      	ldr	r3, [r7, #24]
 8106d54:	2b00      	cmp	r3, #0
 8106d56:	d003      	beq.n	8106d60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106d58:	69bb      	ldr	r3, [r7, #24]
 8106d5a:	2b01      	cmp	r3, #1
 8106d5c:	d056      	beq.n	8106e0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106d5e:	e099      	b.n	8106e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d60:	4b88      	ldr	r3, [pc, #544]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106d62:	681b      	ldr	r3, [r3, #0]
 8106d64:	f003 0320 	and.w	r3, r3, #32
 8106d68:	2b00      	cmp	r3, #0
 8106d6a:	d02d      	beq.n	8106dc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106d6c:	4b85      	ldr	r3, [pc, #532]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106d6e:	681b      	ldr	r3, [r3, #0]
 8106d70:	08db      	lsrs	r3, r3, #3
 8106d72:	f003 0303 	and.w	r3, r3, #3
 8106d76:	4a84      	ldr	r2, [pc, #528]	@ (8106f88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106d78:	fa22 f303 	lsr.w	r3, r2, r3
 8106d7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106d7e:	68bb      	ldr	r3, [r7, #8]
 8106d80:	ee07 3a90 	vmov	s15, r3
 8106d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d88:	697b      	ldr	r3, [r7, #20]
 8106d8a:	ee07 3a90 	vmov	s15, r3
 8106d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d96:	4b7b      	ldr	r3, [pc, #492]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d9e:	ee07 3a90 	vmov	s15, r3
 8106da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106daa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106dc6:	e087      	b.n	8106ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106dc8:	697b      	ldr	r3, [r7, #20]
 8106dca:	ee07 3a90 	vmov	s15, r3
 8106dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106dd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106f90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106dda:	4b6a      	ldr	r3, [pc, #424]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106de2:	ee07 3a90 	vmov	s15, r3
 8106de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8106dee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e0a:	e065      	b.n	8106ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106e0c:	697b      	ldr	r3, [r7, #20]
 8106e0e:	ee07 3a90 	vmov	s15, r3
 8106e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8106f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e1e:	4b59      	ldr	r3, [pc, #356]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e26:	ee07 3a90 	vmov	s15, r3
 8106e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e4e:	e043      	b.n	8106ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106e50:	697b      	ldr	r3, [r7, #20]
 8106e52:	ee07 3a90 	vmov	s15, r3
 8106e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e62:	4b48      	ldr	r3, [pc, #288]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e6a:	ee07 3a90 	vmov	s15, r3
 8106e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e92:	e021      	b.n	8106ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106e94:	697b      	ldr	r3, [r7, #20]
 8106e96:	ee07 3a90 	vmov	s15, r3
 8106e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8106f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ea6:	4b37      	ldr	r3, [pc, #220]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106eae:	ee07 3a90 	vmov	s15, r3
 8106eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106eba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106f8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106ed6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106edc:	0a5b      	lsrs	r3, r3, #9
 8106ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106ee2:	ee07 3a90 	vmov	s15, r3
 8106ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8106ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106efe:	ee17 2a90 	vmov	r2, s15
 8106f02:	687b      	ldr	r3, [r7, #4]
 8106f04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8106f06:	4b1f      	ldr	r3, [pc, #124]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f0a:	0c1b      	lsrs	r3, r3, #16
 8106f0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106f10:	ee07 3a90 	vmov	s15, r3
 8106f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f2c:	ee17 2a90 	vmov	r2, s15
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8106f34:	4b13      	ldr	r3, [pc, #76]	@ (8106f84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f38:	0e1b      	lsrs	r3, r3, #24
 8106f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106f3e:	ee07 3a90 	vmov	s15, r3
 8106f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f5a:	ee17 2a90 	vmov	r2, s15
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106f62:	e008      	b.n	8106f76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	2200      	movs	r2, #0
 8106f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106f6a:	687b      	ldr	r3, [r7, #4]
 8106f6c:	2200      	movs	r2, #0
 8106f6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106f70:	687b      	ldr	r3, [r7, #4]
 8106f72:	2200      	movs	r2, #0
 8106f74:	609a      	str	r2, [r3, #8]
}
 8106f76:	bf00      	nop
 8106f78:	3724      	adds	r7, #36	@ 0x24
 8106f7a:	46bd      	mov	sp, r7
 8106f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f80:	4770      	bx	lr
 8106f82:	bf00      	nop
 8106f84:	58024400 	.word	0x58024400
 8106f88:	03d09000 	.word	0x03d09000
 8106f8c:	46000000 	.word	0x46000000
 8106f90:	4c742400 	.word	0x4c742400
 8106f94:	4a742400 	.word	0x4a742400
 8106f98:	4bbebc20 	.word	0x4bbebc20

08106f9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8106f9c:	b480      	push	{r7}
 8106f9e:	b089      	sub	sp, #36	@ 0x24
 8106fa0:	af00      	add	r7, sp, #0
 8106fa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106fa4:	4ba1      	ldr	r3, [pc, #644]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106fa8:	f003 0303 	and.w	r3, r3, #3
 8106fac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106fae:	4b9f      	ldr	r3, [pc, #636]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106fb2:	0d1b      	lsrs	r3, r3, #20
 8106fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106fb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106fba:	4b9c      	ldr	r3, [pc, #624]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fbe:	0a1b      	lsrs	r3, r3, #8
 8106fc0:	f003 0301 	and.w	r3, r3, #1
 8106fc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106fc6:	4b99      	ldr	r3, [pc, #612]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106fca:	08db      	lsrs	r3, r3, #3
 8106fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106fd0:	693a      	ldr	r2, [r7, #16]
 8106fd2:	fb02 f303 	mul.w	r3, r2, r3
 8106fd6:	ee07 3a90 	vmov	s15, r3
 8106fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106fde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106fe2:	697b      	ldr	r3, [r7, #20]
 8106fe4:	2b00      	cmp	r3, #0
 8106fe6:	f000 8111 	beq.w	810720c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106fea:	69bb      	ldr	r3, [r7, #24]
 8106fec:	2b02      	cmp	r3, #2
 8106fee:	f000 8083 	beq.w	81070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106ff2:	69bb      	ldr	r3, [r7, #24]
 8106ff4:	2b02      	cmp	r3, #2
 8106ff6:	f200 80a1 	bhi.w	810713c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106ffa:	69bb      	ldr	r3, [r7, #24]
 8106ffc:	2b00      	cmp	r3, #0
 8106ffe:	d003      	beq.n	8107008 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107000:	69bb      	ldr	r3, [r7, #24]
 8107002:	2b01      	cmp	r3, #1
 8107004:	d056      	beq.n	81070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107006:	e099      	b.n	810713c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107008:	4b88      	ldr	r3, [pc, #544]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810700a:	681b      	ldr	r3, [r3, #0]
 810700c:	f003 0320 	and.w	r3, r3, #32
 8107010:	2b00      	cmp	r3, #0
 8107012:	d02d      	beq.n	8107070 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107014:	4b85      	ldr	r3, [pc, #532]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	08db      	lsrs	r3, r3, #3
 810701a:	f003 0303 	and.w	r3, r3, #3
 810701e:	4a84      	ldr	r2, [pc, #528]	@ (8107230 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107020:	fa22 f303 	lsr.w	r3, r2, r3
 8107024:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107026:	68bb      	ldr	r3, [r7, #8]
 8107028:	ee07 3a90 	vmov	s15, r3
 810702c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107030:	697b      	ldr	r3, [r7, #20]
 8107032:	ee07 3a90 	vmov	s15, r3
 8107036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810703e:	4b7b      	ldr	r3, [pc, #492]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107046:	ee07 3a90 	vmov	s15, r3
 810704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107052:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810705e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107066:	ee67 7a27 	vmul.f32	s15, s14, s15
 810706a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810706e:	e087      	b.n	8107180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107070:	697b      	ldr	r3, [r7, #20]
 8107072:	ee07 3a90 	vmov	s15, r3
 8107076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810707a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107238 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107082:	4b6a      	ldr	r3, [pc, #424]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810708a:	ee07 3a90 	vmov	s15, r3
 810708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107092:	ed97 6a03 	vldr	s12, [r7, #12]
 8107096:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81070a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81070ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81070b2:	e065      	b.n	8107180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81070b4:	697b      	ldr	r3, [r7, #20]
 81070b6:	ee07 3a90 	vmov	s15, r3
 81070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81070be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810723c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81070c6:	4b59      	ldr	r3, [pc, #356]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81070c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81070ce:	ee07 3a90 	vmov	s15, r3
 81070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81070da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81070e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81070f6:	e043      	b.n	8107180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81070f8:	697b      	ldr	r3, [r7, #20]
 81070fa:	ee07 3a90 	vmov	s15, r3
 81070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107102:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810710a:	4b48      	ldr	r3, [pc, #288]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107112:	ee07 3a90 	vmov	s15, r3
 8107116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810711a:	ed97 6a03 	vldr	s12, [r7, #12]
 810711e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810712a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810713a:	e021      	b.n	8107180 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810713c:	697b      	ldr	r3, [r7, #20]
 810713e:	ee07 3a90 	vmov	s15, r3
 8107142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107146:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810723c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810714e:	4b37      	ldr	r3, [pc, #220]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107156:	ee07 3a90 	vmov	s15, r3
 810715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810715e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107162:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107234 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810716e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107176:	ee67 7a27 	vmul.f32	s15, s14, s15
 810717a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810717e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107180:	4b2a      	ldr	r3, [pc, #168]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107184:	0a5b      	lsrs	r3, r3, #9
 8107186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810718a:	ee07 3a90 	vmov	s15, r3
 810718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107196:	ee37 7a87 	vadd.f32	s14, s15, s14
 810719a:	edd7 6a07 	vldr	s13, [r7, #28]
 810719e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81071a6:	ee17 2a90 	vmov	r2, s15
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81071ae:	4b1f      	ldr	r3, [pc, #124]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81071b2:	0c1b      	lsrs	r3, r3, #16
 81071b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81071b8:	ee07 3a90 	vmov	s15, r3
 81071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81071c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81071cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81071d4:	ee17 2a90 	vmov	r2, s15
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81071dc:	4b13      	ldr	r3, [pc, #76]	@ (810722c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81071e0:	0e1b      	lsrs	r3, r3, #24
 81071e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81071e6:	ee07 3a90 	vmov	s15, r3
 81071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81071f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81071f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81071fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81071fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107202:	ee17 2a90 	vmov	r2, s15
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810720a:	e008      	b.n	810721e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	2200      	movs	r2, #0
 8107210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	2200      	movs	r2, #0
 8107216:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107218:	687b      	ldr	r3, [r7, #4]
 810721a:	2200      	movs	r2, #0
 810721c:	609a      	str	r2, [r3, #8]
}
 810721e:	bf00      	nop
 8107220:	3724      	adds	r7, #36	@ 0x24
 8107222:	46bd      	mov	sp, r7
 8107224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107228:	4770      	bx	lr
 810722a:	bf00      	nop
 810722c:	58024400 	.word	0x58024400
 8107230:	03d09000 	.word	0x03d09000
 8107234:	46000000 	.word	0x46000000
 8107238:	4c742400 	.word	0x4c742400
 810723c:	4a742400 	.word	0x4a742400
 8107240:	4bbebc20 	.word	0x4bbebc20

08107244 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107244:	b480      	push	{r7}
 8107246:	b089      	sub	sp, #36	@ 0x24
 8107248:	af00      	add	r7, sp, #0
 810724a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810724c:	4ba0      	ldr	r3, [pc, #640]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107250:	f003 0303 	and.w	r3, r3, #3
 8107254:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107256:	4b9e      	ldr	r3, [pc, #632]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810725a:	091b      	lsrs	r3, r3, #4
 810725c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107260:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107262:	4b9b      	ldr	r3, [pc, #620]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107266:	f003 0301 	and.w	r3, r3, #1
 810726a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810726c:	4b98      	ldr	r3, [pc, #608]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810726e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107270:	08db      	lsrs	r3, r3, #3
 8107272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107276:	693a      	ldr	r2, [r7, #16]
 8107278:	fb02 f303 	mul.w	r3, r2, r3
 810727c:	ee07 3a90 	vmov	s15, r3
 8107280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107284:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107288:	697b      	ldr	r3, [r7, #20]
 810728a:	2b00      	cmp	r3, #0
 810728c:	f000 8111 	beq.w	81074b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107290:	69bb      	ldr	r3, [r7, #24]
 8107292:	2b02      	cmp	r3, #2
 8107294:	f000 8083 	beq.w	810739e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107298:	69bb      	ldr	r3, [r7, #24]
 810729a:	2b02      	cmp	r3, #2
 810729c:	f200 80a1 	bhi.w	81073e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81072a0:	69bb      	ldr	r3, [r7, #24]
 81072a2:	2b00      	cmp	r3, #0
 81072a4:	d003      	beq.n	81072ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81072a6:	69bb      	ldr	r3, [r7, #24]
 81072a8:	2b01      	cmp	r3, #1
 81072aa:	d056      	beq.n	810735a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81072ac:	e099      	b.n	81073e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81072ae:	4b88      	ldr	r3, [pc, #544]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	f003 0320 	and.w	r3, r3, #32
 81072b6:	2b00      	cmp	r3, #0
 81072b8:	d02d      	beq.n	8107316 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81072ba:	4b85      	ldr	r3, [pc, #532]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81072bc:	681b      	ldr	r3, [r3, #0]
 81072be:	08db      	lsrs	r3, r3, #3
 81072c0:	f003 0303 	and.w	r3, r3, #3
 81072c4:	4a83      	ldr	r2, [pc, #524]	@ (81074d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81072c6:	fa22 f303 	lsr.w	r3, r2, r3
 81072ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81072cc:	68bb      	ldr	r3, [r7, #8]
 81072ce:	ee07 3a90 	vmov	s15, r3
 81072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072d6:	697b      	ldr	r3, [r7, #20]
 81072d8:	ee07 3a90 	vmov	s15, r3
 81072dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072e4:	4b7a      	ldr	r3, [pc, #488]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81072e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81072e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81072ec:	ee07 3a90 	vmov	s15, r3
 81072f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81072f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 81074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81072fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107304:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810730c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107310:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107314:	e087      	b.n	8107426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107316:	697b      	ldr	r3, [r7, #20]
 8107318:	ee07 3a90 	vmov	s15, r3
 810731c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107320:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 81074dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107328:	4b69      	ldr	r3, [pc, #420]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810732a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810732c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107330:	ee07 3a90 	vmov	s15, r3
 8107334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107338:	ed97 6a03 	vldr	s12, [r7, #12]
 810733c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 81074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107340:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107344:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107348:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810734c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107354:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107358:	e065      	b.n	8107426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810735a:	697b      	ldr	r3, [r7, #20]
 810735c:	ee07 3a90 	vmov	s15, r3
 8107360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107364:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 81074e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810736c:	4b58      	ldr	r3, [pc, #352]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810736e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107374:	ee07 3a90 	vmov	s15, r3
 8107378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810737c:	ed97 6a03 	vldr	s12, [r7, #12]
 8107380:	eddf 5a55 	vldr	s11, [pc, #340]	@ 81074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810738c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107398:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810739c:	e043      	b.n	8107426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810739e:	697b      	ldr	r3, [r7, #20]
 81073a0:	ee07 3a90 	vmov	s15, r3
 81073a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 81074e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81073ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073b0:	4b47      	ldr	r3, [pc, #284]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81073b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073b8:	ee07 3a90 	vmov	s15, r3
 81073bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81073c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 81074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81073c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81073d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81073e0:	e021      	b.n	8107426 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81073e2:	697b      	ldr	r3, [r7, #20]
 81073e4:	ee07 3a90 	vmov	s15, r3
 81073e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 81074dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81073f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073f4:	4b36      	ldr	r3, [pc, #216]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81073f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81073f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073fc:	ee07 3a90 	vmov	s15, r3
 8107400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107404:	ed97 6a03 	vldr	s12, [r7, #12]
 8107408:	eddf 5a33 	vldr	s11, [pc, #204]	@ 81074d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810740c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810741c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107424:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8107426:	4b2a      	ldr	r3, [pc, #168]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810742a:	0a5b      	lsrs	r3, r3, #9
 810742c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107430:	ee07 3a90 	vmov	s15, r3
 8107434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107438:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810743c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107440:	edd7 6a07 	vldr	s13, [r7, #28]
 8107444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810744c:	ee17 2a90 	vmov	r2, s15
 8107450:	687b      	ldr	r3, [r7, #4]
 8107452:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8107454:	4b1e      	ldr	r3, [pc, #120]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107458:	0c1b      	lsrs	r3, r3, #16
 810745a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810745e:	ee07 3a90 	vmov	s15, r3
 8107462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810746a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810746e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810747a:	ee17 2a90 	vmov	r2, s15
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8107482:	4b13      	ldr	r3, [pc, #76]	@ (81074d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107486:	0e1b      	lsrs	r3, r3, #24
 8107488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810748c:	ee07 3a90 	vmov	s15, r3
 8107490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107498:	ee37 7a87 	vadd.f32	s14, s15, s14
 810749c:	edd7 6a07 	vldr	s13, [r7, #28]
 81074a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81074a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81074a8:	ee17 2a90 	vmov	r2, s15
 81074ac:	687b      	ldr	r3, [r7, #4]
 81074ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81074b0:	e008      	b.n	81074c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	2200      	movs	r2, #0
 81074b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	2200      	movs	r2, #0
 81074bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81074be:	687b      	ldr	r3, [r7, #4]
 81074c0:	2200      	movs	r2, #0
 81074c2:	609a      	str	r2, [r3, #8]
}
 81074c4:	bf00      	nop
 81074c6:	3724      	adds	r7, #36	@ 0x24
 81074c8:	46bd      	mov	sp, r7
 81074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ce:	4770      	bx	lr
 81074d0:	58024400 	.word	0x58024400
 81074d4:	03d09000 	.word	0x03d09000
 81074d8:	46000000 	.word	0x46000000
 81074dc:	4c742400 	.word	0x4c742400
 81074e0:	4a742400 	.word	0x4a742400
 81074e4:	4bbebc20 	.word	0x4bbebc20

081074e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81074e8:	b580      	push	{r7, lr}
 81074ea:	b084      	sub	sp, #16
 81074ec:	af00      	add	r7, sp, #0
 81074ee:	6078      	str	r0, [r7, #4]
 81074f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81074f2:	2300      	movs	r3, #0
 81074f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81074f6:	4b54      	ldr	r3, [pc, #336]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81074f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81074fa:	f003 0303 	and.w	r3, r3, #3
 81074fe:	2b03      	cmp	r3, #3
 8107500:	d101      	bne.n	8107506 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107502:	2301      	movs	r3, #1
 8107504:	e09b      	b.n	810763e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107506:	4b50      	ldr	r3, [pc, #320]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	4a4f      	ldr	r2, [pc, #316]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 810750c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8107510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107512:	f7fa ffb5 	bl	8102480 <HAL_GetTick>
 8107516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107518:	e008      	b.n	810752c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810751a:	f7fa ffb1 	bl	8102480 <HAL_GetTick>
 810751e:	4602      	mov	r2, r0
 8107520:	68bb      	ldr	r3, [r7, #8]
 8107522:	1ad3      	subs	r3, r2, r3
 8107524:	2b02      	cmp	r3, #2
 8107526:	d901      	bls.n	810752c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107528:	2303      	movs	r3, #3
 810752a:	e088      	b.n	810763e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810752c:	4b46      	ldr	r3, [pc, #280]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 810752e:	681b      	ldr	r3, [r3, #0]
 8107530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107534:	2b00      	cmp	r3, #0
 8107536:	d1f0      	bne.n	810751a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107538:	4b43      	ldr	r3, [pc, #268]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 810753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810753c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	681b      	ldr	r3, [r3, #0]
 8107544:	031b      	lsls	r3, r3, #12
 8107546:	4940      	ldr	r1, [pc, #256]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107548:	4313      	orrs	r3, r2
 810754a:	628b      	str	r3, [r1, #40]	@ 0x28
 810754c:	687b      	ldr	r3, [r7, #4]
 810754e:	685b      	ldr	r3, [r3, #4]
 8107550:	3b01      	subs	r3, #1
 8107552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107556:	687b      	ldr	r3, [r7, #4]
 8107558:	689b      	ldr	r3, [r3, #8]
 810755a:	3b01      	subs	r3, #1
 810755c:	025b      	lsls	r3, r3, #9
 810755e:	b29b      	uxth	r3, r3
 8107560:	431a      	orrs	r2, r3
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	68db      	ldr	r3, [r3, #12]
 8107566:	3b01      	subs	r3, #1
 8107568:	041b      	lsls	r3, r3, #16
 810756a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810756e:	431a      	orrs	r2, r3
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	691b      	ldr	r3, [r3, #16]
 8107574:	3b01      	subs	r3, #1
 8107576:	061b      	lsls	r3, r3, #24
 8107578:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810757c:	4932      	ldr	r1, [pc, #200]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 810757e:	4313      	orrs	r3, r2
 8107580:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107582:	4b31      	ldr	r3, [pc, #196]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107586:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	695b      	ldr	r3, [r3, #20]
 810758e:	492e      	ldr	r1, [pc, #184]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107590:	4313      	orrs	r3, r2
 8107592:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107594:	4b2c      	ldr	r3, [pc, #176]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107598:	f023 0220 	bic.w	r2, r3, #32
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	699b      	ldr	r3, [r3, #24]
 81075a0:	4929      	ldr	r1, [pc, #164]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075a2:	4313      	orrs	r3, r2
 81075a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81075a6:	4b28      	ldr	r3, [pc, #160]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81075aa:	4a27      	ldr	r2, [pc, #156]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075ac:	f023 0310 	bic.w	r3, r3, #16
 81075b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81075b2:	4b25      	ldr	r3, [pc, #148]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81075ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81075be:	687a      	ldr	r2, [r7, #4]
 81075c0:	69d2      	ldr	r2, [r2, #28]
 81075c2:	00d2      	lsls	r2, r2, #3
 81075c4:	4920      	ldr	r1, [pc, #128]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075c6:	4313      	orrs	r3, r2
 81075c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81075ca:	4b1f      	ldr	r3, [pc, #124]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81075ce:	4a1e      	ldr	r2, [pc, #120]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075d0:	f043 0310 	orr.w	r3, r3, #16
 81075d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81075d6:	683b      	ldr	r3, [r7, #0]
 81075d8:	2b00      	cmp	r3, #0
 81075da:	d106      	bne.n	81075ea <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81075dc:	4b1a      	ldr	r3, [pc, #104]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81075e0:	4a19      	ldr	r2, [pc, #100]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81075e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81075e8:	e00f      	b.n	810760a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81075ea:	683b      	ldr	r3, [r7, #0]
 81075ec:	2b01      	cmp	r3, #1
 81075ee:	d106      	bne.n	81075fe <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81075f0:	4b15      	ldr	r3, [pc, #84]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81075f4:	4a14      	ldr	r2, [pc, #80]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 81075f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81075fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81075fc:	e005      	b.n	810760a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81075fe:	4b12      	ldr	r3, [pc, #72]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107602:	4a11      	ldr	r2, [pc, #68]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8107608:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810760a:	4b0f      	ldr	r3, [pc, #60]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 810760c:	681b      	ldr	r3, [r3, #0]
 810760e:	4a0e      	ldr	r2, [pc, #56]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107610:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8107614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107616:	f7fa ff33 	bl	8102480 <HAL_GetTick>
 810761a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810761c:	e008      	b.n	8107630 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810761e:	f7fa ff2f 	bl	8102480 <HAL_GetTick>
 8107622:	4602      	mov	r2, r0
 8107624:	68bb      	ldr	r3, [r7, #8]
 8107626:	1ad3      	subs	r3, r2, r3
 8107628:	2b02      	cmp	r3, #2
 810762a:	d901      	bls.n	8107630 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810762c:	2303      	movs	r3, #3
 810762e:	e006      	b.n	810763e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107630:	4b05      	ldr	r3, [pc, #20]	@ (8107648 <RCCEx_PLL2_Config+0x160>)
 8107632:	681b      	ldr	r3, [r3, #0]
 8107634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107638:	2b00      	cmp	r3, #0
 810763a:	d0f0      	beq.n	810761e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810763c:	7bfb      	ldrb	r3, [r7, #15]
}
 810763e:	4618      	mov	r0, r3
 8107640:	3710      	adds	r7, #16
 8107642:	46bd      	mov	sp, r7
 8107644:	bd80      	pop	{r7, pc}
 8107646:	bf00      	nop
 8107648:	58024400 	.word	0x58024400

0810764c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810764c:	b580      	push	{r7, lr}
 810764e:	b084      	sub	sp, #16
 8107650:	af00      	add	r7, sp, #0
 8107652:	6078      	str	r0, [r7, #4]
 8107654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107656:	2300      	movs	r3, #0
 8107658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810765a:	4b54      	ldr	r3, [pc, #336]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 810765c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810765e:	f003 0303 	and.w	r3, r3, #3
 8107662:	2b03      	cmp	r3, #3
 8107664:	d101      	bne.n	810766a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107666:	2301      	movs	r3, #1
 8107668:	e09b      	b.n	81077a2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810766a:	4b50      	ldr	r3, [pc, #320]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 810766c:	681b      	ldr	r3, [r3, #0]
 810766e:	4a4f      	ldr	r2, [pc, #316]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107676:	f7fa ff03 	bl	8102480 <HAL_GetTick>
 810767a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810767c:	e008      	b.n	8107690 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810767e:	f7fa feff 	bl	8102480 <HAL_GetTick>
 8107682:	4602      	mov	r2, r0
 8107684:	68bb      	ldr	r3, [r7, #8]
 8107686:	1ad3      	subs	r3, r2, r3
 8107688:	2b02      	cmp	r3, #2
 810768a:	d901      	bls.n	8107690 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810768c:	2303      	movs	r3, #3
 810768e:	e088      	b.n	81077a2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107690:	4b46      	ldr	r3, [pc, #280]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107692:	681b      	ldr	r3, [r3, #0]
 8107694:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107698:	2b00      	cmp	r3, #0
 810769a:	d1f0      	bne.n	810767e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810769c:	4b43      	ldr	r3, [pc, #268]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 810769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81076a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81076a4:	687b      	ldr	r3, [r7, #4]
 81076a6:	681b      	ldr	r3, [r3, #0]
 81076a8:	051b      	lsls	r3, r3, #20
 81076aa:	4940      	ldr	r1, [pc, #256]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 81076ac:	4313      	orrs	r3, r2
 81076ae:	628b      	str	r3, [r1, #40]	@ 0x28
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	685b      	ldr	r3, [r3, #4]
 81076b4:	3b01      	subs	r3, #1
 81076b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81076ba:	687b      	ldr	r3, [r7, #4]
 81076bc:	689b      	ldr	r3, [r3, #8]
 81076be:	3b01      	subs	r3, #1
 81076c0:	025b      	lsls	r3, r3, #9
 81076c2:	b29b      	uxth	r3, r3
 81076c4:	431a      	orrs	r2, r3
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	68db      	ldr	r3, [r3, #12]
 81076ca:	3b01      	subs	r3, #1
 81076cc:	041b      	lsls	r3, r3, #16
 81076ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81076d2:	431a      	orrs	r2, r3
 81076d4:	687b      	ldr	r3, [r7, #4]
 81076d6:	691b      	ldr	r3, [r3, #16]
 81076d8:	3b01      	subs	r3, #1
 81076da:	061b      	lsls	r3, r3, #24
 81076dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81076e0:	4932      	ldr	r1, [pc, #200]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 81076e2:	4313      	orrs	r3, r2
 81076e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81076e6:	4b31      	ldr	r3, [pc, #196]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 81076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81076ee:	687b      	ldr	r3, [r7, #4]
 81076f0:	695b      	ldr	r3, [r3, #20]
 81076f2:	492e      	ldr	r1, [pc, #184]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 81076f4:	4313      	orrs	r3, r2
 81076f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81076f8:	4b2c      	ldr	r3, [pc, #176]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 81076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81076fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	699b      	ldr	r3, [r3, #24]
 8107704:	4929      	ldr	r1, [pc, #164]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107706:	4313      	orrs	r3, r2
 8107708:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810770a:	4b28      	ldr	r3, [pc, #160]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 810770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810770e:	4a27      	ldr	r2, [pc, #156]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107714:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107716:	4b25      	ldr	r3, [pc, #148]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810771a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810771e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107722:	687a      	ldr	r2, [r7, #4]
 8107724:	69d2      	ldr	r2, [r2, #28]
 8107726:	00d2      	lsls	r2, r2, #3
 8107728:	4920      	ldr	r1, [pc, #128]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 810772a:	4313      	orrs	r3, r2
 810772c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810772e:	4b1f      	ldr	r3, [pc, #124]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107732:	4a1e      	ldr	r2, [pc, #120]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810773a:	683b      	ldr	r3, [r7, #0]
 810773c:	2b00      	cmp	r3, #0
 810773e:	d106      	bne.n	810774e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107740:	4b1a      	ldr	r3, [pc, #104]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107744:	4a19      	ldr	r2, [pc, #100]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107746:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810774a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810774c:	e00f      	b.n	810776e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810774e:	683b      	ldr	r3, [r7, #0]
 8107750:	2b01      	cmp	r3, #1
 8107752:	d106      	bne.n	8107762 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107754:	4b15      	ldr	r3, [pc, #84]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107758:	4a14      	ldr	r2, [pc, #80]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 810775a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810775e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107760:	e005      	b.n	810776e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107762:	4b12      	ldr	r3, [pc, #72]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107766:	4a11      	ldr	r2, [pc, #68]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810776c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810776e:	4b0f      	ldr	r3, [pc, #60]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107770:	681b      	ldr	r3, [r3, #0]
 8107772:	4a0e      	ldr	r2, [pc, #56]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8107778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810777a:	f7fa fe81 	bl	8102480 <HAL_GetTick>
 810777e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107780:	e008      	b.n	8107794 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107782:	f7fa fe7d 	bl	8102480 <HAL_GetTick>
 8107786:	4602      	mov	r2, r0
 8107788:	68bb      	ldr	r3, [r7, #8]
 810778a:	1ad3      	subs	r3, r2, r3
 810778c:	2b02      	cmp	r3, #2
 810778e:	d901      	bls.n	8107794 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107790:	2303      	movs	r3, #3
 8107792:	e006      	b.n	81077a2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107794:	4b05      	ldr	r3, [pc, #20]	@ (81077ac <RCCEx_PLL3_Config+0x160>)
 8107796:	681b      	ldr	r3, [r3, #0]
 8107798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810779c:	2b00      	cmp	r3, #0
 810779e:	d0f0      	beq.n	8107782 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81077a2:	4618      	mov	r0, r3
 81077a4:	3710      	adds	r7, #16
 81077a6:	46bd      	mov	sp, r7
 81077a8:	bd80      	pop	{r7, pc}
 81077aa:	bf00      	nop
 81077ac:	58024400 	.word	0x58024400

081077b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 81077b0:	b580      	push	{r7, lr}
 81077b2:	b084      	sub	sp, #16
 81077b4:	af00      	add	r7, sp, #0
 81077b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 81077b8:	2301      	movs	r3, #1
 81077ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	2b00      	cmp	r3, #0
 81077c0:	d073      	beq.n	81078aa <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 81077c8:	b2db      	uxtb	r3, r3
 81077ca:	2b00      	cmp	r3, #0
 81077cc:	d106      	bne.n	81077dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 81077ce:	687b      	ldr	r3, [r7, #4]
 81077d0:	2200      	movs	r2, #0
 81077d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 81077d6:	6878      	ldr	r0, [r7, #4]
 81077d8:	f7fa f846 	bl	8101868 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	2202      	movs	r2, #2
 81077e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	681b      	ldr	r3, [r3, #0]
 81077e8:	68db      	ldr	r3, [r3, #12]
 81077ea:	f003 0310 	and.w	r3, r3, #16
 81077ee:	2b10      	cmp	r3, #16
 81077f0:	d052      	beq.n	8107898 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	22ca      	movs	r2, #202	@ 0xca
 81077f8:	625a      	str	r2, [r3, #36]	@ 0x24
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	681b      	ldr	r3, [r3, #0]
 81077fe:	2253      	movs	r2, #83	@ 0x53
 8107800:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8107802:	6878      	ldr	r0, [r7, #4]
 8107804:	f000 f87a 	bl	81078fc <RTC_EnterInitMode>
 8107808:	4603      	mov	r3, r0
 810780a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 810780c:	7bfb      	ldrb	r3, [r7, #15]
 810780e:	2b00      	cmp	r3, #0
 8107810:	d126      	bne.n	8107860 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	681b      	ldr	r3, [r3, #0]
 8107816:	689b      	ldr	r3, [r3, #8]
 8107818:	687a      	ldr	r2, [r7, #4]
 810781a:	6812      	ldr	r2, [r2, #0]
 810781c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8107820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107824:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	681b      	ldr	r3, [r3, #0]
 810782a:	6899      	ldr	r1, [r3, #8]
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	685a      	ldr	r2, [r3, #4]
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	691b      	ldr	r3, [r3, #16]
 8107834:	431a      	orrs	r2, r3
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	699b      	ldr	r3, [r3, #24]
 810783a:	431a      	orrs	r2, r3
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	681b      	ldr	r3, [r3, #0]
 8107840:	430a      	orrs	r2, r1
 8107842:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	689b      	ldr	r3, [r3, #8]
 8107848:	0419      	lsls	r1, r3, #16
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	68da      	ldr	r2, [r3, #12]
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	681b      	ldr	r3, [r3, #0]
 8107852:	430a      	orrs	r2, r1
 8107854:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8107856:	6878      	ldr	r0, [r7, #4]
 8107858:	f000 f884 	bl	8107964 <RTC_ExitInitMode>
 810785c:	4603      	mov	r3, r0
 810785e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8107860:	7bfb      	ldrb	r3, [r7, #15]
 8107862:	2b00      	cmp	r3, #0
 8107864:	d113      	bne.n	810788e <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8107866:	687b      	ldr	r3, [r7, #4]
 8107868:	681b      	ldr	r3, [r3, #0]
 810786a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	681b      	ldr	r3, [r3, #0]
 8107870:	f022 0203 	bic.w	r2, r2, #3
 8107874:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	681b      	ldr	r3, [r3, #0]
 810787a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	69da      	ldr	r2, [r3, #28]
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	695b      	ldr	r3, [r3, #20]
 8107884:	431a      	orrs	r2, r3
 8107886:	687b      	ldr	r3, [r7, #4]
 8107888:	681b      	ldr	r3, [r3, #0]
 810788a:	430a      	orrs	r2, r1
 810788c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810788e:	687b      	ldr	r3, [r7, #4]
 8107890:	681b      	ldr	r3, [r3, #0]
 8107892:	22ff      	movs	r2, #255	@ 0xff
 8107894:	625a      	str	r2, [r3, #36]	@ 0x24
 8107896:	e001      	b.n	810789c <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8107898:	2300      	movs	r3, #0
 810789a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 810789c:	7bfb      	ldrb	r3, [r7, #15]
 810789e:	2b00      	cmp	r3, #0
 81078a0:	d103      	bne.n	81078aa <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	2201      	movs	r2, #1
 81078a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 81078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 81078ac:	4618      	mov	r0, r3
 81078ae:	3710      	adds	r7, #16
 81078b0:	46bd      	mov	sp, r7
 81078b2:	bd80      	pop	{r7, pc}

081078b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81078b4:	b580      	push	{r7, lr}
 81078b6:	b084      	sub	sp, #16
 81078b8:	af00      	add	r7, sp, #0
 81078ba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	4a0d      	ldr	r2, [pc, #52]	@ (81078f8 <HAL_RTC_WaitForSynchro+0x44>)
 81078c2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 81078c4:	f7fa fddc 	bl	8102480 <HAL_GetTick>
 81078c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81078ca:	e009      	b.n	81078e0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 81078cc:	f7fa fdd8 	bl	8102480 <HAL_GetTick>
 81078d0:	4602      	mov	r2, r0
 81078d2:	68fb      	ldr	r3, [r7, #12]
 81078d4:	1ad3      	subs	r3, r2, r3
 81078d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81078da:	d901      	bls.n	81078e0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 81078dc:	2303      	movs	r3, #3
 81078de:	e007      	b.n	81078f0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81078e0:	687b      	ldr	r3, [r7, #4]
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	68db      	ldr	r3, [r3, #12]
 81078e6:	f003 0320 	and.w	r3, r3, #32
 81078ea:	2b00      	cmp	r3, #0
 81078ec:	d0ee      	beq.n	81078cc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 81078ee:	2300      	movs	r3, #0
}
 81078f0:	4618      	mov	r0, r3
 81078f2:	3710      	adds	r7, #16
 81078f4:	46bd      	mov	sp, r7
 81078f6:	bd80      	pop	{r7, pc}
 81078f8:	0003ff5f 	.word	0x0003ff5f

081078fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 81078fc:	b580      	push	{r7, lr}
 81078fe:	b084      	sub	sp, #16
 8107900:	af00      	add	r7, sp, #0
 8107902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107904:	2300      	movs	r3, #0
 8107906:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	68db      	ldr	r3, [r3, #12]
 810790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107912:	2b00      	cmp	r3, #0
 8107914:	d120      	bne.n	8107958 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8107916:	687b      	ldr	r3, [r7, #4]
 8107918:	681b      	ldr	r3, [r3, #0]
 810791a:	f04f 32ff 	mov.w	r2, #4294967295
 810791e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8107920:	f7fa fdae 	bl	8102480 <HAL_GetTick>
 8107924:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8107926:	e00d      	b.n	8107944 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8107928:	f7fa fdaa 	bl	8102480 <HAL_GetTick>
 810792c:	4602      	mov	r2, r0
 810792e:	68bb      	ldr	r3, [r7, #8]
 8107930:	1ad3      	subs	r3, r2, r3
 8107932:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8107936:	d905      	bls.n	8107944 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8107938:	2303      	movs	r3, #3
 810793a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810793c:	687b      	ldr	r3, [r7, #4]
 810793e:	2203      	movs	r2, #3
 8107940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8107944:	687b      	ldr	r3, [r7, #4]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	68db      	ldr	r3, [r3, #12]
 810794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810794e:	2b00      	cmp	r3, #0
 8107950:	d102      	bne.n	8107958 <RTC_EnterInitMode+0x5c>
 8107952:	7bfb      	ldrb	r3, [r7, #15]
 8107954:	2b03      	cmp	r3, #3
 8107956:	d1e7      	bne.n	8107928 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8107958:	7bfb      	ldrb	r3, [r7, #15]
}
 810795a:	4618      	mov	r0, r3
 810795c:	3710      	adds	r7, #16
 810795e:	46bd      	mov	sp, r7
 8107960:	bd80      	pop	{r7, pc}
	...

08107964 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8107964:	b580      	push	{r7, lr}
 8107966:	b084      	sub	sp, #16
 8107968:	af00      	add	r7, sp, #0
 810796a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810796c:	2300      	movs	r3, #0
 810796e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8107970:	4b1a      	ldr	r3, [pc, #104]	@ (81079dc <RTC_ExitInitMode+0x78>)
 8107972:	68db      	ldr	r3, [r3, #12]
 8107974:	4a19      	ldr	r2, [pc, #100]	@ (81079dc <RTC_ExitInitMode+0x78>)
 8107976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810797a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810797c:	4b17      	ldr	r3, [pc, #92]	@ (81079dc <RTC_ExitInitMode+0x78>)
 810797e:	689b      	ldr	r3, [r3, #8]
 8107980:	f003 0320 	and.w	r3, r3, #32
 8107984:	2b00      	cmp	r3, #0
 8107986:	d10c      	bne.n	81079a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8107988:	6878      	ldr	r0, [r7, #4]
 810798a:	f7ff ff93 	bl	81078b4 <HAL_RTC_WaitForSynchro>
 810798e:	4603      	mov	r3, r0
 8107990:	2b00      	cmp	r3, #0
 8107992:	d01e      	beq.n	81079d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	2203      	movs	r2, #3
 8107998:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 810799c:	2303      	movs	r3, #3
 810799e:	73fb      	strb	r3, [r7, #15]
 81079a0:	e017      	b.n	81079d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81079a2:	4b0e      	ldr	r3, [pc, #56]	@ (81079dc <RTC_ExitInitMode+0x78>)
 81079a4:	689b      	ldr	r3, [r3, #8]
 81079a6:	4a0d      	ldr	r2, [pc, #52]	@ (81079dc <RTC_ExitInitMode+0x78>)
 81079a8:	f023 0320 	bic.w	r3, r3, #32
 81079ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81079ae:	6878      	ldr	r0, [r7, #4]
 81079b0:	f7ff ff80 	bl	81078b4 <HAL_RTC_WaitForSynchro>
 81079b4:	4603      	mov	r3, r0
 81079b6:	2b00      	cmp	r3, #0
 81079b8:	d005      	beq.n	81079c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	2203      	movs	r2, #3
 81079be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 81079c2:	2303      	movs	r3, #3
 81079c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81079c6:	4b05      	ldr	r3, [pc, #20]	@ (81079dc <RTC_ExitInitMode+0x78>)
 81079c8:	689b      	ldr	r3, [r3, #8]
 81079ca:	4a04      	ldr	r2, [pc, #16]	@ (81079dc <RTC_ExitInitMode+0x78>)
 81079cc:	f043 0320 	orr.w	r3, r3, #32
 81079d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 81079d2:	7bfb      	ldrb	r3, [r7, #15]
}
 81079d4:	4618      	mov	r0, r3
 81079d6:	3710      	adds	r7, #16
 81079d8:	46bd      	mov	sp, r7
 81079da:	bd80      	pop	{r7, pc}
 81079dc:	58004000 	.word	0x58004000

081079e0 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 81079e0:	b480      	push	{r7}
 81079e2:	b085      	sub	sp, #20
 81079e4:	af00      	add	r7, sp, #0
 81079e6:	6078      	str	r0, [r7, #4]
 81079e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 81079f0:	2b01      	cmp	r3, #1
 81079f2:	d101      	bne.n	81079f8 <HAL_RTCEx_SetTamper+0x18>
 81079f4:	2302      	movs	r3, #2
 81079f6:	e0cc      	b.n	8107b92 <HAL_RTCEx_SetTamper+0x1b2>
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	2201      	movs	r2, #1
 81079fc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8107a00:	687b      	ldr	r3, [r7, #4]
 8107a02:	2202      	movs	r2, #2
 8107a04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8107a08:	687b      	ldr	r3, [r7, #4]
 8107a0a:	681b      	ldr	r3, [r3, #0]
 8107a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107a0e:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8107a10:	683b      	ldr	r3, [r7, #0]
 8107a12:	681b      	ldr	r3, [r3, #0]
 8107a14:	68fa      	ldr	r2, [r7, #12]
 8107a16:	4313      	orrs	r3, r2
 8107a18:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8107a1a:	683b      	ldr	r3, [r7, #0]
 8107a1c:	689b      	ldr	r3, [r3, #8]
 8107a1e:	2b08      	cmp	r3, #8
 8107a20:	d003      	beq.n	8107a2a <HAL_RTCEx_SetTamper+0x4a>
 8107a22:	683b      	ldr	r3, [r7, #0]
 8107a24:	689b      	ldr	r3, [r3, #8]
 8107a26:	2b02      	cmp	r3, #2
 8107a28:	d106      	bne.n	8107a38 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8107a2a:	683b      	ldr	r3, [r7, #0]
 8107a2c:	681b      	ldr	r3, [r3, #0]
 8107a2e:	005b      	lsls	r3, r3, #1
 8107a30:	68fa      	ldr	r2, [r7, #12]
 8107a32:	4313      	orrs	r3, r2
 8107a34:	60fb      	str	r3, [r7, #12]
 8107a36:	e006      	b.n	8107a46 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8107a38:	683b      	ldr	r3, [r7, #0]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	005b      	lsls	r3, r3, #1
 8107a3e:	43db      	mvns	r3, r3
 8107a40:	68fa      	ldr	r2, [r7, #12]
 8107a42:	4013      	ands	r3, r2
 8107a44:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8107a46:	683b      	ldr	r3, [r7, #0]
 8107a48:	68db      	ldr	r3, [r3, #12]
 8107a4a:	2b00      	cmp	r3, #0
 8107a4c:	d01e      	beq.n	8107a8c <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107a4e:	683b      	ldr	r3, [r7, #0]
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	f003 0301 	and.w	r3, r3, #1
 8107a56:	2b00      	cmp	r3, #0
 8107a58:	d003      	beq.n	8107a62 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8107a5a:	68fb      	ldr	r3, [r7, #12]
 8107a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107a60:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107a62:	683b      	ldr	r3, [r7, #0]
 8107a64:	681b      	ldr	r3, [r3, #0]
 8107a66:	f003 0308 	and.w	r3, r3, #8
 8107a6a:	2b00      	cmp	r3, #0
 8107a6c:	d003      	beq.n	8107a76 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8107a6e:	68fb      	ldr	r3, [r7, #12]
 8107a70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8107a74:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107a76:	683b      	ldr	r3, [r7, #0]
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	f003 0320 	and.w	r3, r3, #32
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	d022      	beq.n	8107ac8 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8107a82:	68fb      	ldr	r3, [r7, #12]
 8107a84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8107a88:	60fb      	str	r3, [r7, #12]
 8107a8a:	e01d      	b.n	8107ac8 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107a8c:	683b      	ldr	r3, [r7, #0]
 8107a8e:	681b      	ldr	r3, [r3, #0]
 8107a90:	f003 0301 	and.w	r3, r3, #1
 8107a94:	2b00      	cmp	r3, #0
 8107a96:	d003      	beq.n	8107aa0 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8107a98:	68fb      	ldr	r3, [r7, #12]
 8107a9a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107a9e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107aa0:	683b      	ldr	r3, [r7, #0]
 8107aa2:	681b      	ldr	r3, [r3, #0]
 8107aa4:	f003 0308 	and.w	r3, r3, #8
 8107aa8:	2b00      	cmp	r3, #0
 8107aaa:	d003      	beq.n	8107ab4 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8107aac:	68fb      	ldr	r3, [r7, #12]
 8107aae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8107ab2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107ab4:	683b      	ldr	r3, [r7, #0]
 8107ab6:	681b      	ldr	r3, [r3, #0]
 8107ab8:	f003 0320 	and.w	r3, r3, #32
 8107abc:	2b00      	cmp	r3, #0
 8107abe:	d003      	beq.n	8107ac8 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8107ac0:	68fb      	ldr	r3, [r7, #12]
 8107ac2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8107ac6:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8107ac8:	683b      	ldr	r3, [r7, #0]
 8107aca:	691b      	ldr	r3, [r3, #16]
 8107acc:	2b00      	cmp	r3, #0
 8107ace:	d01e      	beq.n	8107b0e <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107ad0:	683b      	ldr	r3, [r7, #0]
 8107ad2:	681b      	ldr	r3, [r3, #0]
 8107ad4:	f003 0301 	and.w	r3, r3, #1
 8107ad8:	2b00      	cmp	r3, #0
 8107ada:	d003      	beq.n	8107ae4 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8107adc:	68fb      	ldr	r3, [r7, #12]
 8107ade:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8107ae2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107ae4:	683b      	ldr	r3, [r7, #0]
 8107ae6:	681b      	ldr	r3, [r3, #0]
 8107ae8:	f003 0308 	and.w	r3, r3, #8
 8107aec:	2b00      	cmp	r3, #0
 8107aee:	d003      	beq.n	8107af8 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8107af0:	68fb      	ldr	r3, [r7, #12]
 8107af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8107af6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107af8:	683b      	ldr	r3, [r7, #0]
 8107afa:	681b      	ldr	r3, [r3, #0]
 8107afc:	f003 0320 	and.w	r3, r3, #32
 8107b00:	2b00      	cmp	r3, #0
 8107b02:	d022      	beq.n	8107b4a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8107b04:	68fb      	ldr	r3, [r7, #12]
 8107b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8107b0a:	60fb      	str	r3, [r7, #12]
 8107b0c:	e01d      	b.n	8107b4a <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8107b0e:	683b      	ldr	r3, [r7, #0]
 8107b10:	681b      	ldr	r3, [r3, #0]
 8107b12:	f003 0301 	and.w	r3, r3, #1
 8107b16:	2b00      	cmp	r3, #0
 8107b18:	d003      	beq.n	8107b22 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8107b1a:	68fb      	ldr	r3, [r7, #12]
 8107b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8107b20:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8107b22:	683b      	ldr	r3, [r7, #0]
 8107b24:	681b      	ldr	r3, [r3, #0]
 8107b26:	f003 0308 	and.w	r3, r3, #8
 8107b2a:	2b00      	cmp	r3, #0
 8107b2c:	d003      	beq.n	8107b36 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8107b2e:	68fb      	ldr	r3, [r7, #12]
 8107b30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8107b34:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8107b36:	683b      	ldr	r3, [r7, #0]
 8107b38:	681b      	ldr	r3, [r3, #0]
 8107b3a:	f003 0320 	and.w	r3, r3, #32
 8107b3e:	2b00      	cmp	r3, #0
 8107b40:	d003      	beq.n	8107b4a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8107b42:	68fb      	ldr	r3, [r7, #12]
 8107b44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107b48:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8107b4a:	68fb      	ldr	r3, [r7, #12]
 8107b4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107b50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107b54:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107b56:	683b      	ldr	r3, [r7, #0]
 8107b58:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8107b5a:	683b      	ldr	r3, [r7, #0]
 8107b5c:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107b5e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8107b60:	683b      	ldr	r3, [r7, #0]
 8107b62:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8107b64:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8107b66:	683b      	ldr	r3, [r7, #0]
 8107b68:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8107b6a:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8107b6c:	683b      	ldr	r3, [r7, #0]
 8107b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8107b70:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8107b72:	68fa      	ldr	r2, [r7, #12]
 8107b74:	4313      	orrs	r3, r2
 8107b76:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	681b      	ldr	r3, [r3, #0]
 8107b7c:	68fa      	ldr	r2, [r7, #12]
 8107b7e:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	2201      	movs	r2, #1
 8107b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	2200      	movs	r2, #0
 8107b8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8107b90:	2300      	movs	r3, #0
}
 8107b92:	4618      	mov	r0, r3
 8107b94:	3714      	adds	r7, #20
 8107b96:	46bd      	mov	sp, r7
 8107b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b9c:	4770      	bx	lr
	...

08107ba0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8107ba0:	b580      	push	{r7, lr}
 8107ba2:	b08a      	sub	sp, #40	@ 0x28
 8107ba4:	af00      	add	r7, sp, #0
 8107ba6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8107ba8:	687b      	ldr	r3, [r7, #4]
 8107baa:	2b00      	cmp	r3, #0
 8107bac:	d101      	bne.n	8107bb2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8107bae:	2301      	movs	r3, #1
 8107bb0:	e290      	b.n	81080d4 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107bb2:	f7fa fc95 	bl	81024e0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8107bbc:	2b01      	cmp	r3, #1
 8107bbe:	d113      	bne.n	8107be8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	681b      	ldr	r3, [r3, #0]
 8107bc4:	4a96      	ldr	r2, [pc, #600]	@ (8107e20 <HAL_SAI_Init+0x280>)
 8107bc6:	4293      	cmp	r3, r2
 8107bc8:	d004      	beq.n	8107bd4 <HAL_SAI_Init+0x34>
 8107bca:	687b      	ldr	r3, [r7, #4]
 8107bcc:	681b      	ldr	r3, [r3, #0]
 8107bce:	4a95      	ldr	r2, [pc, #596]	@ (8107e24 <HAL_SAI_Init+0x284>)
 8107bd0:	4293      	cmp	r3, r2
 8107bd2:	d107      	bne.n	8107be4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107bd8:	2b01      	cmp	r3, #1
 8107bda:	d103      	bne.n	8107be4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107be0:	2b00      	cmp	r3, #0
 8107be2:	d001      	beq.n	8107be8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8107be4:	2301      	movs	r3, #1
 8107be6:	e275      	b.n	81080d4 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	681b      	ldr	r3, [r3, #0]
 8107bec:	4a8c      	ldr	r2, [pc, #560]	@ (8107e20 <HAL_SAI_Init+0x280>)
 8107bee:	4293      	cmp	r3, r2
 8107bf0:	d004      	beq.n	8107bfc <HAL_SAI_Init+0x5c>
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	681b      	ldr	r3, [r3, #0]
 8107bf6:	4a8c      	ldr	r2, [pc, #560]	@ (8107e28 <HAL_SAI_Init+0x288>)
 8107bf8:	4293      	cmp	r3, r2
 8107bfa:	d102      	bne.n	8107c02 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8107bfc:	4b8b      	ldr	r3, [pc, #556]	@ (8107e2c <HAL_SAI_Init+0x28c>)
 8107bfe:	61bb      	str	r3, [r7, #24]
 8107c00:	e028      	b.n	8107c54 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107c02:	687b      	ldr	r3, [r7, #4]
 8107c04:	681b      	ldr	r3, [r3, #0]
 8107c06:	4a8a      	ldr	r2, [pc, #552]	@ (8107e30 <HAL_SAI_Init+0x290>)
 8107c08:	4293      	cmp	r3, r2
 8107c0a:	d004      	beq.n	8107c16 <HAL_SAI_Init+0x76>
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	681b      	ldr	r3, [r3, #0]
 8107c10:	4a88      	ldr	r2, [pc, #544]	@ (8107e34 <HAL_SAI_Init+0x294>)
 8107c12:	4293      	cmp	r3, r2
 8107c14:	d102      	bne.n	8107c1c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8107c16:	4b88      	ldr	r3, [pc, #544]	@ (8107e38 <HAL_SAI_Init+0x298>)
 8107c18:	61bb      	str	r3, [r7, #24]
 8107c1a:	e01b      	b.n	8107c54 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	681b      	ldr	r3, [r3, #0]
 8107c20:	4a86      	ldr	r2, [pc, #536]	@ (8107e3c <HAL_SAI_Init+0x29c>)
 8107c22:	4293      	cmp	r3, r2
 8107c24:	d004      	beq.n	8107c30 <HAL_SAI_Init+0x90>
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	4a85      	ldr	r2, [pc, #532]	@ (8107e40 <HAL_SAI_Init+0x2a0>)
 8107c2c:	4293      	cmp	r3, r2
 8107c2e:	d102      	bne.n	8107c36 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8107c30:	4b84      	ldr	r3, [pc, #528]	@ (8107e44 <HAL_SAI_Init+0x2a4>)
 8107c32:	61bb      	str	r3, [r7, #24]
 8107c34:	e00e      	b.n	8107c54 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	681b      	ldr	r3, [r3, #0]
 8107c3a:	4a7a      	ldr	r2, [pc, #488]	@ (8107e24 <HAL_SAI_Init+0x284>)
 8107c3c:	4293      	cmp	r3, r2
 8107c3e:	d004      	beq.n	8107c4a <HAL_SAI_Init+0xaa>
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	4a80      	ldr	r2, [pc, #512]	@ (8107e48 <HAL_SAI_Init+0x2a8>)
 8107c46:	4293      	cmp	r3, r2
 8107c48:	d102      	bne.n	8107c50 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8107c4a:	4b80      	ldr	r3, [pc, #512]	@ (8107e4c <HAL_SAI_Init+0x2ac>)
 8107c4c:	61bb      	str	r3, [r7, #24]
 8107c4e:	e001      	b.n	8107c54 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8107c50:	2301      	movs	r3, #1
 8107c52:	e23f      	b.n	81080d4 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8107c5a:	b2db      	uxtb	r3, r3
 8107c5c:	2b00      	cmp	r3, #0
 8107c5e:	d106      	bne.n	8107c6e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	2200      	movs	r2, #0
 8107c64:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8107c68:	6878      	ldr	r0, [r7, #4]
 8107c6a:	f7fa fa43 	bl	81020f4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8107c6e:	6878      	ldr	r0, [r7, #4]
 8107c70:	f000 fa40 	bl	81080f4 <SAI_Disable>
 8107c74:	4603      	mov	r3, r0
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	d001      	beq.n	8107c7e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8107c7a:	2301      	movs	r3, #1
 8107c7c:	e22a      	b.n	81080d4 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	2202      	movs	r2, #2
 8107c82:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8107c86:	687b      	ldr	r3, [r7, #4]
 8107c88:	68db      	ldr	r3, [r3, #12]
 8107c8a:	2b02      	cmp	r3, #2
 8107c8c:	d00c      	beq.n	8107ca8 <HAL_SAI_Init+0x108>
 8107c8e:	2b02      	cmp	r3, #2
 8107c90:	d80d      	bhi.n	8107cae <HAL_SAI_Init+0x10e>
 8107c92:	2b00      	cmp	r3, #0
 8107c94:	d002      	beq.n	8107c9c <HAL_SAI_Init+0xfc>
 8107c96:	2b01      	cmp	r3, #1
 8107c98:	d003      	beq.n	8107ca2 <HAL_SAI_Init+0x102>
 8107c9a:	e008      	b.n	8107cae <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8107c9c:	2300      	movs	r3, #0
 8107c9e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107ca0:	e008      	b.n	8107cb4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8107ca2:	2310      	movs	r3, #16
 8107ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107ca6:	e005      	b.n	8107cb4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8107ca8:	2320      	movs	r3, #32
 8107caa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107cac:	e002      	b.n	8107cb4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8107cae:	2300      	movs	r3, #0
 8107cb0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107cb2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	689b      	ldr	r3, [r3, #8]
 8107cb8:	2b05      	cmp	r3, #5
 8107cba:	d832      	bhi.n	8107d22 <HAL_SAI_Init+0x182>
 8107cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8107cc4 <HAL_SAI_Init+0x124>)
 8107cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107cc2:	bf00      	nop
 8107cc4:	08107cdd 	.word	0x08107cdd
 8107cc8:	08107ce3 	.word	0x08107ce3
 8107ccc:	08107ceb 	.word	0x08107ceb
 8107cd0:	08107cf3 	.word	0x08107cf3
 8107cd4:	08107d03 	.word	0x08107d03
 8107cd8:	08107d13 	.word	0x08107d13
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8107cdc:	2300      	movs	r3, #0
 8107cde:	61fb      	str	r3, [r7, #28]
      break;
 8107ce0:	e022      	b.n	8107d28 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8107ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8107ce6:	61fb      	str	r3, [r7, #28]
      break;
 8107ce8:	e01e      	b.n	8107d28 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107cea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107cee:	61fb      	str	r3, [r7, #28]
      break;
 8107cf0:	e01a      	b.n	8107d28 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107cf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107cf6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8107cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107cfa:	f043 0301 	orr.w	r3, r3, #1
 8107cfe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107d00:	e012      	b.n	8107d28 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107d02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107d06:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8107d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107d0a:	f043 0302 	orr.w	r3, r3, #2
 8107d0e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107d10:	e00a      	b.n	8107d28 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107d12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107d16:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8107d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107d1a:	f043 0303 	orr.w	r3, r3, #3
 8107d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8107d20:	e002      	b.n	8107d28 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8107d22:	2300      	movs	r3, #0
 8107d24:	61fb      	str	r3, [r7, #28]
      break;
 8107d26:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8107d28:	69bb      	ldr	r3, [r7, #24]
 8107d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107d2c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	6a1b      	ldr	r3, [r3, #32]
 8107d32:	2b00      	cmp	r3, #0
 8107d34:	f000 80c5 	beq.w	8107ec2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8107d38:	2300      	movs	r3, #0
 8107d3a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107d3c:	687b      	ldr	r3, [r7, #4]
 8107d3e:	681b      	ldr	r3, [r3, #0]
 8107d40:	4a37      	ldr	r2, [pc, #220]	@ (8107e20 <HAL_SAI_Init+0x280>)
 8107d42:	4293      	cmp	r3, r2
 8107d44:	d004      	beq.n	8107d50 <HAL_SAI_Init+0x1b0>
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	681b      	ldr	r3, [r3, #0]
 8107d4a:	4a37      	ldr	r2, [pc, #220]	@ (8107e28 <HAL_SAI_Init+0x288>)
 8107d4c:	4293      	cmp	r3, r2
 8107d4e:	d106      	bne.n	8107d5e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8107d50:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8107d54:	f04f 0100 	mov.w	r1, #0
 8107d58:	f7fe fa36 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8107d5c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	681b      	ldr	r3, [r3, #0]
 8107d62:	4a33      	ldr	r2, [pc, #204]	@ (8107e30 <HAL_SAI_Init+0x290>)
 8107d64:	4293      	cmp	r3, r2
 8107d66:	d004      	beq.n	8107d72 <HAL_SAI_Init+0x1d2>
 8107d68:	687b      	ldr	r3, [r7, #4]
 8107d6a:	681b      	ldr	r3, [r3, #0]
 8107d6c:	4a31      	ldr	r2, [pc, #196]	@ (8107e34 <HAL_SAI_Init+0x294>)
 8107d6e:	4293      	cmp	r3, r2
 8107d70:	d106      	bne.n	8107d80 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8107d72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8107d76:	f04f 0100 	mov.w	r1, #0
 8107d7a:	f7fe fa25 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8107d7e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	4a2d      	ldr	r2, [pc, #180]	@ (8107e3c <HAL_SAI_Init+0x29c>)
 8107d86:	4293      	cmp	r3, r2
 8107d88:	d004      	beq.n	8107d94 <HAL_SAI_Init+0x1f4>
 8107d8a:	687b      	ldr	r3, [r7, #4]
 8107d8c:	681b      	ldr	r3, [r3, #0]
 8107d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8107e40 <HAL_SAI_Init+0x2a0>)
 8107d90:	4293      	cmp	r3, r2
 8107d92:	d106      	bne.n	8107da2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8107d94:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8107d98:	f04f 0100 	mov.w	r1, #0
 8107d9c:	f7fe fa14 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8107da0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	4a1f      	ldr	r2, [pc, #124]	@ (8107e24 <HAL_SAI_Init+0x284>)
 8107da8:	4293      	cmp	r3, r2
 8107daa:	d106      	bne.n	8107dba <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8107dac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8107db0:	f04f 0100 	mov.w	r1, #0
 8107db4:	f7fe fa08 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8107db8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	681b      	ldr	r3, [r3, #0]
 8107dbe:	4a22      	ldr	r2, [pc, #136]	@ (8107e48 <HAL_SAI_Init+0x2a8>)
 8107dc0:	4293      	cmp	r3, r2
 8107dc2:	d106      	bne.n	8107dd2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8107dc4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8107dc8:	f04f 0100 	mov.w	r1, #0
 8107dcc:	f7fe f9fc 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8107dd0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8107dd2:	687b      	ldr	r3, [r7, #4]
 8107dd4:	699b      	ldr	r3, [r3, #24]
 8107dd6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8107dda:	d139      	bne.n	8107e50 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107ddc:	687b      	ldr	r3, [r7, #4]
 8107dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107de0:	2b04      	cmp	r3, #4
 8107de2:	d102      	bne.n	8107dea <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8107de4:	2340      	movs	r3, #64	@ 0x40
 8107de6:	60fb      	str	r3, [r7, #12]
 8107de8:	e00a      	b.n	8107e00 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107dee:	2b08      	cmp	r3, #8
 8107df0:	d103      	bne.n	8107dfa <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8107df2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107df6:	60fb      	str	r3, [r7, #12]
 8107df8:	e002      	b.n	8107e00 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107dfe:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8107e00:	697a      	ldr	r2, [r7, #20]
 8107e02:	4613      	mov	r3, r2
 8107e04:	009b      	lsls	r3, r3, #2
 8107e06:	4413      	add	r3, r2
 8107e08:	005b      	lsls	r3, r3, #1
 8107e0a:	4619      	mov	r1, r3
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	6a1b      	ldr	r3, [r3, #32]
 8107e10:	68fa      	ldr	r2, [r7, #12]
 8107e12:	fb02 f303 	mul.w	r3, r2, r3
 8107e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8107e1a:	613b      	str	r3, [r7, #16]
 8107e1c:	e030      	b.n	8107e80 <HAL_SAI_Init+0x2e0>
 8107e1e:	bf00      	nop
 8107e20:	40015804 	.word	0x40015804
 8107e24:	58005404 	.word	0x58005404
 8107e28:	40015824 	.word	0x40015824
 8107e2c:	40015800 	.word	0x40015800
 8107e30:	40015c04 	.word	0x40015c04
 8107e34:	40015c24 	.word	0x40015c24
 8107e38:	40015c00 	.word	0x40015c00
 8107e3c:	40016004 	.word	0x40016004
 8107e40:	40016024 	.word	0x40016024
 8107e44:	40016000 	.word	0x40016000
 8107e48:	58005424 	.word	0x58005424
 8107e4c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107e58:	d101      	bne.n	8107e5e <HAL_SAI_Init+0x2be>
 8107e5a:	2302      	movs	r3, #2
 8107e5c:	e000      	b.n	8107e60 <HAL_SAI_Init+0x2c0>
 8107e5e:	2301      	movs	r3, #1
 8107e60:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8107e62:	697a      	ldr	r2, [r7, #20]
 8107e64:	4613      	mov	r3, r2
 8107e66:	009b      	lsls	r3, r3, #2
 8107e68:	4413      	add	r3, r2
 8107e6a:	005b      	lsls	r3, r3, #1
 8107e6c:	4619      	mov	r1, r3
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	6a1b      	ldr	r3, [r3, #32]
 8107e72:	68ba      	ldr	r2, [r7, #8]
 8107e74:	fb02 f303 	mul.w	r3, r2, r3
 8107e78:	021b      	lsls	r3, r3, #8
 8107e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8107e7e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8107e80:	693b      	ldr	r3, [r7, #16]
 8107e82:	4a96      	ldr	r2, [pc, #600]	@ (81080dc <HAL_SAI_Init+0x53c>)
 8107e84:	fba2 2303 	umull	r2, r3, r2, r3
 8107e88:	08da      	lsrs	r2, r3, #3
 8107e8a:	687b      	ldr	r3, [r7, #4]
 8107e8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8107e8e:	6939      	ldr	r1, [r7, #16]
 8107e90:	4b92      	ldr	r3, [pc, #584]	@ (81080dc <HAL_SAI_Init+0x53c>)
 8107e92:	fba3 2301 	umull	r2, r3, r3, r1
 8107e96:	08da      	lsrs	r2, r3, #3
 8107e98:	4613      	mov	r3, r2
 8107e9a:	009b      	lsls	r3, r3, #2
 8107e9c:	4413      	add	r3, r2
 8107e9e:	005b      	lsls	r3, r3, #1
 8107ea0:	1aca      	subs	r2, r1, r3
 8107ea2:	2a08      	cmp	r2, #8
 8107ea4:	d904      	bls.n	8107eb0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8107ea6:	687b      	ldr	r3, [r7, #4]
 8107ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107eaa:	1c5a      	adds	r2, r3, #1
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107eb4:	2b04      	cmp	r3, #4
 8107eb6:	d104      	bne.n	8107ec2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107ebc:	085a      	lsrs	r2, r3, #1
 8107ebe:	687b      	ldr	r3, [r7, #4]
 8107ec0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	685b      	ldr	r3, [r3, #4]
 8107ec6:	2b00      	cmp	r3, #0
 8107ec8:	d003      	beq.n	8107ed2 <HAL_SAI_Init+0x332>
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	685b      	ldr	r3, [r3, #4]
 8107ece:	2b02      	cmp	r3, #2
 8107ed0:	d109      	bne.n	8107ee6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107ed6:	2b01      	cmp	r3, #1
 8107ed8:	d101      	bne.n	8107ede <HAL_SAI_Init+0x33e>
 8107eda:	2300      	movs	r3, #0
 8107edc:	e001      	b.n	8107ee2 <HAL_SAI_Init+0x342>
 8107ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107ee2:	623b      	str	r3, [r7, #32]
 8107ee4:	e008      	b.n	8107ef8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8107ee6:	687b      	ldr	r3, [r7, #4]
 8107ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107eea:	2b01      	cmp	r3, #1
 8107eec:	d102      	bne.n	8107ef4 <HAL_SAI_Init+0x354>
 8107eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107ef2:	e000      	b.n	8107ef6 <HAL_SAI_Init+0x356>
 8107ef4:	2300      	movs	r3, #0
 8107ef6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107ef8:	f7fa faf2 	bl	81024e0 <HAL_GetREVID>
 8107efc:	4603      	mov	r3, r0
 8107efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107f02:	d331      	bcc.n	8107f68 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	681b      	ldr	r3, [r3, #0]
 8107f08:	6819      	ldr	r1, [r3, #0]
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	681a      	ldr	r2, [r3, #0]
 8107f0e:	4b74      	ldr	r3, [pc, #464]	@ (81080e0 <HAL_SAI_Init+0x540>)
 8107f10:	400b      	ands	r3, r1
 8107f12:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	681b      	ldr	r3, [r3, #0]
 8107f18:	6819      	ldr	r1, [r3, #0]
 8107f1a:	687b      	ldr	r3, [r7, #4]
 8107f1c:	685a      	ldr	r2, [r3, #4]
 8107f1e:	687b      	ldr	r3, [r7, #4]
 8107f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107f22:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107f24:	687b      	ldr	r3, [r7, #4]
 8107f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107f28:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f2e:	431a      	orrs	r2, r3
 8107f30:	6a3b      	ldr	r3, [r7, #32]
 8107f32:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107f34:	69fb      	ldr	r3, [r7, #28]
 8107f36:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107f38:	687b      	ldr	r3, [r7, #4]
 8107f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8107f3c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	695b      	ldr	r3, [r3, #20]
 8107f42:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107f44:	687b      	ldr	r3, [r7, #4]
 8107f46:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107f48:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107f4e:	051b      	lsls	r3, r3, #20
 8107f50:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107f56:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8107f58:	687b      	ldr	r3, [r7, #4]
 8107f5a:	691b      	ldr	r3, [r3, #16]
 8107f5c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	430a      	orrs	r2, r1
 8107f64:	601a      	str	r2, [r3, #0]
 8107f66:	e02d      	b.n	8107fc4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	681b      	ldr	r3, [r3, #0]
 8107f6c:	6819      	ldr	r1, [r3, #0]
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	681a      	ldr	r2, [r3, #0]
 8107f72:	4b5c      	ldr	r3, [pc, #368]	@ (81080e4 <HAL_SAI_Init+0x544>)
 8107f74:	400b      	ands	r3, r1
 8107f76:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	681b      	ldr	r3, [r3, #0]
 8107f7c:	6819      	ldr	r1, [r3, #0]
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	685a      	ldr	r2, [r3, #4]
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107f86:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107f8c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107f92:	431a      	orrs	r2, r3
 8107f94:	6a3b      	ldr	r3, [r7, #32]
 8107f96:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107f98:	69fb      	ldr	r3, [r7, #28]
 8107f9a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8107fa0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107fa2:	687b      	ldr	r3, [r7, #4]
 8107fa4:	695b      	ldr	r3, [r3, #20]
 8107fa6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107fac:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107fb2:	051b      	lsls	r3, r3, #20
 8107fb4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107fba:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	430a      	orrs	r2, r1
 8107fc2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8107fc4:	687b      	ldr	r3, [r7, #4]
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	685b      	ldr	r3, [r3, #4]
 8107fca:	687a      	ldr	r2, [r7, #4]
 8107fcc:	6812      	ldr	r2, [r2, #0]
 8107fce:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8107fd2:	f023 030f 	bic.w	r3, r3, #15
 8107fd6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	6859      	ldr	r1, [r3, #4]
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	69da      	ldr	r2, [r3, #28]
 8107fe2:	687b      	ldr	r3, [r7, #4]
 8107fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107fe6:	431a      	orrs	r2, r3
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107fec:	431a      	orrs	r2, r3
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	430a      	orrs	r2, r1
 8107ff4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	681b      	ldr	r3, [r3, #0]
 8107ffa:	6899      	ldr	r1, [r3, #8]
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	681a      	ldr	r2, [r3, #0]
 8108000:	4b39      	ldr	r3, [pc, #228]	@ (81080e8 <HAL_SAI_Init+0x548>)
 8108002:	400b      	ands	r3, r1
 8108004:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108006:	687b      	ldr	r3, [r7, #4]
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	6899      	ldr	r1, [r3, #8]
 810800c:	687b      	ldr	r3, [r7, #4]
 810800e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108010:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108016:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 810801c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8108022:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8108024:	687b      	ldr	r3, [r7, #4]
 8108026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108028:	3b01      	subs	r3, #1
 810802a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 810802c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810802e:	687b      	ldr	r3, [r7, #4]
 8108030:	681b      	ldr	r3, [r3, #0]
 8108032:	430a      	orrs	r2, r1
 8108034:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	681b      	ldr	r3, [r3, #0]
 810803a:	68d9      	ldr	r1, [r3, #12]
 810803c:	687b      	ldr	r3, [r7, #4]
 810803e:	681a      	ldr	r2, [r3, #0]
 8108040:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8108044:	400b      	ands	r3, r1
 8108046:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108048:	687b      	ldr	r3, [r7, #4]
 810804a:	681b      	ldr	r3, [r3, #0]
 810804c:	68d9      	ldr	r1, [r3, #12]
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8108052:	687b      	ldr	r3, [r7, #4]
 8108054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108056:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810805c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810805e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108064:	3b01      	subs	r3, #1
 8108066:	021b      	lsls	r3, r3, #8
 8108068:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810806a:	687b      	ldr	r3, [r7, #4]
 810806c:	681b      	ldr	r3, [r3, #0]
 810806e:	430a      	orrs	r2, r1
 8108070:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	4a1d      	ldr	r2, [pc, #116]	@ (81080ec <HAL_SAI_Init+0x54c>)
 8108078:	4293      	cmp	r3, r2
 810807a:	d004      	beq.n	8108086 <HAL_SAI_Init+0x4e6>
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	4a1b      	ldr	r2, [pc, #108]	@ (81080f0 <HAL_SAI_Init+0x550>)
 8108082:	4293      	cmp	r3, r2
 8108084:	d119      	bne.n	81080ba <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8108086:	69bb      	ldr	r3, [r7, #24]
 8108088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810808a:	f023 0201 	bic.w	r2, r3, #1
 810808e:	69bb      	ldr	r3, [r7, #24]
 8108090:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8108098:	2b01      	cmp	r3, #1
 810809a:	d10e      	bne.n	81080ba <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81080a4:	3b01      	subs	r3, #1
 81080a6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81080a8:	431a      	orrs	r2, r3
 81080aa:	69bb      	ldr	r3, [r7, #24]
 81080ac:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81080ae:	69bb      	ldr	r3, [r7, #24]
 81080b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81080b2:	f043 0201 	orr.w	r2, r3, #1
 81080b6:	69bb      	ldr	r3, [r7, #24]
 81080b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81080ba:	687b      	ldr	r3, [r7, #4]
 81080bc:	2200      	movs	r2, #0
 81080be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	2201      	movs	r2, #1
 81080c6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	2200      	movs	r2, #0
 81080ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 81080d2:	2300      	movs	r3, #0
}
 81080d4:	4618      	mov	r0, r3
 81080d6:	3728      	adds	r7, #40	@ 0x28
 81080d8:	46bd      	mov	sp, r7
 81080da:	bd80      	pop	{r7, pc}
 81080dc:	cccccccd 	.word	0xcccccccd
 81080e0:	f005c010 	.word	0xf005c010
 81080e4:	f805c010 	.word	0xf805c010
 81080e8:	fff88000 	.word	0xfff88000
 81080ec:	40015804 	.word	0x40015804
 81080f0:	58005404 	.word	0x58005404

081080f4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81080f4:	b480      	push	{r7}
 81080f6:	b085      	sub	sp, #20
 81080f8:	af00      	add	r7, sp, #0
 81080fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81080fc:	4b18      	ldr	r3, [pc, #96]	@ (8108160 <SAI_Disable+0x6c>)
 81080fe:	681b      	ldr	r3, [r3, #0]
 8108100:	4a18      	ldr	r2, [pc, #96]	@ (8108164 <SAI_Disable+0x70>)
 8108102:	fba2 2303 	umull	r2, r3, r2, r3
 8108106:	0b1b      	lsrs	r3, r3, #12
 8108108:	009b      	lsls	r3, r3, #2
 810810a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 810810c:	2300      	movs	r3, #0
 810810e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	681b      	ldr	r3, [r3, #0]
 8108114:	681a      	ldr	r2, [r3, #0]
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	681b      	ldr	r3, [r3, #0]
 810811a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 810811e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8108120:	68fb      	ldr	r3, [r7, #12]
 8108122:	2b00      	cmp	r3, #0
 8108124:	d10a      	bne.n	810813c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810812c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8108136:	2303      	movs	r3, #3
 8108138:	72fb      	strb	r3, [r7, #11]
      break;
 810813a:	e009      	b.n	8108150 <SAI_Disable+0x5c>
    }
    count--;
 810813c:	68fb      	ldr	r3, [r7, #12]
 810813e:	3b01      	subs	r3, #1
 8108140:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	681b      	ldr	r3, [r3, #0]
 8108146:	681b      	ldr	r3, [r3, #0]
 8108148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810814c:	2b00      	cmp	r3, #0
 810814e:	d1e7      	bne.n	8108120 <SAI_Disable+0x2c>

  return status;
 8108150:	7afb      	ldrb	r3, [r7, #11]
}
 8108152:	4618      	mov	r0, r3
 8108154:	3714      	adds	r7, #20
 8108156:	46bd      	mov	sp, r7
 8108158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810815c:	4770      	bx	lr
 810815e:	bf00      	nop
 8108160:	10000000 	.word	0x10000000
 8108164:	95cbec1b 	.word	0x95cbec1b

08108168 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8108168:	b580      	push	{r7, lr}
 810816a:	b08a      	sub	sp, #40	@ 0x28
 810816c:	af00      	add	r7, sp, #0
 810816e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	2b00      	cmp	r3, #0
 8108174:	d101      	bne.n	810817a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8108176:	2301      	movs	r3, #1
 8108178:	e075      	b.n	8108266 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810817a:	687b      	ldr	r3, [r7, #4]
 810817c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8108180:	b2db      	uxtb	r3, r3
 8108182:	2b00      	cmp	r3, #0
 8108184:	d105      	bne.n	8108192 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	2200      	movs	r2, #0
 810818a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810818c:	6878      	ldr	r0, [r7, #4]
 810818e:	f7f9 fb9d 	bl	81018cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	2204      	movs	r2, #4
 8108196:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810819a:	6878      	ldr	r0, [r7, #4]
 810819c:	f000 f868 	bl	8108270 <HAL_SD_InitCard>
 81081a0:	4603      	mov	r3, r0
 81081a2:	2b00      	cmp	r3, #0
 81081a4:	d001      	beq.n	81081aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 81081a6:	2301      	movs	r3, #1
 81081a8:	e05d      	b.n	8108266 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 81081aa:	f107 0308 	add.w	r3, r7, #8
 81081ae:	4619      	mov	r1, r3
 81081b0:	6878      	ldr	r0, [r7, #4]
 81081b2:	f000 fa9d 	bl	81086f0 <HAL_SD_GetCardStatus>
 81081b6:	4603      	mov	r3, r0
 81081b8:	2b00      	cmp	r3, #0
 81081ba:	d001      	beq.n	81081c0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81081bc:	2301      	movs	r3, #1
 81081be:	e052      	b.n	8108266 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81081c0:	7e3b      	ldrb	r3, [r7, #24]
 81081c2:	b2db      	uxtb	r3, r3
 81081c4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81081c6:	7e7b      	ldrb	r3, [r7, #25]
 81081c8:	b2db      	uxtb	r3, r3
 81081ca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081d0:	2b01      	cmp	r3, #1
 81081d2:	d10a      	bne.n	81081ea <HAL_SD_Init+0x82>
 81081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81081d6:	2b00      	cmp	r3, #0
 81081d8:	d102      	bne.n	81081e0 <HAL_SD_Init+0x78>
 81081da:	6a3b      	ldr	r3, [r7, #32]
 81081dc:	2b00      	cmp	r3, #0
 81081de:	d004      	beq.n	81081ea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81081e0:	687b      	ldr	r3, [r7, #4]
 81081e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81081e6:	659a      	str	r2, [r3, #88]	@ 0x58
 81081e8:	e00b      	b.n	8108202 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81081ee:	2b01      	cmp	r3, #1
 81081f0:	d104      	bne.n	81081fc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81081f8:	659a      	str	r2, [r3, #88]	@ 0x58
 81081fa:	e002      	b.n	8108202 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	2200      	movs	r2, #0
 8108200:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8108202:	687b      	ldr	r3, [r7, #4]
 8108204:	68db      	ldr	r3, [r3, #12]
 8108206:	4619      	mov	r1, r3
 8108208:	6878      	ldr	r0, [r7, #4]
 810820a:	f000 fb2f 	bl	810886c <HAL_SD_ConfigWideBusOperation>
 810820e:	4603      	mov	r3, r0
 8108210:	2b00      	cmp	r3, #0
 8108212:	d001      	beq.n	8108218 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8108214:	2301      	movs	r3, #1
 8108216:	e026      	b.n	8108266 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8108218:	f7fa f932 	bl	8102480 <HAL_GetTick>
 810821c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810821e:	e011      	b.n	8108244 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8108220:	f7fa f92e 	bl	8102480 <HAL_GetTick>
 8108224:	4602      	mov	r2, r0
 8108226:	69fb      	ldr	r3, [r7, #28]
 8108228:	1ad3      	subs	r3, r2, r3
 810822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810822e:	d109      	bne.n	8108244 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8108230:	687b      	ldr	r3, [r7, #4]
 8108232:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8108236:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	2201      	movs	r2, #1
 810823c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8108240:	2303      	movs	r3, #3
 8108242:	e010      	b.n	8108266 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108244:	6878      	ldr	r0, [r7, #4]
 8108246:	f000 fc23 	bl	8108a90 <HAL_SD_GetCardState>
 810824a:	4603      	mov	r3, r0
 810824c:	2b04      	cmp	r3, #4
 810824e:	d1e7      	bne.n	8108220 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	2200      	movs	r2, #0
 8108254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8108256:	687b      	ldr	r3, [r7, #4]
 8108258:	2200      	movs	r2, #0
 810825a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	2201      	movs	r2, #1
 8108260:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8108264:	2300      	movs	r3, #0
}
 8108266:	4618      	mov	r0, r3
 8108268:	3728      	adds	r7, #40	@ 0x28
 810826a:	46bd      	mov	sp, r7
 810826c:	bd80      	pop	{r7, pc}
	...

08108270 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8108270:	b590      	push	{r4, r7, lr}
 8108272:	b08d      	sub	sp, #52	@ 0x34
 8108274:	af02      	add	r7, sp, #8
 8108276:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8108278:	2300      	movs	r3, #0
 810827a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810827c:	2300      	movs	r3, #0
 810827e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8108280:	2300      	movs	r3, #0
 8108282:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8108284:	2300      	movs	r3, #0
 8108286:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108288:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 810828c:	f04f 0100 	mov.w	r1, #0
 8108290:	f7fd ff9a 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8108294:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8108296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108298:	2b00      	cmp	r3, #0
 810829a:	d109      	bne.n	81082b0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 810829c:	687b      	ldr	r3, [r7, #4]
 810829e:	2201      	movs	r2, #1
 81082a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 81082aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81082ac:	2301      	movs	r3, #1
 81082ae:	e070      	b.n	8108392 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81082b2:	0a1b      	lsrs	r3, r3, #8
 81082b4:	4a39      	ldr	r2, [pc, #228]	@ (810839c <HAL_SD_InitCard+0x12c>)
 81082b6:	fba2 2303 	umull	r2, r3, r2, r3
 81082ba:	091b      	lsrs	r3, r3, #4
 81082bc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81082be:	687b      	ldr	r3, [r7, #4]
 81082c0:	681c      	ldr	r4, [r3, #0]
 81082c2:	466a      	mov	r2, sp
 81082c4:	f107 0318 	add.w	r3, r7, #24
 81082c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 81082cc:	e882 0003 	stmia.w	r2, {r0, r1}
 81082d0:	f107 030c 	add.w	r3, r7, #12
 81082d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81082d6:	4620      	mov	r0, r4
 81082d8:	f003 fb0e 	bl	810b8f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	681b      	ldr	r3, [r3, #0]
 81082e0:	4618      	mov	r0, r3
 81082e2:	f003 fb40 	bl	810b966 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 81082e6:	69fb      	ldr	r3, [r7, #28]
 81082e8:	2b00      	cmp	r3, #0
 81082ea:	d005      	beq.n	81082f8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81082ec:	69fb      	ldr	r3, [r7, #28]
 81082ee:	005b      	lsls	r3, r3, #1
 81082f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81082f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81082f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 81082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81082fa:	2b00      	cmp	r3, #0
 81082fc:	d007      	beq.n	810830e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81082fe:	4a28      	ldr	r2, [pc, #160]	@ (81083a0 <HAL_SD_InitCard+0x130>)
 8108300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108302:	fbb2 f3f3 	udiv	r3, r2, r3
 8108306:	3301      	adds	r3, #1
 8108308:	4618      	mov	r0, r3
 810830a:	f7fa f8c5 	bl	8102498 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810830e:	6878      	ldr	r0, [r7, #4]
 8108310:	f000 fcac 	bl	8108c6c <SD_PowerON>
 8108314:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108316:	6a3b      	ldr	r3, [r7, #32]
 8108318:	2b00      	cmp	r3, #0
 810831a:	d00b      	beq.n	8108334 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	2201      	movs	r2, #1
 8108320:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108324:	687b      	ldr	r3, [r7, #4]
 8108326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108328:	6a3b      	ldr	r3, [r7, #32]
 810832a:	431a      	orrs	r2, r3
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108330:	2301      	movs	r3, #1
 8108332:	e02e      	b.n	8108392 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8108334:	6878      	ldr	r0, [r7, #4]
 8108336:	f000 fbcb 	bl	8108ad0 <SD_InitCard>
 810833a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810833c:	6a3b      	ldr	r3, [r7, #32]
 810833e:	2b00      	cmp	r3, #0
 8108340:	d00b      	beq.n	810835a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	2201      	movs	r2, #1
 8108346:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810834e:	6a3b      	ldr	r3, [r7, #32]
 8108350:	431a      	orrs	r2, r3
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108356:	2301      	movs	r3, #1
 8108358:	e01b      	b.n	8108392 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108362:	4618      	mov	r0, r3
 8108364:	f003 fb94 	bl	810ba90 <SDMMC_CmdBlockLength>
 8108368:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810836a:	6a3b      	ldr	r3, [r7, #32]
 810836c:	2b00      	cmp	r3, #0
 810836e:	d00f      	beq.n	8108390 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	4a0b      	ldr	r2, [pc, #44]	@ (81083a4 <HAL_SD_InitCard+0x134>)
 8108376:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810837c:	6a3b      	ldr	r3, [r7, #32]
 810837e:	431a      	orrs	r2, r3
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108384:	687b      	ldr	r3, [r7, #4]
 8108386:	2201      	movs	r2, #1
 8108388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810838c:	2301      	movs	r3, #1
 810838e:	e000      	b.n	8108392 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8108390:	2300      	movs	r3, #0
}
 8108392:	4618      	mov	r0, r3
 8108394:	372c      	adds	r7, #44	@ 0x2c
 8108396:	46bd      	mov	sp, r7
 8108398:	bd90      	pop	{r4, r7, pc}
 810839a:	bf00      	nop
 810839c:	014f8b59 	.word	0x014f8b59
 81083a0:	00012110 	.word	0x00012110
 81083a4:	1fe00fff 	.word	0x1fe00fff

081083a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 81083a8:	b480      	push	{r7}
 81083aa:	b083      	sub	sp, #12
 81083ac:	af00      	add	r7, sp, #0
 81083ae:	6078      	str	r0, [r7, #4]
 81083b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 81083b2:	687b      	ldr	r3, [r7, #4]
 81083b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81083b6:	0f9b      	lsrs	r3, r3, #30
 81083b8:	b2da      	uxtb	r2, r3
 81083ba:	683b      	ldr	r3, [r7, #0]
 81083bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81083c2:	0e9b      	lsrs	r3, r3, #26
 81083c4:	b2db      	uxtb	r3, r3
 81083c6:	f003 030f 	and.w	r3, r3, #15
 81083ca:	b2da      	uxtb	r2, r3
 81083cc:	683b      	ldr	r3, [r7, #0]
 81083ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81083d0:	687b      	ldr	r3, [r7, #4]
 81083d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81083d4:	0e1b      	lsrs	r3, r3, #24
 81083d6:	b2db      	uxtb	r3, r3
 81083d8:	f003 0303 	and.w	r3, r3, #3
 81083dc:	b2da      	uxtb	r2, r3
 81083de:	683b      	ldr	r3, [r7, #0]
 81083e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81083e6:	0c1b      	lsrs	r3, r3, #16
 81083e8:	b2da      	uxtb	r2, r3
 81083ea:	683b      	ldr	r3, [r7, #0]
 81083ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81083f2:	0a1b      	lsrs	r3, r3, #8
 81083f4:	b2da      	uxtb	r2, r3
 81083f6:	683b      	ldr	r3, [r7, #0]
 81083f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81083fe:	b2da      	uxtb	r2, r3
 8108400:	683b      	ldr	r3, [r7, #0]
 8108402:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8108404:	687b      	ldr	r3, [r7, #4]
 8108406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108408:	0d1b      	lsrs	r3, r3, #20
 810840a:	b29a      	uxth	r2, r3
 810840c:	683b      	ldr	r3, [r7, #0]
 810840e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8108410:	687b      	ldr	r3, [r7, #4]
 8108412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108414:	0c1b      	lsrs	r3, r3, #16
 8108416:	b2db      	uxtb	r3, r3
 8108418:	f003 030f 	and.w	r3, r3, #15
 810841c:	b2da      	uxtb	r2, r3
 810841e:	683b      	ldr	r3, [r7, #0]
 8108420:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108426:	0bdb      	lsrs	r3, r3, #15
 8108428:	b2db      	uxtb	r3, r3
 810842a:	f003 0301 	and.w	r3, r3, #1
 810842e:	b2da      	uxtb	r2, r3
 8108430:	683b      	ldr	r3, [r7, #0]
 8108432:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108438:	0b9b      	lsrs	r3, r3, #14
 810843a:	b2db      	uxtb	r3, r3
 810843c:	f003 0301 	and.w	r3, r3, #1
 8108440:	b2da      	uxtb	r2, r3
 8108442:	683b      	ldr	r3, [r7, #0]
 8108444:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8108446:	687b      	ldr	r3, [r7, #4]
 8108448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810844a:	0b5b      	lsrs	r3, r3, #13
 810844c:	b2db      	uxtb	r3, r3
 810844e:	f003 0301 	and.w	r3, r3, #1
 8108452:	b2da      	uxtb	r2, r3
 8108454:	683b      	ldr	r3, [r7, #0]
 8108456:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8108458:	687b      	ldr	r3, [r7, #4]
 810845a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810845c:	0b1b      	lsrs	r3, r3, #12
 810845e:	b2db      	uxtb	r3, r3
 8108460:	f003 0301 	and.w	r3, r3, #1
 8108464:	b2da      	uxtb	r2, r3
 8108466:	683b      	ldr	r3, [r7, #0]
 8108468:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810846a:	683b      	ldr	r3, [r7, #0]
 810846c:	2200      	movs	r2, #0
 810846e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8108470:	687b      	ldr	r3, [r7, #4]
 8108472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108474:	2b00      	cmp	r3, #0
 8108476:	d163      	bne.n	8108540 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810847c:	009a      	lsls	r2, r3, #2
 810847e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8108482:	4013      	ands	r3, r2
 8108484:	687a      	ldr	r2, [r7, #4]
 8108486:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8108488:	0f92      	lsrs	r2, r2, #30
 810848a:	431a      	orrs	r2, r3
 810848c:	683b      	ldr	r3, [r7, #0]
 810848e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8108490:	687b      	ldr	r3, [r7, #4]
 8108492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108494:	0edb      	lsrs	r3, r3, #27
 8108496:	b2db      	uxtb	r3, r3
 8108498:	f003 0307 	and.w	r3, r3, #7
 810849c:	b2da      	uxtb	r2, r3
 810849e:	683b      	ldr	r3, [r7, #0]
 81084a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81084a6:	0e1b      	lsrs	r3, r3, #24
 81084a8:	b2db      	uxtb	r3, r3
 81084aa:	f003 0307 	and.w	r3, r3, #7
 81084ae:	b2da      	uxtb	r2, r3
 81084b0:	683b      	ldr	r3, [r7, #0]
 81084b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81084b8:	0d5b      	lsrs	r3, r3, #21
 81084ba:	b2db      	uxtb	r3, r3
 81084bc:	f003 0307 	and.w	r3, r3, #7
 81084c0:	b2da      	uxtb	r2, r3
 81084c2:	683b      	ldr	r3, [r7, #0]
 81084c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 81084c6:	687b      	ldr	r3, [r7, #4]
 81084c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81084ca:	0c9b      	lsrs	r3, r3, #18
 81084cc:	b2db      	uxtb	r3, r3
 81084ce:	f003 0307 	and.w	r3, r3, #7
 81084d2:	b2da      	uxtb	r2, r3
 81084d4:	683b      	ldr	r3, [r7, #0]
 81084d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81084dc:	0bdb      	lsrs	r3, r3, #15
 81084de:	b2db      	uxtb	r3, r3
 81084e0:	f003 0307 	and.w	r3, r3, #7
 81084e4:	b2da      	uxtb	r2, r3
 81084e6:	683b      	ldr	r3, [r7, #0]
 81084e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 81084ea:	683b      	ldr	r3, [r7, #0]
 81084ec:	691b      	ldr	r3, [r3, #16]
 81084ee:	1c5a      	adds	r2, r3, #1
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 81084f4:	683b      	ldr	r3, [r7, #0]
 81084f6:	7e1b      	ldrb	r3, [r3, #24]
 81084f8:	b2db      	uxtb	r3, r3
 81084fa:	f003 0307 	and.w	r3, r3, #7
 81084fe:	3302      	adds	r3, #2
 8108500:	2201      	movs	r2, #1
 8108502:	fa02 f303 	lsl.w	r3, r2, r3
 8108506:	687a      	ldr	r2, [r7, #4]
 8108508:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810850a:	fb03 f202 	mul.w	r2, r3, r2
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8108512:	683b      	ldr	r3, [r7, #0]
 8108514:	7a1b      	ldrb	r3, [r3, #8]
 8108516:	b2db      	uxtb	r3, r3
 8108518:	f003 030f 	and.w	r3, r3, #15
 810851c:	2201      	movs	r2, #1
 810851e:	409a      	lsls	r2, r3
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8108524:	687b      	ldr	r3, [r7, #4]
 8108526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8108528:	687a      	ldr	r2, [r7, #4]
 810852a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 810852c:	0a52      	lsrs	r2, r2, #9
 810852e:	fb03 f202 	mul.w	r2, r3, r2
 8108532:	687b      	ldr	r3, [r7, #4]
 8108534:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810853c:	655a      	str	r2, [r3, #84]	@ 0x54
 810853e:	e031      	b.n	81085a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108540:	687b      	ldr	r3, [r7, #4]
 8108542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108544:	2b01      	cmp	r3, #1
 8108546:	d11d      	bne.n	8108584 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810854c:	041b      	lsls	r3, r3, #16
 810854e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8108552:	687b      	ldr	r3, [r7, #4]
 8108554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8108556:	0c1b      	lsrs	r3, r3, #16
 8108558:	431a      	orrs	r2, r3
 810855a:	683b      	ldr	r3, [r7, #0]
 810855c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 810855e:	683b      	ldr	r3, [r7, #0]
 8108560:	691b      	ldr	r3, [r3, #16]
 8108562:	3301      	adds	r3, #1
 8108564:	029a      	lsls	r2, r3, #10
 8108566:	687b      	ldr	r3, [r7, #4]
 8108568:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 810856a:	687b      	ldr	r3, [r7, #4]
 810856c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810856e:	687b      	ldr	r3, [r7, #4]
 8108570:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8108572:	687b      	ldr	r3, [r7, #4]
 8108574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108578:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810857a:	687b      	ldr	r3, [r7, #4]
 810857c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	655a      	str	r2, [r3, #84]	@ 0x54
 8108582:	e00f      	b.n	81085a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108584:	687b      	ldr	r3, [r7, #4]
 8108586:	681b      	ldr	r3, [r3, #0]
 8108588:	4a58      	ldr	r2, [pc, #352]	@ (81086ec <HAL_SD_GetCardCSD+0x344>)
 810858a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108590:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108598:	687b      	ldr	r3, [r7, #4]
 810859a:	2201      	movs	r2, #1
 810859c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81085a0:	2301      	movs	r3, #1
 81085a2:	e09d      	b.n	81086e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 81085a4:	687b      	ldr	r3, [r7, #4]
 81085a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81085a8:	0b9b      	lsrs	r3, r3, #14
 81085aa:	b2db      	uxtb	r3, r3
 81085ac:	f003 0301 	and.w	r3, r3, #1
 81085b0:	b2da      	uxtb	r2, r3
 81085b2:	683b      	ldr	r3, [r7, #0]
 81085b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 81085b6:	687b      	ldr	r3, [r7, #4]
 81085b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81085ba:	09db      	lsrs	r3, r3, #7
 81085bc:	b2db      	uxtb	r3, r3
 81085be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81085c2:	b2da      	uxtb	r2, r3
 81085c4:	683b      	ldr	r3, [r7, #0]
 81085c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81085cc:	b2db      	uxtb	r3, r3
 81085ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81085d2:	b2da      	uxtb	r2, r3
 81085d4:	683b      	ldr	r3, [r7, #0]
 81085d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81085dc:	0fdb      	lsrs	r3, r3, #31
 81085de:	b2da      	uxtb	r2, r3
 81085e0:	683b      	ldr	r3, [r7, #0]
 81085e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 81085e4:	687b      	ldr	r3, [r7, #4]
 81085e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81085e8:	0f5b      	lsrs	r3, r3, #29
 81085ea:	b2db      	uxtb	r3, r3
 81085ec:	f003 0303 	and.w	r3, r3, #3
 81085f0:	b2da      	uxtb	r2, r3
 81085f2:	683b      	ldr	r3, [r7, #0]
 81085f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 81085f6:	687b      	ldr	r3, [r7, #4]
 81085f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81085fa:	0e9b      	lsrs	r3, r3, #26
 81085fc:	b2db      	uxtb	r3, r3
 81085fe:	f003 0307 	and.w	r3, r3, #7
 8108602:	b2da      	uxtb	r2, r3
 8108604:	683b      	ldr	r3, [r7, #0]
 8108606:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8108608:	687b      	ldr	r3, [r7, #4]
 810860a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810860c:	0d9b      	lsrs	r3, r3, #22
 810860e:	b2db      	uxtb	r3, r3
 8108610:	f003 030f 	and.w	r3, r3, #15
 8108614:	b2da      	uxtb	r2, r3
 8108616:	683b      	ldr	r3, [r7, #0]
 8108618:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 810861a:	687b      	ldr	r3, [r7, #4]
 810861c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810861e:	0d5b      	lsrs	r3, r3, #21
 8108620:	b2db      	uxtb	r3, r3
 8108622:	f003 0301 	and.w	r3, r3, #1
 8108626:	b2da      	uxtb	r2, r3
 8108628:	683b      	ldr	r3, [r7, #0]
 810862a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 810862e:	683b      	ldr	r3, [r7, #0]
 8108630:	2200      	movs	r2, #0
 8108632:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810863a:	0c1b      	lsrs	r3, r3, #16
 810863c:	b2db      	uxtb	r3, r3
 810863e:	f003 0301 	and.w	r3, r3, #1
 8108642:	b2da      	uxtb	r2, r3
 8108644:	683b      	ldr	r3, [r7, #0]
 8108646:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810864e:	0bdb      	lsrs	r3, r3, #15
 8108650:	b2db      	uxtb	r3, r3
 8108652:	f003 0301 	and.w	r3, r3, #1
 8108656:	b2da      	uxtb	r2, r3
 8108658:	683b      	ldr	r3, [r7, #0]
 810865a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108662:	0b9b      	lsrs	r3, r3, #14
 8108664:	b2db      	uxtb	r3, r3
 8108666:	f003 0301 	and.w	r3, r3, #1
 810866a:	b2da      	uxtb	r2, r3
 810866c:	683b      	ldr	r3, [r7, #0]
 810866e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8108672:	687b      	ldr	r3, [r7, #4]
 8108674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8108676:	0b5b      	lsrs	r3, r3, #13
 8108678:	b2db      	uxtb	r3, r3
 810867a:	f003 0301 	and.w	r3, r3, #1
 810867e:	b2da      	uxtb	r2, r3
 8108680:	683b      	ldr	r3, [r7, #0]
 8108682:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8108686:	687b      	ldr	r3, [r7, #4]
 8108688:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810868a:	0b1b      	lsrs	r3, r3, #12
 810868c:	b2db      	uxtb	r3, r3
 810868e:	f003 0301 	and.w	r3, r3, #1
 8108692:	b2da      	uxtb	r2, r3
 8108694:	683b      	ldr	r3, [r7, #0]
 8108696:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 810869a:	687b      	ldr	r3, [r7, #4]
 810869c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810869e:	0a9b      	lsrs	r3, r3, #10
 81086a0:	b2db      	uxtb	r3, r3
 81086a2:	f003 0303 	and.w	r3, r3, #3
 81086a6:	b2da      	uxtb	r2, r3
 81086a8:	683b      	ldr	r3, [r7, #0]
 81086aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 81086ae:	687b      	ldr	r3, [r7, #4]
 81086b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81086b2:	0a1b      	lsrs	r3, r3, #8
 81086b4:	b2db      	uxtb	r3, r3
 81086b6:	f003 0303 	and.w	r3, r3, #3
 81086ba:	b2da      	uxtb	r2, r3
 81086bc:	683b      	ldr	r3, [r7, #0]
 81086be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 81086c2:	687b      	ldr	r3, [r7, #4]
 81086c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81086c6:	085b      	lsrs	r3, r3, #1
 81086c8:	b2db      	uxtb	r3, r3
 81086ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81086ce:	b2da      	uxtb	r2, r3
 81086d0:	683b      	ldr	r3, [r7, #0]
 81086d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 81086d6:	683b      	ldr	r3, [r7, #0]
 81086d8:	2201      	movs	r2, #1
 81086da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 81086de:	2300      	movs	r3, #0
}
 81086e0:	4618      	mov	r0, r3
 81086e2:	370c      	adds	r7, #12
 81086e4:	46bd      	mov	sp, r7
 81086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086ea:	4770      	bx	lr
 81086ec:	1fe00fff 	.word	0x1fe00fff

081086f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 81086f0:	b580      	push	{r7, lr}
 81086f2:	b094      	sub	sp, #80	@ 0x50
 81086f4:	af00      	add	r7, sp, #0
 81086f6:	6078      	str	r0, [r7, #4]
 81086f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 81086fa:	2300      	movs	r3, #0
 81086fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8108700:	687b      	ldr	r3, [r7, #4]
 8108702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8108706:	b2db      	uxtb	r3, r3
 8108708:	2b03      	cmp	r3, #3
 810870a:	d101      	bne.n	8108710 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 810870c:	2301      	movs	r3, #1
 810870e:	e0a7      	b.n	8108860 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8108710:	f107 0308 	add.w	r3, r7, #8
 8108714:	4619      	mov	r1, r3
 8108716:	6878      	ldr	r0, [r7, #4]
 8108718:	f000 fb36 	bl	8108d88 <SD_SendSDStatus>
 810871c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810871e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108720:	2b00      	cmp	r3, #0
 8108722:	d011      	beq.n	8108748 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108724:	687b      	ldr	r3, [r7, #4]
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	4a4f      	ldr	r2, [pc, #316]	@ (8108868 <HAL_SD_GetCardStatus+0x178>)
 810872a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8108732:	431a      	orrs	r2, r3
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	2201      	movs	r2, #1
 810873c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8108740:	2301      	movs	r3, #1
 8108742:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8108746:	e070      	b.n	810882a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8108748:	68bb      	ldr	r3, [r7, #8]
 810874a:	099b      	lsrs	r3, r3, #6
 810874c:	b2db      	uxtb	r3, r3
 810874e:	f003 0303 	and.w	r3, r3, #3
 8108752:	b2da      	uxtb	r2, r3
 8108754:	683b      	ldr	r3, [r7, #0]
 8108756:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8108758:	68bb      	ldr	r3, [r7, #8]
 810875a:	095b      	lsrs	r3, r3, #5
 810875c:	b2db      	uxtb	r3, r3
 810875e:	f003 0301 	and.w	r3, r3, #1
 8108762:	b2da      	uxtb	r2, r3
 8108764:	683b      	ldr	r3, [r7, #0]
 8108766:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8108768:	68bb      	ldr	r3, [r7, #8]
 810876a:	0a1b      	lsrs	r3, r3, #8
 810876c:	b29b      	uxth	r3, r3
 810876e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8108772:	b29a      	uxth	r2, r3
 8108774:	68bb      	ldr	r3, [r7, #8]
 8108776:	0e1b      	lsrs	r3, r3, #24
 8108778:	b29b      	uxth	r3, r3
 810877a:	4313      	orrs	r3, r2
 810877c:	b29a      	uxth	r2, r3
 810877e:	683b      	ldr	r3, [r7, #0]
 8108780:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108782:	68fb      	ldr	r3, [r7, #12]
 8108784:	061a      	lsls	r2, r3, #24
 8108786:	68fb      	ldr	r3, [r7, #12]
 8108788:	021b      	lsls	r3, r3, #8
 810878a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810878e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108790:	68fb      	ldr	r3, [r7, #12]
 8108792:	0a1b      	lsrs	r3, r3, #8
 8108794:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108798:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810879a:	68fb      	ldr	r3, [r7, #12]
 810879c:	0e1b      	lsrs	r3, r3, #24
 810879e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 81087a0:	683b      	ldr	r3, [r7, #0]
 81087a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 81087a4:	693b      	ldr	r3, [r7, #16]
 81087a6:	b2da      	uxtb	r2, r3
 81087a8:	683b      	ldr	r3, [r7, #0]
 81087aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 81087ac:	693b      	ldr	r3, [r7, #16]
 81087ae:	0a1b      	lsrs	r3, r3, #8
 81087b0:	b2da      	uxtb	r2, r3
 81087b2:	683b      	ldr	r3, [r7, #0]
 81087b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 81087b6:	693b      	ldr	r3, [r7, #16]
 81087b8:	0d1b      	lsrs	r3, r3, #20
 81087ba:	b2db      	uxtb	r3, r3
 81087bc:	f003 030f 	and.w	r3, r3, #15
 81087c0:	b2da      	uxtb	r2, r3
 81087c2:	683b      	ldr	r3, [r7, #0]
 81087c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 81087c6:	693b      	ldr	r3, [r7, #16]
 81087c8:	0c1b      	lsrs	r3, r3, #16
 81087ca:	b29b      	uxth	r3, r3
 81087cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 81087d0:	b29a      	uxth	r2, r3
 81087d2:	697b      	ldr	r3, [r7, #20]
 81087d4:	b29b      	uxth	r3, r3
 81087d6:	b2db      	uxtb	r3, r3
 81087d8:	b29b      	uxth	r3, r3
 81087da:	4313      	orrs	r3, r2
 81087dc:	b29a      	uxth	r2, r3
 81087de:	683b      	ldr	r3, [r7, #0]
 81087e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 81087e2:	697b      	ldr	r3, [r7, #20]
 81087e4:	0a9b      	lsrs	r3, r3, #10
 81087e6:	b2db      	uxtb	r3, r3
 81087e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81087ec:	b2da      	uxtb	r2, r3
 81087ee:	683b      	ldr	r3, [r7, #0]
 81087f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 81087f2:	697b      	ldr	r3, [r7, #20]
 81087f4:	0a1b      	lsrs	r3, r3, #8
 81087f6:	b2db      	uxtb	r3, r3
 81087f8:	f003 0303 	and.w	r3, r3, #3
 81087fc:	b2da      	uxtb	r2, r3
 81087fe:	683b      	ldr	r3, [r7, #0]
 8108800:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8108802:	697b      	ldr	r3, [r7, #20]
 8108804:	091b      	lsrs	r3, r3, #4
 8108806:	b2db      	uxtb	r3, r3
 8108808:	f003 030f 	and.w	r3, r3, #15
 810880c:	b2da      	uxtb	r2, r3
 810880e:	683b      	ldr	r3, [r7, #0]
 8108810:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8108812:	697b      	ldr	r3, [r7, #20]
 8108814:	b2db      	uxtb	r3, r3
 8108816:	f003 030f 	and.w	r3, r3, #15
 810881a:	b2da      	uxtb	r2, r3
 810881c:	683b      	ldr	r3, [r7, #0]
 810881e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8108820:	69bb      	ldr	r3, [r7, #24]
 8108822:	0e1b      	lsrs	r3, r3, #24
 8108824:	b2da      	uxtb	r2, r3
 8108826:	683b      	ldr	r3, [r7, #0]
 8108828:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810882a:	687b      	ldr	r3, [r7, #4]
 810882c:	681b      	ldr	r3, [r3, #0]
 810882e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108832:	4618      	mov	r0, r3
 8108834:	f003 f92c 	bl	810ba90 <SDMMC_CmdBlockLength>
 8108838:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810883a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810883c:	2b00      	cmp	r3, #0
 810883e:	d00d      	beq.n	810885c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108840:	687b      	ldr	r3, [r7, #4]
 8108842:	681b      	ldr	r3, [r3, #0]
 8108844:	4a08      	ldr	r2, [pc, #32]	@ (8108868 <HAL_SD_GetCardStatus+0x178>)
 8108846:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810884c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 810884e:	687b      	ldr	r3, [r7, #4]
 8108850:	2201      	movs	r2, #1
 8108852:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8108856:	2301      	movs	r3, #1
 8108858:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 810885c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8108860:	4618      	mov	r0, r3
 8108862:	3750      	adds	r7, #80	@ 0x50
 8108864:	46bd      	mov	sp, r7
 8108866:	bd80      	pop	{r7, pc}
 8108868:	1fe00fff 	.word	0x1fe00fff

0810886c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 810886c:	b590      	push	{r4, r7, lr}
 810886e:	b08d      	sub	sp, #52	@ 0x34
 8108870:	af02      	add	r7, sp, #8
 8108872:	6078      	str	r0, [r7, #4]
 8108874:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8108876:	2300      	movs	r3, #0
 8108878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 810887c:	687b      	ldr	r3, [r7, #4]
 810887e:	2203      	movs	r2, #3
 8108880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108888:	2b03      	cmp	r3, #3
 810888a:	d02e      	beq.n	81088ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810888c:	683b      	ldr	r3, [r7, #0]
 810888e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108892:	d106      	bne.n	81088a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108898:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	635a      	str	r2, [r3, #52]	@ 0x34
 81088a0:	e029      	b.n	81088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 81088a2:	683b      	ldr	r3, [r7, #0]
 81088a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81088a8:	d10a      	bne.n	81088c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 81088aa:	6878      	ldr	r0, [r7, #4]
 81088ac:	f000 fb64 	bl	8108f78 <SD_WideBus_Enable>
 81088b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81088b6:	6a3b      	ldr	r3, [r7, #32]
 81088b8:	431a      	orrs	r2, r3
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	635a      	str	r2, [r3, #52]	@ 0x34
 81088be:	e01a      	b.n	81088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 81088c0:	683b      	ldr	r3, [r7, #0]
 81088c2:	2b00      	cmp	r3, #0
 81088c4:	d10a      	bne.n	81088dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 81088c6:	6878      	ldr	r0, [r7, #4]
 81088c8:	f000 fba1 	bl	810900e <SD_WideBus_Disable>
 81088cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81088d2:	6a3b      	ldr	r3, [r7, #32]
 81088d4:	431a      	orrs	r2, r3
 81088d6:	687b      	ldr	r3, [r7, #4]
 81088d8:	635a      	str	r2, [r3, #52]	@ 0x34
 81088da:	e00c      	b.n	81088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81088dc:	687b      	ldr	r3, [r7, #4]
 81088de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81088e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81088e4:	687b      	ldr	r3, [r7, #4]
 81088e6:	635a      	str	r2, [r3, #52]	@ 0x34
 81088e8:	e005      	b.n	81088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81088ea:	687b      	ldr	r3, [r7, #4]
 81088ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81088ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 81088f2:	687b      	ldr	r3, [r7, #4]
 81088f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81088fa:	2b00      	cmp	r3, #0
 81088fc:	d007      	beq.n	810890e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81088fe:	687b      	ldr	r3, [r7, #4]
 8108900:	681b      	ldr	r3, [r3, #0]
 8108902:	4a5f      	ldr	r2, [pc, #380]	@ (8108a80 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108904:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8108906:	2301      	movs	r3, #1
 8108908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810890c:	e096      	b.n	8108a3c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810890e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8108912:	f04f 0100 	mov.w	r1, #0
 8108916:	f7fd fc57 	bl	81061c8 <HAL_RCCEx_GetPeriphCLKFreq>
 810891a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 810891c:	69fb      	ldr	r3, [r7, #28]
 810891e:	2b00      	cmp	r3, #0
 8108920:	f000 8083 	beq.w	8108a2a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8108924:	687b      	ldr	r3, [r7, #4]
 8108926:	685b      	ldr	r3, [r3, #4]
 8108928:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	689b      	ldr	r3, [r3, #8]
 810892e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8108930:	683b      	ldr	r3, [r7, #0]
 8108932:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8108934:	687b      	ldr	r3, [r7, #4]
 8108936:	691b      	ldr	r3, [r3, #16]
 8108938:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	695a      	ldr	r2, [r3, #20]
 810893e:	69fb      	ldr	r3, [r7, #28]
 8108940:	4950      	ldr	r1, [pc, #320]	@ (8108a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108942:	fba1 1303 	umull	r1, r3, r1, r3
 8108946:	0e1b      	lsrs	r3, r3, #24
 8108948:	429a      	cmp	r2, r3
 810894a:	d303      	bcc.n	8108954 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 810894c:	687b      	ldr	r3, [r7, #4]
 810894e:	695b      	ldr	r3, [r3, #20]
 8108950:	61bb      	str	r3, [r7, #24]
 8108952:	e05a      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810895c:	d103      	bne.n	8108966 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	695b      	ldr	r3, [r3, #20]
 8108962:	61bb      	str	r3, [r7, #24]
 8108964:	e051      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8108966:	687b      	ldr	r3, [r7, #4]
 8108968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810896a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810896e:	d126      	bne.n	81089be <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	695b      	ldr	r3, [r3, #20]
 8108974:	2b00      	cmp	r3, #0
 8108976:	d10e      	bne.n	8108996 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8108978:	69fb      	ldr	r3, [r7, #28]
 810897a:	4a43      	ldr	r2, [pc, #268]	@ (8108a88 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810897c:	4293      	cmp	r3, r2
 810897e:	d906      	bls.n	810898e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108980:	69fb      	ldr	r3, [r7, #28]
 8108982:	4a40      	ldr	r2, [pc, #256]	@ (8108a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108984:	fba2 2303 	umull	r2, r3, r2, r3
 8108988:	0e5b      	lsrs	r3, r3, #25
 810898a:	61bb      	str	r3, [r7, #24]
 810898c:	e03d      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	695b      	ldr	r3, [r3, #20]
 8108992:	61bb      	str	r3, [r7, #24]
 8108994:	e039      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	695b      	ldr	r3, [r3, #20]
 810899a:	005b      	lsls	r3, r3, #1
 810899c:	69fa      	ldr	r2, [r7, #28]
 810899e:	fbb2 f3f3 	udiv	r3, r2, r3
 81089a2:	4a39      	ldr	r2, [pc, #228]	@ (8108a88 <HAL_SD_ConfigWideBusOperation+0x21c>)
 81089a4:	4293      	cmp	r3, r2
 81089a6:	d906      	bls.n	81089b6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 81089a8:	69fb      	ldr	r3, [r7, #28]
 81089aa:	4a36      	ldr	r2, [pc, #216]	@ (8108a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 81089ac:	fba2 2303 	umull	r2, r3, r2, r3
 81089b0:	0e5b      	lsrs	r3, r3, #25
 81089b2:	61bb      	str	r3, [r7, #24]
 81089b4:	e029      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81089b6:	687b      	ldr	r3, [r7, #4]
 81089b8:	695b      	ldr	r3, [r3, #20]
 81089ba:	61bb      	str	r3, [r7, #24]
 81089bc:	e025      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	695b      	ldr	r3, [r3, #20]
 81089c2:	2b00      	cmp	r3, #0
 81089c4:	d10e      	bne.n	81089e4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 81089c6:	69fb      	ldr	r3, [r7, #28]
 81089c8:	4a30      	ldr	r2, [pc, #192]	@ (8108a8c <HAL_SD_ConfigWideBusOperation+0x220>)
 81089ca:	4293      	cmp	r3, r2
 81089cc:	d906      	bls.n	81089dc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 81089ce:	69fb      	ldr	r3, [r7, #28]
 81089d0:	4a2c      	ldr	r2, [pc, #176]	@ (8108a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 81089d2:	fba2 2303 	umull	r2, r3, r2, r3
 81089d6:	0e1b      	lsrs	r3, r3, #24
 81089d8:	61bb      	str	r3, [r7, #24]
 81089da:	e016      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81089dc:	687b      	ldr	r3, [r7, #4]
 81089de:	695b      	ldr	r3, [r3, #20]
 81089e0:	61bb      	str	r3, [r7, #24]
 81089e2:	e012      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 81089e4:	687b      	ldr	r3, [r7, #4]
 81089e6:	695b      	ldr	r3, [r3, #20]
 81089e8:	005b      	lsls	r3, r3, #1
 81089ea:	69fa      	ldr	r2, [r7, #28]
 81089ec:	fbb2 f3f3 	udiv	r3, r2, r3
 81089f0:	4a26      	ldr	r2, [pc, #152]	@ (8108a8c <HAL_SD_ConfigWideBusOperation+0x220>)
 81089f2:	4293      	cmp	r3, r2
 81089f4:	d906      	bls.n	8108a04 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 81089f6:	69fb      	ldr	r3, [r7, #28]
 81089f8:	4a22      	ldr	r2, [pc, #136]	@ (8108a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 81089fa:	fba2 2303 	umull	r2, r3, r2, r3
 81089fe:	0e1b      	lsrs	r3, r3, #24
 8108a00:	61bb      	str	r3, [r7, #24]
 8108a02:	e002      	b.n	8108a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	695b      	ldr	r3, [r3, #20]
 8108a08:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	681c      	ldr	r4, [r3, #0]
 8108a0e:	466a      	mov	r2, sp
 8108a10:	f107 0314 	add.w	r3, r7, #20
 8108a14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108a18:	e882 0003 	stmia.w	r2, {r0, r1}
 8108a1c:	f107 0308 	add.w	r3, r7, #8
 8108a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108a22:	4620      	mov	r0, r4
 8108a24:	f002 ff68 	bl	810b8f8 <SDMMC_Init>
 8108a28:	e008      	b.n	8108a3c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108a2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8108a36:	2301      	movs	r3, #1
 8108a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	681b      	ldr	r3, [r3, #0]
 8108a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108a44:	4618      	mov	r0, r3
 8108a46:	f003 f823 	bl	810ba90 <SDMMC_CmdBlockLength>
 8108a4a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108a4c:	6a3b      	ldr	r3, [r7, #32]
 8108a4e:	2b00      	cmp	r3, #0
 8108a50:	d00c      	beq.n	8108a6c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	4a0a      	ldr	r2, [pc, #40]	@ (8108a80 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108a58:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8108a5a:	687b      	ldr	r3, [r7, #4]
 8108a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108a5e:	6a3b      	ldr	r3, [r7, #32]
 8108a60:	431a      	orrs	r2, r3
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8108a66:	2301      	movs	r3, #1
 8108a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8108a6c:	687b      	ldr	r3, [r7, #4]
 8108a6e:	2201      	movs	r2, #1
 8108a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8108a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8108a78:	4618      	mov	r0, r3
 8108a7a:	372c      	adds	r7, #44	@ 0x2c
 8108a7c:	46bd      	mov	sp, r7
 8108a7e:	bd90      	pop	{r4, r7, pc}
 8108a80:	1fe00fff 	.word	0x1fe00fff
 8108a84:	55e63b89 	.word	0x55e63b89
 8108a88:	02faf080 	.word	0x02faf080
 8108a8c:	017d7840 	.word	0x017d7840

08108a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8108a90:	b580      	push	{r7, lr}
 8108a92:	b086      	sub	sp, #24
 8108a94:	af00      	add	r7, sp, #0
 8108a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8108a98:	2300      	movs	r3, #0
 8108a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8108a9c:	f107 030c 	add.w	r3, r7, #12
 8108aa0:	4619      	mov	r1, r3
 8108aa2:	6878      	ldr	r0, [r7, #4]
 8108aa4:	f000 fa40 	bl	8108f28 <SD_SendStatus>
 8108aa8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108aaa:	697b      	ldr	r3, [r7, #20]
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d005      	beq.n	8108abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108ab4:	697b      	ldr	r3, [r7, #20]
 8108ab6:	431a      	orrs	r2, r3
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8108abc:	68fb      	ldr	r3, [r7, #12]
 8108abe:	0a5b      	lsrs	r3, r3, #9
 8108ac0:	f003 030f 	and.w	r3, r3, #15
 8108ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8108ac6:	693b      	ldr	r3, [r7, #16]
}
 8108ac8:	4618      	mov	r0, r3
 8108aca:	3718      	adds	r7, #24
 8108acc:	46bd      	mov	sp, r7
 8108ace:	bd80      	pop	{r7, pc}

08108ad0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8108ad0:	b580      	push	{r7, lr}
 8108ad2:	b090      	sub	sp, #64	@ 0x40
 8108ad4:	af00      	add	r7, sp, #0
 8108ad6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8108ad8:	2300      	movs	r3, #0
 8108ada:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8108adc:	f7f9 fcd0 	bl	8102480 <HAL_GetTick>
 8108ae0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	681b      	ldr	r3, [r3, #0]
 8108ae6:	4618      	mov	r0, r3
 8108ae8:	f002 ff4e 	bl	810b988 <SDMMC_GetPowerState>
 8108aec:	4603      	mov	r3, r0
 8108aee:	2b00      	cmp	r3, #0
 8108af0:	d102      	bne.n	8108af8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8108af2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8108af6:	e0b5      	b.n	8108c64 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108af8:	687b      	ldr	r3, [r7, #4]
 8108afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108afc:	2b03      	cmp	r3, #3
 8108afe:	d02e      	beq.n	8108b5e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8108b00:	687b      	ldr	r3, [r7, #4]
 8108b02:	681b      	ldr	r3, [r3, #0]
 8108b04:	4618      	mov	r0, r3
 8108b06:	f003 f8cf 	bl	810bca8 <SDMMC_CmdSendCID>
 8108b0a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8108b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b0e:	2b00      	cmp	r3, #0
 8108b10:	d001      	beq.n	8108b16 <SD_InitCard+0x46>
    {
      return errorstate;
 8108b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b14:	e0a6      	b.n	8108c64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	681b      	ldr	r3, [r3, #0]
 8108b1a:	2100      	movs	r1, #0
 8108b1c:	4618      	mov	r0, r3
 8108b1e:	f002 ff78 	bl	810ba12 <SDMMC_GetResponse>
 8108b22:	4602      	mov	r2, r0
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8108b28:	687b      	ldr	r3, [r7, #4]
 8108b2a:	681b      	ldr	r3, [r3, #0]
 8108b2c:	2104      	movs	r1, #4
 8108b2e:	4618      	mov	r0, r3
 8108b30:	f002 ff6f 	bl	810ba12 <SDMMC_GetResponse>
 8108b34:	4602      	mov	r2, r0
 8108b36:	687b      	ldr	r3, [r7, #4]
 8108b38:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8108b3a:	687b      	ldr	r3, [r7, #4]
 8108b3c:	681b      	ldr	r3, [r3, #0]
 8108b3e:	2108      	movs	r1, #8
 8108b40:	4618      	mov	r0, r3
 8108b42:	f002 ff66 	bl	810ba12 <SDMMC_GetResponse>
 8108b46:	4602      	mov	r2, r0
 8108b48:	687b      	ldr	r3, [r7, #4]
 8108b4a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8108b4c:	687b      	ldr	r3, [r7, #4]
 8108b4e:	681b      	ldr	r3, [r3, #0]
 8108b50:	210c      	movs	r1, #12
 8108b52:	4618      	mov	r0, r3
 8108b54:	f002 ff5d 	bl	810ba12 <SDMMC_GetResponse>
 8108b58:	4602      	mov	r2, r0
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108b62:	2b03      	cmp	r3, #3
 8108b64:	d01d      	beq.n	8108ba2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8108b66:	e019      	b.n	8108b9c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8108b68:	687b      	ldr	r3, [r7, #4]
 8108b6a:	681b      	ldr	r3, [r3, #0]
 8108b6c:	f107 020a 	add.w	r2, r7, #10
 8108b70:	4611      	mov	r1, r2
 8108b72:	4618      	mov	r0, r3
 8108b74:	f003 f8d7 	bl	810bd26 <SDMMC_CmdSetRelAdd>
 8108b78:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8108b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b7c:	2b00      	cmp	r3, #0
 8108b7e:	d001      	beq.n	8108b84 <SD_InitCard+0xb4>
      {
        return errorstate;
 8108b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108b82:	e06f      	b.n	8108c64 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8108b84:	f7f9 fc7c 	bl	8102480 <HAL_GetTick>
 8108b88:	4602      	mov	r2, r0
 8108b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b8c:	1ad3      	subs	r3, r2, r3
 8108b8e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8108b92:	4293      	cmp	r3, r2
 8108b94:	d902      	bls.n	8108b9c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8108b96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108b9a:	e063      	b.n	8108c64 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8108b9c:	897b      	ldrh	r3, [r7, #10]
 8108b9e:	2b00      	cmp	r3, #0
 8108ba0:	d0e2      	beq.n	8108b68 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8108ba2:	687b      	ldr	r3, [r7, #4]
 8108ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108ba6:	2b03      	cmp	r3, #3
 8108ba8:	d036      	beq.n	8108c18 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8108baa:	897b      	ldrh	r3, [r7, #10]
 8108bac:	461a      	mov	r2, r3
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108bb2:	687b      	ldr	r3, [r7, #4]
 8108bb4:	681a      	ldr	r2, [r3, #0]
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108bba:	041b      	lsls	r3, r3, #16
 8108bbc:	4619      	mov	r1, r3
 8108bbe:	4610      	mov	r0, r2
 8108bc0:	f003 f891 	bl	810bce6 <SDMMC_CmdSendCSD>
 8108bc4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8108bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bc8:	2b00      	cmp	r3, #0
 8108bca:	d001      	beq.n	8108bd0 <SD_InitCard+0x100>
    {
      return errorstate;
 8108bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108bce:	e049      	b.n	8108c64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	681b      	ldr	r3, [r3, #0]
 8108bd4:	2100      	movs	r1, #0
 8108bd6:	4618      	mov	r0, r3
 8108bd8:	f002 ff1b 	bl	810ba12 <SDMMC_GetResponse>
 8108bdc:	4602      	mov	r2, r0
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8108be2:	687b      	ldr	r3, [r7, #4]
 8108be4:	681b      	ldr	r3, [r3, #0]
 8108be6:	2104      	movs	r1, #4
 8108be8:	4618      	mov	r0, r3
 8108bea:	f002 ff12 	bl	810ba12 <SDMMC_GetResponse>
 8108bee:	4602      	mov	r2, r0
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	681b      	ldr	r3, [r3, #0]
 8108bf8:	2108      	movs	r1, #8
 8108bfa:	4618      	mov	r0, r3
 8108bfc:	f002 ff09 	bl	810ba12 <SDMMC_GetResponse>
 8108c00:	4602      	mov	r2, r0
 8108c02:	687b      	ldr	r3, [r7, #4]
 8108c04:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	681b      	ldr	r3, [r3, #0]
 8108c0a:	210c      	movs	r1, #12
 8108c0c:	4618      	mov	r0, r3
 8108c0e:	f002 ff00 	bl	810ba12 <SDMMC_GetResponse>
 8108c12:	4602      	mov	r2, r0
 8108c14:	687b      	ldr	r3, [r7, #4]
 8108c16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8108c18:	687b      	ldr	r3, [r7, #4]
 8108c1a:	681b      	ldr	r3, [r3, #0]
 8108c1c:	2104      	movs	r1, #4
 8108c1e:	4618      	mov	r0, r3
 8108c20:	f002 fef7 	bl	810ba12 <SDMMC_GetResponse>
 8108c24:	4603      	mov	r3, r0
 8108c26:	0d1a      	lsrs	r2, r3, #20
 8108c28:	687b      	ldr	r3, [r7, #4]
 8108c2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8108c2c:	f107 030c 	add.w	r3, r7, #12
 8108c30:	4619      	mov	r1, r3
 8108c32:	6878      	ldr	r0, [r7, #4]
 8108c34:	f7ff fbb8 	bl	81083a8 <HAL_SD_GetCardCSD>
 8108c38:	4603      	mov	r3, r0
 8108c3a:	2b00      	cmp	r3, #0
 8108c3c:	d002      	beq.n	8108c44 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108c3e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8108c42:	e00f      	b.n	8108c64 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8108c44:	687b      	ldr	r3, [r7, #4]
 8108c46:	681a      	ldr	r2, [r3, #0]
 8108c48:	687b      	ldr	r3, [r7, #4]
 8108c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108c4c:	041b      	lsls	r3, r3, #16
 8108c4e:	4619      	mov	r1, r3
 8108c50:	4610      	mov	r0, r2
 8108c52:	f002 ff40 	bl	810bad6 <SDMMC_CmdSelDesel>
 8108c56:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8108c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c5a:	2b00      	cmp	r3, #0
 8108c5c:	d001      	beq.n	8108c62 <SD_InitCard+0x192>
  {
    return errorstate;
 8108c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c60:	e000      	b.n	8108c64 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8108c62:	2300      	movs	r3, #0
}
 8108c64:	4618      	mov	r0, r3
 8108c66:	3740      	adds	r7, #64	@ 0x40
 8108c68:	46bd      	mov	sp, r7
 8108c6a:	bd80      	pop	{r7, pc}

08108c6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8108c6c:	b580      	push	{r7, lr}
 8108c6e:	b086      	sub	sp, #24
 8108c70:	af00      	add	r7, sp, #0
 8108c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8108c74:	2300      	movs	r3, #0
 8108c76:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8108c78:	2300      	movs	r3, #0
 8108c7a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8108c7c:	2300      	movs	r3, #0
 8108c7e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	681b      	ldr	r3, [r3, #0]
 8108c84:	4618      	mov	r0, r3
 8108c86:	f002 ff49 	bl	810bb1c <SDMMC_CmdGoIdleState>
 8108c8a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108c8c:	68fb      	ldr	r3, [r7, #12]
 8108c8e:	2b00      	cmp	r3, #0
 8108c90:	d001      	beq.n	8108c96 <SD_PowerON+0x2a>
  {
    return errorstate;
 8108c92:	68fb      	ldr	r3, [r7, #12]
 8108c94:	e072      	b.n	8108d7c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	681b      	ldr	r3, [r3, #0]
 8108c9a:	4618      	mov	r0, r3
 8108c9c:	f002 ff5c 	bl	810bb58 <SDMMC_CmdOperCond>
 8108ca0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8108ca2:	68fb      	ldr	r3, [r7, #12]
 8108ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108ca8:	d10d      	bne.n	8108cc6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	2200      	movs	r2, #0
 8108cae:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8108cb0:	687b      	ldr	r3, [r7, #4]
 8108cb2:	681b      	ldr	r3, [r3, #0]
 8108cb4:	4618      	mov	r0, r3
 8108cb6:	f002 ff31 	bl	810bb1c <SDMMC_CmdGoIdleState>
 8108cba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108cbc:	68fb      	ldr	r3, [r7, #12]
 8108cbe:	2b00      	cmp	r3, #0
 8108cc0:	d004      	beq.n	8108ccc <SD_PowerON+0x60>
    {
      return errorstate;
 8108cc2:	68fb      	ldr	r3, [r7, #12]
 8108cc4:	e05a      	b.n	8108d7c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8108cc6:	687b      	ldr	r3, [r7, #4]
 8108cc8:	2201      	movs	r2, #1
 8108cca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108cd0:	2b01      	cmp	r3, #1
 8108cd2:	d137      	bne.n	8108d44 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	2100      	movs	r1, #0
 8108cda:	4618      	mov	r0, r3
 8108cdc:	f002 ff5c 	bl	810bb98 <SDMMC_CmdAppCommand>
 8108ce0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108ce2:	68fb      	ldr	r3, [r7, #12]
 8108ce4:	2b00      	cmp	r3, #0
 8108ce6:	d02d      	beq.n	8108d44 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108ce8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8108cec:	e046      	b.n	8108d7c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	681b      	ldr	r3, [r3, #0]
 8108cf2:	2100      	movs	r1, #0
 8108cf4:	4618      	mov	r0, r3
 8108cf6:	f002 ff4f 	bl	810bb98 <SDMMC_CmdAppCommand>
 8108cfa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108cfc:	68fb      	ldr	r3, [r7, #12]
 8108cfe:	2b00      	cmp	r3, #0
 8108d00:	d001      	beq.n	8108d06 <SD_PowerON+0x9a>
    {
      return errorstate;
 8108d02:	68fb      	ldr	r3, [r7, #12]
 8108d04:	e03a      	b.n	8108d7c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8108d06:	687b      	ldr	r3, [r7, #4]
 8108d08:	681b      	ldr	r3, [r3, #0]
 8108d0a:	491e      	ldr	r1, [pc, #120]	@ (8108d84 <SD_PowerON+0x118>)
 8108d0c:	4618      	mov	r0, r3
 8108d0e:	f002 ff66 	bl	810bbde <SDMMC_CmdAppOperCommand>
 8108d12:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8108d14:	68fb      	ldr	r3, [r7, #12]
 8108d16:	2b00      	cmp	r3, #0
 8108d18:	d002      	beq.n	8108d20 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108d1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8108d1e:	e02d      	b.n	8108d7c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108d20:	687b      	ldr	r3, [r7, #4]
 8108d22:	681b      	ldr	r3, [r3, #0]
 8108d24:	2100      	movs	r1, #0
 8108d26:	4618      	mov	r0, r3
 8108d28:	f002 fe73 	bl	810ba12 <SDMMC_GetResponse>
 8108d2c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8108d2e:	697b      	ldr	r3, [r7, #20]
 8108d30:	0fdb      	lsrs	r3, r3, #31
 8108d32:	2b01      	cmp	r3, #1
 8108d34:	d101      	bne.n	8108d3a <SD_PowerON+0xce>
 8108d36:	2301      	movs	r3, #1
 8108d38:	e000      	b.n	8108d3c <SD_PowerON+0xd0>
 8108d3a:	2300      	movs	r3, #0
 8108d3c:	613b      	str	r3, [r7, #16]

    count++;
 8108d3e:	68bb      	ldr	r3, [r7, #8]
 8108d40:	3301      	adds	r3, #1
 8108d42:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8108d44:	68bb      	ldr	r3, [r7, #8]
 8108d46:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8108d4a:	4293      	cmp	r3, r2
 8108d4c:	d802      	bhi.n	8108d54 <SD_PowerON+0xe8>
 8108d4e:	693b      	ldr	r3, [r7, #16]
 8108d50:	2b00      	cmp	r3, #0
 8108d52:	d0cc      	beq.n	8108cee <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8108d54:	68bb      	ldr	r3, [r7, #8]
 8108d56:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8108d5a:	4293      	cmp	r3, r2
 8108d5c:	d902      	bls.n	8108d64 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8108d5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8108d62:	e00b      	b.n	8108d7c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8108d64:	687b      	ldr	r3, [r7, #4]
 8108d66:	2200      	movs	r2, #0
 8108d68:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8108d6a:	697b      	ldr	r3, [r7, #20]
 8108d6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8108d70:	2b00      	cmp	r3, #0
 8108d72:	d002      	beq.n	8108d7a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8108d74:	687b      	ldr	r3, [r7, #4]
 8108d76:	2201      	movs	r2, #1
 8108d78:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8108d7a:	2300      	movs	r3, #0
}
 8108d7c:	4618      	mov	r0, r3
 8108d7e:	3718      	adds	r7, #24
 8108d80:	46bd      	mov	sp, r7
 8108d82:	bd80      	pop	{r7, pc}
 8108d84:	c1100000 	.word	0xc1100000

08108d88 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8108d88:	b580      	push	{r7, lr}
 8108d8a:	b08c      	sub	sp, #48	@ 0x30
 8108d8c:	af00      	add	r7, sp, #0
 8108d8e:	6078      	str	r0, [r7, #4]
 8108d90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8108d92:	f7f9 fb75 	bl	8102480 <HAL_GetTick>
 8108d96:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8108d98:	683b      	ldr	r3, [r7, #0]
 8108d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	681b      	ldr	r3, [r3, #0]
 8108da0:	2100      	movs	r1, #0
 8108da2:	4618      	mov	r0, r3
 8108da4:	f002 fe35 	bl	810ba12 <SDMMC_GetResponse>
 8108da8:	4603      	mov	r3, r0
 8108daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108dae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108db2:	d102      	bne.n	8108dba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8108db4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108db8:	e0b0      	b.n	8108f1c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8108dba:	687b      	ldr	r3, [r7, #4]
 8108dbc:	681b      	ldr	r3, [r3, #0]
 8108dbe:	2140      	movs	r1, #64	@ 0x40
 8108dc0:	4618      	mov	r0, r3
 8108dc2:	f002 fe65 	bl	810ba90 <SDMMC_CmdBlockLength>
 8108dc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108dc8:	6a3b      	ldr	r3, [r7, #32]
 8108dca:	2b00      	cmp	r3, #0
 8108dcc:	d005      	beq.n	8108dda <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8108dd6:	6a3b      	ldr	r3, [r7, #32]
 8108dd8:	e0a0      	b.n	8108f1c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108dda:	687b      	ldr	r3, [r7, #4]
 8108ddc:	681a      	ldr	r2, [r3, #0]
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108de2:	041b      	lsls	r3, r3, #16
 8108de4:	4619      	mov	r1, r3
 8108de6:	4610      	mov	r0, r2
 8108de8:	f002 fed6 	bl	810bb98 <SDMMC_CmdAppCommand>
 8108dec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108dee:	6a3b      	ldr	r3, [r7, #32]
 8108df0:	2b00      	cmp	r3, #0
 8108df2:	d005      	beq.n	8108e00 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108df8:	687b      	ldr	r3, [r7, #4]
 8108dfa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8108dfc:	6a3b      	ldr	r3, [r7, #32]
 8108dfe:	e08d      	b.n	8108f1c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8108e00:	f04f 33ff 	mov.w	r3, #4294967295
 8108e04:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8108e06:	2340      	movs	r3, #64	@ 0x40
 8108e08:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8108e0a:	2360      	movs	r3, #96	@ 0x60
 8108e0c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8108e0e:	2302      	movs	r3, #2
 8108e10:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8108e12:	2300      	movs	r3, #0
 8108e14:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8108e16:	2301      	movs	r3, #1
 8108e18:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	681b      	ldr	r3, [r3, #0]
 8108e1e:	f107 0208 	add.w	r2, r7, #8
 8108e22:	4611      	mov	r1, r2
 8108e24:	4618      	mov	r0, r3
 8108e26:	f002 fe07 	bl	810ba38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8108e2a:	687b      	ldr	r3, [r7, #4]
 8108e2c:	681b      	ldr	r3, [r3, #0]
 8108e2e:	4618      	mov	r0, r3
 8108e30:	f002 ffbe 	bl	810bdb0 <SDMMC_CmdStatusRegister>
 8108e34:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108e36:	6a3b      	ldr	r3, [r7, #32]
 8108e38:	2b00      	cmp	r3, #0
 8108e3a:	d02b      	beq.n	8108e94 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108e40:	687b      	ldr	r3, [r7, #4]
 8108e42:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8108e44:	6a3b      	ldr	r3, [r7, #32]
 8108e46:	e069      	b.n	8108f1c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8108e48:	687b      	ldr	r3, [r7, #4]
 8108e4a:	681b      	ldr	r3, [r3, #0]
 8108e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8108e52:	2b00      	cmp	r3, #0
 8108e54:	d013      	beq.n	8108e7e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8108e56:	2300      	movs	r3, #0
 8108e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8108e5a:	e00d      	b.n	8108e78 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	681b      	ldr	r3, [r3, #0]
 8108e60:	4618      	mov	r0, r3
 8108e62:	f002 fd73 	bl	810b94c <SDMMC_ReadFIFO>
 8108e66:	4602      	mov	r2, r0
 8108e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e6a:	601a      	str	r2, [r3, #0]
        pData++;
 8108e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e6e:	3304      	adds	r3, #4
 8108e70:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8108e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108e74:	3301      	adds	r3, #1
 8108e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8108e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108e7a:	2b07      	cmp	r3, #7
 8108e7c:	d9ee      	bls.n	8108e5c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8108e7e:	f7f9 faff 	bl	8102480 <HAL_GetTick>
 8108e82:	4602      	mov	r2, r0
 8108e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e86:	1ad3      	subs	r3, r2, r3
 8108e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108e8c:	d102      	bne.n	8108e94 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8108e8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108e92:	e043      	b.n	8108f1c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8108e94:	687b      	ldr	r3, [r7, #4]
 8108e96:	681b      	ldr	r3, [r3, #0]
 8108e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108e9a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8108e9e:	2b00      	cmp	r3, #0
 8108ea0:	d0d2      	beq.n	8108e48 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	681b      	ldr	r3, [r3, #0]
 8108ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108ea8:	f003 0308 	and.w	r3, r3, #8
 8108eac:	2b00      	cmp	r3, #0
 8108eae:	d001      	beq.n	8108eb4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8108eb0:	2308      	movs	r3, #8
 8108eb2:	e033      	b.n	8108f1c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108eba:	f003 0302 	and.w	r3, r3, #2
 8108ebe:	2b00      	cmp	r3, #0
 8108ec0:	d001      	beq.n	8108ec6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8108ec2:	2302      	movs	r3, #2
 8108ec4:	e02a      	b.n	8108f1c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8108ec6:	687b      	ldr	r3, [r7, #4]
 8108ec8:	681b      	ldr	r3, [r3, #0]
 8108eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108ecc:	f003 0320 	and.w	r3, r3, #32
 8108ed0:	2b00      	cmp	r3, #0
 8108ed2:	d017      	beq.n	8108f04 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8108ed4:	2320      	movs	r3, #32
 8108ed6:	e021      	b.n	8108f1c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	681b      	ldr	r3, [r3, #0]
 8108edc:	4618      	mov	r0, r3
 8108ede:	f002 fd35 	bl	810b94c <SDMMC_ReadFIFO>
 8108ee2:	4602      	mov	r2, r0
 8108ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ee6:	601a      	str	r2, [r3, #0]
    pData++;
 8108ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108eea:	3304      	adds	r3, #4
 8108eec:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8108eee:	f7f9 fac7 	bl	8102480 <HAL_GetTick>
 8108ef2:	4602      	mov	r2, r0
 8108ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ef6:	1ad3      	subs	r3, r2, r3
 8108ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108efc:	d102      	bne.n	8108f04 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8108efe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108f02:	e00b      	b.n	8108f1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	681b      	ldr	r3, [r3, #0]
 8108f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108f0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8108f0e:	2b00      	cmp	r3, #0
 8108f10:	d1e2      	bne.n	8108ed8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108f12:	687b      	ldr	r3, [r7, #4]
 8108f14:	681b      	ldr	r3, [r3, #0]
 8108f16:	4a03      	ldr	r2, [pc, #12]	@ (8108f24 <SD_SendSDStatus+0x19c>)
 8108f18:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8108f1a:	2300      	movs	r3, #0
}
 8108f1c:	4618      	mov	r0, r3
 8108f1e:	3730      	adds	r7, #48	@ 0x30
 8108f20:	46bd      	mov	sp, r7
 8108f22:	bd80      	pop	{r7, pc}
 8108f24:	18000f3a 	.word	0x18000f3a

08108f28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8108f28:	b580      	push	{r7, lr}
 8108f2a:	b084      	sub	sp, #16
 8108f2c:	af00      	add	r7, sp, #0
 8108f2e:	6078      	str	r0, [r7, #4]
 8108f30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8108f32:	683b      	ldr	r3, [r7, #0]
 8108f34:	2b00      	cmp	r3, #0
 8108f36:	d102      	bne.n	8108f3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8108f38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8108f3c:	e018      	b.n	8108f70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	681a      	ldr	r2, [r3, #0]
 8108f42:	687b      	ldr	r3, [r7, #4]
 8108f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108f46:	041b      	lsls	r3, r3, #16
 8108f48:	4619      	mov	r1, r3
 8108f4a:	4610      	mov	r0, r2
 8108f4c:	f002 ff0d 	bl	810bd6a <SDMMC_CmdSendStatus>
 8108f50:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108f52:	68fb      	ldr	r3, [r7, #12]
 8108f54:	2b00      	cmp	r3, #0
 8108f56:	d001      	beq.n	8108f5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8108f58:	68fb      	ldr	r3, [r7, #12]
 8108f5a:	e009      	b.n	8108f70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	2100      	movs	r1, #0
 8108f62:	4618      	mov	r0, r3
 8108f64:	f002 fd55 	bl	810ba12 <SDMMC_GetResponse>
 8108f68:	4602      	mov	r2, r0
 8108f6a:	683b      	ldr	r3, [r7, #0]
 8108f6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8108f6e:	2300      	movs	r3, #0
}
 8108f70:	4618      	mov	r0, r3
 8108f72:	3710      	adds	r7, #16
 8108f74:	46bd      	mov	sp, r7
 8108f76:	bd80      	pop	{r7, pc}

08108f78 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8108f78:	b580      	push	{r7, lr}
 8108f7a:	b086      	sub	sp, #24
 8108f7c:	af00      	add	r7, sp, #0
 8108f7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8108f80:	2300      	movs	r3, #0
 8108f82:	60fb      	str	r3, [r7, #12]
 8108f84:	2300      	movs	r3, #0
 8108f86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	681b      	ldr	r3, [r3, #0]
 8108f8c:	2100      	movs	r1, #0
 8108f8e:	4618      	mov	r0, r3
 8108f90:	f002 fd3f 	bl	810ba12 <SDMMC_GetResponse>
 8108f94:	4603      	mov	r3, r0
 8108f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8108f9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8108f9e:	d102      	bne.n	8108fa6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8108fa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108fa4:	e02f      	b.n	8109006 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8108fa6:	f107 030c 	add.w	r3, r7, #12
 8108faa:	4619      	mov	r1, r3
 8108fac:	6878      	ldr	r0, [r7, #4]
 8108fae:	f000 f879 	bl	81090a4 <SD_FindSCR>
 8108fb2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108fb4:	697b      	ldr	r3, [r7, #20]
 8108fb6:	2b00      	cmp	r3, #0
 8108fb8:	d001      	beq.n	8108fbe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8108fba:	697b      	ldr	r3, [r7, #20]
 8108fbc:	e023      	b.n	8109006 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8108fbe:	693b      	ldr	r3, [r7, #16]
 8108fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8108fc4:	2b00      	cmp	r3, #0
 8108fc6:	d01c      	beq.n	8109002 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	681a      	ldr	r2, [r3, #0]
 8108fcc:	687b      	ldr	r3, [r7, #4]
 8108fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108fd0:	041b      	lsls	r3, r3, #16
 8108fd2:	4619      	mov	r1, r3
 8108fd4:	4610      	mov	r0, r2
 8108fd6:	f002 fddf 	bl	810bb98 <SDMMC_CmdAppCommand>
 8108fda:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108fdc:	697b      	ldr	r3, [r7, #20]
 8108fde:	2b00      	cmp	r3, #0
 8108fe0:	d001      	beq.n	8108fe6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8108fe2:	697b      	ldr	r3, [r7, #20]
 8108fe4:	e00f      	b.n	8109006 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8108fe6:	687b      	ldr	r3, [r7, #4]
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	2102      	movs	r1, #2
 8108fec:	4618      	mov	r0, r3
 8108fee:	f002 fe16 	bl	810bc1e <SDMMC_CmdBusWidth>
 8108ff2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8108ff4:	697b      	ldr	r3, [r7, #20]
 8108ff6:	2b00      	cmp	r3, #0
 8108ff8:	d001      	beq.n	8108ffe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8108ffa:	697b      	ldr	r3, [r7, #20]
 8108ffc:	e003      	b.n	8109006 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8108ffe:	2300      	movs	r3, #0
 8109000:	e001      	b.n	8109006 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109002:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8109006:	4618      	mov	r0, r3
 8109008:	3718      	adds	r7, #24
 810900a:	46bd      	mov	sp, r7
 810900c:	bd80      	pop	{r7, pc}

0810900e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810900e:	b580      	push	{r7, lr}
 8109010:	b086      	sub	sp, #24
 8109012:	af00      	add	r7, sp, #0
 8109014:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109016:	2300      	movs	r3, #0
 8109018:	60fb      	str	r3, [r7, #12]
 810901a:	2300      	movs	r3, #0
 810901c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810901e:	687b      	ldr	r3, [r7, #4]
 8109020:	681b      	ldr	r3, [r3, #0]
 8109022:	2100      	movs	r1, #0
 8109024:	4618      	mov	r0, r3
 8109026:	f002 fcf4 	bl	810ba12 <SDMMC_GetResponse>
 810902a:	4603      	mov	r3, r0
 810902c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109030:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109034:	d102      	bne.n	810903c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109036:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810903a:	e02f      	b.n	810909c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810903c:	f107 030c 	add.w	r3, r7, #12
 8109040:	4619      	mov	r1, r3
 8109042:	6878      	ldr	r0, [r7, #4]
 8109044:	f000 f82e 	bl	81090a4 <SD_FindSCR>
 8109048:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810904a:	697b      	ldr	r3, [r7, #20]
 810904c:	2b00      	cmp	r3, #0
 810904e:	d001      	beq.n	8109054 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109050:	697b      	ldr	r3, [r7, #20]
 8109052:	e023      	b.n	810909c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109054:	693b      	ldr	r3, [r7, #16]
 8109056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810905a:	2b00      	cmp	r3, #0
 810905c:	d01c      	beq.n	8109098 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810905e:	687b      	ldr	r3, [r7, #4]
 8109060:	681a      	ldr	r2, [r3, #0]
 8109062:	687b      	ldr	r3, [r7, #4]
 8109064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109066:	041b      	lsls	r3, r3, #16
 8109068:	4619      	mov	r1, r3
 810906a:	4610      	mov	r0, r2
 810906c:	f002 fd94 	bl	810bb98 <SDMMC_CmdAppCommand>
 8109070:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109072:	697b      	ldr	r3, [r7, #20]
 8109074:	2b00      	cmp	r3, #0
 8109076:	d001      	beq.n	810907c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8109078:	697b      	ldr	r3, [r7, #20]
 810907a:	e00f      	b.n	810909c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	681b      	ldr	r3, [r3, #0]
 8109080:	2100      	movs	r1, #0
 8109082:	4618      	mov	r0, r3
 8109084:	f002 fdcb 	bl	810bc1e <SDMMC_CmdBusWidth>
 8109088:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810908a:	697b      	ldr	r3, [r7, #20]
 810908c:	2b00      	cmp	r3, #0
 810908e:	d001      	beq.n	8109094 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8109090:	697b      	ldr	r3, [r7, #20]
 8109092:	e003      	b.n	810909c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109094:	2300      	movs	r3, #0
 8109096:	e001      	b.n	810909c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109098:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 810909c:	4618      	mov	r0, r3
 810909e:	3718      	adds	r7, #24
 81090a0:	46bd      	mov	sp, r7
 81090a2:	bd80      	pop	{r7, pc}

081090a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 81090a4:	b580      	push	{r7, lr}
 81090a6:	b08e      	sub	sp, #56	@ 0x38
 81090a8:	af00      	add	r7, sp, #0
 81090aa:	6078      	str	r0, [r7, #4]
 81090ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81090ae:	f7f9 f9e7 	bl	8102480 <HAL_GetTick>
 81090b2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 81090b4:	2300      	movs	r3, #0
 81090b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 81090b8:	2300      	movs	r3, #0
 81090ba:	60bb      	str	r3, [r7, #8]
 81090bc:	2300      	movs	r3, #0
 81090be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 81090c0:	683b      	ldr	r3, [r7, #0]
 81090c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	681b      	ldr	r3, [r3, #0]
 81090c8:	2108      	movs	r1, #8
 81090ca:	4618      	mov	r0, r3
 81090cc:	f002 fce0 	bl	810ba90 <SDMMC_CmdBlockLength>
 81090d0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81090d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81090d4:	2b00      	cmp	r3, #0
 81090d6:	d001      	beq.n	81090dc <SD_FindSCR+0x38>
  {
    return errorstate;
 81090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81090da:	e0ad      	b.n	8109238 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 81090dc:	687b      	ldr	r3, [r7, #4]
 81090de:	681a      	ldr	r2, [r3, #0]
 81090e0:	687b      	ldr	r3, [r7, #4]
 81090e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81090e4:	041b      	lsls	r3, r3, #16
 81090e6:	4619      	mov	r1, r3
 81090e8:	4610      	mov	r0, r2
 81090ea:	f002 fd55 	bl	810bb98 <SDMMC_CmdAppCommand>
 81090ee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81090f2:	2b00      	cmp	r3, #0
 81090f4:	d001      	beq.n	81090fa <SD_FindSCR+0x56>
  {
    return errorstate;
 81090f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81090f8:	e09e      	b.n	8109238 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81090fa:	f04f 33ff 	mov.w	r3, #4294967295
 81090fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8109100:	2308      	movs	r3, #8
 8109102:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8109104:	2330      	movs	r3, #48	@ 0x30
 8109106:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109108:	2302      	movs	r3, #2
 810910a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810910c:	2300      	movs	r3, #0
 810910e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109110:	2301      	movs	r3, #1
 8109112:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	681b      	ldr	r3, [r3, #0]
 8109118:	f107 0210 	add.w	r2, r7, #16
 810911c:	4611      	mov	r1, r2
 810911e:	4618      	mov	r0, r3
 8109120:	f002 fc8a 	bl	810ba38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8109124:	687b      	ldr	r3, [r7, #4]
 8109126:	681b      	ldr	r3, [r3, #0]
 8109128:	4618      	mov	r0, r3
 810912a:	f002 fd9b 	bl	810bc64 <SDMMC_CmdSendSCR>
 810912e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109132:	2b00      	cmp	r3, #0
 8109134:	d027      	beq.n	8109186 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8109136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109138:	e07e      	b.n	8109238 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810913a:	687b      	ldr	r3, [r7, #4]
 810913c:	681b      	ldr	r3, [r3, #0]
 810913e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8109144:	2b00      	cmp	r3, #0
 8109146:	d113      	bne.n	8109170 <SD_FindSCR+0xcc>
 8109148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810914a:	2b00      	cmp	r3, #0
 810914c:	d110      	bne.n	8109170 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810914e:	687b      	ldr	r3, [r7, #4]
 8109150:	681b      	ldr	r3, [r3, #0]
 8109152:	4618      	mov	r0, r3
 8109154:	f002 fbfa 	bl	810b94c <SDMMC_ReadFIFO>
 8109158:	4603      	mov	r3, r0
 810915a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810915c:	687b      	ldr	r3, [r7, #4]
 810915e:	681b      	ldr	r3, [r3, #0]
 8109160:	4618      	mov	r0, r3
 8109162:	f002 fbf3 	bl	810b94c <SDMMC_ReadFIFO>
 8109166:	4603      	mov	r3, r0
 8109168:	60fb      	str	r3, [r7, #12]
      index++;
 810916a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810916c:	3301      	adds	r3, #1
 810916e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109170:	f7f9 f986 	bl	8102480 <HAL_GetTick>
 8109174:	4602      	mov	r2, r0
 8109176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109178:	1ad3      	subs	r3, r2, r3
 810917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810917e:	d102      	bne.n	8109186 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109180:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109184:	e058      	b.n	8109238 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	681b      	ldr	r3, [r3, #0]
 810918a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810918c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8109190:	4013      	ands	r3, r2
 8109192:	2b00      	cmp	r3, #0
 8109194:	d0d1      	beq.n	810913a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109196:	687b      	ldr	r3, [r7, #4]
 8109198:	681b      	ldr	r3, [r3, #0]
 810919a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810919c:	f003 0308 	and.w	r3, r3, #8
 81091a0:	2b00      	cmp	r3, #0
 81091a2:	d005      	beq.n	81091b0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	681b      	ldr	r3, [r3, #0]
 81091a8:	2208      	movs	r2, #8
 81091aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 81091ac:	2308      	movs	r3, #8
 81091ae:	e043      	b.n	8109238 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	681b      	ldr	r3, [r3, #0]
 81091b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81091b6:	f003 0302 	and.w	r3, r3, #2
 81091ba:	2b00      	cmp	r3, #0
 81091bc:	d005      	beq.n	81091ca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	681b      	ldr	r3, [r3, #0]
 81091c2:	2202      	movs	r2, #2
 81091c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81091c6:	2302      	movs	r3, #2
 81091c8:	e036      	b.n	8109238 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	681b      	ldr	r3, [r3, #0]
 81091ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81091d0:	f003 0320 	and.w	r3, r3, #32
 81091d4:	2b00      	cmp	r3, #0
 81091d6:	d005      	beq.n	81091e4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	681b      	ldr	r3, [r3, #0]
 81091dc:	2220      	movs	r2, #32
 81091de:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 81091e0:	2320      	movs	r3, #32
 81091e2:	e029      	b.n	8109238 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81091e4:	687b      	ldr	r3, [r7, #4]
 81091e6:	681b      	ldr	r3, [r3, #0]
 81091e8:	4a15      	ldr	r2, [pc, #84]	@ (8109240 <SD_FindSCR+0x19c>)
 81091ea:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 81091ec:	68fb      	ldr	r3, [r7, #12]
 81091ee:	061a      	lsls	r2, r3, #24
 81091f0:	68fb      	ldr	r3, [r7, #12]
 81091f2:	021b      	lsls	r3, r3, #8
 81091f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81091f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 81091fa:	68fb      	ldr	r3, [r7, #12]
 81091fc:	0a1b      	lsrs	r3, r3, #8
 81091fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8109202:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8109204:	68fb      	ldr	r3, [r7, #12]
 8109206:	0e1b      	lsrs	r3, r3, #24
 8109208:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 810920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810920c:	601a      	str	r2, [r3, #0]
    scr++;
 810920e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109210:	3304      	adds	r3, #4
 8109212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109214:	68bb      	ldr	r3, [r7, #8]
 8109216:	061a      	lsls	r2, r3, #24
 8109218:	68bb      	ldr	r3, [r7, #8]
 810921a:	021b      	lsls	r3, r3, #8
 810921c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109220:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8109222:	68bb      	ldr	r3, [r7, #8]
 8109224:	0a1b      	lsrs	r3, r3, #8
 8109226:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 810922a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 810922c:	68bb      	ldr	r3, [r7, #8]
 810922e:	0e1b      	lsrs	r3, r3, #24
 8109230:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109234:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8109236:	2300      	movs	r3, #0
}
 8109238:	4618      	mov	r0, r3
 810923a:	3738      	adds	r7, #56	@ 0x38
 810923c:	46bd      	mov	sp, r7
 810923e:	bd80      	pop	{r7, pc}
 8109240:	18000f3a 	.word	0x18000f3a

08109244 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8109244:	b580      	push	{r7, lr}
 8109246:	b082      	sub	sp, #8
 8109248:	af00      	add	r7, sp, #0
 810924a:	6078      	str	r0, [r7, #4]
 810924c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 810924e:	687b      	ldr	r3, [r7, #4]
 8109250:	2b00      	cmp	r3, #0
 8109252:	d101      	bne.n	8109258 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8109254:	2301      	movs	r3, #1
 8109256:	e02b      	b.n	81092b0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8109258:	687b      	ldr	r3, [r7, #4]
 810925a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 810925e:	b2db      	uxtb	r3, r3
 8109260:	2b00      	cmp	r3, #0
 8109262:	d106      	bne.n	8109272 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	2200      	movs	r2, #0
 8109268:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 810926c:	6878      	ldr	r0, [r7, #4]
 810926e:	f7f8 ff37 	bl	81020e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	2202      	movs	r2, #2
 8109276:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810927a:	687b      	ldr	r3, [r7, #4]
 810927c:	681a      	ldr	r2, [r3, #0]
 810927e:	687b      	ldr	r3, [r7, #4]
 8109280:	3304      	adds	r3, #4
 8109282:	4619      	mov	r1, r3
 8109284:	4610      	mov	r0, r2
 8109286:	f002 fa71 	bl	810b76c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810928a:	687b      	ldr	r3, [r7, #4]
 810928c:	6818      	ldr	r0, [r3, #0]
 810928e:	687b      	ldr	r3, [r7, #4]
 8109290:	685b      	ldr	r3, [r3, #4]
 8109292:	461a      	mov	r2, r3
 8109294:	6839      	ldr	r1, [r7, #0]
 8109296:	f002 fac6 	bl	810b826 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810929a:	4b07      	ldr	r3, [pc, #28]	@ (81092b8 <HAL_SDRAM_Init+0x74>)
 810929c:	681b      	ldr	r3, [r3, #0]
 810929e:	4a06      	ldr	r2, [pc, #24]	@ (81092b8 <HAL_SDRAM_Init+0x74>)
 81092a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81092a4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	2201      	movs	r2, #1
 81092aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 81092ae:	2300      	movs	r3, #0
}
 81092b0:	4618      	mov	r0, r3
 81092b2:	3708      	adds	r7, #8
 81092b4:	46bd      	mov	sp, r7
 81092b6:	bd80      	pop	{r7, pc}
 81092b8:	52004000 	.word	0x52004000

081092bc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 81092bc:	b580      	push	{r7, lr}
 81092be:	b084      	sub	sp, #16
 81092c0:	af00      	add	r7, sp, #0
 81092c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	2b00      	cmp	r3, #0
 81092c8:	d101      	bne.n	81092ce <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 81092ca:	2301      	movs	r3, #1
 81092cc:	e05e      	b.n	810938c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 81092d4:	b2db      	uxtb	r3, r3
 81092d6:	2b00      	cmp	r3, #0
 81092d8:	d106      	bne.n	81092e8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	2200      	movs	r2, #0
 81092de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 81092e2:	6878      	ldr	r0, [r7, #4]
 81092e4:	f7f8 fb80 	bl	81019e8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 81092e8:	687b      	ldr	r3, [r7, #4]
 81092ea:	2202      	movs	r2, #2
 81092ec:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 81092f0:	687b      	ldr	r3, [r7, #4]
 81092f2:	681b      	ldr	r3, [r3, #0]
 81092f4:	681a      	ldr	r2, [r3, #0]
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	681b      	ldr	r3, [r3, #0]
 81092fa:	f022 0203 	bic.w	r2, r2, #3
 81092fe:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	681b      	ldr	r3, [r3, #0]
 8109304:	681b      	ldr	r3, [r3, #0]
 8109306:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8109308:	68fa      	ldr	r2, [r7, #12]
 810930a:	4b22      	ldr	r3, [pc, #136]	@ (8109394 <HAL_SPDIFRX_Init+0xd8>)
 810930c:	4013      	ands	r3, r2
 810930e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8109314:	687b      	ldr	r3, [r7, #4]
 8109316:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8109318:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810931e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8109320:	687b      	ldr	r3, [r7, #4]
 8109322:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8109324:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810932a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 810932c:	687b      	ldr	r3, [r7, #4]
 810932e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8109330:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8109332:	687b      	ldr	r3, [r7, #4]
 8109334:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8109336:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8109338:	687b      	ldr	r3, [r7, #4]
 810933a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 810933c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810933e:	687b      	ldr	r3, [r7, #4]
 8109340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8109342:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8109348:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810934a:	68fa      	ldr	r2, [r7, #12]
 810934c:	4313      	orrs	r3, r2
 810934e:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8109356:	2b01      	cmp	r3, #1
 8109358:	d103      	bne.n	8109362 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810935a:	68fb      	ldr	r3, [r7, #12]
 810935c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8109360:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8109362:	687b      	ldr	r3, [r7, #4]
 8109364:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8109368:	2b01      	cmp	r3, #1
 810936a:	d103      	bne.n	8109374 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810936c:	68fb      	ldr	r3, [r7, #12]
 810936e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8109372:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8109374:	687b      	ldr	r3, [r7, #4]
 8109376:	681b      	ldr	r3, [r3, #0]
 8109378:	68fa      	ldr	r2, [r7, #12]
 810937a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810937c:	687b      	ldr	r3, [r7, #4]
 810937e:	2200      	movs	r2, #0
 8109380:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8109382:	687b      	ldr	r3, [r7, #4]
 8109384:	2201      	movs	r2, #1
 8109386:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810938a:	2300      	movs	r3, #0
}
 810938c:	4618      	mov	r0, r3
 810938e:	3710      	adds	r7, #16
 8109390:	46bd      	mov	sp, r7
 8109392:	bd80      	pop	{r7, pc}
 8109394:	ffc88407 	.word	0xffc88407

08109398 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8109398:	b580      	push	{r7, lr}
 810939a:	b084      	sub	sp, #16
 810939c:	af00      	add	r7, sp, #0
 810939e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	2b00      	cmp	r3, #0
 81093a4:	d101      	bne.n	81093aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81093a6:	2301      	movs	r3, #1
 81093a8:	e10f      	b.n	81095ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	2200      	movs	r2, #0
 81093ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	681b      	ldr	r3, [r3, #0]
 81093b4:	4a87      	ldr	r2, [pc, #540]	@ (81095d4 <HAL_SPI_Init+0x23c>)
 81093b6:	4293      	cmp	r3, r2
 81093b8:	d00f      	beq.n	81093da <HAL_SPI_Init+0x42>
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	681b      	ldr	r3, [r3, #0]
 81093be:	4a86      	ldr	r2, [pc, #536]	@ (81095d8 <HAL_SPI_Init+0x240>)
 81093c0:	4293      	cmp	r3, r2
 81093c2:	d00a      	beq.n	81093da <HAL_SPI_Init+0x42>
 81093c4:	687b      	ldr	r3, [r7, #4]
 81093c6:	681b      	ldr	r3, [r3, #0]
 81093c8:	4a84      	ldr	r2, [pc, #528]	@ (81095dc <HAL_SPI_Init+0x244>)
 81093ca:	4293      	cmp	r3, r2
 81093cc:	d005      	beq.n	81093da <HAL_SPI_Init+0x42>
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	68db      	ldr	r3, [r3, #12]
 81093d2:	2b0f      	cmp	r3, #15
 81093d4:	d901      	bls.n	81093da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81093d6:	2301      	movs	r3, #1
 81093d8:	e0f7      	b.n	81095ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81093da:	6878      	ldr	r0, [r7, #4]
 81093dc:	f000 f900 	bl	81095e0 <SPI_GetPacketSize>
 81093e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	681b      	ldr	r3, [r3, #0]
 81093e6:	4a7b      	ldr	r2, [pc, #492]	@ (81095d4 <HAL_SPI_Init+0x23c>)
 81093e8:	4293      	cmp	r3, r2
 81093ea:	d00c      	beq.n	8109406 <HAL_SPI_Init+0x6e>
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	681b      	ldr	r3, [r3, #0]
 81093f0:	4a79      	ldr	r2, [pc, #484]	@ (81095d8 <HAL_SPI_Init+0x240>)
 81093f2:	4293      	cmp	r3, r2
 81093f4:	d007      	beq.n	8109406 <HAL_SPI_Init+0x6e>
 81093f6:	687b      	ldr	r3, [r7, #4]
 81093f8:	681b      	ldr	r3, [r3, #0]
 81093fa:	4a78      	ldr	r2, [pc, #480]	@ (81095dc <HAL_SPI_Init+0x244>)
 81093fc:	4293      	cmp	r3, r2
 81093fe:	d002      	beq.n	8109406 <HAL_SPI_Init+0x6e>
 8109400:	68fb      	ldr	r3, [r7, #12]
 8109402:	2b08      	cmp	r3, #8
 8109404:	d811      	bhi.n	810942a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109406:	687b      	ldr	r3, [r7, #4]
 8109408:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810940a:	4a72      	ldr	r2, [pc, #456]	@ (81095d4 <HAL_SPI_Init+0x23c>)
 810940c:	4293      	cmp	r3, r2
 810940e:	d009      	beq.n	8109424 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	681b      	ldr	r3, [r3, #0]
 8109414:	4a70      	ldr	r2, [pc, #448]	@ (81095d8 <HAL_SPI_Init+0x240>)
 8109416:	4293      	cmp	r3, r2
 8109418:	d004      	beq.n	8109424 <HAL_SPI_Init+0x8c>
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	681b      	ldr	r3, [r3, #0]
 810941e:	4a6f      	ldr	r2, [pc, #444]	@ (81095dc <HAL_SPI_Init+0x244>)
 8109420:	4293      	cmp	r3, r2
 8109422:	d104      	bne.n	810942e <HAL_SPI_Init+0x96>
 8109424:	68fb      	ldr	r3, [r7, #12]
 8109426:	2b10      	cmp	r3, #16
 8109428:	d901      	bls.n	810942e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810942a:	2301      	movs	r3, #1
 810942c:	e0cd      	b.n	81095ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8109434:	b2db      	uxtb	r3, r3
 8109436:	2b00      	cmp	r3, #0
 8109438:	d106      	bne.n	8109448 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	2200      	movs	r2, #0
 810943e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8109442:	6878      	ldr	r0, [r7, #4]
 8109444:	f7f8 fb36 	bl	8101ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8109448:	687b      	ldr	r3, [r7, #4]
 810944a:	2202      	movs	r2, #2
 810944c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	681b      	ldr	r3, [r3, #0]
 8109454:	681a      	ldr	r2, [r3, #0]
 8109456:	687b      	ldr	r3, [r7, #4]
 8109458:	681b      	ldr	r3, [r3, #0]
 810945a:	f022 0201 	bic.w	r2, r2, #1
 810945e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	681b      	ldr	r3, [r3, #0]
 8109464:	689b      	ldr	r3, [r3, #8]
 8109466:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810946a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	699b      	ldr	r3, [r3, #24]
 8109470:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8109474:	d119      	bne.n	81094aa <HAL_SPI_Init+0x112>
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	685b      	ldr	r3, [r3, #4]
 810947a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810947e:	d103      	bne.n	8109488 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8109480:	687b      	ldr	r3, [r7, #4]
 8109482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8109484:	2b00      	cmp	r3, #0
 8109486:	d008      	beq.n	810949a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109488:	687b      	ldr	r3, [r7, #4]
 810948a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810948c:	2b00      	cmp	r3, #0
 810948e:	d10c      	bne.n	81094aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8109490:	687b      	ldr	r3, [r7, #4]
 8109492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8109494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8109498:	d107      	bne.n	81094aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810949a:	687b      	ldr	r3, [r7, #4]
 810949c:	681b      	ldr	r3, [r3, #0]
 810949e:	681a      	ldr	r2, [r3, #0]
 81094a0:	687b      	ldr	r3, [r7, #4]
 81094a2:	681b      	ldr	r3, [r3, #0]
 81094a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81094a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	685b      	ldr	r3, [r3, #4]
 81094ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81094b2:	2b00      	cmp	r3, #0
 81094b4:	d00f      	beq.n	81094d6 <HAL_SPI_Init+0x13e>
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	68db      	ldr	r3, [r3, #12]
 81094ba:	2b06      	cmp	r3, #6
 81094bc:	d90b      	bls.n	81094d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	681b      	ldr	r3, [r3, #0]
 81094c2:	681b      	ldr	r3, [r3, #0]
 81094c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81094c8:	687b      	ldr	r3, [r7, #4]
 81094ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	681b      	ldr	r3, [r3, #0]
 81094d0:	430a      	orrs	r2, r1
 81094d2:	601a      	str	r2, [r3, #0]
 81094d4:	e007      	b.n	81094e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	681b      	ldr	r3, [r3, #0]
 81094da:	681a      	ldr	r2, [r3, #0]
 81094dc:	687b      	ldr	r3, [r7, #4]
 81094de:	681b      	ldr	r3, [r3, #0]
 81094e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81094e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81094e6:	687b      	ldr	r3, [r7, #4]
 81094e8:	69da      	ldr	r2, [r3, #28]
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094ee:	431a      	orrs	r2, r3
 81094f0:	68bb      	ldr	r3, [r7, #8]
 81094f2:	431a      	orrs	r2, r3
 81094f4:	687b      	ldr	r3, [r7, #4]
 81094f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81094f8:	ea42 0103 	orr.w	r1, r2, r3
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	68da      	ldr	r2, [r3, #12]
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	681b      	ldr	r3, [r3, #0]
 8109504:	430a      	orrs	r2, r1
 8109506:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109510:	431a      	orrs	r2, r3
 8109512:	687b      	ldr	r3, [r7, #4]
 8109514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109516:	431a      	orrs	r2, r3
 8109518:	687b      	ldr	r3, [r7, #4]
 810951a:	699b      	ldr	r3, [r3, #24]
 810951c:	431a      	orrs	r2, r3
 810951e:	687b      	ldr	r3, [r7, #4]
 8109520:	691b      	ldr	r3, [r3, #16]
 8109522:	431a      	orrs	r2, r3
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	695b      	ldr	r3, [r3, #20]
 8109528:	431a      	orrs	r2, r3
 810952a:	687b      	ldr	r3, [r7, #4]
 810952c:	6a1b      	ldr	r3, [r3, #32]
 810952e:	431a      	orrs	r2, r3
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	685b      	ldr	r3, [r3, #4]
 8109534:	431a      	orrs	r2, r3
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810953a:	431a      	orrs	r2, r3
 810953c:	687b      	ldr	r3, [r7, #4]
 810953e:	689b      	ldr	r3, [r3, #8]
 8109540:	431a      	orrs	r2, r3
 8109542:	687b      	ldr	r3, [r7, #4]
 8109544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8109546:	ea42 0103 	orr.w	r1, r2, r3
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	681b      	ldr	r3, [r3, #0]
 8109552:	430a      	orrs	r2, r1
 8109554:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8109556:	687b      	ldr	r3, [r7, #4]
 8109558:	685b      	ldr	r3, [r3, #4]
 810955a:	2b00      	cmp	r3, #0
 810955c:	d113      	bne.n	8109586 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810955e:	687b      	ldr	r3, [r7, #4]
 8109560:	681b      	ldr	r3, [r3, #0]
 8109562:	689b      	ldr	r3, [r3, #8]
 8109564:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	681b      	ldr	r3, [r3, #0]
 810956c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8109570:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8109572:	687b      	ldr	r3, [r7, #4]
 8109574:	681b      	ldr	r3, [r3, #0]
 8109576:	689b      	ldr	r3, [r3, #8]
 8109578:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8109584:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8109586:	687b      	ldr	r3, [r7, #4]
 8109588:	681b      	ldr	r3, [r3, #0]
 810958a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810958c:	687b      	ldr	r3, [r7, #4]
 810958e:	681b      	ldr	r3, [r3, #0]
 8109590:	f022 0201 	bic.w	r2, r2, #1
 8109594:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8109596:	687b      	ldr	r3, [r7, #4]
 8109598:	685b      	ldr	r3, [r3, #4]
 810959a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810959e:	2b00      	cmp	r3, #0
 81095a0:	d00a      	beq.n	81095b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81095a2:	687b      	ldr	r3, [r7, #4]
 81095a4:	681b      	ldr	r3, [r3, #0]
 81095a6:	68db      	ldr	r3, [r3, #12]
 81095a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81095ac:	687b      	ldr	r3, [r7, #4]
 81095ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	681b      	ldr	r3, [r3, #0]
 81095b4:	430a      	orrs	r2, r1
 81095b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	2200      	movs	r2, #0
 81095bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	2201      	movs	r2, #1
 81095c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 81095c8:	2300      	movs	r3, #0
}
 81095ca:	4618      	mov	r0, r3
 81095cc:	3710      	adds	r7, #16
 81095ce:	46bd      	mov	sp, r7
 81095d0:	bd80      	pop	{r7, pc}
 81095d2:	bf00      	nop
 81095d4:	40013000 	.word	0x40013000
 81095d8:	40003800 	.word	0x40003800
 81095dc:	40003c00 	.word	0x40003c00

081095e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81095e0:	b480      	push	{r7}
 81095e2:	b085      	sub	sp, #20
 81095e4:	af00      	add	r7, sp, #0
 81095e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81095ec:	095b      	lsrs	r3, r3, #5
 81095ee:	3301      	adds	r3, #1
 81095f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81095f2:	687b      	ldr	r3, [r7, #4]
 81095f4:	68db      	ldr	r3, [r3, #12]
 81095f6:	3301      	adds	r3, #1
 81095f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81095fa:	68bb      	ldr	r3, [r7, #8]
 81095fc:	3307      	adds	r3, #7
 81095fe:	08db      	lsrs	r3, r3, #3
 8109600:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8109602:	68bb      	ldr	r3, [r7, #8]
 8109604:	68fa      	ldr	r2, [r7, #12]
 8109606:	fb02 f303 	mul.w	r3, r2, r3
}
 810960a:	4618      	mov	r0, r3
 810960c:	3714      	adds	r7, #20
 810960e:	46bd      	mov	sp, r7
 8109610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109614:	4770      	bx	lr

08109616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109616:	b580      	push	{r7, lr}
 8109618:	b082      	sub	sp, #8
 810961a:	af00      	add	r7, sp, #0
 810961c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	2b00      	cmp	r3, #0
 8109622:	d101      	bne.n	8109628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8109624:	2301      	movs	r3, #1
 8109626:	e049      	b.n	81096bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810962e:	b2db      	uxtb	r3, r3
 8109630:	2b00      	cmp	r3, #0
 8109632:	d106      	bne.n	8109642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	2200      	movs	r2, #0
 8109638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810963c:	6878      	ldr	r0, [r7, #4]
 810963e:	f7f8 fb63 	bl	8101d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	2202      	movs	r2, #2
 8109646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	681a      	ldr	r2, [r3, #0]
 810964e:	687b      	ldr	r3, [r7, #4]
 8109650:	3304      	adds	r3, #4
 8109652:	4619      	mov	r1, r3
 8109654:	4610      	mov	r0, r2
 8109656:	f000 fa03 	bl	8109a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810965a:	687b      	ldr	r3, [r7, #4]
 810965c:	2201      	movs	r2, #1
 810965e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109662:	687b      	ldr	r3, [r7, #4]
 8109664:	2201      	movs	r2, #1
 8109666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	2201      	movs	r2, #1
 810966e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109672:	687b      	ldr	r3, [r7, #4]
 8109674:	2201      	movs	r2, #1
 8109676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	2201      	movs	r2, #1
 810967e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	2201      	movs	r2, #1
 8109686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810968a:	687b      	ldr	r3, [r7, #4]
 810968c:	2201      	movs	r2, #1
 810968e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109692:	687b      	ldr	r3, [r7, #4]
 8109694:	2201      	movs	r2, #1
 8109696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	2201      	movs	r2, #1
 810969e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	2201      	movs	r2, #1
 81096a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	2201      	movs	r2, #1
 81096ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	2201      	movs	r2, #1
 81096b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81096ba:	2300      	movs	r3, #0
}
 81096bc:	4618      	mov	r0, r3
 81096be:	3708      	adds	r7, #8
 81096c0:	46bd      	mov	sp, r7
 81096c2:	bd80      	pop	{r7, pc}

081096c4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 81096c4:	b580      	push	{r7, lr}
 81096c6:	b082      	sub	sp, #8
 81096c8:	af00      	add	r7, sp, #0
 81096ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	2b00      	cmp	r3, #0
 81096d0:	d101      	bne.n	81096d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 81096d2:	2301      	movs	r3, #1
 81096d4:	e049      	b.n	810976a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81096dc:	b2db      	uxtb	r3, r3
 81096de:	2b00      	cmp	r3, #0
 81096e0:	d106      	bne.n	81096f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81096e2:	687b      	ldr	r3, [r7, #4]
 81096e4:	2200      	movs	r2, #0
 81096e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 81096ea:	6878      	ldr	r0, [r7, #4]
 81096ec:	f7f8 faea 	bl	8101cc4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81096f0:	687b      	ldr	r3, [r7, #4]
 81096f2:	2202      	movs	r2, #2
 81096f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	681a      	ldr	r2, [r3, #0]
 81096fc:	687b      	ldr	r3, [r7, #4]
 81096fe:	3304      	adds	r3, #4
 8109700:	4619      	mov	r1, r3
 8109702:	4610      	mov	r0, r2
 8109704:	f000 f9ac 	bl	8109a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	2201      	movs	r2, #1
 810970c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109710:	687b      	ldr	r3, [r7, #4]
 8109712:	2201      	movs	r2, #1
 8109714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	2201      	movs	r2, #1
 810971c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	2201      	movs	r2, #1
 8109724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	2201      	movs	r2, #1
 810972c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	2201      	movs	r2, #1
 8109734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	2201      	movs	r2, #1
 810973c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	2201      	movs	r2, #1
 8109744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	2201      	movs	r2, #1
 810974c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	2201      	movs	r2, #1
 8109754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109758:	687b      	ldr	r3, [r7, #4]
 810975a:	2201      	movs	r2, #1
 810975c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	2201      	movs	r2, #1
 8109764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109768:	2300      	movs	r3, #0
}
 810976a:	4618      	mov	r0, r3
 810976c:	3708      	adds	r7, #8
 810976e:	46bd      	mov	sp, r7
 8109770:	bd80      	pop	{r7, pc}

08109772 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8109772:	b580      	push	{r7, lr}
 8109774:	b082      	sub	sp, #8
 8109776:	af00      	add	r7, sp, #0
 8109778:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	2b00      	cmp	r3, #0
 810977e:	d101      	bne.n	8109784 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8109780:	2301      	movs	r3, #1
 8109782:	e049      	b.n	8109818 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810978a:	b2db      	uxtb	r3, r3
 810978c:	2b00      	cmp	r3, #0
 810978e:	d106      	bne.n	810979e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8109790:	687b      	ldr	r3, [r7, #4]
 8109792:	2200      	movs	r2, #0
 8109794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8109798:	6878      	ldr	r0, [r7, #4]
 810979a:	f000 f841 	bl	8109820 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810979e:	687b      	ldr	r3, [r7, #4]
 81097a0:	2202      	movs	r2, #2
 81097a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81097a6:	687b      	ldr	r3, [r7, #4]
 81097a8:	681a      	ldr	r2, [r3, #0]
 81097aa:	687b      	ldr	r3, [r7, #4]
 81097ac:	3304      	adds	r3, #4
 81097ae:	4619      	mov	r1, r3
 81097b0:	4610      	mov	r0, r2
 81097b2:	f000 f955 	bl	8109a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81097b6:	687b      	ldr	r3, [r7, #4]
 81097b8:	2201      	movs	r2, #1
 81097ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81097be:	687b      	ldr	r3, [r7, #4]
 81097c0:	2201      	movs	r2, #1
 81097c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81097c6:	687b      	ldr	r3, [r7, #4]
 81097c8:	2201      	movs	r2, #1
 81097ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81097ce:	687b      	ldr	r3, [r7, #4]
 81097d0:	2201      	movs	r2, #1
 81097d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81097d6:	687b      	ldr	r3, [r7, #4]
 81097d8:	2201      	movs	r2, #1
 81097da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	2201      	movs	r2, #1
 81097e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	2201      	movs	r2, #1
 81097ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81097ee:	687b      	ldr	r3, [r7, #4]
 81097f0:	2201      	movs	r2, #1
 81097f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81097f6:	687b      	ldr	r3, [r7, #4]
 81097f8:	2201      	movs	r2, #1
 81097fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81097fe:	687b      	ldr	r3, [r7, #4]
 8109800:	2201      	movs	r2, #1
 8109802:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8109806:	687b      	ldr	r3, [r7, #4]
 8109808:	2201      	movs	r2, #1
 810980a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810980e:	687b      	ldr	r3, [r7, #4]
 8109810:	2201      	movs	r2, #1
 8109812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8109816:	2300      	movs	r3, #0
}
 8109818:	4618      	mov	r0, r3
 810981a:	3708      	adds	r7, #8
 810981c:	46bd      	mov	sp, r7
 810981e:	bd80      	pop	{r7, pc}

08109820 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8109820:	b480      	push	{r7}
 8109822:	b083      	sub	sp, #12
 8109824:	af00      	add	r7, sp, #0
 8109826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8109828:	bf00      	nop
 810982a:	370c      	adds	r7, #12
 810982c:	46bd      	mov	sp, r7
 810982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109832:	4770      	bx	lr

08109834 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8109834:	b580      	push	{r7, lr}
 8109836:	b086      	sub	sp, #24
 8109838:	af00      	add	r7, sp, #0
 810983a:	60f8      	str	r0, [r7, #12]
 810983c:	60b9      	str	r1, [r7, #8]
 810983e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109840:	2300      	movs	r3, #0
 8109842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109844:	68fb      	ldr	r3, [r7, #12]
 8109846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810984a:	2b01      	cmp	r3, #1
 810984c:	d101      	bne.n	8109852 <HAL_TIM_OC_ConfigChannel+0x1e>
 810984e:	2302      	movs	r3, #2
 8109850:	e066      	b.n	8109920 <HAL_TIM_OC_ConfigChannel+0xec>
 8109852:	68fb      	ldr	r3, [r7, #12]
 8109854:	2201      	movs	r2, #1
 8109856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810985a:	687b      	ldr	r3, [r7, #4]
 810985c:	2b14      	cmp	r3, #20
 810985e:	d857      	bhi.n	8109910 <HAL_TIM_OC_ConfigChannel+0xdc>
 8109860:	a201      	add	r2, pc, #4	@ (adr r2, 8109868 <HAL_TIM_OC_ConfigChannel+0x34>)
 8109862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109866:	bf00      	nop
 8109868:	081098bd 	.word	0x081098bd
 810986c:	08109911 	.word	0x08109911
 8109870:	08109911 	.word	0x08109911
 8109874:	08109911 	.word	0x08109911
 8109878:	081098cb 	.word	0x081098cb
 810987c:	08109911 	.word	0x08109911
 8109880:	08109911 	.word	0x08109911
 8109884:	08109911 	.word	0x08109911
 8109888:	081098d9 	.word	0x081098d9
 810988c:	08109911 	.word	0x08109911
 8109890:	08109911 	.word	0x08109911
 8109894:	08109911 	.word	0x08109911
 8109898:	081098e7 	.word	0x081098e7
 810989c:	08109911 	.word	0x08109911
 81098a0:	08109911 	.word	0x08109911
 81098a4:	08109911 	.word	0x08109911
 81098a8:	081098f5 	.word	0x081098f5
 81098ac:	08109911 	.word	0x08109911
 81098b0:	08109911 	.word	0x08109911
 81098b4:	08109911 	.word	0x08109911
 81098b8:	08109903 	.word	0x08109903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81098bc:	68fb      	ldr	r3, [r7, #12]
 81098be:	681b      	ldr	r3, [r3, #0]
 81098c0:	68b9      	ldr	r1, [r7, #8]
 81098c2:	4618      	mov	r0, r3
 81098c4:	f000 f96c 	bl	8109ba0 <TIM_OC1_SetConfig>
      break;
 81098c8:	e025      	b.n	8109916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81098ca:	68fb      	ldr	r3, [r7, #12]
 81098cc:	681b      	ldr	r3, [r3, #0]
 81098ce:	68b9      	ldr	r1, [r7, #8]
 81098d0:	4618      	mov	r0, r3
 81098d2:	f000 f9f5 	bl	8109cc0 <TIM_OC2_SetConfig>
      break;
 81098d6:	e01e      	b.n	8109916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81098d8:	68fb      	ldr	r3, [r7, #12]
 81098da:	681b      	ldr	r3, [r3, #0]
 81098dc:	68b9      	ldr	r1, [r7, #8]
 81098de:	4618      	mov	r0, r3
 81098e0:	f000 fa78 	bl	8109dd4 <TIM_OC3_SetConfig>
      break;
 81098e4:	e017      	b.n	8109916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81098e6:	68fb      	ldr	r3, [r7, #12]
 81098e8:	681b      	ldr	r3, [r3, #0]
 81098ea:	68b9      	ldr	r1, [r7, #8]
 81098ec:	4618      	mov	r0, r3
 81098ee:	f000 faf9 	bl	8109ee4 <TIM_OC4_SetConfig>
      break;
 81098f2:	e010      	b.n	8109916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81098f4:	68fb      	ldr	r3, [r7, #12]
 81098f6:	681b      	ldr	r3, [r3, #0]
 81098f8:	68b9      	ldr	r1, [r7, #8]
 81098fa:	4618      	mov	r0, r3
 81098fc:	f000 fb5c 	bl	8109fb8 <TIM_OC5_SetConfig>
      break;
 8109900:	e009      	b.n	8109916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8109902:	68fb      	ldr	r3, [r7, #12]
 8109904:	681b      	ldr	r3, [r3, #0]
 8109906:	68b9      	ldr	r1, [r7, #8]
 8109908:	4618      	mov	r0, r3
 810990a:	f000 fbb9 	bl	810a080 <TIM_OC6_SetConfig>
      break;
 810990e:	e002      	b.n	8109916 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8109910:	2301      	movs	r3, #1
 8109912:	75fb      	strb	r3, [r7, #23]
      break;
 8109914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8109916:	68fb      	ldr	r3, [r7, #12]
 8109918:	2200      	movs	r2, #0
 810991a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810991e:	7dfb      	ldrb	r3, [r7, #23]
}
 8109920:	4618      	mov	r0, r3
 8109922:	3718      	adds	r7, #24
 8109924:	46bd      	mov	sp, r7
 8109926:	bd80      	pop	{r7, pc}

08109928 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8109928:	b580      	push	{r7, lr}
 810992a:	b086      	sub	sp, #24
 810992c:	af00      	add	r7, sp, #0
 810992e:	60f8      	str	r0, [r7, #12]
 8109930:	60b9      	str	r1, [r7, #8]
 8109932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109934:	2300      	movs	r3, #0
 8109936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8109938:	68fb      	ldr	r3, [r7, #12]
 810993a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810993e:	2b01      	cmp	r3, #1
 8109940:	d101      	bne.n	8109946 <HAL_TIM_IC_ConfigChannel+0x1e>
 8109942:	2302      	movs	r3, #2
 8109944:	e088      	b.n	8109a58 <HAL_TIM_IC_ConfigChannel+0x130>
 8109946:	68fb      	ldr	r3, [r7, #12]
 8109948:	2201      	movs	r2, #1
 810994a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 810994e:	687b      	ldr	r3, [r7, #4]
 8109950:	2b00      	cmp	r3, #0
 8109952:	d11b      	bne.n	810998c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8109954:	68fb      	ldr	r3, [r7, #12]
 8109956:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8109958:	68bb      	ldr	r3, [r7, #8]
 810995a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810995c:	68bb      	ldr	r3, [r7, #8]
 810995e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8109960:	68bb      	ldr	r3, [r7, #8]
 8109962:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8109964:	f000 fbf2 	bl	810a14c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8109968:	68fb      	ldr	r3, [r7, #12]
 810996a:	681b      	ldr	r3, [r3, #0]
 810996c:	699a      	ldr	r2, [r3, #24]
 810996e:	68fb      	ldr	r3, [r7, #12]
 8109970:	681b      	ldr	r3, [r3, #0]
 8109972:	f022 020c 	bic.w	r2, r2, #12
 8109976:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8109978:	68fb      	ldr	r3, [r7, #12]
 810997a:	681b      	ldr	r3, [r3, #0]
 810997c:	6999      	ldr	r1, [r3, #24]
 810997e:	68bb      	ldr	r3, [r7, #8]
 8109980:	689a      	ldr	r2, [r3, #8]
 8109982:	68fb      	ldr	r3, [r7, #12]
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	430a      	orrs	r2, r1
 8109988:	619a      	str	r2, [r3, #24]
 810998a:	e060      	b.n	8109a4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	2b04      	cmp	r3, #4
 8109990:	d11c      	bne.n	81099cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8109992:	68fb      	ldr	r3, [r7, #12]
 8109994:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8109996:	68bb      	ldr	r3, [r7, #8]
 8109998:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810999a:	68bb      	ldr	r3, [r7, #8]
 810999c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810999e:	68bb      	ldr	r3, [r7, #8]
 81099a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 81099a2:	f000 fc47 	bl	810a234 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 81099a6:	68fb      	ldr	r3, [r7, #12]
 81099a8:	681b      	ldr	r3, [r3, #0]
 81099aa:	699a      	ldr	r2, [r3, #24]
 81099ac:	68fb      	ldr	r3, [r7, #12]
 81099ae:	681b      	ldr	r3, [r3, #0]
 81099b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 81099b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 81099b6:	68fb      	ldr	r3, [r7, #12]
 81099b8:	681b      	ldr	r3, [r3, #0]
 81099ba:	6999      	ldr	r1, [r3, #24]
 81099bc:	68bb      	ldr	r3, [r7, #8]
 81099be:	689b      	ldr	r3, [r3, #8]
 81099c0:	021a      	lsls	r2, r3, #8
 81099c2:	68fb      	ldr	r3, [r7, #12]
 81099c4:	681b      	ldr	r3, [r3, #0]
 81099c6:	430a      	orrs	r2, r1
 81099c8:	619a      	str	r2, [r3, #24]
 81099ca:	e040      	b.n	8109a4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	2b08      	cmp	r3, #8
 81099d0:	d11b      	bne.n	8109a0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 81099d2:	68fb      	ldr	r3, [r7, #12]
 81099d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81099d6:	68bb      	ldr	r3, [r7, #8]
 81099d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81099da:	68bb      	ldr	r3, [r7, #8]
 81099dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81099de:	68bb      	ldr	r3, [r7, #8]
 81099e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 81099e2:	f000 fc64 	bl	810a2ae <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 81099e6:	68fb      	ldr	r3, [r7, #12]
 81099e8:	681b      	ldr	r3, [r3, #0]
 81099ea:	69da      	ldr	r2, [r3, #28]
 81099ec:	68fb      	ldr	r3, [r7, #12]
 81099ee:	681b      	ldr	r3, [r3, #0]
 81099f0:	f022 020c 	bic.w	r2, r2, #12
 81099f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 81099f6:	68fb      	ldr	r3, [r7, #12]
 81099f8:	681b      	ldr	r3, [r3, #0]
 81099fa:	69d9      	ldr	r1, [r3, #28]
 81099fc:	68bb      	ldr	r3, [r7, #8]
 81099fe:	689a      	ldr	r2, [r3, #8]
 8109a00:	68fb      	ldr	r3, [r7, #12]
 8109a02:	681b      	ldr	r3, [r3, #0]
 8109a04:	430a      	orrs	r2, r1
 8109a06:	61da      	str	r2, [r3, #28]
 8109a08:	e021      	b.n	8109a4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8109a0a:	687b      	ldr	r3, [r7, #4]
 8109a0c:	2b0c      	cmp	r3, #12
 8109a0e:	d11c      	bne.n	8109a4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8109a10:	68fb      	ldr	r3, [r7, #12]
 8109a12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8109a14:	68bb      	ldr	r3, [r7, #8]
 8109a16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8109a18:	68bb      	ldr	r3, [r7, #8]
 8109a1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8109a1c:	68bb      	ldr	r3, [r7, #8]
 8109a1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8109a20:	f000 fc81 	bl	810a326 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8109a24:	68fb      	ldr	r3, [r7, #12]
 8109a26:	681b      	ldr	r3, [r3, #0]
 8109a28:	69da      	ldr	r2, [r3, #28]
 8109a2a:	68fb      	ldr	r3, [r7, #12]
 8109a2c:	681b      	ldr	r3, [r3, #0]
 8109a2e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8109a32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8109a34:	68fb      	ldr	r3, [r7, #12]
 8109a36:	681b      	ldr	r3, [r3, #0]
 8109a38:	69d9      	ldr	r1, [r3, #28]
 8109a3a:	68bb      	ldr	r3, [r7, #8]
 8109a3c:	689b      	ldr	r3, [r3, #8]
 8109a3e:	021a      	lsls	r2, r3, #8
 8109a40:	68fb      	ldr	r3, [r7, #12]
 8109a42:	681b      	ldr	r3, [r3, #0]
 8109a44:	430a      	orrs	r2, r1
 8109a46:	61da      	str	r2, [r3, #28]
 8109a48:	e001      	b.n	8109a4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8109a4a:	2301      	movs	r3, #1
 8109a4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8109a4e:	68fb      	ldr	r3, [r7, #12]
 8109a50:	2200      	movs	r2, #0
 8109a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8109a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8109a58:	4618      	mov	r0, r3
 8109a5a:	3718      	adds	r7, #24
 8109a5c:	46bd      	mov	sp, r7
 8109a5e:	bd80      	pop	{r7, pc}

08109a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8109a60:	b480      	push	{r7}
 8109a62:	b085      	sub	sp, #20
 8109a64:	af00      	add	r7, sp, #0
 8109a66:	6078      	str	r0, [r7, #4]
 8109a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	681b      	ldr	r3, [r3, #0]
 8109a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	4a43      	ldr	r2, [pc, #268]	@ (8109b80 <TIM_Base_SetConfig+0x120>)
 8109a74:	4293      	cmp	r3, r2
 8109a76:	d013      	beq.n	8109aa0 <TIM_Base_SetConfig+0x40>
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109a7e:	d00f      	beq.n	8109aa0 <TIM_Base_SetConfig+0x40>
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	4a40      	ldr	r2, [pc, #256]	@ (8109b84 <TIM_Base_SetConfig+0x124>)
 8109a84:	4293      	cmp	r3, r2
 8109a86:	d00b      	beq.n	8109aa0 <TIM_Base_SetConfig+0x40>
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8109b88 <TIM_Base_SetConfig+0x128>)
 8109a8c:	4293      	cmp	r3, r2
 8109a8e:	d007      	beq.n	8109aa0 <TIM_Base_SetConfig+0x40>
 8109a90:	687b      	ldr	r3, [r7, #4]
 8109a92:	4a3e      	ldr	r2, [pc, #248]	@ (8109b8c <TIM_Base_SetConfig+0x12c>)
 8109a94:	4293      	cmp	r3, r2
 8109a96:	d003      	beq.n	8109aa0 <TIM_Base_SetConfig+0x40>
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8109b90 <TIM_Base_SetConfig+0x130>)
 8109a9c:	4293      	cmp	r3, r2
 8109a9e:	d108      	bne.n	8109ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109aa0:	68fb      	ldr	r3, [r7, #12]
 8109aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109aa8:	683b      	ldr	r3, [r7, #0]
 8109aaa:	685b      	ldr	r3, [r3, #4]
 8109aac:	68fa      	ldr	r2, [r7, #12]
 8109aae:	4313      	orrs	r3, r2
 8109ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	4a32      	ldr	r2, [pc, #200]	@ (8109b80 <TIM_Base_SetConfig+0x120>)
 8109ab6:	4293      	cmp	r3, r2
 8109ab8:	d01f      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109aba:	687b      	ldr	r3, [r7, #4]
 8109abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109ac0:	d01b      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109ac2:	687b      	ldr	r3, [r7, #4]
 8109ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8109b84 <TIM_Base_SetConfig+0x124>)
 8109ac6:	4293      	cmp	r3, r2
 8109ac8:	d017      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	4a2e      	ldr	r2, [pc, #184]	@ (8109b88 <TIM_Base_SetConfig+0x128>)
 8109ace:	4293      	cmp	r3, r2
 8109ad0:	d013      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109ad2:	687b      	ldr	r3, [r7, #4]
 8109ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8109b8c <TIM_Base_SetConfig+0x12c>)
 8109ad6:	4293      	cmp	r3, r2
 8109ad8:	d00f      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109ada:	687b      	ldr	r3, [r7, #4]
 8109adc:	4a2c      	ldr	r2, [pc, #176]	@ (8109b90 <TIM_Base_SetConfig+0x130>)
 8109ade:	4293      	cmp	r3, r2
 8109ae0:	d00b      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8109b94 <TIM_Base_SetConfig+0x134>)
 8109ae6:	4293      	cmp	r3, r2
 8109ae8:	d007      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	4a2a      	ldr	r2, [pc, #168]	@ (8109b98 <TIM_Base_SetConfig+0x138>)
 8109aee:	4293      	cmp	r3, r2
 8109af0:	d003      	beq.n	8109afa <TIM_Base_SetConfig+0x9a>
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	4a29      	ldr	r2, [pc, #164]	@ (8109b9c <TIM_Base_SetConfig+0x13c>)
 8109af6:	4293      	cmp	r3, r2
 8109af8:	d108      	bne.n	8109b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109afa:	68fb      	ldr	r3, [r7, #12]
 8109afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109b02:	683b      	ldr	r3, [r7, #0]
 8109b04:	68db      	ldr	r3, [r3, #12]
 8109b06:	68fa      	ldr	r2, [r7, #12]
 8109b08:	4313      	orrs	r3, r2
 8109b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109b0c:	68fb      	ldr	r3, [r7, #12]
 8109b0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109b12:	683b      	ldr	r3, [r7, #0]
 8109b14:	695b      	ldr	r3, [r3, #20]
 8109b16:	4313      	orrs	r3, r2
 8109b18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109b1a:	683b      	ldr	r3, [r7, #0]
 8109b1c:	689a      	ldr	r2, [r3, #8]
 8109b1e:	687b      	ldr	r3, [r7, #4]
 8109b20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109b22:	683b      	ldr	r3, [r7, #0]
 8109b24:	681a      	ldr	r2, [r3, #0]
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	4a14      	ldr	r2, [pc, #80]	@ (8109b80 <TIM_Base_SetConfig+0x120>)
 8109b2e:	4293      	cmp	r3, r2
 8109b30:	d00f      	beq.n	8109b52 <TIM_Base_SetConfig+0xf2>
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	4a16      	ldr	r2, [pc, #88]	@ (8109b90 <TIM_Base_SetConfig+0x130>)
 8109b36:	4293      	cmp	r3, r2
 8109b38:	d00b      	beq.n	8109b52 <TIM_Base_SetConfig+0xf2>
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	4a15      	ldr	r2, [pc, #84]	@ (8109b94 <TIM_Base_SetConfig+0x134>)
 8109b3e:	4293      	cmp	r3, r2
 8109b40:	d007      	beq.n	8109b52 <TIM_Base_SetConfig+0xf2>
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	4a14      	ldr	r2, [pc, #80]	@ (8109b98 <TIM_Base_SetConfig+0x138>)
 8109b46:	4293      	cmp	r3, r2
 8109b48:	d003      	beq.n	8109b52 <TIM_Base_SetConfig+0xf2>
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	4a13      	ldr	r2, [pc, #76]	@ (8109b9c <TIM_Base_SetConfig+0x13c>)
 8109b4e:	4293      	cmp	r3, r2
 8109b50:	d103      	bne.n	8109b5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109b52:	683b      	ldr	r3, [r7, #0]
 8109b54:	691a      	ldr	r2, [r3, #16]
 8109b56:	687b      	ldr	r3, [r7, #4]
 8109b58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	681b      	ldr	r3, [r3, #0]
 8109b5e:	f043 0204 	orr.w	r2, r3, #4
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109b66:	687b      	ldr	r3, [r7, #4]
 8109b68:	2201      	movs	r2, #1
 8109b6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8109b6c:	687b      	ldr	r3, [r7, #4]
 8109b6e:	68fa      	ldr	r2, [r7, #12]
 8109b70:	601a      	str	r2, [r3, #0]
}
 8109b72:	bf00      	nop
 8109b74:	3714      	adds	r7, #20
 8109b76:	46bd      	mov	sp, r7
 8109b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b7c:	4770      	bx	lr
 8109b7e:	bf00      	nop
 8109b80:	40010000 	.word	0x40010000
 8109b84:	40000400 	.word	0x40000400
 8109b88:	40000800 	.word	0x40000800
 8109b8c:	40000c00 	.word	0x40000c00
 8109b90:	40010400 	.word	0x40010400
 8109b94:	40014000 	.word	0x40014000
 8109b98:	40014400 	.word	0x40014400
 8109b9c:	40014800 	.word	0x40014800

08109ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109ba0:	b480      	push	{r7}
 8109ba2:	b087      	sub	sp, #28
 8109ba4:	af00      	add	r7, sp, #0
 8109ba6:	6078      	str	r0, [r7, #4]
 8109ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109baa:	687b      	ldr	r3, [r7, #4]
 8109bac:	6a1b      	ldr	r3, [r3, #32]
 8109bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8109bb0:	687b      	ldr	r3, [r7, #4]
 8109bb2:	6a1b      	ldr	r3, [r3, #32]
 8109bb4:	f023 0201 	bic.w	r2, r3, #1
 8109bb8:	687b      	ldr	r3, [r7, #4]
 8109bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109bbc:	687b      	ldr	r3, [r7, #4]
 8109bbe:	685b      	ldr	r3, [r3, #4]
 8109bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109bc2:	687b      	ldr	r3, [r7, #4]
 8109bc4:	699b      	ldr	r3, [r3, #24]
 8109bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8109bc8:	68fb      	ldr	r3, [r7, #12]
 8109bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8109bd4:	68fb      	ldr	r3, [r7, #12]
 8109bd6:	f023 0303 	bic.w	r3, r3, #3
 8109bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109bdc:	683b      	ldr	r3, [r7, #0]
 8109bde:	681b      	ldr	r3, [r3, #0]
 8109be0:	68fa      	ldr	r2, [r7, #12]
 8109be2:	4313      	orrs	r3, r2
 8109be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8109be6:	697b      	ldr	r3, [r7, #20]
 8109be8:	f023 0302 	bic.w	r3, r3, #2
 8109bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8109bee:	683b      	ldr	r3, [r7, #0]
 8109bf0:	689b      	ldr	r3, [r3, #8]
 8109bf2:	697a      	ldr	r2, [r7, #20]
 8109bf4:	4313      	orrs	r3, r2
 8109bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8109bf8:	687b      	ldr	r3, [r7, #4]
 8109bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8109cac <TIM_OC1_SetConfig+0x10c>)
 8109bfc:	4293      	cmp	r3, r2
 8109bfe:	d00f      	beq.n	8109c20 <TIM_OC1_SetConfig+0x80>
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	4a2b      	ldr	r2, [pc, #172]	@ (8109cb0 <TIM_OC1_SetConfig+0x110>)
 8109c04:	4293      	cmp	r3, r2
 8109c06:	d00b      	beq.n	8109c20 <TIM_OC1_SetConfig+0x80>
 8109c08:	687b      	ldr	r3, [r7, #4]
 8109c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8109cb4 <TIM_OC1_SetConfig+0x114>)
 8109c0c:	4293      	cmp	r3, r2
 8109c0e:	d007      	beq.n	8109c20 <TIM_OC1_SetConfig+0x80>
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	4a29      	ldr	r2, [pc, #164]	@ (8109cb8 <TIM_OC1_SetConfig+0x118>)
 8109c14:	4293      	cmp	r3, r2
 8109c16:	d003      	beq.n	8109c20 <TIM_OC1_SetConfig+0x80>
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	4a28      	ldr	r2, [pc, #160]	@ (8109cbc <TIM_OC1_SetConfig+0x11c>)
 8109c1c:	4293      	cmp	r3, r2
 8109c1e:	d10c      	bne.n	8109c3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8109c20:	697b      	ldr	r3, [r7, #20]
 8109c22:	f023 0308 	bic.w	r3, r3, #8
 8109c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8109c28:	683b      	ldr	r3, [r7, #0]
 8109c2a:	68db      	ldr	r3, [r3, #12]
 8109c2c:	697a      	ldr	r2, [r7, #20]
 8109c2e:	4313      	orrs	r3, r2
 8109c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8109c32:	697b      	ldr	r3, [r7, #20]
 8109c34:	f023 0304 	bic.w	r3, r3, #4
 8109c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109c3a:	687b      	ldr	r3, [r7, #4]
 8109c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8109cac <TIM_OC1_SetConfig+0x10c>)
 8109c3e:	4293      	cmp	r3, r2
 8109c40:	d00f      	beq.n	8109c62 <TIM_OC1_SetConfig+0xc2>
 8109c42:	687b      	ldr	r3, [r7, #4]
 8109c44:	4a1a      	ldr	r2, [pc, #104]	@ (8109cb0 <TIM_OC1_SetConfig+0x110>)
 8109c46:	4293      	cmp	r3, r2
 8109c48:	d00b      	beq.n	8109c62 <TIM_OC1_SetConfig+0xc2>
 8109c4a:	687b      	ldr	r3, [r7, #4]
 8109c4c:	4a19      	ldr	r2, [pc, #100]	@ (8109cb4 <TIM_OC1_SetConfig+0x114>)
 8109c4e:	4293      	cmp	r3, r2
 8109c50:	d007      	beq.n	8109c62 <TIM_OC1_SetConfig+0xc2>
 8109c52:	687b      	ldr	r3, [r7, #4]
 8109c54:	4a18      	ldr	r2, [pc, #96]	@ (8109cb8 <TIM_OC1_SetConfig+0x118>)
 8109c56:	4293      	cmp	r3, r2
 8109c58:	d003      	beq.n	8109c62 <TIM_OC1_SetConfig+0xc2>
 8109c5a:	687b      	ldr	r3, [r7, #4]
 8109c5c:	4a17      	ldr	r2, [pc, #92]	@ (8109cbc <TIM_OC1_SetConfig+0x11c>)
 8109c5e:	4293      	cmp	r3, r2
 8109c60:	d111      	bne.n	8109c86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8109c62:	693b      	ldr	r3, [r7, #16]
 8109c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8109c6a:	693b      	ldr	r3, [r7, #16]
 8109c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8109c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8109c72:	683b      	ldr	r3, [r7, #0]
 8109c74:	695b      	ldr	r3, [r3, #20]
 8109c76:	693a      	ldr	r2, [r7, #16]
 8109c78:	4313      	orrs	r3, r2
 8109c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8109c7c:	683b      	ldr	r3, [r7, #0]
 8109c7e:	699b      	ldr	r3, [r3, #24]
 8109c80:	693a      	ldr	r2, [r7, #16]
 8109c82:	4313      	orrs	r3, r2
 8109c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109c86:	687b      	ldr	r3, [r7, #4]
 8109c88:	693a      	ldr	r2, [r7, #16]
 8109c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109c8c:	687b      	ldr	r3, [r7, #4]
 8109c8e:	68fa      	ldr	r2, [r7, #12]
 8109c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8109c92:	683b      	ldr	r3, [r7, #0]
 8109c94:	685a      	ldr	r2, [r3, #4]
 8109c96:	687b      	ldr	r3, [r7, #4]
 8109c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	697a      	ldr	r2, [r7, #20]
 8109c9e:	621a      	str	r2, [r3, #32]
}
 8109ca0:	bf00      	nop
 8109ca2:	371c      	adds	r7, #28
 8109ca4:	46bd      	mov	sp, r7
 8109ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109caa:	4770      	bx	lr
 8109cac:	40010000 	.word	0x40010000
 8109cb0:	40010400 	.word	0x40010400
 8109cb4:	40014000 	.word	0x40014000
 8109cb8:	40014400 	.word	0x40014400
 8109cbc:	40014800 	.word	0x40014800

08109cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109cc0:	b480      	push	{r7}
 8109cc2:	b087      	sub	sp, #28
 8109cc4:	af00      	add	r7, sp, #0
 8109cc6:	6078      	str	r0, [r7, #4]
 8109cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109cca:	687b      	ldr	r3, [r7, #4]
 8109ccc:	6a1b      	ldr	r3, [r3, #32]
 8109cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	6a1b      	ldr	r3, [r3, #32]
 8109cd4:	f023 0210 	bic.w	r2, r3, #16
 8109cd8:	687b      	ldr	r3, [r7, #4]
 8109cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109cdc:	687b      	ldr	r3, [r7, #4]
 8109cde:	685b      	ldr	r3, [r3, #4]
 8109ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	699b      	ldr	r3, [r3, #24]
 8109ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8109ce8:	68fb      	ldr	r3, [r7, #12]
 8109cea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8109cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8109cf4:	68fb      	ldr	r3, [r7, #12]
 8109cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109cfc:	683b      	ldr	r3, [r7, #0]
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	021b      	lsls	r3, r3, #8
 8109d02:	68fa      	ldr	r2, [r7, #12]
 8109d04:	4313      	orrs	r3, r2
 8109d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8109d08:	697b      	ldr	r3, [r7, #20]
 8109d0a:	f023 0320 	bic.w	r3, r3, #32
 8109d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8109d10:	683b      	ldr	r3, [r7, #0]
 8109d12:	689b      	ldr	r3, [r3, #8]
 8109d14:	011b      	lsls	r3, r3, #4
 8109d16:	697a      	ldr	r2, [r7, #20]
 8109d18:	4313      	orrs	r3, r2
 8109d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8109d1c:	687b      	ldr	r3, [r7, #4]
 8109d1e:	4a28      	ldr	r2, [pc, #160]	@ (8109dc0 <TIM_OC2_SetConfig+0x100>)
 8109d20:	4293      	cmp	r3, r2
 8109d22:	d003      	beq.n	8109d2c <TIM_OC2_SetConfig+0x6c>
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	4a27      	ldr	r2, [pc, #156]	@ (8109dc4 <TIM_OC2_SetConfig+0x104>)
 8109d28:	4293      	cmp	r3, r2
 8109d2a:	d10d      	bne.n	8109d48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8109d2c:	697b      	ldr	r3, [r7, #20]
 8109d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8109d34:	683b      	ldr	r3, [r7, #0]
 8109d36:	68db      	ldr	r3, [r3, #12]
 8109d38:	011b      	lsls	r3, r3, #4
 8109d3a:	697a      	ldr	r2, [r7, #20]
 8109d3c:	4313      	orrs	r3, r2
 8109d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8109d40:	697b      	ldr	r3, [r7, #20]
 8109d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109d48:	687b      	ldr	r3, [r7, #4]
 8109d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8109dc0 <TIM_OC2_SetConfig+0x100>)
 8109d4c:	4293      	cmp	r3, r2
 8109d4e:	d00f      	beq.n	8109d70 <TIM_OC2_SetConfig+0xb0>
 8109d50:	687b      	ldr	r3, [r7, #4]
 8109d52:	4a1c      	ldr	r2, [pc, #112]	@ (8109dc4 <TIM_OC2_SetConfig+0x104>)
 8109d54:	4293      	cmp	r3, r2
 8109d56:	d00b      	beq.n	8109d70 <TIM_OC2_SetConfig+0xb0>
 8109d58:	687b      	ldr	r3, [r7, #4]
 8109d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8109dc8 <TIM_OC2_SetConfig+0x108>)
 8109d5c:	4293      	cmp	r3, r2
 8109d5e:	d007      	beq.n	8109d70 <TIM_OC2_SetConfig+0xb0>
 8109d60:	687b      	ldr	r3, [r7, #4]
 8109d62:	4a1a      	ldr	r2, [pc, #104]	@ (8109dcc <TIM_OC2_SetConfig+0x10c>)
 8109d64:	4293      	cmp	r3, r2
 8109d66:	d003      	beq.n	8109d70 <TIM_OC2_SetConfig+0xb0>
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	4a19      	ldr	r2, [pc, #100]	@ (8109dd0 <TIM_OC2_SetConfig+0x110>)
 8109d6c:	4293      	cmp	r3, r2
 8109d6e:	d113      	bne.n	8109d98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8109d70:	693b      	ldr	r3, [r7, #16]
 8109d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8109d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8109d78:	693b      	ldr	r3, [r7, #16]
 8109d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8109d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8109d80:	683b      	ldr	r3, [r7, #0]
 8109d82:	695b      	ldr	r3, [r3, #20]
 8109d84:	009b      	lsls	r3, r3, #2
 8109d86:	693a      	ldr	r2, [r7, #16]
 8109d88:	4313      	orrs	r3, r2
 8109d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8109d8c:	683b      	ldr	r3, [r7, #0]
 8109d8e:	699b      	ldr	r3, [r3, #24]
 8109d90:	009b      	lsls	r3, r3, #2
 8109d92:	693a      	ldr	r2, [r7, #16]
 8109d94:	4313      	orrs	r3, r2
 8109d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	693a      	ldr	r2, [r7, #16]
 8109d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8109d9e:	687b      	ldr	r3, [r7, #4]
 8109da0:	68fa      	ldr	r2, [r7, #12]
 8109da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8109da4:	683b      	ldr	r3, [r7, #0]
 8109da6:	685a      	ldr	r2, [r3, #4]
 8109da8:	687b      	ldr	r3, [r7, #4]
 8109daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109dac:	687b      	ldr	r3, [r7, #4]
 8109dae:	697a      	ldr	r2, [r7, #20]
 8109db0:	621a      	str	r2, [r3, #32]
}
 8109db2:	bf00      	nop
 8109db4:	371c      	adds	r7, #28
 8109db6:	46bd      	mov	sp, r7
 8109db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dbc:	4770      	bx	lr
 8109dbe:	bf00      	nop
 8109dc0:	40010000 	.word	0x40010000
 8109dc4:	40010400 	.word	0x40010400
 8109dc8:	40014000 	.word	0x40014000
 8109dcc:	40014400 	.word	0x40014400
 8109dd0:	40014800 	.word	0x40014800

08109dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109dd4:	b480      	push	{r7}
 8109dd6:	b087      	sub	sp, #28
 8109dd8:	af00      	add	r7, sp, #0
 8109dda:	6078      	str	r0, [r7, #4]
 8109ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109dde:	687b      	ldr	r3, [r7, #4]
 8109de0:	6a1b      	ldr	r3, [r3, #32]
 8109de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8109de4:	687b      	ldr	r3, [r7, #4]
 8109de6:	6a1b      	ldr	r3, [r3, #32]
 8109de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8109dec:	687b      	ldr	r3, [r7, #4]
 8109dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	685b      	ldr	r3, [r3, #4]
 8109df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	69db      	ldr	r3, [r3, #28]
 8109dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8109dfc:	68fb      	ldr	r3, [r7, #12]
 8109dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8109e08:	68fb      	ldr	r3, [r7, #12]
 8109e0a:	f023 0303 	bic.w	r3, r3, #3
 8109e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109e10:	683b      	ldr	r3, [r7, #0]
 8109e12:	681b      	ldr	r3, [r3, #0]
 8109e14:	68fa      	ldr	r2, [r7, #12]
 8109e16:	4313      	orrs	r3, r2
 8109e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8109e1a:	697b      	ldr	r3, [r7, #20]
 8109e1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8109e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8109e22:	683b      	ldr	r3, [r7, #0]
 8109e24:	689b      	ldr	r3, [r3, #8]
 8109e26:	021b      	lsls	r3, r3, #8
 8109e28:	697a      	ldr	r2, [r7, #20]
 8109e2a:	4313      	orrs	r3, r2
 8109e2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8109e2e:	687b      	ldr	r3, [r7, #4]
 8109e30:	4a27      	ldr	r2, [pc, #156]	@ (8109ed0 <TIM_OC3_SetConfig+0xfc>)
 8109e32:	4293      	cmp	r3, r2
 8109e34:	d003      	beq.n	8109e3e <TIM_OC3_SetConfig+0x6a>
 8109e36:	687b      	ldr	r3, [r7, #4]
 8109e38:	4a26      	ldr	r2, [pc, #152]	@ (8109ed4 <TIM_OC3_SetConfig+0x100>)
 8109e3a:	4293      	cmp	r3, r2
 8109e3c:	d10d      	bne.n	8109e5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8109e3e:	697b      	ldr	r3, [r7, #20]
 8109e40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8109e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8109e46:	683b      	ldr	r3, [r7, #0]
 8109e48:	68db      	ldr	r3, [r3, #12]
 8109e4a:	021b      	lsls	r3, r3, #8
 8109e4c:	697a      	ldr	r2, [r7, #20]
 8109e4e:	4313      	orrs	r3, r2
 8109e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8109e52:	697b      	ldr	r3, [r7, #20]
 8109e54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8109e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109e5a:	687b      	ldr	r3, [r7, #4]
 8109e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8109ed0 <TIM_OC3_SetConfig+0xfc>)
 8109e5e:	4293      	cmp	r3, r2
 8109e60:	d00f      	beq.n	8109e82 <TIM_OC3_SetConfig+0xae>
 8109e62:	687b      	ldr	r3, [r7, #4]
 8109e64:	4a1b      	ldr	r2, [pc, #108]	@ (8109ed4 <TIM_OC3_SetConfig+0x100>)
 8109e66:	4293      	cmp	r3, r2
 8109e68:	d00b      	beq.n	8109e82 <TIM_OC3_SetConfig+0xae>
 8109e6a:	687b      	ldr	r3, [r7, #4]
 8109e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8109ed8 <TIM_OC3_SetConfig+0x104>)
 8109e6e:	4293      	cmp	r3, r2
 8109e70:	d007      	beq.n	8109e82 <TIM_OC3_SetConfig+0xae>
 8109e72:	687b      	ldr	r3, [r7, #4]
 8109e74:	4a19      	ldr	r2, [pc, #100]	@ (8109edc <TIM_OC3_SetConfig+0x108>)
 8109e76:	4293      	cmp	r3, r2
 8109e78:	d003      	beq.n	8109e82 <TIM_OC3_SetConfig+0xae>
 8109e7a:	687b      	ldr	r3, [r7, #4]
 8109e7c:	4a18      	ldr	r2, [pc, #96]	@ (8109ee0 <TIM_OC3_SetConfig+0x10c>)
 8109e7e:	4293      	cmp	r3, r2
 8109e80:	d113      	bne.n	8109eaa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8109e82:	693b      	ldr	r3, [r7, #16]
 8109e84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8109e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8109e8a:	693b      	ldr	r3, [r7, #16]
 8109e8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8109e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8109e92:	683b      	ldr	r3, [r7, #0]
 8109e94:	695b      	ldr	r3, [r3, #20]
 8109e96:	011b      	lsls	r3, r3, #4
 8109e98:	693a      	ldr	r2, [r7, #16]
 8109e9a:	4313      	orrs	r3, r2
 8109e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8109e9e:	683b      	ldr	r3, [r7, #0]
 8109ea0:	699b      	ldr	r3, [r3, #24]
 8109ea2:	011b      	lsls	r3, r3, #4
 8109ea4:	693a      	ldr	r2, [r7, #16]
 8109ea6:	4313      	orrs	r3, r2
 8109ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109eaa:	687b      	ldr	r3, [r7, #4]
 8109eac:	693a      	ldr	r2, [r7, #16]
 8109eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8109eb0:	687b      	ldr	r3, [r7, #4]
 8109eb2:	68fa      	ldr	r2, [r7, #12]
 8109eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8109eb6:	683b      	ldr	r3, [r7, #0]
 8109eb8:	685a      	ldr	r2, [r3, #4]
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109ebe:	687b      	ldr	r3, [r7, #4]
 8109ec0:	697a      	ldr	r2, [r7, #20]
 8109ec2:	621a      	str	r2, [r3, #32]
}
 8109ec4:	bf00      	nop
 8109ec6:	371c      	adds	r7, #28
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ece:	4770      	bx	lr
 8109ed0:	40010000 	.word	0x40010000
 8109ed4:	40010400 	.word	0x40010400
 8109ed8:	40014000 	.word	0x40014000
 8109edc:	40014400 	.word	0x40014400
 8109ee0:	40014800 	.word	0x40014800

08109ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8109ee4:	b480      	push	{r7}
 8109ee6:	b087      	sub	sp, #28
 8109ee8:	af00      	add	r7, sp, #0
 8109eea:	6078      	str	r0, [r7, #4]
 8109eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	6a1b      	ldr	r3, [r3, #32]
 8109ef2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	6a1b      	ldr	r3, [r3, #32]
 8109ef8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8109efc:	687b      	ldr	r3, [r7, #4]
 8109efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109f00:	687b      	ldr	r3, [r7, #4]
 8109f02:	685b      	ldr	r3, [r3, #4]
 8109f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	69db      	ldr	r3, [r3, #28]
 8109f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8109f0c:	68fb      	ldr	r3, [r7, #12]
 8109f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8109f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8109f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8109f18:	68fb      	ldr	r3, [r7, #12]
 8109f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8109f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8109f20:	683b      	ldr	r3, [r7, #0]
 8109f22:	681b      	ldr	r3, [r3, #0]
 8109f24:	021b      	lsls	r3, r3, #8
 8109f26:	68fa      	ldr	r2, [r7, #12]
 8109f28:	4313      	orrs	r3, r2
 8109f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8109f2c:	693b      	ldr	r3, [r7, #16]
 8109f2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8109f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8109f34:	683b      	ldr	r3, [r7, #0]
 8109f36:	689b      	ldr	r3, [r3, #8]
 8109f38:	031b      	lsls	r3, r3, #12
 8109f3a:	693a      	ldr	r2, [r7, #16]
 8109f3c:	4313      	orrs	r3, r2
 8109f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8109f40:	687b      	ldr	r3, [r7, #4]
 8109f42:	4a18      	ldr	r2, [pc, #96]	@ (8109fa4 <TIM_OC4_SetConfig+0xc0>)
 8109f44:	4293      	cmp	r3, r2
 8109f46:	d00f      	beq.n	8109f68 <TIM_OC4_SetConfig+0x84>
 8109f48:	687b      	ldr	r3, [r7, #4]
 8109f4a:	4a17      	ldr	r2, [pc, #92]	@ (8109fa8 <TIM_OC4_SetConfig+0xc4>)
 8109f4c:	4293      	cmp	r3, r2
 8109f4e:	d00b      	beq.n	8109f68 <TIM_OC4_SetConfig+0x84>
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	4a16      	ldr	r2, [pc, #88]	@ (8109fac <TIM_OC4_SetConfig+0xc8>)
 8109f54:	4293      	cmp	r3, r2
 8109f56:	d007      	beq.n	8109f68 <TIM_OC4_SetConfig+0x84>
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	4a15      	ldr	r2, [pc, #84]	@ (8109fb0 <TIM_OC4_SetConfig+0xcc>)
 8109f5c:	4293      	cmp	r3, r2
 8109f5e:	d003      	beq.n	8109f68 <TIM_OC4_SetConfig+0x84>
 8109f60:	687b      	ldr	r3, [r7, #4]
 8109f62:	4a14      	ldr	r2, [pc, #80]	@ (8109fb4 <TIM_OC4_SetConfig+0xd0>)
 8109f64:	4293      	cmp	r3, r2
 8109f66:	d109      	bne.n	8109f7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8109f68:	697b      	ldr	r3, [r7, #20]
 8109f6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8109f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8109f70:	683b      	ldr	r3, [r7, #0]
 8109f72:	695b      	ldr	r3, [r3, #20]
 8109f74:	019b      	lsls	r3, r3, #6
 8109f76:	697a      	ldr	r2, [r7, #20]
 8109f78:	4313      	orrs	r3, r2
 8109f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8109f7c:	687b      	ldr	r3, [r7, #4]
 8109f7e:	697a      	ldr	r2, [r7, #20]
 8109f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8109f82:	687b      	ldr	r3, [r7, #4]
 8109f84:	68fa      	ldr	r2, [r7, #12]
 8109f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8109f88:	683b      	ldr	r3, [r7, #0]
 8109f8a:	685a      	ldr	r2, [r3, #4]
 8109f8c:	687b      	ldr	r3, [r7, #4]
 8109f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	693a      	ldr	r2, [r7, #16]
 8109f94:	621a      	str	r2, [r3, #32]
}
 8109f96:	bf00      	nop
 8109f98:	371c      	adds	r7, #28
 8109f9a:	46bd      	mov	sp, r7
 8109f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fa0:	4770      	bx	lr
 8109fa2:	bf00      	nop
 8109fa4:	40010000 	.word	0x40010000
 8109fa8:	40010400 	.word	0x40010400
 8109fac:	40014000 	.word	0x40014000
 8109fb0:	40014400 	.word	0x40014400
 8109fb4:	40014800 	.word	0x40014800

08109fb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8109fb8:	b480      	push	{r7}
 8109fba:	b087      	sub	sp, #28
 8109fbc:	af00      	add	r7, sp, #0
 8109fbe:	6078      	str	r0, [r7, #4]
 8109fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8109fc2:	687b      	ldr	r3, [r7, #4]
 8109fc4:	6a1b      	ldr	r3, [r3, #32]
 8109fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	6a1b      	ldr	r3, [r3, #32]
 8109fcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8109fd0:	687b      	ldr	r3, [r7, #4]
 8109fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8109fd4:	687b      	ldr	r3, [r7, #4]
 8109fd6:	685b      	ldr	r3, [r3, #4]
 8109fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8109fe0:	68fb      	ldr	r3, [r7, #12]
 8109fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8109fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8109fec:	683b      	ldr	r3, [r7, #0]
 8109fee:	681b      	ldr	r3, [r3, #0]
 8109ff0:	68fa      	ldr	r2, [r7, #12]
 8109ff2:	4313      	orrs	r3, r2
 8109ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8109ff6:	693b      	ldr	r3, [r7, #16]
 8109ff8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8109ffc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8109ffe:	683b      	ldr	r3, [r7, #0]
 810a000:	689b      	ldr	r3, [r3, #8]
 810a002:	041b      	lsls	r3, r3, #16
 810a004:	693a      	ldr	r2, [r7, #16]
 810a006:	4313      	orrs	r3, r2
 810a008:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a00a:	687b      	ldr	r3, [r7, #4]
 810a00c:	4a17      	ldr	r2, [pc, #92]	@ (810a06c <TIM_OC5_SetConfig+0xb4>)
 810a00e:	4293      	cmp	r3, r2
 810a010:	d00f      	beq.n	810a032 <TIM_OC5_SetConfig+0x7a>
 810a012:	687b      	ldr	r3, [r7, #4]
 810a014:	4a16      	ldr	r2, [pc, #88]	@ (810a070 <TIM_OC5_SetConfig+0xb8>)
 810a016:	4293      	cmp	r3, r2
 810a018:	d00b      	beq.n	810a032 <TIM_OC5_SetConfig+0x7a>
 810a01a:	687b      	ldr	r3, [r7, #4]
 810a01c:	4a15      	ldr	r2, [pc, #84]	@ (810a074 <TIM_OC5_SetConfig+0xbc>)
 810a01e:	4293      	cmp	r3, r2
 810a020:	d007      	beq.n	810a032 <TIM_OC5_SetConfig+0x7a>
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	4a14      	ldr	r2, [pc, #80]	@ (810a078 <TIM_OC5_SetConfig+0xc0>)
 810a026:	4293      	cmp	r3, r2
 810a028:	d003      	beq.n	810a032 <TIM_OC5_SetConfig+0x7a>
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	4a13      	ldr	r2, [pc, #76]	@ (810a07c <TIM_OC5_SetConfig+0xc4>)
 810a02e:	4293      	cmp	r3, r2
 810a030:	d109      	bne.n	810a046 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810a032:	697b      	ldr	r3, [r7, #20]
 810a034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810a03a:	683b      	ldr	r3, [r7, #0]
 810a03c:	695b      	ldr	r3, [r3, #20]
 810a03e:	021b      	lsls	r3, r3, #8
 810a040:	697a      	ldr	r2, [r7, #20]
 810a042:	4313      	orrs	r3, r2
 810a044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a046:	687b      	ldr	r3, [r7, #4]
 810a048:	697a      	ldr	r2, [r7, #20]
 810a04a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a04c:	687b      	ldr	r3, [r7, #4]
 810a04e:	68fa      	ldr	r2, [r7, #12]
 810a050:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810a052:	683b      	ldr	r3, [r7, #0]
 810a054:	685a      	ldr	r2, [r3, #4]
 810a056:	687b      	ldr	r3, [r7, #4]
 810a058:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	693a      	ldr	r2, [r7, #16]
 810a05e:	621a      	str	r2, [r3, #32]
}
 810a060:	bf00      	nop
 810a062:	371c      	adds	r7, #28
 810a064:	46bd      	mov	sp, r7
 810a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a06a:	4770      	bx	lr
 810a06c:	40010000 	.word	0x40010000
 810a070:	40010400 	.word	0x40010400
 810a074:	40014000 	.word	0x40014000
 810a078:	40014400 	.word	0x40014400
 810a07c:	40014800 	.word	0x40014800

0810a080 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810a080:	b480      	push	{r7}
 810a082:	b087      	sub	sp, #28
 810a084:	af00      	add	r7, sp, #0
 810a086:	6078      	str	r0, [r7, #4]
 810a088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a08a:	687b      	ldr	r3, [r7, #4]
 810a08c:	6a1b      	ldr	r3, [r3, #32]
 810a08e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	6a1b      	ldr	r3, [r3, #32]
 810a094:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810a098:	687b      	ldr	r3, [r7, #4]
 810a09a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a09c:	687b      	ldr	r3, [r7, #4]
 810a09e:	685b      	ldr	r3, [r3, #4]
 810a0a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810a0a2:	687b      	ldr	r3, [r7, #4]
 810a0a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810a0a8:	68fb      	ldr	r3, [r7, #12]
 810a0aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a0ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a0b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a0b4:	683b      	ldr	r3, [r7, #0]
 810a0b6:	681b      	ldr	r3, [r3, #0]
 810a0b8:	021b      	lsls	r3, r3, #8
 810a0ba:	68fa      	ldr	r2, [r7, #12]
 810a0bc:	4313      	orrs	r3, r2
 810a0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810a0c0:	693b      	ldr	r3, [r7, #16]
 810a0c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810a0c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810a0c8:	683b      	ldr	r3, [r7, #0]
 810a0ca:	689b      	ldr	r3, [r3, #8]
 810a0cc:	051b      	lsls	r3, r3, #20
 810a0ce:	693a      	ldr	r2, [r7, #16]
 810a0d0:	4313      	orrs	r3, r2
 810a0d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a0d4:	687b      	ldr	r3, [r7, #4]
 810a0d6:	4a18      	ldr	r2, [pc, #96]	@ (810a138 <TIM_OC6_SetConfig+0xb8>)
 810a0d8:	4293      	cmp	r3, r2
 810a0da:	d00f      	beq.n	810a0fc <TIM_OC6_SetConfig+0x7c>
 810a0dc:	687b      	ldr	r3, [r7, #4]
 810a0de:	4a17      	ldr	r2, [pc, #92]	@ (810a13c <TIM_OC6_SetConfig+0xbc>)
 810a0e0:	4293      	cmp	r3, r2
 810a0e2:	d00b      	beq.n	810a0fc <TIM_OC6_SetConfig+0x7c>
 810a0e4:	687b      	ldr	r3, [r7, #4]
 810a0e6:	4a16      	ldr	r2, [pc, #88]	@ (810a140 <TIM_OC6_SetConfig+0xc0>)
 810a0e8:	4293      	cmp	r3, r2
 810a0ea:	d007      	beq.n	810a0fc <TIM_OC6_SetConfig+0x7c>
 810a0ec:	687b      	ldr	r3, [r7, #4]
 810a0ee:	4a15      	ldr	r2, [pc, #84]	@ (810a144 <TIM_OC6_SetConfig+0xc4>)
 810a0f0:	4293      	cmp	r3, r2
 810a0f2:	d003      	beq.n	810a0fc <TIM_OC6_SetConfig+0x7c>
 810a0f4:	687b      	ldr	r3, [r7, #4]
 810a0f6:	4a14      	ldr	r2, [pc, #80]	@ (810a148 <TIM_OC6_SetConfig+0xc8>)
 810a0f8:	4293      	cmp	r3, r2
 810a0fa:	d109      	bne.n	810a110 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810a0fc:	697b      	ldr	r3, [r7, #20]
 810a0fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810a102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810a104:	683b      	ldr	r3, [r7, #0]
 810a106:	695b      	ldr	r3, [r3, #20]
 810a108:	029b      	lsls	r3, r3, #10
 810a10a:	697a      	ldr	r2, [r7, #20]
 810a10c:	4313      	orrs	r3, r2
 810a10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a110:	687b      	ldr	r3, [r7, #4]
 810a112:	697a      	ldr	r2, [r7, #20]
 810a114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	68fa      	ldr	r2, [r7, #12]
 810a11a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810a11c:	683b      	ldr	r3, [r7, #0]
 810a11e:	685a      	ldr	r2, [r3, #4]
 810a120:	687b      	ldr	r3, [r7, #4]
 810a122:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a124:	687b      	ldr	r3, [r7, #4]
 810a126:	693a      	ldr	r2, [r7, #16]
 810a128:	621a      	str	r2, [r3, #32]
}
 810a12a:	bf00      	nop
 810a12c:	371c      	adds	r7, #28
 810a12e:	46bd      	mov	sp, r7
 810a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a134:	4770      	bx	lr
 810a136:	bf00      	nop
 810a138:	40010000 	.word	0x40010000
 810a13c:	40010400 	.word	0x40010400
 810a140:	40014000 	.word	0x40014000
 810a144:	40014400 	.word	0x40014400
 810a148:	40014800 	.word	0x40014800

0810a14c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810a14c:	b480      	push	{r7}
 810a14e:	b087      	sub	sp, #28
 810a150:	af00      	add	r7, sp, #0
 810a152:	60f8      	str	r0, [r7, #12]
 810a154:	60b9      	str	r1, [r7, #8]
 810a156:	607a      	str	r2, [r7, #4]
 810a158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810a15a:	68fb      	ldr	r3, [r7, #12]
 810a15c:	6a1b      	ldr	r3, [r3, #32]
 810a15e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a160:	68fb      	ldr	r3, [r7, #12]
 810a162:	6a1b      	ldr	r3, [r3, #32]
 810a164:	f023 0201 	bic.w	r2, r3, #1
 810a168:	68fb      	ldr	r3, [r7, #12]
 810a16a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a16c:	68fb      	ldr	r3, [r7, #12]
 810a16e:	699b      	ldr	r3, [r3, #24]
 810a170:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810a172:	68fb      	ldr	r3, [r7, #12]
 810a174:	4a28      	ldr	r2, [pc, #160]	@ (810a218 <TIM_TI1_SetConfig+0xcc>)
 810a176:	4293      	cmp	r3, r2
 810a178:	d01b      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a17a:	68fb      	ldr	r3, [r7, #12]
 810a17c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a180:	d017      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a182:	68fb      	ldr	r3, [r7, #12]
 810a184:	4a25      	ldr	r2, [pc, #148]	@ (810a21c <TIM_TI1_SetConfig+0xd0>)
 810a186:	4293      	cmp	r3, r2
 810a188:	d013      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a18a:	68fb      	ldr	r3, [r7, #12]
 810a18c:	4a24      	ldr	r2, [pc, #144]	@ (810a220 <TIM_TI1_SetConfig+0xd4>)
 810a18e:	4293      	cmp	r3, r2
 810a190:	d00f      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a192:	68fb      	ldr	r3, [r7, #12]
 810a194:	4a23      	ldr	r2, [pc, #140]	@ (810a224 <TIM_TI1_SetConfig+0xd8>)
 810a196:	4293      	cmp	r3, r2
 810a198:	d00b      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a19a:	68fb      	ldr	r3, [r7, #12]
 810a19c:	4a22      	ldr	r2, [pc, #136]	@ (810a228 <TIM_TI1_SetConfig+0xdc>)
 810a19e:	4293      	cmp	r3, r2
 810a1a0:	d007      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a1a2:	68fb      	ldr	r3, [r7, #12]
 810a1a4:	4a21      	ldr	r2, [pc, #132]	@ (810a22c <TIM_TI1_SetConfig+0xe0>)
 810a1a6:	4293      	cmp	r3, r2
 810a1a8:	d003      	beq.n	810a1b2 <TIM_TI1_SetConfig+0x66>
 810a1aa:	68fb      	ldr	r3, [r7, #12]
 810a1ac:	4a20      	ldr	r2, [pc, #128]	@ (810a230 <TIM_TI1_SetConfig+0xe4>)
 810a1ae:	4293      	cmp	r3, r2
 810a1b0:	d101      	bne.n	810a1b6 <TIM_TI1_SetConfig+0x6a>
 810a1b2:	2301      	movs	r3, #1
 810a1b4:	e000      	b.n	810a1b8 <TIM_TI1_SetConfig+0x6c>
 810a1b6:	2300      	movs	r3, #0
 810a1b8:	2b00      	cmp	r3, #0
 810a1ba:	d008      	beq.n	810a1ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810a1bc:	697b      	ldr	r3, [r7, #20]
 810a1be:	f023 0303 	bic.w	r3, r3, #3
 810a1c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810a1c4:	697a      	ldr	r2, [r7, #20]
 810a1c6:	687b      	ldr	r3, [r7, #4]
 810a1c8:	4313      	orrs	r3, r2
 810a1ca:	617b      	str	r3, [r7, #20]
 810a1cc:	e003      	b.n	810a1d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810a1ce:	697b      	ldr	r3, [r7, #20]
 810a1d0:	f043 0301 	orr.w	r3, r3, #1
 810a1d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810a1d6:	697b      	ldr	r3, [r7, #20]
 810a1d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810a1dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810a1de:	683b      	ldr	r3, [r7, #0]
 810a1e0:	011b      	lsls	r3, r3, #4
 810a1e2:	b2db      	uxtb	r3, r3
 810a1e4:	697a      	ldr	r2, [r7, #20]
 810a1e6:	4313      	orrs	r3, r2
 810a1e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810a1ea:	693b      	ldr	r3, [r7, #16]
 810a1ec:	f023 030a 	bic.w	r3, r3, #10
 810a1f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810a1f2:	68bb      	ldr	r3, [r7, #8]
 810a1f4:	f003 030a 	and.w	r3, r3, #10
 810a1f8:	693a      	ldr	r2, [r7, #16]
 810a1fa:	4313      	orrs	r3, r2
 810a1fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810a1fe:	68fb      	ldr	r3, [r7, #12]
 810a200:	697a      	ldr	r2, [r7, #20]
 810a202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a204:	68fb      	ldr	r3, [r7, #12]
 810a206:	693a      	ldr	r2, [r7, #16]
 810a208:	621a      	str	r2, [r3, #32]
}
 810a20a:	bf00      	nop
 810a20c:	371c      	adds	r7, #28
 810a20e:	46bd      	mov	sp, r7
 810a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a214:	4770      	bx	lr
 810a216:	bf00      	nop
 810a218:	40010000 	.word	0x40010000
 810a21c:	40000400 	.word	0x40000400
 810a220:	40000800 	.word	0x40000800
 810a224:	40000c00 	.word	0x40000c00
 810a228:	40010400 	.word	0x40010400
 810a22c:	40001800 	.word	0x40001800
 810a230:	40014000 	.word	0x40014000

0810a234 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a234:	b480      	push	{r7}
 810a236:	b087      	sub	sp, #28
 810a238:	af00      	add	r7, sp, #0
 810a23a:	60f8      	str	r0, [r7, #12]
 810a23c:	60b9      	str	r1, [r7, #8]
 810a23e:	607a      	str	r2, [r7, #4]
 810a240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810a242:	68fb      	ldr	r3, [r7, #12]
 810a244:	6a1b      	ldr	r3, [r3, #32]
 810a246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a248:	68fb      	ldr	r3, [r7, #12]
 810a24a:	6a1b      	ldr	r3, [r3, #32]
 810a24c:	f023 0210 	bic.w	r2, r3, #16
 810a250:	68fb      	ldr	r3, [r7, #12]
 810a252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810a254:	68fb      	ldr	r3, [r7, #12]
 810a256:	699b      	ldr	r3, [r3, #24]
 810a258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810a25a:	693b      	ldr	r3, [r7, #16]
 810a25c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810a262:	687b      	ldr	r3, [r7, #4]
 810a264:	021b      	lsls	r3, r3, #8
 810a266:	693a      	ldr	r2, [r7, #16]
 810a268:	4313      	orrs	r3, r2
 810a26a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810a26c:	693b      	ldr	r3, [r7, #16]
 810a26e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810a272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810a274:	683b      	ldr	r3, [r7, #0]
 810a276:	031b      	lsls	r3, r3, #12
 810a278:	b29b      	uxth	r3, r3
 810a27a:	693a      	ldr	r2, [r7, #16]
 810a27c:	4313      	orrs	r3, r2
 810a27e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810a280:	697b      	ldr	r3, [r7, #20]
 810a282:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810a286:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810a288:	68bb      	ldr	r3, [r7, #8]
 810a28a:	011b      	lsls	r3, r3, #4
 810a28c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 810a290:	697a      	ldr	r2, [r7, #20]
 810a292:	4313      	orrs	r3, r2
 810a294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810a296:	68fb      	ldr	r3, [r7, #12]
 810a298:	693a      	ldr	r2, [r7, #16]
 810a29a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810a29c:	68fb      	ldr	r3, [r7, #12]
 810a29e:	697a      	ldr	r2, [r7, #20]
 810a2a0:	621a      	str	r2, [r3, #32]
}
 810a2a2:	bf00      	nop
 810a2a4:	371c      	adds	r7, #28
 810a2a6:	46bd      	mov	sp, r7
 810a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2ac:	4770      	bx	lr

0810a2ae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a2ae:	b480      	push	{r7}
 810a2b0:	b087      	sub	sp, #28
 810a2b2:	af00      	add	r7, sp, #0
 810a2b4:	60f8      	str	r0, [r7, #12]
 810a2b6:	60b9      	str	r1, [r7, #8]
 810a2b8:	607a      	str	r2, [r7, #4]
 810a2ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 810a2bc:	68fb      	ldr	r3, [r7, #12]
 810a2be:	6a1b      	ldr	r3, [r3, #32]
 810a2c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810a2c2:	68fb      	ldr	r3, [r7, #12]
 810a2c4:	6a1b      	ldr	r3, [r3, #32]
 810a2c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810a2ca:	68fb      	ldr	r3, [r7, #12]
 810a2cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810a2ce:	68fb      	ldr	r3, [r7, #12]
 810a2d0:	69db      	ldr	r3, [r3, #28]
 810a2d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810a2d4:	693b      	ldr	r3, [r7, #16]
 810a2d6:	f023 0303 	bic.w	r3, r3, #3
 810a2da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 810a2dc:	693a      	ldr	r2, [r7, #16]
 810a2de:	687b      	ldr	r3, [r7, #4]
 810a2e0:	4313      	orrs	r3, r2
 810a2e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810a2e4:	693b      	ldr	r3, [r7, #16]
 810a2e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810a2ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810a2ec:	683b      	ldr	r3, [r7, #0]
 810a2ee:	011b      	lsls	r3, r3, #4
 810a2f0:	b2db      	uxtb	r3, r3
 810a2f2:	693a      	ldr	r2, [r7, #16]
 810a2f4:	4313      	orrs	r3, r2
 810a2f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810a2f8:	697b      	ldr	r3, [r7, #20]
 810a2fa:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 810a2fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810a300:	68bb      	ldr	r3, [r7, #8]
 810a302:	021b      	lsls	r3, r3, #8
 810a304:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 810a308:	697a      	ldr	r2, [r7, #20]
 810a30a:	4313      	orrs	r3, r2
 810a30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810a30e:	68fb      	ldr	r3, [r7, #12]
 810a310:	693a      	ldr	r2, [r7, #16]
 810a312:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810a314:	68fb      	ldr	r3, [r7, #12]
 810a316:	697a      	ldr	r2, [r7, #20]
 810a318:	621a      	str	r2, [r3, #32]
}
 810a31a:	bf00      	nop
 810a31c:	371c      	adds	r7, #28
 810a31e:	46bd      	mov	sp, r7
 810a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a324:	4770      	bx	lr

0810a326 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810a326:	b480      	push	{r7}
 810a328:	b087      	sub	sp, #28
 810a32a:	af00      	add	r7, sp, #0
 810a32c:	60f8      	str	r0, [r7, #12]
 810a32e:	60b9      	str	r1, [r7, #8]
 810a330:	607a      	str	r2, [r7, #4]
 810a332:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 810a334:	68fb      	ldr	r3, [r7, #12]
 810a336:	6a1b      	ldr	r3, [r3, #32]
 810a338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810a33a:	68fb      	ldr	r3, [r7, #12]
 810a33c:	6a1b      	ldr	r3, [r3, #32]
 810a33e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a342:	68fb      	ldr	r3, [r7, #12]
 810a344:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810a346:	68fb      	ldr	r3, [r7, #12]
 810a348:	69db      	ldr	r3, [r3, #28]
 810a34a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810a34c:	693b      	ldr	r3, [r7, #16]
 810a34e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a352:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810a354:	687b      	ldr	r3, [r7, #4]
 810a356:	021b      	lsls	r3, r3, #8
 810a358:	693a      	ldr	r2, [r7, #16]
 810a35a:	4313      	orrs	r3, r2
 810a35c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810a35e:	693b      	ldr	r3, [r7, #16]
 810a360:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810a364:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810a366:	683b      	ldr	r3, [r7, #0]
 810a368:	031b      	lsls	r3, r3, #12
 810a36a:	b29b      	uxth	r3, r3
 810a36c:	693a      	ldr	r2, [r7, #16]
 810a36e:	4313      	orrs	r3, r2
 810a370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810a372:	697b      	ldr	r3, [r7, #20]
 810a374:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 810a378:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810a37a:	68bb      	ldr	r3, [r7, #8]
 810a37c:	031b      	lsls	r3, r3, #12
 810a37e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 810a382:	697a      	ldr	r2, [r7, #20]
 810a384:	4313      	orrs	r3, r2
 810a386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810a388:	68fb      	ldr	r3, [r7, #12]
 810a38a:	693a      	ldr	r2, [r7, #16]
 810a38c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810a38e:	68fb      	ldr	r3, [r7, #12]
 810a390:	697a      	ldr	r2, [r7, #20]
 810a392:	621a      	str	r2, [r3, #32]
}
 810a394:	bf00      	nop
 810a396:	371c      	adds	r7, #28
 810a398:	46bd      	mov	sp, r7
 810a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a39e:	4770      	bx	lr

0810a3a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810a3a0:	b480      	push	{r7}
 810a3a2:	b085      	sub	sp, #20
 810a3a4:	af00      	add	r7, sp, #0
 810a3a6:	6078      	str	r0, [r7, #4]
 810a3a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810a3aa:	687b      	ldr	r3, [r7, #4]
 810a3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a3b0:	2b01      	cmp	r3, #1
 810a3b2:	d101      	bne.n	810a3b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810a3b4:	2302      	movs	r3, #2
 810a3b6:	e06d      	b.n	810a494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810a3b8:	687b      	ldr	r3, [r7, #4]
 810a3ba:	2201      	movs	r2, #1
 810a3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	2202      	movs	r2, #2
 810a3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	681b      	ldr	r3, [r3, #0]
 810a3cc:	685b      	ldr	r3, [r3, #4]
 810a3ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810a3d0:	687b      	ldr	r3, [r7, #4]
 810a3d2:	681b      	ldr	r3, [r3, #0]
 810a3d4:	689b      	ldr	r3, [r3, #8]
 810a3d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810a3d8:	687b      	ldr	r3, [r7, #4]
 810a3da:	681b      	ldr	r3, [r3, #0]
 810a3dc:	4a30      	ldr	r2, [pc, #192]	@ (810a4a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a3de:	4293      	cmp	r3, r2
 810a3e0:	d004      	beq.n	810a3ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810a3e2:	687b      	ldr	r3, [r7, #4]
 810a3e4:	681b      	ldr	r3, [r3, #0]
 810a3e6:	4a2f      	ldr	r2, [pc, #188]	@ (810a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a3e8:	4293      	cmp	r3, r2
 810a3ea:	d108      	bne.n	810a3fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810a3ec:	68fb      	ldr	r3, [r7, #12]
 810a3ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810a3f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810a3f4:	683b      	ldr	r3, [r7, #0]
 810a3f6:	685b      	ldr	r3, [r3, #4]
 810a3f8:	68fa      	ldr	r2, [r7, #12]
 810a3fa:	4313      	orrs	r3, r2
 810a3fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810a3fe:	68fb      	ldr	r3, [r7, #12]
 810a400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a404:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810a406:	683b      	ldr	r3, [r7, #0]
 810a408:	681b      	ldr	r3, [r3, #0]
 810a40a:	68fa      	ldr	r2, [r7, #12]
 810a40c:	4313      	orrs	r3, r2
 810a40e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	681b      	ldr	r3, [r3, #0]
 810a414:	68fa      	ldr	r2, [r7, #12]
 810a416:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810a418:	687b      	ldr	r3, [r7, #4]
 810a41a:	681b      	ldr	r3, [r3, #0]
 810a41c:	4a20      	ldr	r2, [pc, #128]	@ (810a4a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810a41e:	4293      	cmp	r3, r2
 810a420:	d022      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a42a:	d01d      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	681b      	ldr	r3, [r3, #0]
 810a430:	4a1d      	ldr	r2, [pc, #116]	@ (810a4a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810a432:	4293      	cmp	r3, r2
 810a434:	d018      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	681b      	ldr	r3, [r3, #0]
 810a43a:	4a1c      	ldr	r2, [pc, #112]	@ (810a4ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810a43c:	4293      	cmp	r3, r2
 810a43e:	d013      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	681b      	ldr	r3, [r3, #0]
 810a444:	4a1a      	ldr	r2, [pc, #104]	@ (810a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810a446:	4293      	cmp	r3, r2
 810a448:	d00e      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a44a:	687b      	ldr	r3, [r7, #4]
 810a44c:	681b      	ldr	r3, [r3, #0]
 810a44e:	4a15      	ldr	r2, [pc, #84]	@ (810a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810a450:	4293      	cmp	r3, r2
 810a452:	d009      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a454:	687b      	ldr	r3, [r7, #4]
 810a456:	681b      	ldr	r3, [r3, #0]
 810a458:	4a16      	ldr	r2, [pc, #88]	@ (810a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810a45a:	4293      	cmp	r3, r2
 810a45c:	d004      	beq.n	810a468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810a45e:	687b      	ldr	r3, [r7, #4]
 810a460:	681b      	ldr	r3, [r3, #0]
 810a462:	4a15      	ldr	r2, [pc, #84]	@ (810a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810a464:	4293      	cmp	r3, r2
 810a466:	d10c      	bne.n	810a482 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810a468:	68bb      	ldr	r3, [r7, #8]
 810a46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a46e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810a470:	683b      	ldr	r3, [r7, #0]
 810a472:	689b      	ldr	r3, [r3, #8]
 810a474:	68ba      	ldr	r2, [r7, #8]
 810a476:	4313      	orrs	r3, r2
 810a478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	681b      	ldr	r3, [r3, #0]
 810a47e:	68ba      	ldr	r2, [r7, #8]
 810a480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	2201      	movs	r2, #1
 810a486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	2200      	movs	r2, #0
 810a48e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810a492:	2300      	movs	r3, #0
}
 810a494:	4618      	mov	r0, r3
 810a496:	3714      	adds	r7, #20
 810a498:	46bd      	mov	sp, r7
 810a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a49e:	4770      	bx	lr
 810a4a0:	40010000 	.word	0x40010000
 810a4a4:	40010400 	.word	0x40010400
 810a4a8:	40000400 	.word	0x40000400
 810a4ac:	40000800 	.word	0x40000800
 810a4b0:	40000c00 	.word	0x40000c00
 810a4b4:	40001800 	.word	0x40001800
 810a4b8:	40014000 	.word	0x40014000

0810a4bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810a4bc:	b480      	push	{r7}
 810a4be:	b085      	sub	sp, #20
 810a4c0:	af00      	add	r7, sp, #0
 810a4c2:	6078      	str	r0, [r7, #4]
 810a4c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810a4c6:	2300      	movs	r3, #0
 810a4c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810a4ca:	687b      	ldr	r3, [r7, #4]
 810a4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a4d0:	2b01      	cmp	r3, #1
 810a4d2:	d101      	bne.n	810a4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810a4d4:	2302      	movs	r3, #2
 810a4d6:	e065      	b.n	810a5a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810a4d8:	687b      	ldr	r3, [r7, #4]
 810a4da:	2201      	movs	r2, #1
 810a4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810a4e0:	68fb      	ldr	r3, [r7, #12]
 810a4e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810a4e6:	683b      	ldr	r3, [r7, #0]
 810a4e8:	68db      	ldr	r3, [r3, #12]
 810a4ea:	4313      	orrs	r3, r2
 810a4ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810a4ee:	68fb      	ldr	r3, [r7, #12]
 810a4f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a4f4:	683b      	ldr	r3, [r7, #0]
 810a4f6:	689b      	ldr	r3, [r3, #8]
 810a4f8:	4313      	orrs	r3, r2
 810a4fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810a4fc:	68fb      	ldr	r3, [r7, #12]
 810a4fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810a502:	683b      	ldr	r3, [r7, #0]
 810a504:	685b      	ldr	r3, [r3, #4]
 810a506:	4313      	orrs	r3, r2
 810a508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810a50a:	68fb      	ldr	r3, [r7, #12]
 810a50c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810a510:	683b      	ldr	r3, [r7, #0]
 810a512:	681b      	ldr	r3, [r3, #0]
 810a514:	4313      	orrs	r3, r2
 810a516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810a518:	68fb      	ldr	r3, [r7, #12]
 810a51a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810a51e:	683b      	ldr	r3, [r7, #0]
 810a520:	691b      	ldr	r3, [r3, #16]
 810a522:	4313      	orrs	r3, r2
 810a524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810a526:	68fb      	ldr	r3, [r7, #12]
 810a528:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810a52c:	683b      	ldr	r3, [r7, #0]
 810a52e:	695b      	ldr	r3, [r3, #20]
 810a530:	4313      	orrs	r3, r2
 810a532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810a534:	68fb      	ldr	r3, [r7, #12]
 810a536:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810a53a:	683b      	ldr	r3, [r7, #0]
 810a53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a53e:	4313      	orrs	r3, r2
 810a540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810a542:	68fb      	ldr	r3, [r7, #12]
 810a544:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810a548:	683b      	ldr	r3, [r7, #0]
 810a54a:	699b      	ldr	r3, [r3, #24]
 810a54c:	041b      	lsls	r3, r3, #16
 810a54e:	4313      	orrs	r3, r2
 810a550:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	681b      	ldr	r3, [r3, #0]
 810a556:	4a16      	ldr	r2, [pc, #88]	@ (810a5b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810a558:	4293      	cmp	r3, r2
 810a55a:	d004      	beq.n	810a566 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810a55c:	687b      	ldr	r3, [r7, #4]
 810a55e:	681b      	ldr	r3, [r3, #0]
 810a560:	4a14      	ldr	r2, [pc, #80]	@ (810a5b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810a562:	4293      	cmp	r3, r2
 810a564:	d115      	bne.n	810a592 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810a566:	68fb      	ldr	r3, [r7, #12]
 810a568:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810a56c:	683b      	ldr	r3, [r7, #0]
 810a56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a570:	051b      	lsls	r3, r3, #20
 810a572:	4313      	orrs	r3, r2
 810a574:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810a576:	68fb      	ldr	r3, [r7, #12]
 810a578:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810a57c:	683b      	ldr	r3, [r7, #0]
 810a57e:	69db      	ldr	r3, [r3, #28]
 810a580:	4313      	orrs	r3, r2
 810a582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810a58a:	683b      	ldr	r3, [r7, #0]
 810a58c:	6a1b      	ldr	r3, [r3, #32]
 810a58e:	4313      	orrs	r3, r2
 810a590:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810a592:	687b      	ldr	r3, [r7, #4]
 810a594:	681b      	ldr	r3, [r3, #0]
 810a596:	68fa      	ldr	r2, [r7, #12]
 810a598:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	2200      	movs	r2, #0
 810a59e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810a5a2:	2300      	movs	r3, #0
}
 810a5a4:	4618      	mov	r0, r3
 810a5a6:	3714      	adds	r7, #20
 810a5a8:	46bd      	mov	sp, r7
 810a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a5ae:	4770      	bx	lr
 810a5b0:	40010000 	.word	0x40010000
 810a5b4:	40010400 	.word	0x40010400

0810a5b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810a5b8:	b580      	push	{r7, lr}
 810a5ba:	b082      	sub	sp, #8
 810a5bc:	af00      	add	r7, sp, #0
 810a5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810a5c0:	687b      	ldr	r3, [r7, #4]
 810a5c2:	2b00      	cmp	r3, #0
 810a5c4:	d101      	bne.n	810a5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810a5c6:	2301      	movs	r3, #1
 810a5c8:	e042      	b.n	810a650 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810a5d0:	2b00      	cmp	r3, #0
 810a5d2:	d106      	bne.n	810a5e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810a5d4:	687b      	ldr	r3, [r7, #4]
 810a5d6:	2200      	movs	r2, #0
 810a5d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810a5dc:	6878      	ldr	r0, [r7, #4]
 810a5de:	f7f7 fc17 	bl	8101e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810a5e2:	687b      	ldr	r3, [r7, #4]
 810a5e4:	2224      	movs	r2, #36	@ 0x24
 810a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	681a      	ldr	r2, [r3, #0]
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	681b      	ldr	r3, [r3, #0]
 810a5f4:	f022 0201 	bic.w	r2, r2, #1
 810a5f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5fe:	2b00      	cmp	r3, #0
 810a600:	d002      	beq.n	810a608 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810a602:	6878      	ldr	r0, [r7, #4]
 810a604:	f000 fd90 	bl	810b128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810a608:	6878      	ldr	r0, [r7, #4]
 810a60a:	f000 f825 	bl	810a658 <UART_SetConfig>
 810a60e:	4603      	mov	r3, r0
 810a610:	2b01      	cmp	r3, #1
 810a612:	d101      	bne.n	810a618 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810a614:	2301      	movs	r3, #1
 810a616:	e01b      	b.n	810a650 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810a618:	687b      	ldr	r3, [r7, #4]
 810a61a:	681b      	ldr	r3, [r3, #0]
 810a61c:	685a      	ldr	r2, [r3, #4]
 810a61e:	687b      	ldr	r3, [r7, #4]
 810a620:	681b      	ldr	r3, [r3, #0]
 810a622:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810a626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810a628:	687b      	ldr	r3, [r7, #4]
 810a62a:	681b      	ldr	r3, [r3, #0]
 810a62c:	689a      	ldr	r2, [r3, #8]
 810a62e:	687b      	ldr	r3, [r7, #4]
 810a630:	681b      	ldr	r3, [r3, #0]
 810a632:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810a636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810a638:	687b      	ldr	r3, [r7, #4]
 810a63a:	681b      	ldr	r3, [r3, #0]
 810a63c:	681a      	ldr	r2, [r3, #0]
 810a63e:	687b      	ldr	r3, [r7, #4]
 810a640:	681b      	ldr	r3, [r3, #0]
 810a642:	f042 0201 	orr.w	r2, r2, #1
 810a646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810a648:	6878      	ldr	r0, [r7, #4]
 810a64a:	f000 fe0f 	bl	810b26c <UART_CheckIdleState>
 810a64e:	4603      	mov	r3, r0
}
 810a650:	4618      	mov	r0, r3
 810a652:	3708      	adds	r7, #8
 810a654:	46bd      	mov	sp, r7
 810a656:	bd80      	pop	{r7, pc}

0810a658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810a658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a65c:	b092      	sub	sp, #72	@ 0x48
 810a65e:	af00      	add	r7, sp, #0
 810a660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810a662:	2300      	movs	r3, #0
 810a664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810a668:	697b      	ldr	r3, [r7, #20]
 810a66a:	689a      	ldr	r2, [r3, #8]
 810a66c:	697b      	ldr	r3, [r7, #20]
 810a66e:	691b      	ldr	r3, [r3, #16]
 810a670:	431a      	orrs	r2, r3
 810a672:	697b      	ldr	r3, [r7, #20]
 810a674:	695b      	ldr	r3, [r3, #20]
 810a676:	431a      	orrs	r2, r3
 810a678:	697b      	ldr	r3, [r7, #20]
 810a67a:	69db      	ldr	r3, [r3, #28]
 810a67c:	4313      	orrs	r3, r2
 810a67e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810a680:	697b      	ldr	r3, [r7, #20]
 810a682:	681b      	ldr	r3, [r3, #0]
 810a684:	681a      	ldr	r2, [r3, #0]
 810a686:	4bbd      	ldr	r3, [pc, #756]	@ (810a97c <UART_SetConfig+0x324>)
 810a688:	4013      	ands	r3, r2
 810a68a:	697a      	ldr	r2, [r7, #20]
 810a68c:	6812      	ldr	r2, [r2, #0]
 810a68e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a690:	430b      	orrs	r3, r1
 810a692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810a694:	697b      	ldr	r3, [r7, #20]
 810a696:	681b      	ldr	r3, [r3, #0]
 810a698:	685b      	ldr	r3, [r3, #4]
 810a69a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810a69e:	697b      	ldr	r3, [r7, #20]
 810a6a0:	68da      	ldr	r2, [r3, #12]
 810a6a2:	697b      	ldr	r3, [r7, #20]
 810a6a4:	681b      	ldr	r3, [r3, #0]
 810a6a6:	430a      	orrs	r2, r1
 810a6a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810a6aa:	697b      	ldr	r3, [r7, #20]
 810a6ac:	699b      	ldr	r3, [r3, #24]
 810a6ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810a6b0:	697b      	ldr	r3, [r7, #20]
 810a6b2:	681b      	ldr	r3, [r3, #0]
 810a6b4:	4ab2      	ldr	r2, [pc, #712]	@ (810a980 <UART_SetConfig+0x328>)
 810a6b6:	4293      	cmp	r3, r2
 810a6b8:	d004      	beq.n	810a6c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810a6ba:	697b      	ldr	r3, [r7, #20]
 810a6bc:	6a1b      	ldr	r3, [r3, #32]
 810a6be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a6c0:	4313      	orrs	r3, r2
 810a6c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810a6c4:	697b      	ldr	r3, [r7, #20]
 810a6c6:	681b      	ldr	r3, [r3, #0]
 810a6c8:	689b      	ldr	r3, [r3, #8]
 810a6ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810a6ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810a6d2:	697a      	ldr	r2, [r7, #20]
 810a6d4:	6812      	ldr	r2, [r2, #0]
 810a6d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a6d8:	430b      	orrs	r3, r1
 810a6da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810a6dc:	697b      	ldr	r3, [r7, #20]
 810a6de:	681b      	ldr	r3, [r3, #0]
 810a6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a6e2:	f023 010f 	bic.w	r1, r3, #15
 810a6e6:	697b      	ldr	r3, [r7, #20]
 810a6e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a6ea:	697b      	ldr	r3, [r7, #20]
 810a6ec:	681b      	ldr	r3, [r3, #0]
 810a6ee:	430a      	orrs	r2, r1
 810a6f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810a6f2:	697b      	ldr	r3, [r7, #20]
 810a6f4:	681b      	ldr	r3, [r3, #0]
 810a6f6:	4aa3      	ldr	r2, [pc, #652]	@ (810a984 <UART_SetConfig+0x32c>)
 810a6f8:	4293      	cmp	r3, r2
 810a6fa:	d177      	bne.n	810a7ec <UART_SetConfig+0x194>
 810a6fc:	4ba2      	ldr	r3, [pc, #648]	@ (810a988 <UART_SetConfig+0x330>)
 810a6fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a700:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a704:	2b28      	cmp	r3, #40	@ 0x28
 810a706:	d86d      	bhi.n	810a7e4 <UART_SetConfig+0x18c>
 810a708:	a201      	add	r2, pc, #4	@ (adr r2, 810a710 <UART_SetConfig+0xb8>)
 810a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a70e:	bf00      	nop
 810a710:	0810a7b5 	.word	0x0810a7b5
 810a714:	0810a7e5 	.word	0x0810a7e5
 810a718:	0810a7e5 	.word	0x0810a7e5
 810a71c:	0810a7e5 	.word	0x0810a7e5
 810a720:	0810a7e5 	.word	0x0810a7e5
 810a724:	0810a7e5 	.word	0x0810a7e5
 810a728:	0810a7e5 	.word	0x0810a7e5
 810a72c:	0810a7e5 	.word	0x0810a7e5
 810a730:	0810a7bd 	.word	0x0810a7bd
 810a734:	0810a7e5 	.word	0x0810a7e5
 810a738:	0810a7e5 	.word	0x0810a7e5
 810a73c:	0810a7e5 	.word	0x0810a7e5
 810a740:	0810a7e5 	.word	0x0810a7e5
 810a744:	0810a7e5 	.word	0x0810a7e5
 810a748:	0810a7e5 	.word	0x0810a7e5
 810a74c:	0810a7e5 	.word	0x0810a7e5
 810a750:	0810a7c5 	.word	0x0810a7c5
 810a754:	0810a7e5 	.word	0x0810a7e5
 810a758:	0810a7e5 	.word	0x0810a7e5
 810a75c:	0810a7e5 	.word	0x0810a7e5
 810a760:	0810a7e5 	.word	0x0810a7e5
 810a764:	0810a7e5 	.word	0x0810a7e5
 810a768:	0810a7e5 	.word	0x0810a7e5
 810a76c:	0810a7e5 	.word	0x0810a7e5
 810a770:	0810a7cd 	.word	0x0810a7cd
 810a774:	0810a7e5 	.word	0x0810a7e5
 810a778:	0810a7e5 	.word	0x0810a7e5
 810a77c:	0810a7e5 	.word	0x0810a7e5
 810a780:	0810a7e5 	.word	0x0810a7e5
 810a784:	0810a7e5 	.word	0x0810a7e5
 810a788:	0810a7e5 	.word	0x0810a7e5
 810a78c:	0810a7e5 	.word	0x0810a7e5
 810a790:	0810a7d5 	.word	0x0810a7d5
 810a794:	0810a7e5 	.word	0x0810a7e5
 810a798:	0810a7e5 	.word	0x0810a7e5
 810a79c:	0810a7e5 	.word	0x0810a7e5
 810a7a0:	0810a7e5 	.word	0x0810a7e5
 810a7a4:	0810a7e5 	.word	0x0810a7e5
 810a7a8:	0810a7e5 	.word	0x0810a7e5
 810a7ac:	0810a7e5 	.word	0x0810a7e5
 810a7b0:	0810a7dd 	.word	0x0810a7dd
 810a7b4:	2301      	movs	r3, #1
 810a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ba:	e220      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7bc:	2304      	movs	r3, #4
 810a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7c2:	e21c      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7c4:	2308      	movs	r3, #8
 810a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ca:	e218      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7cc:	2310      	movs	r3, #16
 810a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7d2:	e214      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7d4:	2320      	movs	r3, #32
 810a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7da:	e210      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7dc:	2340      	movs	r3, #64	@ 0x40
 810a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7e2:	e20c      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7e4:	2380      	movs	r3, #128	@ 0x80
 810a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ea:	e208      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a7ec:	697b      	ldr	r3, [r7, #20]
 810a7ee:	681b      	ldr	r3, [r3, #0]
 810a7f0:	4a66      	ldr	r2, [pc, #408]	@ (810a98c <UART_SetConfig+0x334>)
 810a7f2:	4293      	cmp	r3, r2
 810a7f4:	d130      	bne.n	810a858 <UART_SetConfig+0x200>
 810a7f6:	4b64      	ldr	r3, [pc, #400]	@ (810a988 <UART_SetConfig+0x330>)
 810a7f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a7fa:	f003 0307 	and.w	r3, r3, #7
 810a7fe:	2b05      	cmp	r3, #5
 810a800:	d826      	bhi.n	810a850 <UART_SetConfig+0x1f8>
 810a802:	a201      	add	r2, pc, #4	@ (adr r2, 810a808 <UART_SetConfig+0x1b0>)
 810a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a808:	0810a821 	.word	0x0810a821
 810a80c:	0810a829 	.word	0x0810a829
 810a810:	0810a831 	.word	0x0810a831
 810a814:	0810a839 	.word	0x0810a839
 810a818:	0810a841 	.word	0x0810a841
 810a81c:	0810a849 	.word	0x0810a849
 810a820:	2300      	movs	r3, #0
 810a822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a826:	e1ea      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a828:	2304      	movs	r3, #4
 810a82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a82e:	e1e6      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a830:	2308      	movs	r3, #8
 810a832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a836:	e1e2      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a838:	2310      	movs	r3, #16
 810a83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a83e:	e1de      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a840:	2320      	movs	r3, #32
 810a842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a846:	e1da      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a848:	2340      	movs	r3, #64	@ 0x40
 810a84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a84e:	e1d6      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a850:	2380      	movs	r3, #128	@ 0x80
 810a852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a856:	e1d2      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a858:	697b      	ldr	r3, [r7, #20]
 810a85a:	681b      	ldr	r3, [r3, #0]
 810a85c:	4a4c      	ldr	r2, [pc, #304]	@ (810a990 <UART_SetConfig+0x338>)
 810a85e:	4293      	cmp	r3, r2
 810a860:	d130      	bne.n	810a8c4 <UART_SetConfig+0x26c>
 810a862:	4b49      	ldr	r3, [pc, #292]	@ (810a988 <UART_SetConfig+0x330>)
 810a864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a866:	f003 0307 	and.w	r3, r3, #7
 810a86a:	2b05      	cmp	r3, #5
 810a86c:	d826      	bhi.n	810a8bc <UART_SetConfig+0x264>
 810a86e:	a201      	add	r2, pc, #4	@ (adr r2, 810a874 <UART_SetConfig+0x21c>)
 810a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a874:	0810a88d 	.word	0x0810a88d
 810a878:	0810a895 	.word	0x0810a895
 810a87c:	0810a89d 	.word	0x0810a89d
 810a880:	0810a8a5 	.word	0x0810a8a5
 810a884:	0810a8ad 	.word	0x0810a8ad
 810a888:	0810a8b5 	.word	0x0810a8b5
 810a88c:	2300      	movs	r3, #0
 810a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a892:	e1b4      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a894:	2304      	movs	r3, #4
 810a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a89a:	e1b0      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a89c:	2308      	movs	r3, #8
 810a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a8a2:	e1ac      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a8a4:	2310      	movs	r3, #16
 810a8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a8aa:	e1a8      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a8ac:	2320      	movs	r3, #32
 810a8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a8b2:	e1a4      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a8b4:	2340      	movs	r3, #64	@ 0x40
 810a8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a8ba:	e1a0      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a8bc:	2380      	movs	r3, #128	@ 0x80
 810a8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a8c2:	e19c      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a8c4:	697b      	ldr	r3, [r7, #20]
 810a8c6:	681b      	ldr	r3, [r3, #0]
 810a8c8:	4a32      	ldr	r2, [pc, #200]	@ (810a994 <UART_SetConfig+0x33c>)
 810a8ca:	4293      	cmp	r3, r2
 810a8cc:	d130      	bne.n	810a930 <UART_SetConfig+0x2d8>
 810a8ce:	4b2e      	ldr	r3, [pc, #184]	@ (810a988 <UART_SetConfig+0x330>)
 810a8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a8d2:	f003 0307 	and.w	r3, r3, #7
 810a8d6:	2b05      	cmp	r3, #5
 810a8d8:	d826      	bhi.n	810a928 <UART_SetConfig+0x2d0>
 810a8da:	a201      	add	r2, pc, #4	@ (adr r2, 810a8e0 <UART_SetConfig+0x288>)
 810a8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a8e0:	0810a8f9 	.word	0x0810a8f9
 810a8e4:	0810a901 	.word	0x0810a901
 810a8e8:	0810a909 	.word	0x0810a909
 810a8ec:	0810a911 	.word	0x0810a911
 810a8f0:	0810a919 	.word	0x0810a919
 810a8f4:	0810a921 	.word	0x0810a921
 810a8f8:	2300      	movs	r3, #0
 810a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a8fe:	e17e      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a900:	2304      	movs	r3, #4
 810a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a906:	e17a      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a908:	2308      	movs	r3, #8
 810a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a90e:	e176      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a910:	2310      	movs	r3, #16
 810a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a916:	e172      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a918:	2320      	movs	r3, #32
 810a91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a91e:	e16e      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a920:	2340      	movs	r3, #64	@ 0x40
 810a922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a926:	e16a      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a928:	2380      	movs	r3, #128	@ 0x80
 810a92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a92e:	e166      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a930:	697b      	ldr	r3, [r7, #20]
 810a932:	681b      	ldr	r3, [r3, #0]
 810a934:	4a18      	ldr	r2, [pc, #96]	@ (810a998 <UART_SetConfig+0x340>)
 810a936:	4293      	cmp	r3, r2
 810a938:	d140      	bne.n	810a9bc <UART_SetConfig+0x364>
 810a93a:	4b13      	ldr	r3, [pc, #76]	@ (810a988 <UART_SetConfig+0x330>)
 810a93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a93e:	f003 0307 	and.w	r3, r3, #7
 810a942:	2b05      	cmp	r3, #5
 810a944:	d836      	bhi.n	810a9b4 <UART_SetConfig+0x35c>
 810a946:	a201      	add	r2, pc, #4	@ (adr r2, 810a94c <UART_SetConfig+0x2f4>)
 810a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a94c:	0810a965 	.word	0x0810a965
 810a950:	0810a96d 	.word	0x0810a96d
 810a954:	0810a975 	.word	0x0810a975
 810a958:	0810a99d 	.word	0x0810a99d
 810a95c:	0810a9a5 	.word	0x0810a9a5
 810a960:	0810a9ad 	.word	0x0810a9ad
 810a964:	2300      	movs	r3, #0
 810a966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a96a:	e148      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a96c:	2304      	movs	r3, #4
 810a96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a972:	e144      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a974:	2308      	movs	r3, #8
 810a976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a97a:	e140      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a97c:	cfff69f3 	.word	0xcfff69f3
 810a980:	58000c00 	.word	0x58000c00
 810a984:	40011000 	.word	0x40011000
 810a988:	58024400 	.word	0x58024400
 810a98c:	40004400 	.word	0x40004400
 810a990:	40004800 	.word	0x40004800
 810a994:	40004c00 	.word	0x40004c00
 810a998:	40005000 	.word	0x40005000
 810a99c:	2310      	movs	r3, #16
 810a99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a9a2:	e12c      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a9a4:	2320      	movs	r3, #32
 810a9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a9aa:	e128      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a9ac:	2340      	movs	r3, #64	@ 0x40
 810a9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a9b2:	e124      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a9b4:	2380      	movs	r3, #128	@ 0x80
 810a9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a9ba:	e120      	b.n	810abfe <UART_SetConfig+0x5a6>
 810a9bc:	697b      	ldr	r3, [r7, #20]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	4acb      	ldr	r2, [pc, #812]	@ (810acf0 <UART_SetConfig+0x698>)
 810a9c2:	4293      	cmp	r3, r2
 810a9c4:	d176      	bne.n	810aab4 <UART_SetConfig+0x45c>
 810a9c6:	4bcb      	ldr	r3, [pc, #812]	@ (810acf4 <UART_SetConfig+0x69c>)
 810a9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a9ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a9ce:	2b28      	cmp	r3, #40	@ 0x28
 810a9d0:	d86c      	bhi.n	810aaac <UART_SetConfig+0x454>
 810a9d2:	a201      	add	r2, pc, #4	@ (adr r2, 810a9d8 <UART_SetConfig+0x380>)
 810a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a9d8:	0810aa7d 	.word	0x0810aa7d
 810a9dc:	0810aaad 	.word	0x0810aaad
 810a9e0:	0810aaad 	.word	0x0810aaad
 810a9e4:	0810aaad 	.word	0x0810aaad
 810a9e8:	0810aaad 	.word	0x0810aaad
 810a9ec:	0810aaad 	.word	0x0810aaad
 810a9f0:	0810aaad 	.word	0x0810aaad
 810a9f4:	0810aaad 	.word	0x0810aaad
 810a9f8:	0810aa85 	.word	0x0810aa85
 810a9fc:	0810aaad 	.word	0x0810aaad
 810aa00:	0810aaad 	.word	0x0810aaad
 810aa04:	0810aaad 	.word	0x0810aaad
 810aa08:	0810aaad 	.word	0x0810aaad
 810aa0c:	0810aaad 	.word	0x0810aaad
 810aa10:	0810aaad 	.word	0x0810aaad
 810aa14:	0810aaad 	.word	0x0810aaad
 810aa18:	0810aa8d 	.word	0x0810aa8d
 810aa1c:	0810aaad 	.word	0x0810aaad
 810aa20:	0810aaad 	.word	0x0810aaad
 810aa24:	0810aaad 	.word	0x0810aaad
 810aa28:	0810aaad 	.word	0x0810aaad
 810aa2c:	0810aaad 	.word	0x0810aaad
 810aa30:	0810aaad 	.word	0x0810aaad
 810aa34:	0810aaad 	.word	0x0810aaad
 810aa38:	0810aa95 	.word	0x0810aa95
 810aa3c:	0810aaad 	.word	0x0810aaad
 810aa40:	0810aaad 	.word	0x0810aaad
 810aa44:	0810aaad 	.word	0x0810aaad
 810aa48:	0810aaad 	.word	0x0810aaad
 810aa4c:	0810aaad 	.word	0x0810aaad
 810aa50:	0810aaad 	.word	0x0810aaad
 810aa54:	0810aaad 	.word	0x0810aaad
 810aa58:	0810aa9d 	.word	0x0810aa9d
 810aa5c:	0810aaad 	.word	0x0810aaad
 810aa60:	0810aaad 	.word	0x0810aaad
 810aa64:	0810aaad 	.word	0x0810aaad
 810aa68:	0810aaad 	.word	0x0810aaad
 810aa6c:	0810aaad 	.word	0x0810aaad
 810aa70:	0810aaad 	.word	0x0810aaad
 810aa74:	0810aaad 	.word	0x0810aaad
 810aa78:	0810aaa5 	.word	0x0810aaa5
 810aa7c:	2301      	movs	r3, #1
 810aa7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aa82:	e0bc      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aa84:	2304      	movs	r3, #4
 810aa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aa8a:	e0b8      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aa8c:	2308      	movs	r3, #8
 810aa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aa92:	e0b4      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aa94:	2310      	movs	r3, #16
 810aa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aa9a:	e0b0      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aa9c:	2320      	movs	r3, #32
 810aa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aaa2:	e0ac      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aaa4:	2340      	movs	r3, #64	@ 0x40
 810aaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aaaa:	e0a8      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aaac:	2380      	movs	r3, #128	@ 0x80
 810aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aab2:	e0a4      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aab4:	697b      	ldr	r3, [r7, #20]
 810aab6:	681b      	ldr	r3, [r3, #0]
 810aab8:	4a8f      	ldr	r2, [pc, #572]	@ (810acf8 <UART_SetConfig+0x6a0>)
 810aaba:	4293      	cmp	r3, r2
 810aabc:	d130      	bne.n	810ab20 <UART_SetConfig+0x4c8>
 810aabe:	4b8d      	ldr	r3, [pc, #564]	@ (810acf4 <UART_SetConfig+0x69c>)
 810aac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810aac2:	f003 0307 	and.w	r3, r3, #7
 810aac6:	2b05      	cmp	r3, #5
 810aac8:	d826      	bhi.n	810ab18 <UART_SetConfig+0x4c0>
 810aaca:	a201      	add	r2, pc, #4	@ (adr r2, 810aad0 <UART_SetConfig+0x478>)
 810aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aad0:	0810aae9 	.word	0x0810aae9
 810aad4:	0810aaf1 	.word	0x0810aaf1
 810aad8:	0810aaf9 	.word	0x0810aaf9
 810aadc:	0810ab01 	.word	0x0810ab01
 810aae0:	0810ab09 	.word	0x0810ab09
 810aae4:	0810ab11 	.word	0x0810ab11
 810aae8:	2300      	movs	r3, #0
 810aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aaee:	e086      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aaf0:	2304      	movs	r3, #4
 810aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aaf6:	e082      	b.n	810abfe <UART_SetConfig+0x5a6>
 810aaf8:	2308      	movs	r3, #8
 810aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810aafe:	e07e      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab00:	2310      	movs	r3, #16
 810ab02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab06:	e07a      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab08:	2320      	movs	r3, #32
 810ab0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab0e:	e076      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab10:	2340      	movs	r3, #64	@ 0x40
 810ab12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab16:	e072      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab18:	2380      	movs	r3, #128	@ 0x80
 810ab1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab1e:	e06e      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab20:	697b      	ldr	r3, [r7, #20]
 810ab22:	681b      	ldr	r3, [r3, #0]
 810ab24:	4a75      	ldr	r2, [pc, #468]	@ (810acfc <UART_SetConfig+0x6a4>)
 810ab26:	4293      	cmp	r3, r2
 810ab28:	d130      	bne.n	810ab8c <UART_SetConfig+0x534>
 810ab2a:	4b72      	ldr	r3, [pc, #456]	@ (810acf4 <UART_SetConfig+0x69c>)
 810ab2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ab2e:	f003 0307 	and.w	r3, r3, #7
 810ab32:	2b05      	cmp	r3, #5
 810ab34:	d826      	bhi.n	810ab84 <UART_SetConfig+0x52c>
 810ab36:	a201      	add	r2, pc, #4	@ (adr r2, 810ab3c <UART_SetConfig+0x4e4>)
 810ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab3c:	0810ab55 	.word	0x0810ab55
 810ab40:	0810ab5d 	.word	0x0810ab5d
 810ab44:	0810ab65 	.word	0x0810ab65
 810ab48:	0810ab6d 	.word	0x0810ab6d
 810ab4c:	0810ab75 	.word	0x0810ab75
 810ab50:	0810ab7d 	.word	0x0810ab7d
 810ab54:	2300      	movs	r3, #0
 810ab56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab5a:	e050      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab5c:	2304      	movs	r3, #4
 810ab5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab62:	e04c      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab64:	2308      	movs	r3, #8
 810ab66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab6a:	e048      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab6c:	2310      	movs	r3, #16
 810ab6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab72:	e044      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab74:	2320      	movs	r3, #32
 810ab76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab7a:	e040      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab7c:	2340      	movs	r3, #64	@ 0x40
 810ab7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab82:	e03c      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab84:	2380      	movs	r3, #128	@ 0x80
 810ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ab8a:	e038      	b.n	810abfe <UART_SetConfig+0x5a6>
 810ab8c:	697b      	ldr	r3, [r7, #20]
 810ab8e:	681b      	ldr	r3, [r3, #0]
 810ab90:	4a5b      	ldr	r2, [pc, #364]	@ (810ad00 <UART_SetConfig+0x6a8>)
 810ab92:	4293      	cmp	r3, r2
 810ab94:	d130      	bne.n	810abf8 <UART_SetConfig+0x5a0>
 810ab96:	4b57      	ldr	r3, [pc, #348]	@ (810acf4 <UART_SetConfig+0x69c>)
 810ab98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ab9a:	f003 0307 	and.w	r3, r3, #7
 810ab9e:	2b05      	cmp	r3, #5
 810aba0:	d826      	bhi.n	810abf0 <UART_SetConfig+0x598>
 810aba2:	a201      	add	r2, pc, #4	@ (adr r2, 810aba8 <UART_SetConfig+0x550>)
 810aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aba8:	0810abc1 	.word	0x0810abc1
 810abac:	0810abc9 	.word	0x0810abc9
 810abb0:	0810abd1 	.word	0x0810abd1
 810abb4:	0810abd9 	.word	0x0810abd9
 810abb8:	0810abe1 	.word	0x0810abe1
 810abbc:	0810abe9 	.word	0x0810abe9
 810abc0:	2302      	movs	r3, #2
 810abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abc6:	e01a      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abc8:	2304      	movs	r3, #4
 810abca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abce:	e016      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abd0:	2308      	movs	r3, #8
 810abd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abd6:	e012      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abd8:	2310      	movs	r3, #16
 810abda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abde:	e00e      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abe0:	2320      	movs	r3, #32
 810abe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abe6:	e00a      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abe8:	2340      	movs	r3, #64	@ 0x40
 810abea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abee:	e006      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abf0:	2380      	movs	r3, #128	@ 0x80
 810abf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810abf6:	e002      	b.n	810abfe <UART_SetConfig+0x5a6>
 810abf8:	2380      	movs	r3, #128	@ 0x80
 810abfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810abfe:	697b      	ldr	r3, [r7, #20]
 810ac00:	681b      	ldr	r3, [r3, #0]
 810ac02:	4a3f      	ldr	r2, [pc, #252]	@ (810ad00 <UART_SetConfig+0x6a8>)
 810ac04:	4293      	cmp	r3, r2
 810ac06:	f040 80f8 	bne.w	810adfa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810ac0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ac0e:	2b20      	cmp	r3, #32
 810ac10:	dc46      	bgt.n	810aca0 <UART_SetConfig+0x648>
 810ac12:	2b02      	cmp	r3, #2
 810ac14:	f2c0 8082 	blt.w	810ad1c <UART_SetConfig+0x6c4>
 810ac18:	3b02      	subs	r3, #2
 810ac1a:	2b1e      	cmp	r3, #30
 810ac1c:	d87e      	bhi.n	810ad1c <UART_SetConfig+0x6c4>
 810ac1e:	a201      	add	r2, pc, #4	@ (adr r2, 810ac24 <UART_SetConfig+0x5cc>)
 810ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac24:	0810aca7 	.word	0x0810aca7
 810ac28:	0810ad1d 	.word	0x0810ad1d
 810ac2c:	0810acaf 	.word	0x0810acaf
 810ac30:	0810ad1d 	.word	0x0810ad1d
 810ac34:	0810ad1d 	.word	0x0810ad1d
 810ac38:	0810ad1d 	.word	0x0810ad1d
 810ac3c:	0810acbf 	.word	0x0810acbf
 810ac40:	0810ad1d 	.word	0x0810ad1d
 810ac44:	0810ad1d 	.word	0x0810ad1d
 810ac48:	0810ad1d 	.word	0x0810ad1d
 810ac4c:	0810ad1d 	.word	0x0810ad1d
 810ac50:	0810ad1d 	.word	0x0810ad1d
 810ac54:	0810ad1d 	.word	0x0810ad1d
 810ac58:	0810ad1d 	.word	0x0810ad1d
 810ac5c:	0810accf 	.word	0x0810accf
 810ac60:	0810ad1d 	.word	0x0810ad1d
 810ac64:	0810ad1d 	.word	0x0810ad1d
 810ac68:	0810ad1d 	.word	0x0810ad1d
 810ac6c:	0810ad1d 	.word	0x0810ad1d
 810ac70:	0810ad1d 	.word	0x0810ad1d
 810ac74:	0810ad1d 	.word	0x0810ad1d
 810ac78:	0810ad1d 	.word	0x0810ad1d
 810ac7c:	0810ad1d 	.word	0x0810ad1d
 810ac80:	0810ad1d 	.word	0x0810ad1d
 810ac84:	0810ad1d 	.word	0x0810ad1d
 810ac88:	0810ad1d 	.word	0x0810ad1d
 810ac8c:	0810ad1d 	.word	0x0810ad1d
 810ac90:	0810ad1d 	.word	0x0810ad1d
 810ac94:	0810ad1d 	.word	0x0810ad1d
 810ac98:	0810ad1d 	.word	0x0810ad1d
 810ac9c:	0810ad0f 	.word	0x0810ad0f
 810aca0:	2b40      	cmp	r3, #64	@ 0x40
 810aca2:	d037      	beq.n	810ad14 <UART_SetConfig+0x6bc>
 810aca4:	e03a      	b.n	810ad1c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810aca6:	f7fc f80f 	bl	8106cc8 <HAL_RCCEx_GetD3PCLK1Freq>
 810acaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810acac:	e03c      	b.n	810ad28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810acae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810acb2:	4618      	mov	r0, r3
 810acb4:	f7fc f81e 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810acb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810acbc:	e034      	b.n	810ad28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810acbe:	f107 0318 	add.w	r3, r7, #24
 810acc2:	4618      	mov	r0, r3
 810acc4:	f7fc f96a 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810acc8:	69fb      	ldr	r3, [r7, #28]
 810acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810accc:	e02c      	b.n	810ad28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810acce:	4b09      	ldr	r3, [pc, #36]	@ (810acf4 <UART_SetConfig+0x69c>)
 810acd0:	681b      	ldr	r3, [r3, #0]
 810acd2:	f003 0320 	and.w	r3, r3, #32
 810acd6:	2b00      	cmp	r3, #0
 810acd8:	d016      	beq.n	810ad08 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810acda:	4b06      	ldr	r3, [pc, #24]	@ (810acf4 <UART_SetConfig+0x69c>)
 810acdc:	681b      	ldr	r3, [r3, #0]
 810acde:	08db      	lsrs	r3, r3, #3
 810ace0:	f003 0303 	and.w	r3, r3, #3
 810ace4:	4a07      	ldr	r2, [pc, #28]	@ (810ad04 <UART_SetConfig+0x6ac>)
 810ace6:	fa22 f303 	lsr.w	r3, r2, r3
 810acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810acec:	e01c      	b.n	810ad28 <UART_SetConfig+0x6d0>
 810acee:	bf00      	nop
 810acf0:	40011400 	.word	0x40011400
 810acf4:	58024400 	.word	0x58024400
 810acf8:	40007800 	.word	0x40007800
 810acfc:	40007c00 	.word	0x40007c00
 810ad00:	58000c00 	.word	0x58000c00
 810ad04:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810ad08:	4b9d      	ldr	r3, [pc, #628]	@ (810af80 <UART_SetConfig+0x928>)
 810ad0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ad0c:	e00c      	b.n	810ad28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ad0e:	4b9d      	ldr	r3, [pc, #628]	@ (810af84 <UART_SetConfig+0x92c>)
 810ad10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ad12:	e009      	b.n	810ad28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ad14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810ad18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ad1a:	e005      	b.n	810ad28 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810ad1c:	2300      	movs	r3, #0
 810ad1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810ad20:	2301      	movs	r3, #1
 810ad22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810ad26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810ad28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad2a:	2b00      	cmp	r3, #0
 810ad2c:	f000 81de 	beq.w	810b0ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810ad30:	697b      	ldr	r3, [r7, #20]
 810ad32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ad34:	4a94      	ldr	r2, [pc, #592]	@ (810af88 <UART_SetConfig+0x930>)
 810ad36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ad3a:	461a      	mov	r2, r3
 810ad3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad3e:	fbb3 f3f2 	udiv	r3, r3, r2
 810ad42:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ad44:	697b      	ldr	r3, [r7, #20]
 810ad46:	685a      	ldr	r2, [r3, #4]
 810ad48:	4613      	mov	r3, r2
 810ad4a:	005b      	lsls	r3, r3, #1
 810ad4c:	4413      	add	r3, r2
 810ad4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ad50:	429a      	cmp	r2, r3
 810ad52:	d305      	bcc.n	810ad60 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810ad54:	697b      	ldr	r3, [r7, #20]
 810ad56:	685b      	ldr	r3, [r3, #4]
 810ad58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ad5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ad5c:	429a      	cmp	r2, r3
 810ad5e:	d903      	bls.n	810ad68 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810ad60:	2301      	movs	r3, #1
 810ad62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810ad66:	e1c1      	b.n	810b0ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ad68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad6a:	2200      	movs	r2, #0
 810ad6c:	60bb      	str	r3, [r7, #8]
 810ad6e:	60fa      	str	r2, [r7, #12]
 810ad70:	697b      	ldr	r3, [r7, #20]
 810ad72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ad74:	4a84      	ldr	r2, [pc, #528]	@ (810af88 <UART_SetConfig+0x930>)
 810ad76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ad7a:	b29b      	uxth	r3, r3
 810ad7c:	2200      	movs	r2, #0
 810ad7e:	603b      	str	r3, [r7, #0]
 810ad80:	607a      	str	r2, [r7, #4]
 810ad82:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ad86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810ad8a:	f7f5 faa5 	bl	81002d8 <__aeabi_uldivmod>
 810ad8e:	4602      	mov	r2, r0
 810ad90:	460b      	mov	r3, r1
 810ad92:	4610      	mov	r0, r2
 810ad94:	4619      	mov	r1, r3
 810ad96:	f04f 0200 	mov.w	r2, #0
 810ad9a:	f04f 0300 	mov.w	r3, #0
 810ad9e:	020b      	lsls	r3, r1, #8
 810ada0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810ada4:	0202      	lsls	r2, r0, #8
 810ada6:	6979      	ldr	r1, [r7, #20]
 810ada8:	6849      	ldr	r1, [r1, #4]
 810adaa:	0849      	lsrs	r1, r1, #1
 810adac:	2000      	movs	r0, #0
 810adae:	460c      	mov	r4, r1
 810adb0:	4605      	mov	r5, r0
 810adb2:	eb12 0804 	adds.w	r8, r2, r4
 810adb6:	eb43 0905 	adc.w	r9, r3, r5
 810adba:	697b      	ldr	r3, [r7, #20]
 810adbc:	685b      	ldr	r3, [r3, #4]
 810adbe:	2200      	movs	r2, #0
 810adc0:	469a      	mov	sl, r3
 810adc2:	4693      	mov	fp, r2
 810adc4:	4652      	mov	r2, sl
 810adc6:	465b      	mov	r3, fp
 810adc8:	4640      	mov	r0, r8
 810adca:	4649      	mov	r1, r9
 810adcc:	f7f5 fa84 	bl	81002d8 <__aeabi_uldivmod>
 810add0:	4602      	mov	r2, r0
 810add2:	460b      	mov	r3, r1
 810add4:	4613      	mov	r3, r2
 810add6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810adda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810adde:	d308      	bcc.n	810adf2 <UART_SetConfig+0x79a>
 810ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ade2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810ade6:	d204      	bcs.n	810adf2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810ade8:	697b      	ldr	r3, [r7, #20]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810adee:	60da      	str	r2, [r3, #12]
 810adf0:	e17c      	b.n	810b0ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810adf2:	2301      	movs	r3, #1
 810adf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810adf8:	e178      	b.n	810b0ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810adfa:	697b      	ldr	r3, [r7, #20]
 810adfc:	69db      	ldr	r3, [r3, #28]
 810adfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810ae02:	f040 80c5 	bne.w	810af90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810ae06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ae0a:	2b20      	cmp	r3, #32
 810ae0c:	dc48      	bgt.n	810aea0 <UART_SetConfig+0x848>
 810ae0e:	2b00      	cmp	r3, #0
 810ae10:	db7b      	blt.n	810af0a <UART_SetConfig+0x8b2>
 810ae12:	2b20      	cmp	r3, #32
 810ae14:	d879      	bhi.n	810af0a <UART_SetConfig+0x8b2>
 810ae16:	a201      	add	r2, pc, #4	@ (adr r2, 810ae1c <UART_SetConfig+0x7c4>)
 810ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae1c:	0810aea7 	.word	0x0810aea7
 810ae20:	0810aeaf 	.word	0x0810aeaf
 810ae24:	0810af0b 	.word	0x0810af0b
 810ae28:	0810af0b 	.word	0x0810af0b
 810ae2c:	0810aeb7 	.word	0x0810aeb7
 810ae30:	0810af0b 	.word	0x0810af0b
 810ae34:	0810af0b 	.word	0x0810af0b
 810ae38:	0810af0b 	.word	0x0810af0b
 810ae3c:	0810aec7 	.word	0x0810aec7
 810ae40:	0810af0b 	.word	0x0810af0b
 810ae44:	0810af0b 	.word	0x0810af0b
 810ae48:	0810af0b 	.word	0x0810af0b
 810ae4c:	0810af0b 	.word	0x0810af0b
 810ae50:	0810af0b 	.word	0x0810af0b
 810ae54:	0810af0b 	.word	0x0810af0b
 810ae58:	0810af0b 	.word	0x0810af0b
 810ae5c:	0810aed7 	.word	0x0810aed7
 810ae60:	0810af0b 	.word	0x0810af0b
 810ae64:	0810af0b 	.word	0x0810af0b
 810ae68:	0810af0b 	.word	0x0810af0b
 810ae6c:	0810af0b 	.word	0x0810af0b
 810ae70:	0810af0b 	.word	0x0810af0b
 810ae74:	0810af0b 	.word	0x0810af0b
 810ae78:	0810af0b 	.word	0x0810af0b
 810ae7c:	0810af0b 	.word	0x0810af0b
 810ae80:	0810af0b 	.word	0x0810af0b
 810ae84:	0810af0b 	.word	0x0810af0b
 810ae88:	0810af0b 	.word	0x0810af0b
 810ae8c:	0810af0b 	.word	0x0810af0b
 810ae90:	0810af0b 	.word	0x0810af0b
 810ae94:	0810af0b 	.word	0x0810af0b
 810ae98:	0810af0b 	.word	0x0810af0b
 810ae9c:	0810aefd 	.word	0x0810aefd
 810aea0:	2b40      	cmp	r3, #64	@ 0x40
 810aea2:	d02e      	beq.n	810af02 <UART_SetConfig+0x8aa>
 810aea4:	e031      	b.n	810af0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810aea6:	f7f9 ff19 	bl	8104cdc <HAL_RCC_GetPCLK1Freq>
 810aeaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810aeac:	e033      	b.n	810af16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810aeae:	f7f9 ff2b 	bl	8104d08 <HAL_RCC_GetPCLK2Freq>
 810aeb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810aeb4:	e02f      	b.n	810af16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810aeb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810aeba:	4618      	mov	r0, r3
 810aebc:	f7fb ff1a 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810aec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aec4:	e027      	b.n	810af16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aec6:	f107 0318 	add.w	r3, r7, #24
 810aeca:	4618      	mov	r0, r3
 810aecc:	f7fc f866 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810aed0:	69fb      	ldr	r3, [r7, #28]
 810aed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aed4:	e01f      	b.n	810af16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aed6:	4b2d      	ldr	r3, [pc, #180]	@ (810af8c <UART_SetConfig+0x934>)
 810aed8:	681b      	ldr	r3, [r3, #0]
 810aeda:	f003 0320 	and.w	r3, r3, #32
 810aede:	2b00      	cmp	r3, #0
 810aee0:	d009      	beq.n	810aef6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810aee2:	4b2a      	ldr	r3, [pc, #168]	@ (810af8c <UART_SetConfig+0x934>)
 810aee4:	681b      	ldr	r3, [r3, #0]
 810aee6:	08db      	lsrs	r3, r3, #3
 810aee8:	f003 0303 	and.w	r3, r3, #3
 810aeec:	4a24      	ldr	r2, [pc, #144]	@ (810af80 <UART_SetConfig+0x928>)
 810aeee:	fa22 f303 	lsr.w	r3, r2, r3
 810aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810aef4:	e00f      	b.n	810af16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810aef6:	4b22      	ldr	r3, [pc, #136]	@ (810af80 <UART_SetConfig+0x928>)
 810aef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aefa:	e00c      	b.n	810af16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810aefc:	4b21      	ldr	r3, [pc, #132]	@ (810af84 <UART_SetConfig+0x92c>)
 810aefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810af00:	e009      	b.n	810af16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810af02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810af08:	e005      	b.n	810af16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810af0a:	2300      	movs	r3, #0
 810af0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810af0e:	2301      	movs	r3, #1
 810af10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810af14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810af16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810af18:	2b00      	cmp	r3, #0
 810af1a:	f000 80e7 	beq.w	810b0ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810af1e:	697b      	ldr	r3, [r7, #20]
 810af20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810af22:	4a19      	ldr	r2, [pc, #100]	@ (810af88 <UART_SetConfig+0x930>)
 810af24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810af28:	461a      	mov	r2, r3
 810af2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810af2c:	fbb3 f3f2 	udiv	r3, r3, r2
 810af30:	005a      	lsls	r2, r3, #1
 810af32:	697b      	ldr	r3, [r7, #20]
 810af34:	685b      	ldr	r3, [r3, #4]
 810af36:	085b      	lsrs	r3, r3, #1
 810af38:	441a      	add	r2, r3
 810af3a:	697b      	ldr	r3, [r7, #20]
 810af3c:	685b      	ldr	r3, [r3, #4]
 810af3e:	fbb2 f3f3 	udiv	r3, r2, r3
 810af42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af46:	2b0f      	cmp	r3, #15
 810af48:	d916      	bls.n	810af78 <UART_SetConfig+0x920>
 810af4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810af50:	d212      	bcs.n	810af78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af54:	b29b      	uxth	r3, r3
 810af56:	f023 030f 	bic.w	r3, r3, #15
 810af5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810af5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810af5e:	085b      	lsrs	r3, r3, #1
 810af60:	b29b      	uxth	r3, r3
 810af62:	f003 0307 	and.w	r3, r3, #7
 810af66:	b29a      	uxth	r2, r3
 810af68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810af6a:	4313      	orrs	r3, r2
 810af6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810af6e:	697b      	ldr	r3, [r7, #20]
 810af70:	681b      	ldr	r3, [r3, #0]
 810af72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810af74:	60da      	str	r2, [r3, #12]
 810af76:	e0b9      	b.n	810b0ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810af78:	2301      	movs	r3, #1
 810af7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810af7e:	e0b5      	b.n	810b0ec <UART_SetConfig+0xa94>
 810af80:	03d09000 	.word	0x03d09000
 810af84:	003d0900 	.word	0x003d0900
 810af88:	0810c354 	.word	0x0810c354
 810af8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810af90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810af94:	2b20      	cmp	r3, #32
 810af96:	dc49      	bgt.n	810b02c <UART_SetConfig+0x9d4>
 810af98:	2b00      	cmp	r3, #0
 810af9a:	db7c      	blt.n	810b096 <UART_SetConfig+0xa3e>
 810af9c:	2b20      	cmp	r3, #32
 810af9e:	d87a      	bhi.n	810b096 <UART_SetConfig+0xa3e>
 810afa0:	a201      	add	r2, pc, #4	@ (adr r2, 810afa8 <UART_SetConfig+0x950>)
 810afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810afa6:	bf00      	nop
 810afa8:	0810b033 	.word	0x0810b033
 810afac:	0810b03b 	.word	0x0810b03b
 810afb0:	0810b097 	.word	0x0810b097
 810afb4:	0810b097 	.word	0x0810b097
 810afb8:	0810b043 	.word	0x0810b043
 810afbc:	0810b097 	.word	0x0810b097
 810afc0:	0810b097 	.word	0x0810b097
 810afc4:	0810b097 	.word	0x0810b097
 810afc8:	0810b053 	.word	0x0810b053
 810afcc:	0810b097 	.word	0x0810b097
 810afd0:	0810b097 	.word	0x0810b097
 810afd4:	0810b097 	.word	0x0810b097
 810afd8:	0810b097 	.word	0x0810b097
 810afdc:	0810b097 	.word	0x0810b097
 810afe0:	0810b097 	.word	0x0810b097
 810afe4:	0810b097 	.word	0x0810b097
 810afe8:	0810b063 	.word	0x0810b063
 810afec:	0810b097 	.word	0x0810b097
 810aff0:	0810b097 	.word	0x0810b097
 810aff4:	0810b097 	.word	0x0810b097
 810aff8:	0810b097 	.word	0x0810b097
 810affc:	0810b097 	.word	0x0810b097
 810b000:	0810b097 	.word	0x0810b097
 810b004:	0810b097 	.word	0x0810b097
 810b008:	0810b097 	.word	0x0810b097
 810b00c:	0810b097 	.word	0x0810b097
 810b010:	0810b097 	.word	0x0810b097
 810b014:	0810b097 	.word	0x0810b097
 810b018:	0810b097 	.word	0x0810b097
 810b01c:	0810b097 	.word	0x0810b097
 810b020:	0810b097 	.word	0x0810b097
 810b024:	0810b097 	.word	0x0810b097
 810b028:	0810b089 	.word	0x0810b089
 810b02c:	2b40      	cmp	r3, #64	@ 0x40
 810b02e:	d02e      	beq.n	810b08e <UART_SetConfig+0xa36>
 810b030:	e031      	b.n	810b096 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810b032:	f7f9 fe53 	bl	8104cdc <HAL_RCC_GetPCLK1Freq>
 810b036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b038:	e033      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810b03a:	f7f9 fe65 	bl	8104d08 <HAL_RCC_GetPCLK2Freq>
 810b03e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b040:	e02f      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b046:	4618      	mov	r0, r3
 810b048:	f7fb fe54 	bl	8106cf4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b050:	e027      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b052:	f107 0318 	add.w	r3, r7, #24
 810b056:	4618      	mov	r0, r3
 810b058:	f7fb ffa0 	bl	8106f9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b05c:	69fb      	ldr	r3, [r7, #28]
 810b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b060:	e01f      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b062:	4b2d      	ldr	r3, [pc, #180]	@ (810b118 <UART_SetConfig+0xac0>)
 810b064:	681b      	ldr	r3, [r3, #0]
 810b066:	f003 0320 	and.w	r3, r3, #32
 810b06a:	2b00      	cmp	r3, #0
 810b06c:	d009      	beq.n	810b082 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b06e:	4b2a      	ldr	r3, [pc, #168]	@ (810b118 <UART_SetConfig+0xac0>)
 810b070:	681b      	ldr	r3, [r3, #0]
 810b072:	08db      	lsrs	r3, r3, #3
 810b074:	f003 0303 	and.w	r3, r3, #3
 810b078:	4a28      	ldr	r2, [pc, #160]	@ (810b11c <UART_SetConfig+0xac4>)
 810b07a:	fa22 f303 	lsr.w	r3, r2, r3
 810b07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b080:	e00f      	b.n	810b0a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810b082:	4b26      	ldr	r3, [pc, #152]	@ (810b11c <UART_SetConfig+0xac4>)
 810b084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b086:	e00c      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b088:	4b25      	ldr	r3, [pc, #148]	@ (810b120 <UART_SetConfig+0xac8>)
 810b08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b08c:	e009      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b08e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b094:	e005      	b.n	810b0a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810b096:	2300      	movs	r3, #0
 810b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b09a:	2301      	movs	r3, #1
 810b09c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b0a0:	bf00      	nop
    }

    if (pclk != 0U)
 810b0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b0a4:	2b00      	cmp	r3, #0
 810b0a6:	d021      	beq.n	810b0ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b0a8:	697b      	ldr	r3, [r7, #20]
 810b0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b0ac:	4a1d      	ldr	r2, [pc, #116]	@ (810b124 <UART_SetConfig+0xacc>)
 810b0ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b0b2:	461a      	mov	r2, r3
 810b0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b0b6:	fbb3 f2f2 	udiv	r2, r3, r2
 810b0ba:	697b      	ldr	r3, [r7, #20]
 810b0bc:	685b      	ldr	r3, [r3, #4]
 810b0be:	085b      	lsrs	r3, r3, #1
 810b0c0:	441a      	add	r2, r3
 810b0c2:	697b      	ldr	r3, [r7, #20]
 810b0c4:	685b      	ldr	r3, [r3, #4]
 810b0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 810b0ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0ce:	2b0f      	cmp	r3, #15
 810b0d0:	d909      	bls.n	810b0e6 <UART_SetConfig+0xa8e>
 810b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b0d8:	d205      	bcs.n	810b0e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b0dc:	b29a      	uxth	r2, r3
 810b0de:	697b      	ldr	r3, [r7, #20]
 810b0e0:	681b      	ldr	r3, [r3, #0]
 810b0e2:	60da      	str	r2, [r3, #12]
 810b0e4:	e002      	b.n	810b0ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b0e6:	2301      	movs	r3, #1
 810b0e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b0ec:	697b      	ldr	r3, [r7, #20]
 810b0ee:	2201      	movs	r2, #1
 810b0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810b0f4:	697b      	ldr	r3, [r7, #20]
 810b0f6:	2201      	movs	r2, #1
 810b0f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b0fc:	697b      	ldr	r3, [r7, #20]
 810b0fe:	2200      	movs	r2, #0
 810b100:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810b102:	697b      	ldr	r3, [r7, #20]
 810b104:	2200      	movs	r2, #0
 810b106:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810b108:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810b10c:	4618      	mov	r0, r3
 810b10e:	3748      	adds	r7, #72	@ 0x48
 810b110:	46bd      	mov	sp, r7
 810b112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b116:	bf00      	nop
 810b118:	58024400 	.word	0x58024400
 810b11c:	03d09000 	.word	0x03d09000
 810b120:	003d0900 	.word	0x003d0900
 810b124:	0810c354 	.word	0x0810c354

0810b128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b128:	b480      	push	{r7}
 810b12a:	b083      	sub	sp, #12
 810b12c:	af00      	add	r7, sp, #0
 810b12e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b130:	687b      	ldr	r3, [r7, #4]
 810b132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b134:	f003 0308 	and.w	r3, r3, #8
 810b138:	2b00      	cmp	r3, #0
 810b13a:	d00a      	beq.n	810b152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b13c:	687b      	ldr	r3, [r7, #4]
 810b13e:	681b      	ldr	r3, [r3, #0]
 810b140:	685b      	ldr	r3, [r3, #4]
 810b142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810b146:	687b      	ldr	r3, [r7, #4]
 810b148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810b14a:	687b      	ldr	r3, [r7, #4]
 810b14c:	681b      	ldr	r3, [r3, #0]
 810b14e:	430a      	orrs	r2, r1
 810b150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b152:	687b      	ldr	r3, [r7, #4]
 810b154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b156:	f003 0301 	and.w	r3, r3, #1
 810b15a:	2b00      	cmp	r3, #0
 810b15c:	d00a      	beq.n	810b174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	681b      	ldr	r3, [r3, #0]
 810b162:	685b      	ldr	r3, [r3, #4]
 810b164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810b168:	687b      	ldr	r3, [r7, #4]
 810b16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b16c:	687b      	ldr	r3, [r7, #4]
 810b16e:	681b      	ldr	r3, [r3, #0]
 810b170:	430a      	orrs	r2, r1
 810b172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b174:	687b      	ldr	r3, [r7, #4]
 810b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b178:	f003 0302 	and.w	r3, r3, #2
 810b17c:	2b00      	cmp	r3, #0
 810b17e:	d00a      	beq.n	810b196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b180:	687b      	ldr	r3, [r7, #4]
 810b182:	681b      	ldr	r3, [r3, #0]
 810b184:	685b      	ldr	r3, [r3, #4]
 810b186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b18a:	687b      	ldr	r3, [r7, #4]
 810b18c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810b18e:	687b      	ldr	r3, [r7, #4]
 810b190:	681b      	ldr	r3, [r3, #0]
 810b192:	430a      	orrs	r2, r1
 810b194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b196:	687b      	ldr	r3, [r7, #4]
 810b198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b19a:	f003 0304 	and.w	r3, r3, #4
 810b19e:	2b00      	cmp	r3, #0
 810b1a0:	d00a      	beq.n	810b1b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b1a2:	687b      	ldr	r3, [r7, #4]
 810b1a4:	681b      	ldr	r3, [r3, #0]
 810b1a6:	685b      	ldr	r3, [r3, #4]
 810b1a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810b1ac:	687b      	ldr	r3, [r7, #4]
 810b1ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810b1b0:	687b      	ldr	r3, [r7, #4]
 810b1b2:	681b      	ldr	r3, [r3, #0]
 810b1b4:	430a      	orrs	r2, r1
 810b1b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b1b8:	687b      	ldr	r3, [r7, #4]
 810b1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b1bc:	f003 0310 	and.w	r3, r3, #16
 810b1c0:	2b00      	cmp	r3, #0
 810b1c2:	d00a      	beq.n	810b1da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b1c4:	687b      	ldr	r3, [r7, #4]
 810b1c6:	681b      	ldr	r3, [r3, #0]
 810b1c8:	689b      	ldr	r3, [r3, #8]
 810b1ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810b1ce:	687b      	ldr	r3, [r7, #4]
 810b1d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b1d2:	687b      	ldr	r3, [r7, #4]
 810b1d4:	681b      	ldr	r3, [r3, #0]
 810b1d6:	430a      	orrs	r2, r1
 810b1d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b1da:	687b      	ldr	r3, [r7, #4]
 810b1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b1de:	f003 0320 	and.w	r3, r3, #32
 810b1e2:	2b00      	cmp	r3, #0
 810b1e4:	d00a      	beq.n	810b1fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b1e6:	687b      	ldr	r3, [r7, #4]
 810b1e8:	681b      	ldr	r3, [r3, #0]
 810b1ea:	689b      	ldr	r3, [r3, #8]
 810b1ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810b1f0:	687b      	ldr	r3, [r7, #4]
 810b1f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810b1f4:	687b      	ldr	r3, [r7, #4]
 810b1f6:	681b      	ldr	r3, [r3, #0]
 810b1f8:	430a      	orrs	r2, r1
 810b1fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b1fc:	687b      	ldr	r3, [r7, #4]
 810b1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b204:	2b00      	cmp	r3, #0
 810b206:	d01a      	beq.n	810b23e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b208:	687b      	ldr	r3, [r7, #4]
 810b20a:	681b      	ldr	r3, [r3, #0]
 810b20c:	685b      	ldr	r3, [r3, #4]
 810b20e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810b212:	687b      	ldr	r3, [r7, #4]
 810b214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810b216:	687b      	ldr	r3, [r7, #4]
 810b218:	681b      	ldr	r3, [r3, #0]
 810b21a:	430a      	orrs	r2, r1
 810b21c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810b222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b226:	d10a      	bne.n	810b23e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b228:	687b      	ldr	r3, [r7, #4]
 810b22a:	681b      	ldr	r3, [r3, #0]
 810b22c:	685b      	ldr	r3, [r3, #4]
 810b22e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810b232:	687b      	ldr	r3, [r7, #4]
 810b234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810b236:	687b      	ldr	r3, [r7, #4]
 810b238:	681b      	ldr	r3, [r3, #0]
 810b23a:	430a      	orrs	r2, r1
 810b23c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b23e:	687b      	ldr	r3, [r7, #4]
 810b240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b246:	2b00      	cmp	r3, #0
 810b248:	d00a      	beq.n	810b260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b24a:	687b      	ldr	r3, [r7, #4]
 810b24c:	681b      	ldr	r3, [r3, #0]
 810b24e:	685b      	ldr	r3, [r3, #4]
 810b250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810b254:	687b      	ldr	r3, [r7, #4]
 810b256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810b258:	687b      	ldr	r3, [r7, #4]
 810b25a:	681b      	ldr	r3, [r3, #0]
 810b25c:	430a      	orrs	r2, r1
 810b25e:	605a      	str	r2, [r3, #4]
  }
}
 810b260:	bf00      	nop
 810b262:	370c      	adds	r7, #12
 810b264:	46bd      	mov	sp, r7
 810b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b26a:	4770      	bx	lr

0810b26c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b26c:	b580      	push	{r7, lr}
 810b26e:	b098      	sub	sp, #96	@ 0x60
 810b270:	af02      	add	r7, sp, #8
 810b272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b274:	687b      	ldr	r3, [r7, #4]
 810b276:	2200      	movs	r2, #0
 810b278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b27c:	f7f7 f900 	bl	8102480 <HAL_GetTick>
 810b280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b282:	687b      	ldr	r3, [r7, #4]
 810b284:	681b      	ldr	r3, [r3, #0]
 810b286:	681b      	ldr	r3, [r3, #0]
 810b288:	f003 0308 	and.w	r3, r3, #8
 810b28c:	2b08      	cmp	r3, #8
 810b28e:	d12f      	bne.n	810b2f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810b294:	9300      	str	r3, [sp, #0]
 810b296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b298:	2200      	movs	r2, #0
 810b29a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810b29e:	6878      	ldr	r0, [r7, #4]
 810b2a0:	f000 f88e 	bl	810b3c0 <UART_WaitOnFlagUntilTimeout>
 810b2a4:	4603      	mov	r3, r0
 810b2a6:	2b00      	cmp	r3, #0
 810b2a8:	d022      	beq.n	810b2f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810b2aa:	687b      	ldr	r3, [r7, #4]
 810b2ac:	681b      	ldr	r3, [r3, #0]
 810b2ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b2b2:	e853 3f00 	ldrex	r3, [r3]
 810b2b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b2ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b2be:	653b      	str	r3, [r7, #80]	@ 0x50
 810b2c0:	687b      	ldr	r3, [r7, #4]
 810b2c2:	681b      	ldr	r3, [r3, #0]
 810b2c4:	461a      	mov	r2, r3
 810b2c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b2c8:	647b      	str	r3, [r7, #68]	@ 0x44
 810b2ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b2ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b2d0:	e841 2300 	strex	r3, r2, [r1]
 810b2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b2d8:	2b00      	cmp	r3, #0
 810b2da:	d1e6      	bne.n	810b2aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810b2dc:	687b      	ldr	r3, [r7, #4]
 810b2de:	2220      	movs	r2, #32
 810b2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810b2e4:	687b      	ldr	r3, [r7, #4]
 810b2e6:	2200      	movs	r2, #0
 810b2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b2ec:	2303      	movs	r3, #3
 810b2ee:	e063      	b.n	810b3b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b2f0:	687b      	ldr	r3, [r7, #4]
 810b2f2:	681b      	ldr	r3, [r3, #0]
 810b2f4:	681b      	ldr	r3, [r3, #0]
 810b2f6:	f003 0304 	and.w	r3, r3, #4
 810b2fa:	2b04      	cmp	r3, #4
 810b2fc:	d149      	bne.n	810b392 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b2fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810b302:	9300      	str	r3, [sp, #0]
 810b304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b306:	2200      	movs	r2, #0
 810b308:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810b30c:	6878      	ldr	r0, [r7, #4]
 810b30e:	f000 f857 	bl	810b3c0 <UART_WaitOnFlagUntilTimeout>
 810b312:	4603      	mov	r3, r0
 810b314:	2b00      	cmp	r3, #0
 810b316:	d03c      	beq.n	810b392 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b318:	687b      	ldr	r3, [r7, #4]
 810b31a:	681b      	ldr	r3, [r3, #0]
 810b31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b320:	e853 3f00 	ldrex	r3, [r3]
 810b324:	623b      	str	r3, [r7, #32]
   return(result);
 810b326:	6a3b      	ldr	r3, [r7, #32]
 810b328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b32c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b32e:	687b      	ldr	r3, [r7, #4]
 810b330:	681b      	ldr	r3, [r3, #0]
 810b332:	461a      	mov	r2, r3
 810b334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b336:	633b      	str	r3, [r7, #48]	@ 0x30
 810b338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b33e:	e841 2300 	strex	r3, r2, [r1]
 810b342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b346:	2b00      	cmp	r3, #0
 810b348:	d1e6      	bne.n	810b318 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b34a:	687b      	ldr	r3, [r7, #4]
 810b34c:	681b      	ldr	r3, [r3, #0]
 810b34e:	3308      	adds	r3, #8
 810b350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b352:	693b      	ldr	r3, [r7, #16]
 810b354:	e853 3f00 	ldrex	r3, [r3]
 810b358:	60fb      	str	r3, [r7, #12]
   return(result);
 810b35a:	68fb      	ldr	r3, [r7, #12]
 810b35c:	f023 0301 	bic.w	r3, r3, #1
 810b360:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b362:	687b      	ldr	r3, [r7, #4]
 810b364:	681b      	ldr	r3, [r3, #0]
 810b366:	3308      	adds	r3, #8
 810b368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b36a:	61fa      	str	r2, [r7, #28]
 810b36c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b36e:	69b9      	ldr	r1, [r7, #24]
 810b370:	69fa      	ldr	r2, [r7, #28]
 810b372:	e841 2300 	strex	r3, r2, [r1]
 810b376:	617b      	str	r3, [r7, #20]
   return(result);
 810b378:	697b      	ldr	r3, [r7, #20]
 810b37a:	2b00      	cmp	r3, #0
 810b37c:	d1e5      	bne.n	810b34a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810b37e:	687b      	ldr	r3, [r7, #4]
 810b380:	2220      	movs	r2, #32
 810b382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810b386:	687b      	ldr	r3, [r7, #4]
 810b388:	2200      	movs	r2, #0
 810b38a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b38e:	2303      	movs	r3, #3
 810b390:	e012      	b.n	810b3b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b392:	687b      	ldr	r3, [r7, #4]
 810b394:	2220      	movs	r2, #32
 810b396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810b39a:	687b      	ldr	r3, [r7, #4]
 810b39c:	2220      	movs	r2, #32
 810b39e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b3a2:	687b      	ldr	r3, [r7, #4]
 810b3a4:	2200      	movs	r2, #0
 810b3a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b3a8:	687b      	ldr	r3, [r7, #4]
 810b3aa:	2200      	movs	r2, #0
 810b3ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	2200      	movs	r2, #0
 810b3b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b3b6:	2300      	movs	r3, #0
}
 810b3b8:	4618      	mov	r0, r3
 810b3ba:	3758      	adds	r7, #88	@ 0x58
 810b3bc:	46bd      	mov	sp, r7
 810b3be:	bd80      	pop	{r7, pc}

0810b3c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b3c0:	b580      	push	{r7, lr}
 810b3c2:	b084      	sub	sp, #16
 810b3c4:	af00      	add	r7, sp, #0
 810b3c6:	60f8      	str	r0, [r7, #12]
 810b3c8:	60b9      	str	r1, [r7, #8]
 810b3ca:	603b      	str	r3, [r7, #0]
 810b3cc:	4613      	mov	r3, r2
 810b3ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b3d0:	e04f      	b.n	810b472 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b3d2:	69bb      	ldr	r3, [r7, #24]
 810b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b3d8:	d04b      	beq.n	810b472 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b3da:	f7f7 f851 	bl	8102480 <HAL_GetTick>
 810b3de:	4602      	mov	r2, r0
 810b3e0:	683b      	ldr	r3, [r7, #0]
 810b3e2:	1ad3      	subs	r3, r2, r3
 810b3e4:	69ba      	ldr	r2, [r7, #24]
 810b3e6:	429a      	cmp	r2, r3
 810b3e8:	d302      	bcc.n	810b3f0 <UART_WaitOnFlagUntilTimeout+0x30>
 810b3ea:	69bb      	ldr	r3, [r7, #24]
 810b3ec:	2b00      	cmp	r3, #0
 810b3ee:	d101      	bne.n	810b3f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810b3f0:	2303      	movs	r3, #3
 810b3f2:	e04e      	b.n	810b492 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810b3f4:	68fb      	ldr	r3, [r7, #12]
 810b3f6:	681b      	ldr	r3, [r3, #0]
 810b3f8:	681b      	ldr	r3, [r3, #0]
 810b3fa:	f003 0304 	and.w	r3, r3, #4
 810b3fe:	2b00      	cmp	r3, #0
 810b400:	d037      	beq.n	810b472 <UART_WaitOnFlagUntilTimeout+0xb2>
 810b402:	68bb      	ldr	r3, [r7, #8]
 810b404:	2b80      	cmp	r3, #128	@ 0x80
 810b406:	d034      	beq.n	810b472 <UART_WaitOnFlagUntilTimeout+0xb2>
 810b408:	68bb      	ldr	r3, [r7, #8]
 810b40a:	2b40      	cmp	r3, #64	@ 0x40
 810b40c:	d031      	beq.n	810b472 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810b40e:	68fb      	ldr	r3, [r7, #12]
 810b410:	681b      	ldr	r3, [r3, #0]
 810b412:	69db      	ldr	r3, [r3, #28]
 810b414:	f003 0308 	and.w	r3, r3, #8
 810b418:	2b08      	cmp	r3, #8
 810b41a:	d110      	bne.n	810b43e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b41c:	68fb      	ldr	r3, [r7, #12]
 810b41e:	681b      	ldr	r3, [r3, #0]
 810b420:	2208      	movs	r2, #8
 810b422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b424:	68f8      	ldr	r0, [r7, #12]
 810b426:	f000 f838 	bl	810b49a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810b42a:	68fb      	ldr	r3, [r7, #12]
 810b42c:	2208      	movs	r2, #8
 810b42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b432:	68fb      	ldr	r3, [r7, #12]
 810b434:	2200      	movs	r2, #0
 810b436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810b43a:	2301      	movs	r3, #1
 810b43c:	e029      	b.n	810b492 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b43e:	68fb      	ldr	r3, [r7, #12]
 810b440:	681b      	ldr	r3, [r3, #0]
 810b442:	69db      	ldr	r3, [r3, #28]
 810b444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810b448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b44c:	d111      	bne.n	810b472 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b44e:	68fb      	ldr	r3, [r7, #12]
 810b450:	681b      	ldr	r3, [r3, #0]
 810b452:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810b456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b458:	68f8      	ldr	r0, [r7, #12]
 810b45a:	f000 f81e 	bl	810b49a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b45e:	68fb      	ldr	r3, [r7, #12]
 810b460:	2220      	movs	r2, #32
 810b462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b466:	68fb      	ldr	r3, [r7, #12]
 810b468:	2200      	movs	r2, #0
 810b46a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810b46e:	2303      	movs	r3, #3
 810b470:	e00f      	b.n	810b492 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b472:	68fb      	ldr	r3, [r7, #12]
 810b474:	681b      	ldr	r3, [r3, #0]
 810b476:	69da      	ldr	r2, [r3, #28]
 810b478:	68bb      	ldr	r3, [r7, #8]
 810b47a:	4013      	ands	r3, r2
 810b47c:	68ba      	ldr	r2, [r7, #8]
 810b47e:	429a      	cmp	r2, r3
 810b480:	bf0c      	ite	eq
 810b482:	2301      	moveq	r3, #1
 810b484:	2300      	movne	r3, #0
 810b486:	b2db      	uxtb	r3, r3
 810b488:	461a      	mov	r2, r3
 810b48a:	79fb      	ldrb	r3, [r7, #7]
 810b48c:	429a      	cmp	r2, r3
 810b48e:	d0a0      	beq.n	810b3d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b490:	2300      	movs	r3, #0
}
 810b492:	4618      	mov	r0, r3
 810b494:	3710      	adds	r7, #16
 810b496:	46bd      	mov	sp, r7
 810b498:	bd80      	pop	{r7, pc}

0810b49a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b49a:	b480      	push	{r7}
 810b49c:	b095      	sub	sp, #84	@ 0x54
 810b49e:	af00      	add	r7, sp, #0
 810b4a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b4a2:	687b      	ldr	r3, [r7, #4]
 810b4a4:	681b      	ldr	r3, [r3, #0]
 810b4a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b4a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b4aa:	e853 3f00 	ldrex	r3, [r3]
 810b4ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b4b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b4b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b4b8:	687b      	ldr	r3, [r7, #4]
 810b4ba:	681b      	ldr	r3, [r3, #0]
 810b4bc:	461a      	mov	r2, r3
 810b4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b4c0:	643b      	str	r3, [r7, #64]	@ 0x40
 810b4c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b4c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b4c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b4c8:	e841 2300 	strex	r3, r2, [r1]
 810b4cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b4d0:	2b00      	cmp	r3, #0
 810b4d2:	d1e6      	bne.n	810b4a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b4d4:	687b      	ldr	r3, [r7, #4]
 810b4d6:	681b      	ldr	r3, [r3, #0]
 810b4d8:	3308      	adds	r3, #8
 810b4da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b4dc:	6a3b      	ldr	r3, [r7, #32]
 810b4de:	e853 3f00 	ldrex	r3, [r3]
 810b4e2:	61fb      	str	r3, [r7, #28]
   return(result);
 810b4e4:	69fb      	ldr	r3, [r7, #28]
 810b4e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b4ea:	f023 0301 	bic.w	r3, r3, #1
 810b4ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b4f0:	687b      	ldr	r3, [r7, #4]
 810b4f2:	681b      	ldr	r3, [r3, #0]
 810b4f4:	3308      	adds	r3, #8
 810b4f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b4f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b4fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b4fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b500:	e841 2300 	strex	r3, r2, [r1]
 810b504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b508:	2b00      	cmp	r3, #0
 810b50a:	d1e3      	bne.n	810b4d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b50c:	687b      	ldr	r3, [r7, #4]
 810b50e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b510:	2b01      	cmp	r3, #1
 810b512:	d118      	bne.n	810b546 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b514:	687b      	ldr	r3, [r7, #4]
 810b516:	681b      	ldr	r3, [r3, #0]
 810b518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b51a:	68fb      	ldr	r3, [r7, #12]
 810b51c:	e853 3f00 	ldrex	r3, [r3]
 810b520:	60bb      	str	r3, [r7, #8]
   return(result);
 810b522:	68bb      	ldr	r3, [r7, #8]
 810b524:	f023 0310 	bic.w	r3, r3, #16
 810b528:	647b      	str	r3, [r7, #68]	@ 0x44
 810b52a:	687b      	ldr	r3, [r7, #4]
 810b52c:	681b      	ldr	r3, [r3, #0]
 810b52e:	461a      	mov	r2, r3
 810b530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b532:	61bb      	str	r3, [r7, #24]
 810b534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b536:	6979      	ldr	r1, [r7, #20]
 810b538:	69ba      	ldr	r2, [r7, #24]
 810b53a:	e841 2300 	strex	r3, r2, [r1]
 810b53e:	613b      	str	r3, [r7, #16]
   return(result);
 810b540:	693b      	ldr	r3, [r7, #16]
 810b542:	2b00      	cmp	r3, #0
 810b544:	d1e6      	bne.n	810b514 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b546:	687b      	ldr	r3, [r7, #4]
 810b548:	2220      	movs	r2, #32
 810b54a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b54e:	687b      	ldr	r3, [r7, #4]
 810b550:	2200      	movs	r2, #0
 810b552:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b554:	687b      	ldr	r3, [r7, #4]
 810b556:	2200      	movs	r2, #0
 810b558:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810b55a:	bf00      	nop
 810b55c:	3754      	adds	r7, #84	@ 0x54
 810b55e:	46bd      	mov	sp, r7
 810b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b564:	4770      	bx	lr

0810b566 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b566:	b480      	push	{r7}
 810b568:	b085      	sub	sp, #20
 810b56a:	af00      	add	r7, sp, #0
 810b56c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b574:	2b01      	cmp	r3, #1
 810b576:	d101      	bne.n	810b57c <HAL_UARTEx_DisableFifoMode+0x16>
 810b578:	2302      	movs	r3, #2
 810b57a:	e027      	b.n	810b5cc <HAL_UARTEx_DisableFifoMode+0x66>
 810b57c:	687b      	ldr	r3, [r7, #4]
 810b57e:	2201      	movs	r2, #1
 810b580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b584:	687b      	ldr	r3, [r7, #4]
 810b586:	2224      	movs	r2, #36	@ 0x24
 810b588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	681b      	ldr	r3, [r3, #0]
 810b590:	681b      	ldr	r3, [r3, #0]
 810b592:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	681b      	ldr	r3, [r3, #0]
 810b598:	681a      	ldr	r2, [r3, #0]
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	681b      	ldr	r3, [r3, #0]
 810b59e:	f022 0201 	bic.w	r2, r2, #1
 810b5a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b5a4:	68fb      	ldr	r3, [r7, #12]
 810b5a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b5aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b5ac:	687b      	ldr	r3, [r7, #4]
 810b5ae:	2200      	movs	r2, #0
 810b5b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b5b2:	687b      	ldr	r3, [r7, #4]
 810b5b4:	681b      	ldr	r3, [r3, #0]
 810b5b6:	68fa      	ldr	r2, [r7, #12]
 810b5b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b5ba:	687b      	ldr	r3, [r7, #4]
 810b5bc:	2220      	movs	r2, #32
 810b5be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	2200      	movs	r2, #0
 810b5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b5ca:	2300      	movs	r3, #0
}
 810b5cc:	4618      	mov	r0, r3
 810b5ce:	3714      	adds	r7, #20
 810b5d0:	46bd      	mov	sp, r7
 810b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5d6:	4770      	bx	lr

0810b5d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b5d8:	b580      	push	{r7, lr}
 810b5da:	b084      	sub	sp, #16
 810b5dc:	af00      	add	r7, sp, #0
 810b5de:	6078      	str	r0, [r7, #4]
 810b5e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b5e2:	687b      	ldr	r3, [r7, #4]
 810b5e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b5e8:	2b01      	cmp	r3, #1
 810b5ea:	d101      	bne.n	810b5f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b5ec:	2302      	movs	r3, #2
 810b5ee:	e02d      	b.n	810b64c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b5f0:	687b      	ldr	r3, [r7, #4]
 810b5f2:	2201      	movs	r2, #1
 810b5f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b5f8:	687b      	ldr	r3, [r7, #4]
 810b5fa:	2224      	movs	r2, #36	@ 0x24
 810b5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b600:	687b      	ldr	r3, [r7, #4]
 810b602:	681b      	ldr	r3, [r3, #0]
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b608:	687b      	ldr	r3, [r7, #4]
 810b60a:	681b      	ldr	r3, [r3, #0]
 810b60c:	681a      	ldr	r2, [r3, #0]
 810b60e:	687b      	ldr	r3, [r7, #4]
 810b610:	681b      	ldr	r3, [r3, #0]
 810b612:	f022 0201 	bic.w	r2, r2, #1
 810b616:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b618:	687b      	ldr	r3, [r7, #4]
 810b61a:	681b      	ldr	r3, [r3, #0]
 810b61c:	689b      	ldr	r3, [r3, #8]
 810b61e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b622:	687b      	ldr	r3, [r7, #4]
 810b624:	681b      	ldr	r3, [r3, #0]
 810b626:	683a      	ldr	r2, [r7, #0]
 810b628:	430a      	orrs	r2, r1
 810b62a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b62c:	6878      	ldr	r0, [r7, #4]
 810b62e:	f000 f84f 	bl	810b6d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b632:	687b      	ldr	r3, [r7, #4]
 810b634:	681b      	ldr	r3, [r3, #0]
 810b636:	68fa      	ldr	r2, [r7, #12]
 810b638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b63a:	687b      	ldr	r3, [r7, #4]
 810b63c:	2220      	movs	r2, #32
 810b63e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	2200      	movs	r2, #0
 810b646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b64a:	2300      	movs	r3, #0
}
 810b64c:	4618      	mov	r0, r3
 810b64e:	3710      	adds	r7, #16
 810b650:	46bd      	mov	sp, r7
 810b652:	bd80      	pop	{r7, pc}

0810b654 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b654:	b580      	push	{r7, lr}
 810b656:	b084      	sub	sp, #16
 810b658:	af00      	add	r7, sp, #0
 810b65a:	6078      	str	r0, [r7, #4]
 810b65c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b65e:	687b      	ldr	r3, [r7, #4]
 810b660:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b664:	2b01      	cmp	r3, #1
 810b666:	d101      	bne.n	810b66c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b668:	2302      	movs	r3, #2
 810b66a:	e02d      	b.n	810b6c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b66c:	687b      	ldr	r3, [r7, #4]
 810b66e:	2201      	movs	r2, #1
 810b670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b674:	687b      	ldr	r3, [r7, #4]
 810b676:	2224      	movs	r2, #36	@ 0x24
 810b678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b67c:	687b      	ldr	r3, [r7, #4]
 810b67e:	681b      	ldr	r3, [r3, #0]
 810b680:	681b      	ldr	r3, [r3, #0]
 810b682:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b684:	687b      	ldr	r3, [r7, #4]
 810b686:	681b      	ldr	r3, [r3, #0]
 810b688:	681a      	ldr	r2, [r3, #0]
 810b68a:	687b      	ldr	r3, [r7, #4]
 810b68c:	681b      	ldr	r3, [r3, #0]
 810b68e:	f022 0201 	bic.w	r2, r2, #1
 810b692:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b694:	687b      	ldr	r3, [r7, #4]
 810b696:	681b      	ldr	r3, [r3, #0]
 810b698:	689b      	ldr	r3, [r3, #8]
 810b69a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810b69e:	687b      	ldr	r3, [r7, #4]
 810b6a0:	681b      	ldr	r3, [r3, #0]
 810b6a2:	683a      	ldr	r2, [r7, #0]
 810b6a4:	430a      	orrs	r2, r1
 810b6a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b6a8:	6878      	ldr	r0, [r7, #4]
 810b6aa:	f000 f811 	bl	810b6d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b6ae:	687b      	ldr	r3, [r7, #4]
 810b6b0:	681b      	ldr	r3, [r3, #0]
 810b6b2:	68fa      	ldr	r2, [r7, #12]
 810b6b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b6b6:	687b      	ldr	r3, [r7, #4]
 810b6b8:	2220      	movs	r2, #32
 810b6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b6be:	687b      	ldr	r3, [r7, #4]
 810b6c0:	2200      	movs	r2, #0
 810b6c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b6c6:	2300      	movs	r3, #0
}
 810b6c8:	4618      	mov	r0, r3
 810b6ca:	3710      	adds	r7, #16
 810b6cc:	46bd      	mov	sp, r7
 810b6ce:	bd80      	pop	{r7, pc}

0810b6d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b6d0:	b480      	push	{r7}
 810b6d2:	b085      	sub	sp, #20
 810b6d4:	af00      	add	r7, sp, #0
 810b6d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b6d8:	687b      	ldr	r3, [r7, #4]
 810b6da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b6dc:	2b00      	cmp	r3, #0
 810b6de:	d108      	bne.n	810b6f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b6e0:	687b      	ldr	r3, [r7, #4]
 810b6e2:	2201      	movs	r2, #1
 810b6e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810b6e8:	687b      	ldr	r3, [r7, #4]
 810b6ea:	2201      	movs	r2, #1
 810b6ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b6f0:	e031      	b.n	810b756 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b6f2:	2310      	movs	r3, #16
 810b6f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b6f6:	2310      	movs	r3, #16
 810b6f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b6fa:	687b      	ldr	r3, [r7, #4]
 810b6fc:	681b      	ldr	r3, [r3, #0]
 810b6fe:	689b      	ldr	r3, [r3, #8]
 810b700:	0e5b      	lsrs	r3, r3, #25
 810b702:	b2db      	uxtb	r3, r3
 810b704:	f003 0307 	and.w	r3, r3, #7
 810b708:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b70a:	687b      	ldr	r3, [r7, #4]
 810b70c:	681b      	ldr	r3, [r3, #0]
 810b70e:	689b      	ldr	r3, [r3, #8]
 810b710:	0f5b      	lsrs	r3, r3, #29
 810b712:	b2db      	uxtb	r3, r3
 810b714:	f003 0307 	and.w	r3, r3, #7
 810b718:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b71a:	7bbb      	ldrb	r3, [r7, #14]
 810b71c:	7b3a      	ldrb	r2, [r7, #12]
 810b71e:	4911      	ldr	r1, [pc, #68]	@ (810b764 <UARTEx_SetNbDataToProcess+0x94>)
 810b720:	5c8a      	ldrb	r2, [r1, r2]
 810b722:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b726:	7b3a      	ldrb	r2, [r7, #12]
 810b728:	490f      	ldr	r1, [pc, #60]	@ (810b768 <UARTEx_SetNbDataToProcess+0x98>)
 810b72a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b72c:	fb93 f3f2 	sdiv	r3, r3, r2
 810b730:	b29a      	uxth	r2, r3
 810b732:	687b      	ldr	r3, [r7, #4]
 810b734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b738:	7bfb      	ldrb	r3, [r7, #15]
 810b73a:	7b7a      	ldrb	r2, [r7, #13]
 810b73c:	4909      	ldr	r1, [pc, #36]	@ (810b764 <UARTEx_SetNbDataToProcess+0x94>)
 810b73e:	5c8a      	ldrb	r2, [r1, r2]
 810b740:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b744:	7b7a      	ldrb	r2, [r7, #13]
 810b746:	4908      	ldr	r1, [pc, #32]	@ (810b768 <UARTEx_SetNbDataToProcess+0x98>)
 810b748:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b74a:	fb93 f3f2 	sdiv	r3, r3, r2
 810b74e:	b29a      	uxth	r2, r3
 810b750:	687b      	ldr	r3, [r7, #4]
 810b752:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810b756:	bf00      	nop
 810b758:	3714      	adds	r7, #20
 810b75a:	46bd      	mov	sp, r7
 810b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b760:	4770      	bx	lr
 810b762:	bf00      	nop
 810b764:	0810c36c 	.word	0x0810c36c
 810b768:	0810c374 	.word	0x0810c374

0810b76c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 810b76c:	b480      	push	{r7}
 810b76e:	b083      	sub	sp, #12
 810b770:	af00      	add	r7, sp, #0
 810b772:	6078      	str	r0, [r7, #4]
 810b774:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810b776:	683b      	ldr	r3, [r7, #0]
 810b778:	681b      	ldr	r3, [r3, #0]
 810b77a:	2b00      	cmp	r3, #0
 810b77c:	d123      	bne.n	810b7c6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810b77e:	687b      	ldr	r3, [r7, #4]
 810b780:	681b      	ldr	r3, [r3, #0]
 810b782:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810b786:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810b78a:	683a      	ldr	r2, [r7, #0]
 810b78c:	6851      	ldr	r1, [r2, #4]
 810b78e:	683a      	ldr	r2, [r7, #0]
 810b790:	6892      	ldr	r2, [r2, #8]
 810b792:	4311      	orrs	r1, r2
 810b794:	683a      	ldr	r2, [r7, #0]
 810b796:	68d2      	ldr	r2, [r2, #12]
 810b798:	4311      	orrs	r1, r2
 810b79a:	683a      	ldr	r2, [r7, #0]
 810b79c:	6912      	ldr	r2, [r2, #16]
 810b79e:	4311      	orrs	r1, r2
 810b7a0:	683a      	ldr	r2, [r7, #0]
 810b7a2:	6952      	ldr	r2, [r2, #20]
 810b7a4:	4311      	orrs	r1, r2
 810b7a6:	683a      	ldr	r2, [r7, #0]
 810b7a8:	6992      	ldr	r2, [r2, #24]
 810b7aa:	4311      	orrs	r1, r2
 810b7ac:	683a      	ldr	r2, [r7, #0]
 810b7ae:	69d2      	ldr	r2, [r2, #28]
 810b7b0:	4311      	orrs	r1, r2
 810b7b2:	683a      	ldr	r2, [r7, #0]
 810b7b4:	6a12      	ldr	r2, [r2, #32]
 810b7b6:	4311      	orrs	r1, r2
 810b7b8:	683a      	ldr	r2, [r7, #0]
 810b7ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810b7bc:	430a      	orrs	r2, r1
 810b7be:	431a      	orrs	r2, r3
 810b7c0:	687b      	ldr	r3, [r7, #4]
 810b7c2:	601a      	str	r2, [r3, #0]
 810b7c4:	e028      	b.n	810b818 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810b7c6:	687b      	ldr	r3, [r7, #4]
 810b7c8:	681b      	ldr	r3, [r3, #0]
 810b7ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810b7ce:	683b      	ldr	r3, [r7, #0]
 810b7d0:	69d9      	ldr	r1, [r3, #28]
 810b7d2:	683b      	ldr	r3, [r7, #0]
 810b7d4:	6a1b      	ldr	r3, [r3, #32]
 810b7d6:	4319      	orrs	r1, r3
 810b7d8:	683b      	ldr	r3, [r7, #0]
 810b7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b7dc:	430b      	orrs	r3, r1
 810b7de:	431a      	orrs	r2, r3
 810b7e0:	687b      	ldr	r3, [r7, #4]
 810b7e2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810b7e4:	687b      	ldr	r3, [r7, #4]
 810b7e6:	685b      	ldr	r3, [r3, #4]
 810b7e8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810b7ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810b7f0:	683a      	ldr	r2, [r7, #0]
 810b7f2:	6851      	ldr	r1, [r2, #4]
 810b7f4:	683a      	ldr	r2, [r7, #0]
 810b7f6:	6892      	ldr	r2, [r2, #8]
 810b7f8:	4311      	orrs	r1, r2
 810b7fa:	683a      	ldr	r2, [r7, #0]
 810b7fc:	68d2      	ldr	r2, [r2, #12]
 810b7fe:	4311      	orrs	r1, r2
 810b800:	683a      	ldr	r2, [r7, #0]
 810b802:	6912      	ldr	r2, [r2, #16]
 810b804:	4311      	orrs	r1, r2
 810b806:	683a      	ldr	r2, [r7, #0]
 810b808:	6952      	ldr	r2, [r2, #20]
 810b80a:	4311      	orrs	r1, r2
 810b80c:	683a      	ldr	r2, [r7, #0]
 810b80e:	6992      	ldr	r2, [r2, #24]
 810b810:	430a      	orrs	r2, r1
 810b812:	431a      	orrs	r2, r3
 810b814:	687b      	ldr	r3, [r7, #4]
 810b816:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810b818:	2300      	movs	r3, #0
}
 810b81a:	4618      	mov	r0, r3
 810b81c:	370c      	adds	r7, #12
 810b81e:	46bd      	mov	sp, r7
 810b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b824:	4770      	bx	lr

0810b826 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810b826:	b480      	push	{r7}
 810b828:	b085      	sub	sp, #20
 810b82a:	af00      	add	r7, sp, #0
 810b82c:	60f8      	str	r0, [r7, #12]
 810b82e:	60b9      	str	r1, [r7, #8]
 810b830:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810b832:	687b      	ldr	r3, [r7, #4]
 810b834:	2b00      	cmp	r3, #0
 810b836:	d128      	bne.n	810b88a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810b838:	68fb      	ldr	r3, [r7, #12]
 810b83a:	689b      	ldr	r3, [r3, #8]
 810b83c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810b840:	68bb      	ldr	r3, [r7, #8]
 810b842:	681b      	ldr	r3, [r3, #0]
 810b844:	1e59      	subs	r1, r3, #1
 810b846:	68bb      	ldr	r3, [r7, #8]
 810b848:	685b      	ldr	r3, [r3, #4]
 810b84a:	3b01      	subs	r3, #1
 810b84c:	011b      	lsls	r3, r3, #4
 810b84e:	4319      	orrs	r1, r3
 810b850:	68bb      	ldr	r3, [r7, #8]
 810b852:	689b      	ldr	r3, [r3, #8]
 810b854:	3b01      	subs	r3, #1
 810b856:	021b      	lsls	r3, r3, #8
 810b858:	4319      	orrs	r1, r3
 810b85a:	68bb      	ldr	r3, [r7, #8]
 810b85c:	68db      	ldr	r3, [r3, #12]
 810b85e:	3b01      	subs	r3, #1
 810b860:	031b      	lsls	r3, r3, #12
 810b862:	4319      	orrs	r1, r3
 810b864:	68bb      	ldr	r3, [r7, #8]
 810b866:	691b      	ldr	r3, [r3, #16]
 810b868:	3b01      	subs	r3, #1
 810b86a:	041b      	lsls	r3, r3, #16
 810b86c:	4319      	orrs	r1, r3
 810b86e:	68bb      	ldr	r3, [r7, #8]
 810b870:	695b      	ldr	r3, [r3, #20]
 810b872:	3b01      	subs	r3, #1
 810b874:	051b      	lsls	r3, r3, #20
 810b876:	4319      	orrs	r1, r3
 810b878:	68bb      	ldr	r3, [r7, #8]
 810b87a:	699b      	ldr	r3, [r3, #24]
 810b87c:	3b01      	subs	r3, #1
 810b87e:	061b      	lsls	r3, r3, #24
 810b880:	430b      	orrs	r3, r1
 810b882:	431a      	orrs	r2, r3
 810b884:	68fb      	ldr	r3, [r7, #12]
 810b886:	609a      	str	r2, [r3, #8]
 810b888:	e02f      	b.n	810b8ea <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810b88a:	68fb      	ldr	r3, [r7, #12]
 810b88c:	689b      	ldr	r3, [r3, #8]
 810b88e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810b892:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810b896:	68ba      	ldr	r2, [r7, #8]
 810b898:	68d2      	ldr	r2, [r2, #12]
 810b89a:	3a01      	subs	r2, #1
 810b89c:	0311      	lsls	r1, r2, #12
 810b89e:	68ba      	ldr	r2, [r7, #8]
 810b8a0:	6952      	ldr	r2, [r2, #20]
 810b8a2:	3a01      	subs	r2, #1
 810b8a4:	0512      	lsls	r2, r2, #20
 810b8a6:	430a      	orrs	r2, r1
 810b8a8:	431a      	orrs	r2, r3
 810b8aa:	68fb      	ldr	r3, [r7, #12]
 810b8ac:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810b8ae:	68fb      	ldr	r3, [r7, #12]
 810b8b0:	68db      	ldr	r3, [r3, #12]
 810b8b2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810b8b6:	68bb      	ldr	r3, [r7, #8]
 810b8b8:	681b      	ldr	r3, [r3, #0]
 810b8ba:	1e59      	subs	r1, r3, #1
 810b8bc:	68bb      	ldr	r3, [r7, #8]
 810b8be:	685b      	ldr	r3, [r3, #4]
 810b8c0:	3b01      	subs	r3, #1
 810b8c2:	011b      	lsls	r3, r3, #4
 810b8c4:	4319      	orrs	r1, r3
 810b8c6:	68bb      	ldr	r3, [r7, #8]
 810b8c8:	689b      	ldr	r3, [r3, #8]
 810b8ca:	3b01      	subs	r3, #1
 810b8cc:	021b      	lsls	r3, r3, #8
 810b8ce:	4319      	orrs	r1, r3
 810b8d0:	68bb      	ldr	r3, [r7, #8]
 810b8d2:	691b      	ldr	r3, [r3, #16]
 810b8d4:	3b01      	subs	r3, #1
 810b8d6:	041b      	lsls	r3, r3, #16
 810b8d8:	4319      	orrs	r1, r3
 810b8da:	68bb      	ldr	r3, [r7, #8]
 810b8dc:	699b      	ldr	r3, [r3, #24]
 810b8de:	3b01      	subs	r3, #1
 810b8e0:	061b      	lsls	r3, r3, #24
 810b8e2:	430b      	orrs	r3, r1
 810b8e4:	431a      	orrs	r2, r3
 810b8e6:	68fb      	ldr	r3, [r7, #12]
 810b8e8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810b8ea:	2300      	movs	r3, #0
}
 810b8ec:	4618      	mov	r0, r3
 810b8ee:	3714      	adds	r7, #20
 810b8f0:	46bd      	mov	sp, r7
 810b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8f6:	4770      	bx	lr

0810b8f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810b8f8:	b084      	sub	sp, #16
 810b8fa:	b480      	push	{r7}
 810b8fc:	b085      	sub	sp, #20
 810b8fe:	af00      	add	r7, sp, #0
 810b900:	6078      	str	r0, [r7, #4]
 810b902:	f107 001c 	add.w	r0, r7, #28
 810b906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810b90a:	2300      	movs	r3, #0
 810b90c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810b90e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810b910:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810b912:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 810b916:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 810b91a:	431a      	orrs	r2, r3
             Init.ClockDiv
 810b91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810b91e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810b920:	68fa      	ldr	r2, [r7, #12]
 810b922:	4313      	orrs	r3, r2
 810b924:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810b926:	687b      	ldr	r3, [r7, #4]
 810b928:	685a      	ldr	r2, [r3, #4]
 810b92a:	4b07      	ldr	r3, [pc, #28]	@ (810b948 <SDMMC_Init+0x50>)
 810b92c:	4013      	ands	r3, r2
 810b92e:	68fa      	ldr	r2, [r7, #12]
 810b930:	431a      	orrs	r2, r3
 810b932:	687b      	ldr	r3, [r7, #4]
 810b934:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810b936:	2300      	movs	r3, #0
}
 810b938:	4618      	mov	r0, r3
 810b93a:	3714      	adds	r7, #20
 810b93c:	46bd      	mov	sp, r7
 810b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b942:	b004      	add	sp, #16
 810b944:	4770      	bx	lr
 810b946:	bf00      	nop
 810b948:	ffc02c00 	.word	0xffc02c00

0810b94c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 810b94c:	b480      	push	{r7}
 810b94e:	b083      	sub	sp, #12
 810b950:	af00      	add	r7, sp, #0
 810b952:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810b954:	687b      	ldr	r3, [r7, #4]
 810b956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 810b95a:	4618      	mov	r0, r3
 810b95c:	370c      	adds	r7, #12
 810b95e:	46bd      	mov	sp, r7
 810b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b964:	4770      	bx	lr

0810b966 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810b966:	b480      	push	{r7}
 810b968:	b083      	sub	sp, #12
 810b96a:	af00      	add	r7, sp, #0
 810b96c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810b96e:	687b      	ldr	r3, [r7, #4]
 810b970:	681b      	ldr	r3, [r3, #0]
 810b972:	f043 0203 	orr.w	r2, r3, #3
 810b976:	687b      	ldr	r3, [r7, #4]
 810b978:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810b97a:	2300      	movs	r3, #0
}
 810b97c:	4618      	mov	r0, r3
 810b97e:	370c      	adds	r7, #12
 810b980:	46bd      	mov	sp, r7
 810b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b986:	4770      	bx	lr

0810b988 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 810b988:	b480      	push	{r7}
 810b98a:	b083      	sub	sp, #12
 810b98c:	af00      	add	r7, sp, #0
 810b98e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810b990:	687b      	ldr	r3, [r7, #4]
 810b992:	681b      	ldr	r3, [r3, #0]
 810b994:	f003 0303 	and.w	r3, r3, #3
}
 810b998:	4618      	mov	r0, r3
 810b99a:	370c      	adds	r7, #12
 810b99c:	46bd      	mov	sp, r7
 810b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9a2:	4770      	bx	lr

0810b9a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810b9a4:	b480      	push	{r7}
 810b9a6:	b085      	sub	sp, #20
 810b9a8:	af00      	add	r7, sp, #0
 810b9aa:	6078      	str	r0, [r7, #4]
 810b9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810b9ae:	2300      	movs	r3, #0
 810b9b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810b9b2:	683b      	ldr	r3, [r7, #0]
 810b9b4:	681a      	ldr	r2, [r3, #0]
 810b9b6:	687b      	ldr	r3, [r7, #4]
 810b9b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810b9ba:	683b      	ldr	r3, [r7, #0]
 810b9bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810b9be:	683b      	ldr	r3, [r7, #0]
 810b9c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810b9c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810b9c4:	683b      	ldr	r3, [r7, #0]
 810b9c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810b9c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 810b9ca:	683b      	ldr	r3, [r7, #0]
 810b9cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810b9ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810b9d0:	68fa      	ldr	r2, [r7, #12]
 810b9d2:	4313      	orrs	r3, r2
 810b9d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810b9d6:	687b      	ldr	r3, [r7, #4]
 810b9d8:	68da      	ldr	r2, [r3, #12]
 810b9da:	4b06      	ldr	r3, [pc, #24]	@ (810b9f4 <SDMMC_SendCommand+0x50>)
 810b9dc:	4013      	ands	r3, r2
 810b9de:	68fa      	ldr	r2, [r7, #12]
 810b9e0:	431a      	orrs	r2, r3
 810b9e2:	687b      	ldr	r3, [r7, #4]
 810b9e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810b9e6:	2300      	movs	r3, #0
}
 810b9e8:	4618      	mov	r0, r3
 810b9ea:	3714      	adds	r7, #20
 810b9ec:	46bd      	mov	sp, r7
 810b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9f2:	4770      	bx	lr
 810b9f4:	fffee0c0 	.word	0xfffee0c0

0810b9f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 810b9f8:	b480      	push	{r7}
 810b9fa:	b083      	sub	sp, #12
 810b9fc:	af00      	add	r7, sp, #0
 810b9fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810ba00:	687b      	ldr	r3, [r7, #4]
 810ba02:	691b      	ldr	r3, [r3, #16]
 810ba04:	b2db      	uxtb	r3, r3
}
 810ba06:	4618      	mov	r0, r3
 810ba08:	370c      	adds	r7, #12
 810ba0a:	46bd      	mov	sp, r7
 810ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba10:	4770      	bx	lr

0810ba12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810ba12:	b480      	push	{r7}
 810ba14:	b085      	sub	sp, #20
 810ba16:	af00      	add	r7, sp, #0
 810ba18:	6078      	str	r0, [r7, #4]
 810ba1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810ba1c:	687b      	ldr	r3, [r7, #4]
 810ba1e:	3314      	adds	r3, #20
 810ba20:	461a      	mov	r2, r3
 810ba22:	683b      	ldr	r3, [r7, #0]
 810ba24:	4413      	add	r3, r2
 810ba26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810ba28:	68fb      	ldr	r3, [r7, #12]
 810ba2a:	681b      	ldr	r3, [r3, #0]
}
 810ba2c:	4618      	mov	r0, r3
 810ba2e:	3714      	adds	r7, #20
 810ba30:	46bd      	mov	sp, r7
 810ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba36:	4770      	bx	lr

0810ba38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 810ba38:	b480      	push	{r7}
 810ba3a:	b085      	sub	sp, #20
 810ba3c:	af00      	add	r7, sp, #0
 810ba3e:	6078      	str	r0, [r7, #4]
 810ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810ba42:	2300      	movs	r3, #0
 810ba44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810ba46:	683b      	ldr	r3, [r7, #0]
 810ba48:	681a      	ldr	r2, [r3, #0]
 810ba4a:	687b      	ldr	r3, [r7, #4]
 810ba4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810ba4e:	683b      	ldr	r3, [r7, #0]
 810ba50:	685a      	ldr	r2, [r3, #4]
 810ba52:	687b      	ldr	r3, [r7, #4]
 810ba54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810ba56:	683b      	ldr	r3, [r7, #0]
 810ba58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810ba5a:	683b      	ldr	r3, [r7, #0]
 810ba5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810ba5e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810ba60:	683b      	ldr	r3, [r7, #0]
 810ba62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810ba64:	431a      	orrs	r2, r3
                       Data->DPSM);
 810ba66:	683b      	ldr	r3, [r7, #0]
 810ba68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810ba6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810ba6c:	68fa      	ldr	r2, [r7, #12]
 810ba6e:	4313      	orrs	r3, r2
 810ba70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810ba72:	687b      	ldr	r3, [r7, #4]
 810ba74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ba76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810ba7a:	68fb      	ldr	r3, [r7, #12]
 810ba7c:	431a      	orrs	r2, r3
 810ba7e:	687b      	ldr	r3, [r7, #4]
 810ba80:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810ba82:	2300      	movs	r3, #0

}
 810ba84:	4618      	mov	r0, r3
 810ba86:	3714      	adds	r7, #20
 810ba88:	46bd      	mov	sp, r7
 810ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba8e:	4770      	bx	lr

0810ba90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810ba90:	b580      	push	{r7, lr}
 810ba92:	b088      	sub	sp, #32
 810ba94:	af00      	add	r7, sp, #0
 810ba96:	6078      	str	r0, [r7, #4]
 810ba98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810ba9a:	683b      	ldr	r3, [r7, #0]
 810ba9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810ba9e:	2310      	movs	r3, #16
 810baa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810baa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810baa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810baa8:	2300      	movs	r3, #0
 810baaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810baac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bab2:	f107 0308 	add.w	r3, r7, #8
 810bab6:	4619      	mov	r1, r3
 810bab8:	6878      	ldr	r0, [r7, #4]
 810baba:	f7ff ff73 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810babe:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bac2:	2110      	movs	r1, #16
 810bac4:	6878      	ldr	r0, [r7, #4]
 810bac6:	f000 f995 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810baca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bacc:	69fb      	ldr	r3, [r7, #28]
}
 810bace:	4618      	mov	r0, r3
 810bad0:	3720      	adds	r7, #32
 810bad2:	46bd      	mov	sp, r7
 810bad4:	bd80      	pop	{r7, pc}

0810bad6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810bad6:	b580      	push	{r7, lr}
 810bad8:	b088      	sub	sp, #32
 810bada:	af00      	add	r7, sp, #0
 810badc:	6078      	str	r0, [r7, #4]
 810bade:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810bae0:	683b      	ldr	r3, [r7, #0]
 810bae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810bae4:	2307      	movs	r3, #7
 810bae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810baec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810baee:	2300      	movs	r3, #0
 810baf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810baf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810baf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810baf8:	f107 0308 	add.w	r3, r7, #8
 810bafc:	4619      	mov	r1, r3
 810bafe:	6878      	ldr	r0, [r7, #4]
 810bb00:	f7ff ff50 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810bb04:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bb08:	2107      	movs	r1, #7
 810bb0a:	6878      	ldr	r0, [r7, #4]
 810bb0c:	f000 f972 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810bb10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bb12:	69fb      	ldr	r3, [r7, #28]
}
 810bb14:	4618      	mov	r0, r3
 810bb16:	3720      	adds	r7, #32
 810bb18:	46bd      	mov	sp, r7
 810bb1a:	bd80      	pop	{r7, pc}

0810bb1c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810bb1c:	b580      	push	{r7, lr}
 810bb1e:	b088      	sub	sp, #32
 810bb20:	af00      	add	r7, sp, #0
 810bb22:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810bb24:	2300      	movs	r3, #0
 810bb26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810bb28:	2300      	movs	r3, #0
 810bb2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810bb2c:	2300      	movs	r3, #0
 810bb2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bb30:	2300      	movs	r3, #0
 810bb32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bb34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bb38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bb3a:	f107 0308 	add.w	r3, r7, #8
 810bb3e:	4619      	mov	r1, r3
 810bb40:	6878      	ldr	r0, [r7, #4]
 810bb42:	f7ff ff2f 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810bb46:	6878      	ldr	r0, [r7, #4]
 810bb48:	f000 fb96 	bl	810c278 <SDMMC_GetCmdError>
 810bb4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bb4e:	69fb      	ldr	r3, [r7, #28]
}
 810bb50:	4618      	mov	r0, r3
 810bb52:	3720      	adds	r7, #32
 810bb54:	46bd      	mov	sp, r7
 810bb56:	bd80      	pop	{r7, pc}

0810bb58 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810bb58:	b580      	push	{r7, lr}
 810bb5a:	b088      	sub	sp, #32
 810bb5c:	af00      	add	r7, sp, #0
 810bb5e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810bb60:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 810bb64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810bb66:	2308      	movs	r3, #8
 810bb68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bb6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bb6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bb70:	2300      	movs	r3, #0
 810bb72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bb74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bb78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bb7a:	f107 0308 	add.w	r3, r7, #8
 810bb7e:	4619      	mov	r1, r3
 810bb80:	6878      	ldr	r0, [r7, #4]
 810bb82:	f7ff ff0f 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810bb86:	6878      	ldr	r0, [r7, #4]
 810bb88:	f000 fb28 	bl	810c1dc <SDMMC_GetCmdResp7>
 810bb8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bb8e:	69fb      	ldr	r3, [r7, #28]
}
 810bb90:	4618      	mov	r0, r3
 810bb92:	3720      	adds	r7, #32
 810bb94:	46bd      	mov	sp, r7
 810bb96:	bd80      	pop	{r7, pc}

0810bb98 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bb98:	b580      	push	{r7, lr}
 810bb9a:	b088      	sub	sp, #32
 810bb9c:	af00      	add	r7, sp, #0
 810bb9e:	6078      	str	r0, [r7, #4]
 810bba0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810bba2:	683b      	ldr	r3, [r7, #0]
 810bba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810bba6:	2337      	movs	r3, #55	@ 0x37
 810bba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bbaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bbae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bbb0:	2300      	movs	r3, #0
 810bbb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bbb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bbb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bbba:	f107 0308 	add.w	r3, r7, #8
 810bbbe:	4619      	mov	r1, r3
 810bbc0:	6878      	ldr	r0, [r7, #4]
 810bbc2:	f7ff feef 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810bbc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bbca:	2137      	movs	r1, #55	@ 0x37
 810bbcc:	6878      	ldr	r0, [r7, #4]
 810bbce:	f000 f911 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810bbd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bbd4:	69fb      	ldr	r3, [r7, #28]
}
 810bbd6:	4618      	mov	r0, r3
 810bbd8:	3720      	adds	r7, #32
 810bbda:	46bd      	mov	sp, r7
 810bbdc:	bd80      	pop	{r7, pc}

0810bbde <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bbde:	b580      	push	{r7, lr}
 810bbe0:	b088      	sub	sp, #32
 810bbe2:	af00      	add	r7, sp, #0
 810bbe4:	6078      	str	r0, [r7, #4]
 810bbe6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810bbe8:	683b      	ldr	r3, [r7, #0]
 810bbea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810bbec:	2329      	movs	r3, #41	@ 0x29
 810bbee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bbf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bbf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bbf6:	2300      	movs	r3, #0
 810bbf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bbfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bbfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bc00:	f107 0308 	add.w	r3, r7, #8
 810bc04:	4619      	mov	r1, r3
 810bc06:	6878      	ldr	r0, [r7, #4]
 810bc08:	f7ff fecc 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810bc0c:	6878      	ldr	r0, [r7, #4]
 810bc0e:	f000 fa2d 	bl	810c06c <SDMMC_GetCmdResp3>
 810bc12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bc14:	69fb      	ldr	r3, [r7, #28]
}
 810bc16:	4618      	mov	r0, r3
 810bc18:	3720      	adds	r7, #32
 810bc1a:	46bd      	mov	sp, r7
 810bc1c:	bd80      	pop	{r7, pc}

0810bc1e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810bc1e:	b580      	push	{r7, lr}
 810bc20:	b088      	sub	sp, #32
 810bc22:	af00      	add	r7, sp, #0
 810bc24:	6078      	str	r0, [r7, #4]
 810bc26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810bc28:	683b      	ldr	r3, [r7, #0]
 810bc2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810bc2c:	2306      	movs	r3, #6
 810bc2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bc30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bc34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bc36:	2300      	movs	r3, #0
 810bc38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bc3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bc3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bc40:	f107 0308 	add.w	r3, r7, #8
 810bc44:	4619      	mov	r1, r3
 810bc46:	6878      	ldr	r0, [r7, #4]
 810bc48:	f7ff feac 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810bc4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bc50:	2106      	movs	r1, #6
 810bc52:	6878      	ldr	r0, [r7, #4]
 810bc54:	f000 f8ce 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810bc58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bc5a:	69fb      	ldr	r3, [r7, #28]
}
 810bc5c:	4618      	mov	r0, r3
 810bc5e:	3720      	adds	r7, #32
 810bc60:	46bd      	mov	sp, r7
 810bc62:	bd80      	pop	{r7, pc}

0810bc64 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810bc64:	b580      	push	{r7, lr}
 810bc66:	b088      	sub	sp, #32
 810bc68:	af00      	add	r7, sp, #0
 810bc6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810bc6c:	2300      	movs	r3, #0
 810bc6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810bc70:	2333      	movs	r3, #51	@ 0x33
 810bc72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bc74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bc7a:	2300      	movs	r3, #0
 810bc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bc7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bc82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bc84:	f107 0308 	add.w	r3, r7, #8
 810bc88:	4619      	mov	r1, r3
 810bc8a:	6878      	ldr	r0, [r7, #4]
 810bc8c:	f7ff fe8a 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810bc90:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bc94:	2133      	movs	r1, #51	@ 0x33
 810bc96:	6878      	ldr	r0, [r7, #4]
 810bc98:	f000 f8ac 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810bc9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bc9e:	69fb      	ldr	r3, [r7, #28]
}
 810bca0:	4618      	mov	r0, r3
 810bca2:	3720      	adds	r7, #32
 810bca4:	46bd      	mov	sp, r7
 810bca6:	bd80      	pop	{r7, pc}

0810bca8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810bca8:	b580      	push	{r7, lr}
 810bcaa:	b088      	sub	sp, #32
 810bcac:	af00      	add	r7, sp, #0
 810bcae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810bcb0:	2300      	movs	r3, #0
 810bcb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810bcb4:	2302      	movs	r3, #2
 810bcb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810bcb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810bcbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bcbe:	2300      	movs	r3, #0
 810bcc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bcc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bcc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bcc8:	f107 0308 	add.w	r3, r7, #8
 810bccc:	4619      	mov	r1, r3
 810bcce:	6878      	ldr	r0, [r7, #4]
 810bcd0:	f7ff fe68 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810bcd4:	6878      	ldr	r0, [r7, #4]
 810bcd6:	f000 f97f 	bl	810bfd8 <SDMMC_GetCmdResp2>
 810bcda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bcdc:	69fb      	ldr	r3, [r7, #28]
}
 810bcde:	4618      	mov	r0, r3
 810bce0:	3720      	adds	r7, #32
 810bce2:	46bd      	mov	sp, r7
 810bce4:	bd80      	pop	{r7, pc}

0810bce6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bce6:	b580      	push	{r7, lr}
 810bce8:	b088      	sub	sp, #32
 810bcea:	af00      	add	r7, sp, #0
 810bcec:	6078      	str	r0, [r7, #4]
 810bcee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810bcf0:	683b      	ldr	r3, [r7, #0]
 810bcf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810bcf4:	2309      	movs	r3, #9
 810bcf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810bcf8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810bcfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bcfe:	2300      	movs	r3, #0
 810bd00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bd02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bd06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bd08:	f107 0308 	add.w	r3, r7, #8
 810bd0c:	4619      	mov	r1, r3
 810bd0e:	6878      	ldr	r0, [r7, #4]
 810bd10:	f7ff fe48 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810bd14:	6878      	ldr	r0, [r7, #4]
 810bd16:	f000 f95f 	bl	810bfd8 <SDMMC_GetCmdResp2>
 810bd1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bd1c:	69fb      	ldr	r3, [r7, #28]
}
 810bd1e:	4618      	mov	r0, r3
 810bd20:	3720      	adds	r7, #32
 810bd22:	46bd      	mov	sp, r7
 810bd24:	bd80      	pop	{r7, pc}

0810bd26 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810bd26:	b580      	push	{r7, lr}
 810bd28:	b088      	sub	sp, #32
 810bd2a:	af00      	add	r7, sp, #0
 810bd2c:	6078      	str	r0, [r7, #4]
 810bd2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810bd30:	2300      	movs	r3, #0
 810bd32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810bd34:	2303      	movs	r3, #3
 810bd36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bd38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bd3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bd3e:	2300      	movs	r3, #0
 810bd40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bd42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bd46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bd48:	f107 0308 	add.w	r3, r7, #8
 810bd4c:	4619      	mov	r1, r3
 810bd4e:	6878      	ldr	r0, [r7, #4]
 810bd50:	f7ff fe28 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810bd54:	683a      	ldr	r2, [r7, #0]
 810bd56:	2103      	movs	r1, #3
 810bd58:	6878      	ldr	r0, [r7, #4]
 810bd5a:	f000 f9c7 	bl	810c0ec <SDMMC_GetCmdResp6>
 810bd5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bd60:	69fb      	ldr	r3, [r7, #28]
}
 810bd62:	4618      	mov	r0, r3
 810bd64:	3720      	adds	r7, #32
 810bd66:	46bd      	mov	sp, r7
 810bd68:	bd80      	pop	{r7, pc}

0810bd6a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810bd6a:	b580      	push	{r7, lr}
 810bd6c:	b088      	sub	sp, #32
 810bd6e:	af00      	add	r7, sp, #0
 810bd70:	6078      	str	r0, [r7, #4]
 810bd72:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810bd74:	683b      	ldr	r3, [r7, #0]
 810bd76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810bd78:	230d      	movs	r3, #13
 810bd7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bd7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bd80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bd82:	2300      	movs	r3, #0
 810bd84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bd86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bd8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bd8c:	f107 0308 	add.w	r3, r7, #8
 810bd90:	4619      	mov	r1, r3
 810bd92:	6878      	ldr	r0, [r7, #4]
 810bd94:	f7ff fe06 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810bd98:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bd9c:	210d      	movs	r1, #13
 810bd9e:	6878      	ldr	r0, [r7, #4]
 810bda0:	f000 f828 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810bda4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bda6:	69fb      	ldr	r3, [r7, #28]
}
 810bda8:	4618      	mov	r0, r3
 810bdaa:	3720      	adds	r7, #32
 810bdac:	46bd      	mov	sp, r7
 810bdae:	bd80      	pop	{r7, pc}

0810bdb0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810bdb0:	b580      	push	{r7, lr}
 810bdb2:	b088      	sub	sp, #32
 810bdb4:	af00      	add	r7, sp, #0
 810bdb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810bdb8:	2300      	movs	r3, #0
 810bdba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810bdbc:	230d      	movs	r3, #13
 810bdbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810bdc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bdc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810bdc6:	2300      	movs	r3, #0
 810bdc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810bdca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bdce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810bdd0:	f107 0308 	add.w	r3, r7, #8
 810bdd4:	4619      	mov	r1, r3
 810bdd6:	6878      	ldr	r0, [r7, #4]
 810bdd8:	f7ff fde4 	bl	810b9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810bddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bde0:	210d      	movs	r1, #13
 810bde2:	6878      	ldr	r0, [r7, #4]
 810bde4:	f000 f806 	bl	810bdf4 <SDMMC_GetCmdResp1>
 810bde8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810bdea:	69fb      	ldr	r3, [r7, #28]
}
 810bdec:	4618      	mov	r0, r3
 810bdee:	3720      	adds	r7, #32
 810bdf0:	46bd      	mov	sp, r7
 810bdf2:	bd80      	pop	{r7, pc}

0810bdf4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810bdf4:	b580      	push	{r7, lr}
 810bdf6:	b088      	sub	sp, #32
 810bdf8:	af00      	add	r7, sp, #0
 810bdfa:	60f8      	str	r0, [r7, #12]
 810bdfc:	460b      	mov	r3, r1
 810bdfe:	607a      	str	r2, [r7, #4]
 810be00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810be02:	4b70      	ldr	r3, [pc, #448]	@ (810bfc4 <SDMMC_GetCmdResp1+0x1d0>)
 810be04:	681b      	ldr	r3, [r3, #0]
 810be06:	4a70      	ldr	r2, [pc, #448]	@ (810bfc8 <SDMMC_GetCmdResp1+0x1d4>)
 810be08:	fba2 2303 	umull	r2, r3, r2, r3
 810be0c:	0a5a      	lsrs	r2, r3, #9
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	fb02 f303 	mul.w	r3, r2, r3
 810be14:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810be16:	69fb      	ldr	r3, [r7, #28]
 810be18:	1e5a      	subs	r2, r3, #1
 810be1a:	61fa      	str	r2, [r7, #28]
 810be1c:	2b00      	cmp	r3, #0
 810be1e:	d102      	bne.n	810be26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810be20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810be24:	e0c9      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810be26:	68fb      	ldr	r3, [r7, #12]
 810be28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810be2a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810be2c:	69ba      	ldr	r2, [r7, #24]
 810be2e:	4b67      	ldr	r3, [pc, #412]	@ (810bfcc <SDMMC_GetCmdResp1+0x1d8>)
 810be30:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810be32:	2b00      	cmp	r3, #0
 810be34:	d0ef      	beq.n	810be16 <SDMMC_GetCmdResp1+0x22>
 810be36:	69bb      	ldr	r3, [r7, #24]
 810be38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810be3c:	2b00      	cmp	r3, #0
 810be3e:	d1ea      	bne.n	810be16 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810be40:	68fb      	ldr	r3, [r7, #12]
 810be42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810be44:	f003 0304 	and.w	r3, r3, #4
 810be48:	2b00      	cmp	r3, #0
 810be4a:	d004      	beq.n	810be56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810be4c:	68fb      	ldr	r3, [r7, #12]
 810be4e:	2204      	movs	r2, #4
 810be50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810be52:	2304      	movs	r3, #4
 810be54:	e0b1      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810be56:	68fb      	ldr	r3, [r7, #12]
 810be58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810be5a:	f003 0301 	and.w	r3, r3, #1
 810be5e:	2b00      	cmp	r3, #0
 810be60:	d004      	beq.n	810be6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810be62:	68fb      	ldr	r3, [r7, #12]
 810be64:	2201      	movs	r2, #1
 810be66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810be68:	2301      	movs	r3, #1
 810be6a:	e0a6      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810be6c:	68fb      	ldr	r3, [r7, #12]
 810be6e:	4a58      	ldr	r2, [pc, #352]	@ (810bfd0 <SDMMC_GetCmdResp1+0x1dc>)
 810be70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810be72:	68f8      	ldr	r0, [r7, #12]
 810be74:	f7ff fdc0 	bl	810b9f8 <SDMMC_GetCommandResponse>
 810be78:	4603      	mov	r3, r0
 810be7a:	461a      	mov	r2, r3
 810be7c:	7afb      	ldrb	r3, [r7, #11]
 810be7e:	4293      	cmp	r3, r2
 810be80:	d001      	beq.n	810be86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810be82:	2301      	movs	r3, #1
 810be84:	e099      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810be86:	2100      	movs	r1, #0
 810be88:	68f8      	ldr	r0, [r7, #12]
 810be8a:	f7ff fdc2 	bl	810ba12 <SDMMC_GetResponse>
 810be8e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810be90:	697a      	ldr	r2, [r7, #20]
 810be92:	4b50      	ldr	r3, [pc, #320]	@ (810bfd4 <SDMMC_GetCmdResp1+0x1e0>)
 810be94:	4013      	ands	r3, r2
 810be96:	2b00      	cmp	r3, #0
 810be98:	d101      	bne.n	810be9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810be9a:	2300      	movs	r3, #0
 810be9c:	e08d      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810be9e:	697b      	ldr	r3, [r7, #20]
 810bea0:	2b00      	cmp	r3, #0
 810bea2:	da02      	bge.n	810beaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810bea4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810bea8:	e087      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810beaa:	697b      	ldr	r3, [r7, #20]
 810beac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810beb0:	2b00      	cmp	r3, #0
 810beb2:	d001      	beq.n	810beb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810beb4:	2340      	movs	r3, #64	@ 0x40
 810beb6:	e080      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810beb8:	697b      	ldr	r3, [r7, #20]
 810beba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bebe:	2b00      	cmp	r3, #0
 810bec0:	d001      	beq.n	810bec6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810bec2:	2380      	movs	r3, #128	@ 0x80
 810bec4:	e079      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810bec6:	697b      	ldr	r3, [r7, #20]
 810bec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810becc:	2b00      	cmp	r3, #0
 810bece:	d002      	beq.n	810bed6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810bed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810bed4:	e071      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810bed6:	697b      	ldr	r3, [r7, #20]
 810bed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810bedc:	2b00      	cmp	r3, #0
 810bede:	d002      	beq.n	810bee6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810bee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810bee4:	e069      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810bee6:	697b      	ldr	r3, [r7, #20]
 810bee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810beec:	2b00      	cmp	r3, #0
 810beee:	d002      	beq.n	810bef6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810bef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810bef4:	e061      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810bef6:	697b      	ldr	r3, [r7, #20]
 810bef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810befc:	2b00      	cmp	r3, #0
 810befe:	d002      	beq.n	810bf06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810bf00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810bf04:	e059      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810bf06:	697b      	ldr	r3, [r7, #20]
 810bf08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810bf0c:	2b00      	cmp	r3, #0
 810bf0e:	d002      	beq.n	810bf16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810bf10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810bf14:	e051      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810bf16:	697b      	ldr	r3, [r7, #20]
 810bf18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810bf1c:	2b00      	cmp	r3, #0
 810bf1e:	d002      	beq.n	810bf26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810bf20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810bf24:	e049      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810bf26:	697b      	ldr	r3, [r7, #20]
 810bf28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810bf2c:	2b00      	cmp	r3, #0
 810bf2e:	d002      	beq.n	810bf36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810bf30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810bf34:	e041      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810bf36:	697b      	ldr	r3, [r7, #20]
 810bf38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810bf3c:	2b00      	cmp	r3, #0
 810bf3e:	d002      	beq.n	810bf46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810bf40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bf44:	e039      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810bf46:	697b      	ldr	r3, [r7, #20]
 810bf48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810bf4c:	2b00      	cmp	r3, #0
 810bf4e:	d002      	beq.n	810bf56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810bf50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810bf54:	e031      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810bf56:	697b      	ldr	r3, [r7, #20]
 810bf58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810bf5c:	2b00      	cmp	r3, #0
 810bf5e:	d002      	beq.n	810bf66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810bf60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810bf64:	e029      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810bf66:	697b      	ldr	r3, [r7, #20]
 810bf68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810bf6c:	2b00      	cmp	r3, #0
 810bf6e:	d002      	beq.n	810bf76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810bf70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810bf74:	e021      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810bf76:	697b      	ldr	r3, [r7, #20]
 810bf78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810bf7c:	2b00      	cmp	r3, #0
 810bf7e:	d002      	beq.n	810bf86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810bf80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810bf84:	e019      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810bf86:	697b      	ldr	r3, [r7, #20]
 810bf88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810bf8c:	2b00      	cmp	r3, #0
 810bf8e:	d002      	beq.n	810bf96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810bf90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810bf94:	e011      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810bf96:	697b      	ldr	r3, [r7, #20]
 810bf98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810bf9c:	2b00      	cmp	r3, #0
 810bf9e:	d002      	beq.n	810bfa6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810bfa0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810bfa4:	e009      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810bfa6:	697b      	ldr	r3, [r7, #20]
 810bfa8:	f003 0308 	and.w	r3, r3, #8
 810bfac:	2b00      	cmp	r3, #0
 810bfae:	d002      	beq.n	810bfb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810bfb0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810bfb4:	e001      	b.n	810bfba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810bfb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810bfba:	4618      	mov	r0, r3
 810bfbc:	3720      	adds	r7, #32
 810bfbe:	46bd      	mov	sp, r7
 810bfc0:	bd80      	pop	{r7, pc}
 810bfc2:	bf00      	nop
 810bfc4:	10000000 	.word	0x10000000
 810bfc8:	10624dd3 	.word	0x10624dd3
 810bfcc:	00200045 	.word	0x00200045
 810bfd0:	002000c5 	.word	0x002000c5
 810bfd4:	fdffe008 	.word	0xfdffe008

0810bfd8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810bfd8:	b480      	push	{r7}
 810bfda:	b085      	sub	sp, #20
 810bfdc:	af00      	add	r7, sp, #0
 810bfde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810bfe0:	4b1f      	ldr	r3, [pc, #124]	@ (810c060 <SDMMC_GetCmdResp2+0x88>)
 810bfe2:	681b      	ldr	r3, [r3, #0]
 810bfe4:	4a1f      	ldr	r2, [pc, #124]	@ (810c064 <SDMMC_GetCmdResp2+0x8c>)
 810bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 810bfea:	0a5b      	lsrs	r3, r3, #9
 810bfec:	f241 3288 	movw	r2, #5000	@ 0x1388
 810bff0:	fb02 f303 	mul.w	r3, r2, r3
 810bff4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810bff6:	68fb      	ldr	r3, [r7, #12]
 810bff8:	1e5a      	subs	r2, r3, #1
 810bffa:	60fa      	str	r2, [r7, #12]
 810bffc:	2b00      	cmp	r3, #0
 810bffe:	d102      	bne.n	810c006 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c000:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c004:	e026      	b.n	810c054 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c00a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c00c:	68bb      	ldr	r3, [r7, #8]
 810c00e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c012:	2b00      	cmp	r3, #0
 810c014:	d0ef      	beq.n	810bff6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c016:	68bb      	ldr	r3, [r7, #8]
 810c018:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c01c:	2b00      	cmp	r3, #0
 810c01e:	d1ea      	bne.n	810bff6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c020:	687b      	ldr	r3, [r7, #4]
 810c022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c024:	f003 0304 	and.w	r3, r3, #4
 810c028:	2b00      	cmp	r3, #0
 810c02a:	d004      	beq.n	810c036 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c02c:	687b      	ldr	r3, [r7, #4]
 810c02e:	2204      	movs	r2, #4
 810c030:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c032:	2304      	movs	r3, #4
 810c034:	e00e      	b.n	810c054 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c036:	687b      	ldr	r3, [r7, #4]
 810c038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c03a:	f003 0301 	and.w	r3, r3, #1
 810c03e:	2b00      	cmp	r3, #0
 810c040:	d004      	beq.n	810c04c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c042:	687b      	ldr	r3, [r7, #4]
 810c044:	2201      	movs	r2, #1
 810c046:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c048:	2301      	movs	r3, #1
 810c04a:	e003      	b.n	810c054 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c04c:	687b      	ldr	r3, [r7, #4]
 810c04e:	4a06      	ldr	r2, [pc, #24]	@ (810c068 <SDMMC_GetCmdResp2+0x90>)
 810c050:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810c052:	2300      	movs	r3, #0
}
 810c054:	4618      	mov	r0, r3
 810c056:	3714      	adds	r7, #20
 810c058:	46bd      	mov	sp, r7
 810c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c05e:	4770      	bx	lr
 810c060:	10000000 	.word	0x10000000
 810c064:	10624dd3 	.word	0x10624dd3
 810c068:	002000c5 	.word	0x002000c5

0810c06c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810c06c:	b480      	push	{r7}
 810c06e:	b085      	sub	sp, #20
 810c070:	af00      	add	r7, sp, #0
 810c072:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c074:	4b1a      	ldr	r3, [pc, #104]	@ (810c0e0 <SDMMC_GetCmdResp3+0x74>)
 810c076:	681b      	ldr	r3, [r3, #0]
 810c078:	4a1a      	ldr	r2, [pc, #104]	@ (810c0e4 <SDMMC_GetCmdResp3+0x78>)
 810c07a:	fba2 2303 	umull	r2, r3, r2, r3
 810c07e:	0a5b      	lsrs	r3, r3, #9
 810c080:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c084:	fb02 f303 	mul.w	r3, r2, r3
 810c088:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c08a:	68fb      	ldr	r3, [r7, #12]
 810c08c:	1e5a      	subs	r2, r3, #1
 810c08e:	60fa      	str	r2, [r7, #12]
 810c090:	2b00      	cmp	r3, #0
 810c092:	d102      	bne.n	810c09a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c094:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c098:	e01b      	b.n	810c0d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810c09a:	687b      	ldr	r3, [r7, #4]
 810c09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c09e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c0a0:	68bb      	ldr	r3, [r7, #8]
 810c0a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c0a6:	2b00      	cmp	r3, #0
 810c0a8:	d0ef      	beq.n	810c08a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c0aa:	68bb      	ldr	r3, [r7, #8]
 810c0ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c0b0:	2b00      	cmp	r3, #0
 810c0b2:	d1ea      	bne.n	810c08a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c0b4:	687b      	ldr	r3, [r7, #4]
 810c0b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c0b8:	f003 0304 	and.w	r3, r3, #4
 810c0bc:	2b00      	cmp	r3, #0
 810c0be:	d004      	beq.n	810c0ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c0c0:	687b      	ldr	r3, [r7, #4]
 810c0c2:	2204      	movs	r2, #4
 810c0c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c0c6:	2304      	movs	r3, #4
 810c0c8:	e003      	b.n	810c0d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c0ca:	687b      	ldr	r3, [r7, #4]
 810c0cc:	4a06      	ldr	r2, [pc, #24]	@ (810c0e8 <SDMMC_GetCmdResp3+0x7c>)
 810c0ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810c0d0:	2300      	movs	r3, #0
}
 810c0d2:	4618      	mov	r0, r3
 810c0d4:	3714      	adds	r7, #20
 810c0d6:	46bd      	mov	sp, r7
 810c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0dc:	4770      	bx	lr
 810c0de:	bf00      	nop
 810c0e0:	10000000 	.word	0x10000000
 810c0e4:	10624dd3 	.word	0x10624dd3
 810c0e8:	002000c5 	.word	0x002000c5

0810c0ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810c0ec:	b580      	push	{r7, lr}
 810c0ee:	b088      	sub	sp, #32
 810c0f0:	af00      	add	r7, sp, #0
 810c0f2:	60f8      	str	r0, [r7, #12]
 810c0f4:	460b      	mov	r3, r1
 810c0f6:	607a      	str	r2, [r7, #4]
 810c0f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c0fa:	4b35      	ldr	r3, [pc, #212]	@ (810c1d0 <SDMMC_GetCmdResp6+0xe4>)
 810c0fc:	681b      	ldr	r3, [r3, #0]
 810c0fe:	4a35      	ldr	r2, [pc, #212]	@ (810c1d4 <SDMMC_GetCmdResp6+0xe8>)
 810c100:	fba2 2303 	umull	r2, r3, r2, r3
 810c104:	0a5b      	lsrs	r3, r3, #9
 810c106:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c10a:	fb02 f303 	mul.w	r3, r2, r3
 810c10e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810c110:	69fb      	ldr	r3, [r7, #28]
 810c112:	1e5a      	subs	r2, r3, #1
 810c114:	61fa      	str	r2, [r7, #28]
 810c116:	2b00      	cmp	r3, #0
 810c118:	d102      	bne.n	810c120 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c11a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c11e:	e052      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810c120:	68fb      	ldr	r3, [r7, #12]
 810c122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c124:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c126:	69bb      	ldr	r3, [r7, #24]
 810c128:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c12c:	2b00      	cmp	r3, #0
 810c12e:	d0ef      	beq.n	810c110 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c130:	69bb      	ldr	r3, [r7, #24]
 810c132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c136:	2b00      	cmp	r3, #0
 810c138:	d1ea      	bne.n	810c110 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c13a:	68fb      	ldr	r3, [r7, #12]
 810c13c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c13e:	f003 0304 	and.w	r3, r3, #4
 810c142:	2b00      	cmp	r3, #0
 810c144:	d004      	beq.n	810c150 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c146:	68fb      	ldr	r3, [r7, #12]
 810c148:	2204      	movs	r2, #4
 810c14a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c14c:	2304      	movs	r3, #4
 810c14e:	e03a      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c150:	68fb      	ldr	r3, [r7, #12]
 810c152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c154:	f003 0301 	and.w	r3, r3, #1
 810c158:	2b00      	cmp	r3, #0
 810c15a:	d004      	beq.n	810c166 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c15c:	68fb      	ldr	r3, [r7, #12]
 810c15e:	2201      	movs	r2, #1
 810c160:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c162:	2301      	movs	r3, #1
 810c164:	e02f      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810c166:	68f8      	ldr	r0, [r7, #12]
 810c168:	f7ff fc46 	bl	810b9f8 <SDMMC_GetCommandResponse>
 810c16c:	4603      	mov	r3, r0
 810c16e:	461a      	mov	r2, r3
 810c170:	7afb      	ldrb	r3, [r7, #11]
 810c172:	4293      	cmp	r3, r2
 810c174:	d001      	beq.n	810c17a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c176:	2301      	movs	r3, #1
 810c178:	e025      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c17a:	68fb      	ldr	r3, [r7, #12]
 810c17c:	4a16      	ldr	r2, [pc, #88]	@ (810c1d8 <SDMMC_GetCmdResp6+0xec>)
 810c17e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810c180:	2100      	movs	r1, #0
 810c182:	68f8      	ldr	r0, [r7, #12]
 810c184:	f7ff fc45 	bl	810ba12 <SDMMC_GetResponse>
 810c188:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810c18a:	697b      	ldr	r3, [r7, #20]
 810c18c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 810c190:	2b00      	cmp	r3, #0
 810c192:	d106      	bne.n	810c1a2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810c194:	697b      	ldr	r3, [r7, #20]
 810c196:	0c1b      	lsrs	r3, r3, #16
 810c198:	b29a      	uxth	r2, r3
 810c19a:	687b      	ldr	r3, [r7, #4]
 810c19c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810c19e:	2300      	movs	r3, #0
 810c1a0:	e011      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810c1a2:	697b      	ldr	r3, [r7, #20]
 810c1a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810c1a8:	2b00      	cmp	r3, #0
 810c1aa:	d002      	beq.n	810c1b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810c1ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810c1b0:	e009      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810c1b2:	697b      	ldr	r3, [r7, #20]
 810c1b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810c1b8:	2b00      	cmp	r3, #0
 810c1ba:	d002      	beq.n	810c1c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810c1bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c1c0:	e001      	b.n	810c1c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810c1c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810c1c6:	4618      	mov	r0, r3
 810c1c8:	3720      	adds	r7, #32
 810c1ca:	46bd      	mov	sp, r7
 810c1cc:	bd80      	pop	{r7, pc}
 810c1ce:	bf00      	nop
 810c1d0:	10000000 	.word	0x10000000
 810c1d4:	10624dd3 	.word	0x10624dd3
 810c1d8:	002000c5 	.word	0x002000c5

0810c1dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810c1dc:	b480      	push	{r7}
 810c1de:	b085      	sub	sp, #20
 810c1e0:	af00      	add	r7, sp, #0
 810c1e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c1e4:	4b22      	ldr	r3, [pc, #136]	@ (810c270 <SDMMC_GetCmdResp7+0x94>)
 810c1e6:	681b      	ldr	r3, [r3, #0]
 810c1e8:	4a22      	ldr	r2, [pc, #136]	@ (810c274 <SDMMC_GetCmdResp7+0x98>)
 810c1ea:	fba2 2303 	umull	r2, r3, r2, r3
 810c1ee:	0a5b      	lsrs	r3, r3, #9
 810c1f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c1f4:	fb02 f303 	mul.w	r3, r2, r3
 810c1f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c1fa:	68fb      	ldr	r3, [r7, #12]
 810c1fc:	1e5a      	subs	r2, r3, #1
 810c1fe:	60fa      	str	r2, [r7, #12]
 810c200:	2b00      	cmp	r3, #0
 810c202:	d102      	bne.n	810c20a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c204:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c208:	e02c      	b.n	810c264 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810c20a:	687b      	ldr	r3, [r7, #4]
 810c20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c20e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c210:	68bb      	ldr	r3, [r7, #8]
 810c212:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810c216:	2b00      	cmp	r3, #0
 810c218:	d0ef      	beq.n	810c1fa <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810c21a:	68bb      	ldr	r3, [r7, #8]
 810c21c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810c220:	2b00      	cmp	r3, #0
 810c222:	d1ea      	bne.n	810c1fa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810c224:	687b      	ldr	r3, [r7, #4]
 810c226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c228:	f003 0304 	and.w	r3, r3, #4
 810c22c:	2b00      	cmp	r3, #0
 810c22e:	d004      	beq.n	810c23a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810c230:	687b      	ldr	r3, [r7, #4]
 810c232:	2204      	movs	r2, #4
 810c234:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810c236:	2304      	movs	r3, #4
 810c238:	e014      	b.n	810c264 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810c23a:	687b      	ldr	r3, [r7, #4]
 810c23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c23e:	f003 0301 	and.w	r3, r3, #1
 810c242:	2b00      	cmp	r3, #0
 810c244:	d004      	beq.n	810c250 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	2201      	movs	r2, #1
 810c24a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810c24c:	2301      	movs	r3, #1
 810c24e:	e009      	b.n	810c264 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810c250:	687b      	ldr	r3, [r7, #4]
 810c252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810c258:	2b00      	cmp	r3, #0
 810c25a:	d002      	beq.n	810c262 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	2240      	movs	r2, #64	@ 0x40
 810c260:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810c262:	2300      	movs	r3, #0

}
 810c264:	4618      	mov	r0, r3
 810c266:	3714      	adds	r7, #20
 810c268:	46bd      	mov	sp, r7
 810c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c26e:	4770      	bx	lr
 810c270:	10000000 	.word	0x10000000
 810c274:	10624dd3 	.word	0x10624dd3

0810c278 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810c278:	b480      	push	{r7}
 810c27a:	b085      	sub	sp, #20
 810c27c:	af00      	add	r7, sp, #0
 810c27e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810c280:	4b11      	ldr	r3, [pc, #68]	@ (810c2c8 <SDMMC_GetCmdError+0x50>)
 810c282:	681b      	ldr	r3, [r3, #0]
 810c284:	4a11      	ldr	r2, [pc, #68]	@ (810c2cc <SDMMC_GetCmdError+0x54>)
 810c286:	fba2 2303 	umull	r2, r3, r2, r3
 810c28a:	0a5b      	lsrs	r3, r3, #9
 810c28c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c290:	fb02 f303 	mul.w	r3, r2, r3
 810c294:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810c296:	68fb      	ldr	r3, [r7, #12]
 810c298:	1e5a      	subs	r2, r3, #1
 810c29a:	60fa      	str	r2, [r7, #12]
 810c29c:	2b00      	cmp	r3, #0
 810c29e:	d102      	bne.n	810c2a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810c2a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810c2a4:	e009      	b.n	810c2ba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810c2a6:	687b      	ldr	r3, [r7, #4]
 810c2a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c2aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c2ae:	2b00      	cmp	r3, #0
 810c2b0:	d0f1      	beq.n	810c296 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810c2b2:	687b      	ldr	r3, [r7, #4]
 810c2b4:	4a06      	ldr	r2, [pc, #24]	@ (810c2d0 <SDMMC_GetCmdError+0x58>)
 810c2b6:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810c2b8:	2300      	movs	r3, #0
}
 810c2ba:	4618      	mov	r0, r3
 810c2bc:	3714      	adds	r7, #20
 810c2be:	46bd      	mov	sp, r7
 810c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c2c4:	4770      	bx	lr
 810c2c6:	bf00      	nop
 810c2c8:	10000000 	.word	0x10000000
 810c2cc:	10624dd3 	.word	0x10624dd3
 810c2d0:	002000c5 	.word	0x002000c5

0810c2d4 <memset>:
 810c2d4:	4402      	add	r2, r0
 810c2d6:	4603      	mov	r3, r0
 810c2d8:	4293      	cmp	r3, r2
 810c2da:	d100      	bne.n	810c2de <memset+0xa>
 810c2dc:	4770      	bx	lr
 810c2de:	f803 1b01 	strb.w	r1, [r3], #1
 810c2e2:	e7f9      	b.n	810c2d8 <memset+0x4>

0810c2e4 <__libc_init_array>:
 810c2e4:	b570      	push	{r4, r5, r6, lr}
 810c2e6:	4d0d      	ldr	r5, [pc, #52]	@ (810c31c <__libc_init_array+0x38>)
 810c2e8:	4c0d      	ldr	r4, [pc, #52]	@ (810c320 <__libc_init_array+0x3c>)
 810c2ea:	1b64      	subs	r4, r4, r5
 810c2ec:	10a4      	asrs	r4, r4, #2
 810c2ee:	2600      	movs	r6, #0
 810c2f0:	42a6      	cmp	r6, r4
 810c2f2:	d109      	bne.n	810c308 <__libc_init_array+0x24>
 810c2f4:	4d0b      	ldr	r5, [pc, #44]	@ (810c324 <__libc_init_array+0x40>)
 810c2f6:	4c0c      	ldr	r4, [pc, #48]	@ (810c328 <__libc_init_array+0x44>)
 810c2f8:	f000 f818 	bl	810c32c <_init>
 810c2fc:	1b64      	subs	r4, r4, r5
 810c2fe:	10a4      	asrs	r4, r4, #2
 810c300:	2600      	movs	r6, #0
 810c302:	42a6      	cmp	r6, r4
 810c304:	d105      	bne.n	810c312 <__libc_init_array+0x2e>
 810c306:	bd70      	pop	{r4, r5, r6, pc}
 810c308:	f855 3b04 	ldr.w	r3, [r5], #4
 810c30c:	4798      	blx	r3
 810c30e:	3601      	adds	r6, #1
 810c310:	e7ee      	b.n	810c2f0 <__libc_init_array+0xc>
 810c312:	f855 3b04 	ldr.w	r3, [r5], #4
 810c316:	4798      	blx	r3
 810c318:	3601      	adds	r6, #1
 810c31a:	e7f2      	b.n	810c302 <__libc_init_array+0x1e>
 810c31c:	0810c384 	.word	0x0810c384
 810c320:	0810c384 	.word	0x0810c384
 810c324:	0810c384 	.word	0x0810c384
 810c328:	0810c388 	.word	0x0810c388

0810c32c <_init>:
 810c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c32e:	bf00      	nop
 810c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c332:	bc08      	pop	{r3}
 810c334:	469e      	mov	lr, r3
 810c336:	4770      	bx	lr

0810c338 <_fini>:
 810c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c33a:	bf00      	nop
 810c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c33e:	bc08      	pop	{r3}
 810c340:	469e      	mov	lr, r3
 810c342:	4770      	bx	lr
